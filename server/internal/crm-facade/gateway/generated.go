// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package crm_gateway

import (
	"bytes"
	"context"
	"errors"
	"fmt"
	"strconv"
	"sync"
	"sync/atomic"
	"time"

	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/introspection"
	crm_models "github.com/pinks-agency/ecn/server/internal/crm-facade/models"
	gqlparser "github.com/vektah/gqlparser/v2"
	"github.com/vektah/gqlparser/v2/ast"
)

// region    ************************** generated!.gotpl **************************

// NewExecutableSchema creates an ExecutableSchema from the ResolverRoot interface.
func NewExecutableSchema(cfg Config) graphql.ExecutableSchema {
	return &executableSchema{
		schema:     cfg.Schema,
		resolvers:  cfg.Resolvers,
		directives: cfg.Directives,
		complexity: cfg.Complexity,
	}
}

type Config struct {
	Schema     *ast.Schema
	Resolvers  ResolverRoot
	Directives DirectiveRoot
	Complexity ComplexityRoot
}

type ResolverRoot interface {
	Article() ArticleResolver
	Complex() ComplexResolver
	ComplexHouse() ComplexHouseResolver
	Contact() ContactResolver
	Deal() DealResolver
	Developer() DeveloperResolver
	Employee() EmployeeResolver
	Lead() LeadResolver
	Log() LogResolver
	Me() MeResolver
	Meet() MeetResolver
	MortgageRequest() MortgageRequestResolver
	Mutation() MutationResolver
	Property() PropertyResolver
	Query() QueryResolver
	Review() ReviewResolver
	Story() StoryResolver
	Task() TaskResolver
	Village() VillageResolver
	ArticleInput() ArticleInputResolver
	ComplexHouseInput() ComplexHouseInputResolver
	ComplexInput() ComplexInputResolver
	ContactInput() ContactInputResolver
	DealInput() DealInputResolver
	DeveloperInput() DeveloperInputResolver
	EmployeeInput() EmployeeInputResolver
	MortgageRequestInput() MortgageRequestInputResolver
	PropertyInput() PropertyInputResolver
	StoryInput() StoryInputResolver
	VillageInput() VillageInputResolver
}

type DirectiveRoot struct {
	Auth          func(ctx context.Context, obj interface{}, next graphql.Resolver) (res interface{}, err error)
	HasPermission func(ctx context.Context, obj interface{}, next graphql.Resolver, permission string) (res interface{}, err error)
	Validate      func(ctx context.Context, obj interface{}, next graphql.Resolver, constraint string) (res interface{}, err error)
}

type ComplexityRoot struct {
	Article struct {
		ContentBlocks func(childComplexity int) int
		Cover         func(childComplexity int) int
		CreatedAt     func(childComplexity int) int
		Group         func(childComplexity int) int
		ID            func(childComplexity int) int
		Status        func(childComplexity int) int
		Title         func(childComplexity int) int
		UpdatedAt     func(childComplexity int) int
	}

	ArticleConnection struct {
		Edges      func(childComplexity int) int
		Nodes      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	ArticleEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	ArticleGroup struct {
		CreatedAt func(childComplexity int) int
		ID        func(childComplexity int) int
		Title     func(childComplexity int) int
		UpdatedAt func(childComplexity int) int
	}

	ArticleGroupConnection struct {
		Edges      func(childComplexity int) int
		Nodes      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	ArticleGroupEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	Bank struct {
		ID    func(childComplexity int) int
		Title func(childComplexity int) int
	}

	Complex struct {
		Address             func(childComplexity int) int
		CadastrNumber       func(childComplexity int) int
		CityDistance        func(childComplexity int) int
		CreatedAt           func(childComplexity int) int
		Description         func(childComplexity int) int
		Developer           func(childComplexity int) int
		Documents           func(childComplexity int) int
		ID                  func(childComplexity int) int
		Images              func(childComplexity int) int
		InCity              func(childComplexity int) int
		InternalInfo        func(childComplexity int) int
		IsDeleted           func(childComplexity int) int
		IsReady             func(childComplexity int) int
		Lat                 func(childComplexity int) int
		Lon                 func(childComplexity int) int
		ProjectDeclarations func(childComplexity int) int
		PublicationStatus   func(childComplexity int) int
		ReadinessQuarter    func(childComplexity int) int
		ReadinessYear       func(childComplexity int) int
		Region              func(childComplexity int) int
		SeoText             func(childComplexity int) int
		SubRegion           func(childComplexity int) int
		Title               func(childComplexity int) int
		TourLink            func(childComplexity int) int
		UpdatedAt           func(childComplexity int) int
		YoutubeLink         func(childComplexity int) int
	}

	ComplexConnection struct {
		Edges      func(childComplexity int) int
		Nodes      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	ComplexEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	ComplexHouse struct {
		Address             func(childComplexity int) int
		CadastrNumber       func(childComplexity int) int
		Complex             func(childComplexity int) int
		CreatedAt           func(childComplexity int) int
		Description         func(childComplexity int) int
		Documents           func(childComplexity int) int
		ID                  func(childComplexity int) int
		Images              func(childComplexity int) int
		InternalInfo        func(childComplexity int) int
		IsDeleted           func(childComplexity int) int
		IsReady             func(childComplexity int) int
		Lat                 func(childComplexity int) int
		Lon                 func(childComplexity int) int
		ProjectDeclarations func(childComplexity int) int
		PublicationStatus   func(childComplexity int) int
		ReadinessQuarter    func(childComplexity int) int
		ReadinessYear       func(childComplexity int) int
		SeoText             func(childComplexity int) int
		Title               func(childComplexity int) int
		TourLink            func(childComplexity int) int
		UpdatedAt           func(childComplexity int) int
		YoutubeLink         func(childComplexity int) int
	}

	ComplexHouseConnection struct {
		Edges      func(childComplexity int) int
		Nodes      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	ComplexHouseEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	Contact struct {
		AdditionalPhones   func(childComplexity int) int
		Address            func(childComplexity int) int
		Agents             func(childComplexity int) int
		Birthday           func(childComplexity int) int
		Company            func(childComplexity int) int
		Contracts          func(childComplexity int) int
		CreatedAt          func(childComplexity int) int
		Deals              func(childComplexity int) int
		Documents          func(childComplexity int) int
		Email              func(childComplexity int) int
		ID                 func(childComplexity int) int
		InternalInfo       func(childComplexity int) int
		InternalNumber     func(childComplexity int) int
		IsDeleted          func(childComplexity int) int
		Lead               func(childComplexity int) int
		Name               func(childComplexity int) int
		Note               func(childComplexity int) int
		PassportIssueDate  func(childComplexity int) int
		PassportIssuedBy   func(childComplexity int) int
		PassportIssuerCode func(childComplexity int) int
		PassportNumber     func(childComplexity int) int
		Patronymic         func(childComplexity int) int
		Phone              func(childComplexity int) int
		Properties         func(childComplexity int) int
		Source             func(childComplexity int) int
		Surname            func(childComplexity int) int
		Type               func(childComplexity int) int
		UpdatedAt          func(childComplexity int) int
	}

	ContactConnection struct {
		Edges      func(childComplexity int) int
		Nodes      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	ContactEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	ContentBlock struct {
		Data      func(childComplexity int) int
		IsVisible func(childComplexity int) int
		Type      func(childComplexity int) int
	}

	Deal struct {
		Accountant          func(childComplexity int) int
		AccountantDocuments func(childComplexity int) int
		Address             func(childComplexity int) int
		BuyerAgent          func(childComplexity int) int
		BuyerContact        func(childComplexity int) int
		BuyerDocuments      func(childComplexity int) int
		BuyerPhone          func(childComplexity int) int
		CommissionAmount    func(childComplexity int) int
		CreatedAt           func(childComplexity int) int
		DealDate            func(childComplexity int) int
		DepositDate         func(childComplexity int) int
		FinishedAt          func(childComplexity int) int
		ID                  func(childComplexity int) int
		InternalComment     func(childComplexity int) int
		InternalNumber      func(childComplexity int) int
		IsDeleted           func(childComplexity int) int
		Lawer               func(childComplexity int) int
		LawerDocuments      func(childComplexity int) int
		MortgageBroker      func(childComplexity int) int
		MortgageDocuments   func(childComplexity int) int
		MortgageRequest     func(childComplexity int) int
		Property            func(childComplexity int) int
		SellerAgent         func(childComplexity int) int
		SellerContact       func(childComplexity int) int
		SellerDocuments     func(childComplexity int) int
		SellerPhone         func(childComplexity int) int
		Stage               func(childComplexity int) int
		Type                func(childComplexity int) int
		UpdatedAt           func(childComplexity int) int
	}

	DealConnection struct {
		Edges      func(childComplexity int) int
		Nodes      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	DealEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	Department struct {
		CreatedAt func(childComplexity int) int
		Groups    func(childComplexity int) int
		ID        func(childComplexity int) int
		Title     func(childComplexity int) int
		UpdatedAt func(childComplexity int) int
	}

	DepartmentConnection struct {
		Edges      func(childComplexity int) int
		Nodes      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	DepartmentEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	DepartmentGroup struct {
		CreatedAt func(childComplexity int) int
		ID        func(childComplexity int) int
		Title     func(childComplexity int) int
		UpdatedAt func(childComplexity int) int
	}

	Developer struct {
		CreatedAt func(childComplexity int) int
		ID        func(childComplexity int) int
		IsDeleted func(childComplexity int) int
		Logo      func(childComplexity int) int
		Title     func(childComplexity int) int
		URL       func(childComplexity int) int
		UpdatedAt func(childComplexity int) int
	}

	DeveloperConnection struct {
		Edges      func(childComplexity int) int
		Nodes      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	DeveloperEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	Document struct {
		CreatedAt func(childComplexity int) int
		FileName  func(childComplexity int) int
		FileType  func(childComplexity int) int
		ID        func(childComplexity int) int
		Path      func(childComplexity int) int
		Title     func(childComplexity int) int
		URL       func(childComplexity int) int
	}

	Employee struct {
		Avatar           func(childComplexity int) int
		Birthday         func(childComplexity int) int
		CreatedAt        func(childComplexity int) int
		Department       func(childComplexity int) int
		Description      func(childComplexity int) int
		Email            func(childComplexity int) int
		Group            func(childComplexity int) int
		ID               func(childComplexity int) int
		InternalInfo     func(childComplexity int) int
		IsDeleted        func(childComplexity int) int
		IsPublished      func(childComplexity int) int
		Name             func(childComplexity int) int
		Patronymic       func(childComplexity int) int
		Phone            func(childComplexity int) int
		Position         func(childComplexity int) int
		PublicImage      func(childComplexity int) int
		Role             func(childComplexity int) int
		ShortDescription func(childComplexity int) int
		Surname          func(childComplexity int) int
		UpdatedAt        func(childComplexity int) int
	}

	EmployeeConnection struct {
		Edges      func(childComplexity int) int
		Nodes      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	EmployeeEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	Image struct {
		BlurHash    func(childComplexity int) int
		CreatedAt   func(childComplexity int) int
		FileName    func(childComplexity int) int
		FileType    func(childComplexity int) int
		ID          func(childComplexity int) int
		Path        func(childComplexity int) int
		Preset      func(childComplexity int) int
		PreviewPath func(childComplexity int) int
		PreviewURL  func(childComplexity int) int
		Title       func(childComplexity int) int
		URL         func(childComplexity int) int
	}

	Lead struct {
		AdditionalPhones func(childComplexity int) int
		Address          func(childComplexity int) int
		Agents           func(childComplexity int) int
		Birthday         func(childComplexity int) int
		Comment          func(childComplexity int) int
		Company          func(childComplexity int) int
		CreatedAt        func(childComplexity int) int
		Email            func(childComplexity int) int
		ID               func(childComplexity int) int
		InternalNumber   func(childComplexity int) int
		IsDeleted        func(childComplexity int) int
		Name             func(childComplexity int) int
		Patronymic       func(childComplexity int) int
		Phone            func(childComplexity int) int
		Request          func(childComplexity int) int
		Source           func(childComplexity int) int
		Status           func(childComplexity int) int
		Surname          func(childComplexity int) int
		Type             func(childComplexity int) int
		UpdatedAt        func(childComplexity int) int
	}

	LeadConnection struct {
		Edges      func(childComplexity int) int
		Nodes      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	LeadEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	Log struct {
		Author    func(childComplexity int) int
		CreatedAt func(childComplexity int) int
		Eid       func(childComplexity int) int
		ID        func(childComplexity int) int
		Level     func(childComplexity int) int
		Status    func(childComplexity int) int
		Type      func(childComplexity int) int
	}

	LogConnection struct {
		Edges      func(childComplexity int) int
		Nodes      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	LogEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	LoginOutput struct {
		Me    func(childComplexity int) int
		Token func(childComplexity int) int
	}

	Me struct {
		Avatar  func(childComplexity int) int
		ID      func(childComplexity int) int
		Name    func(childComplexity int) int
		Surname func(childComplexity int) int
	}

	Meet struct {
		Accountant         func(childComplexity int) int
		Address            func(childComplexity int) int
		BuyerAgency        func(childComplexity int) int
		BuyerAgent         func(childComplexity int) int
		BuyerContact       func(childComplexity int) int
		BuyerPhone         func(childComplexity int) int
		CancelReason       func(childComplexity int) int
		CancelReasonCustom func(childComplexity int) int
		Comment            func(childComplexity int) int
		ContactType        func(childComplexity int) int
		CreatedAt          func(childComplexity int) int
		DateTime           func(childComplexity int) int
		DealType           func(childComplexity int) int
		ID                 func(childComplexity int) int
		InternalNumber     func(childComplexity int) int
		IsDeleted          func(childComplexity int) int
		IsOnline           func(childComplexity int) int
		Lawer              func(childComplexity int) int
		MortgageBroker     func(childComplexity int) int
		Property           func(childComplexity int) int
		SellerAgent        func(childComplexity int) int
		SellerContact      func(childComplexity int) int
		SellerPhone        func(childComplexity int) int
		Status             func(childComplexity int) int
		Type               func(childComplexity int) int
		UpdatedAt          func(childComplexity int) int
		UseDealDeposit     func(childComplexity int) int
		UseMortgage        func(childComplexity int) int
	}

	MeetConnection struct {
		Edges      func(childComplexity int) int
		Nodes      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	MeetEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	MortgageRequest struct {
		Agent          func(childComplexity int) int
		Amount         func(childComplexity int) int
		Banks          func(childComplexity int) int
		Comment        func(childComplexity int) int
		Contact        func(childComplexity int) int
		Contracts      func(childComplexity int) int
		CreatedAt      func(childComplexity int) int
		Deal           func(childComplexity int) int
		Documents      func(childComplexity int) int
		FirstDeposit   func(childComplexity int) int
		ID             func(childComplexity int) int
		InternalNumber func(childComplexity int) int
		IsDeleted      func(childComplexity int) int
		MortgageBroker func(childComplexity int) int
		Percentage     func(childComplexity int) int
		Period         func(childComplexity int) int
		Property       func(childComplexity int) int
		ResponseDate   func(childComplexity int) int
		SendDate       func(childComplexity int) int
		Status         func(childComplexity int) int
		UpdatedAt      func(childComplexity int) int
		ValidTillDate  func(childComplexity int) int
	}

	MortgageRequestConnection struct {
		Edges      func(childComplexity int) int
		Nodes      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	MortgageRequestEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	Mutation struct {
		ActivateEmployees                func(childComplexity int, ids []string) int
		ApproveProperty                  func(childComplexity int, id string) int
		ApproveVacancyRequest            func(childComplexity int, id string) int
		ArchiveProperty                  func(childComplexity int, id string) int
		AssignDepartmentToEmployees      func(childComplexity int, department string, ids []string) int
		AssignRoleToEmployees            func(childComplexity int, role string, ids []string) int
		BulkApproveProperties            func(childComplexity int, ids []string) int
		BulkApproveReviews               func(childComplexity int, ids []string) int
		BulkArchiveProperties            func(childComplexity int, ids []string) int
		BulkChangeDealsStage             func(childComplexity int, ids []string, stage crm_models.DealStageEnum) int
		BulkChangeLeadsStatus            func(childComplexity int, ids []string, status crm_models.LeadStatusEnum, comment *string) int
		BulkChangeMeetsStatus            func(childComplexity int, ids []string, status crm_models.MeetStatusEnum) int
		BulkChangeMortgageRequestsStatus func(childComplexity int, ids []string, status crm_models.MortgageRequestStatusEnum) int
		BulkCompleteTasks                func(childComplexity int, ids []string) int
		BulkDeclineProperties            func(childComplexity int, ids []string) int
		BulkDeclineReviews               func(childComplexity int, ids []string) int
		BulkDeleteComplexHouses          func(childComplexity int, ids []string) int
		BulkDeleteComplexes              func(childComplexity int, ids []string) int
		BulkDeleteContacts               func(childComplexity int, ids []string) int
		BulkDeleteDeals                  func(childComplexity int, ids []string) int
		BulkDeleteDevelopers             func(childComplexity int, ids []string) int
		BulkDeleteLeads                  func(childComplexity int, ids []string) int
		BulkDeleteMeets                  func(childComplexity int, ids []string) int
		BulkDeleteMortgageRequests       func(childComplexity int, ids []string) int
		BulkDeleteProperties             func(childComplexity int, ids []string) int
		BulkDeleteReviews                func(childComplexity int, ids []string) int
		BulkDeleteTasks                  func(childComplexity int, ids []string) int
		BulkDeleteVillages               func(childComplexity int, ids []string) int
		BulkRefreshProperties            func(childComplexity int, ids []string) int
		ChangeDealStage                  func(childComplexity int, id string, stage crm_models.DealStageEnum) int
		ChangeLeadStatus                 func(childComplexity int, id string, status crm_models.LeadStatusEnum, comment *string) int
		ChangeMeetStatus                 func(childComplexity int, id string, status crm_models.MeetStatusEnum) int
		ChangeMortgageRequestStatus      func(childComplexity int, id string, status crm_models.MortgageRequestStatusEnum) int
		CompleteTask                     func(childComplexity int, id string) int
		DeactivateEmployees              func(childComplexity int, ids []string) int
		DeclineProperty                  func(childComplexity int, id string) int
		DeclineVacancyRequest            func(childComplexity int, id string) int
		DeleteArticle                    func(childComplexity int, id string) int
		DeleteArticleGroup               func(childComplexity int, id string) int
		DeleteComplex                    func(childComplexity int, id string) int
		DeleteComplexHouse               func(childComplexity int, id string) int
		DeleteContact                    func(childComplexity int, id string) int
		DeleteDeal                       func(childComplexity int, id string) int
		DeleteDepartment                 func(childComplexity int, id string) int
		DeleteDeveloper                  func(childComplexity int, id string) int
		DeleteDocument                   func(childComplexity int, id string) int
		DeleteEmployee                   func(childComplexity int, id string) int
		DeleteEmployees                  func(childComplexity int, ids []string) int
		DeleteImage                      func(childComplexity int, id string) int
		DeleteLead                       func(childComplexity int, id string) int
		DeleteMeet                       func(childComplexity int, id string) int
		DeleteMortgageRequest            func(childComplexity int, id string) int
		DeletePage                       func(childComplexity int, id string) int
		DeletePosition                   func(childComplexity int, id string) int
		DeleteProperty                   func(childComplexity int, id string) int
		DeleteReview                     func(childComplexity int, id string) int
		DeleteRole                       func(childComplexity int, id string) int
		DeleteStory                      func(childComplexity int, id string) int
		DeleteTask                       func(childComplexity int, id string) int
		DeleteVacancy                    func(childComplexity int, id string) int
		DeleteVillage                    func(childComplexity int, id string) int
		Login                            func(childComplexity int, email string, password string) int
		Logout                           func(childComplexity int) int
		PublishEmployees                 func(childComplexity int, ids []string) int
		RefreshProperty                  func(childComplexity int, id string) int
		SaveArticle                      func(childComplexity int, input crm_models.ArticleInput) int
		SaveArticleGroup                 func(childComplexity int, input crm_models.ArticleGroupInput) int
		SaveComplex                      func(childComplexity int, input crm_models.ComplexInput) int
		SaveComplexHouse                 func(childComplexity int, input crm_models.ComplexHouseInput) int
		SaveContact                      func(childComplexity int, input crm_models.ContactInput) int
		SaveDeal                         func(childComplexity int, input crm_models.DealInput) int
		SaveDepartment                   func(childComplexity int, input crm_models.DepartmentInput) int
		SaveDeveloper                    func(childComplexity int, input crm_models.DeveloperInput) int
		SaveEmployee                     func(childComplexity int, input crm_models.EmployeeInput) int
		SaveLead                         func(childComplexity int, input crm_models.LeadInput) int
		SaveMeet                         func(childComplexity int, input crm_models.MeetInput) int
		SaveMortgageRequest              func(childComplexity int, input crm_models.MortgageRequestInput) int
		SavePage                         func(childComplexity int, input crm_models.PageInput) int
		SavePosition                     func(childComplexity int, input crm_models.PositionInput) int
		SaveProperty                     func(childComplexity int, input crm_models.PropertyInput) int
		SaveReview                       func(childComplexity int, input crm_models.ReviewInput) int
		SaveRole                         func(childComplexity int, input crm_models.RoleInput) int
		SaveStory                        func(childComplexity int, input crm_models.StoryInput) int
		SaveTask                         func(childComplexity int, input crm_models.TaskInput) int
		SaveVacancy                      func(childComplexity int, input crm_models.VacancyInput) int
		SaveVillage                      func(childComplexity int, input crm_models.VillageInput) int
		UnpublishEmployees               func(childComplexity int, ids []string) int
		UploadDocument                   func(childComplexity int, input crm_models.DocumentInput) int
		UploadImage                      func(childComplexity int, input crm_models.ImageInput) int
	}

	Page struct {
		ContentBlocks func(childComplexity int) int
		CreatedAt     func(childComplexity int) int
		Description   func(childComplexity int) int
		ID            func(childComplexity int) int
		Status        func(childComplexity int) int
		Title         func(childComplexity int) int
		URL           func(childComplexity int) int
		UpdatedAt     func(childComplexity int) int
	}

	PageConnection struct {
		Edges      func(childComplexity int) int
		Nodes      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	PageEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	PageInfo struct {
		EndCursor       func(childComplexity int) int
		HasNextPage     func(childComplexity int) int
		HasPreviousPage func(childComplexity int) int
		StartCursor     func(childComplexity int) int
	}

	Position struct {
		CreatedAt func(childComplexity int) int
		ID        func(childComplexity int) int
		Title     func(childComplexity int) int
		UpdatedAt func(childComplexity int) int
	}

	PositionConnection struct {
		Edges      func(childComplexity int) int
		Nodes      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	PositionEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	Property struct {
		Address          func(childComplexity int) int
		Area             func(childComplexity int) int
		CadastrNumber    func(childComplexity int) int
		CeilingHeight    func(childComplexity int) int
		CityDistance     func(childComplexity int) int
		ComissionAmount  func(childComplexity int) int
		ComissionPercent func(childComplexity int) int
		CommercialUsage  func(childComplexity int) int
		Complex          func(childComplexity int) int
		ComplexHouse     func(childComplexity int) int
		CreatedAt        func(childComplexity int) int
		Deal             func(childComplexity int) int
		Description      func(childComplexity int) int
		Documents        func(childComplexity int) int
		Floor            func(childComplexity int) int
		Floors           func(childComplexity int) int
		FromDeveloper    func(childComplexity int) int
		ID               func(childComplexity int) int
		Images           func(childComplexity int) int
		InCity           func(childComplexity int) int
		InComplex        func(childComplexity int) int
		InVillage        func(childComplexity int) int
		InternalID       func(childComplexity int) int
		InternalInfo     func(childComplexity int) int
		IsDeleted        func(childComplexity int) int
		IsEditable       func(childComplexity int) int
		IsHot            func(childComplexity int) int
		IsReady          func(childComplexity int) int
		KitchenArea      func(childComplexity int) int
		LandArea         func(childComplexity int) int
		Lat              func(childComplexity int) int
		LivingArea       func(childComplexity int) int
		Lon              func(childComplexity int) int
		Price            func(childComplexity int) int
		PriceHistory     func(childComplexity int) int
		PricePerAr       func(childComplexity int) int
		PricePerMeter    func(childComplexity int) int
		ReadinessQuarter func(childComplexity int) int
		ReadinessYear    func(childComplexity int) int
		RefreshDate      func(childComplexity int) int
		Region           func(childComplexity int) int
		RehabType        func(childComplexity int) int
		Rooms            func(childComplexity int) int
		SeoText          func(childComplexity int) int
		Source           func(childComplexity int) int
		Status           func(childComplexity int) int
		SubRegion        func(childComplexity int) int
		SubType          func(childComplexity int) int
		Title            func(childComplexity int) int
		ToiletType       func(childComplexity int) int
		TourLink         func(childComplexity int) int
		Type             func(childComplexity int) int
		UpdatedAt        func(childComplexity int) int
		Village          func(childComplexity int) int
		YoutubeLink      func(childComplexity int) int
	}

	PropertyConnection struct {
		Edges      func(childComplexity int) int
		Nodes      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	PropertyEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	Query struct {
		Article          func(childComplexity int, id string) int
		ArticleGroup     func(childComplexity int, id string) int
		ArticleGroups    func(childComplexity int, start *int, limit *int, sort *crm_models.Sort, search *string) int
		Articles         func(childComplexity int, ids []string, start *int, limit *int, sort *crm_models.Sort, search *string, filter *crm_models.ArticlesFilterInput) int
		Complex          func(childComplexity int, id string) int
		ComplexHouse     func(childComplexity int, id string) int
		ComplexHouses    func(childComplexity int, ids []string, start *int, limit *int, sort *crm_models.Sort, search *string, filter *crm_models.ComplexHouseFilter) int
		Complexes        func(childComplexity int, ids []string, start *int, limit *int, sort *crm_models.Sort, search *string, filter *crm_models.ComplexFilter) int
		Contact          func(childComplexity int, id string) int
		Contacts         func(childComplexity int, ids []string, start *int, limit *int, sort *crm_models.Sort, search *string, filter *crm_models.ContactFilter) int
		Deal             func(childComplexity int, id string) int
		Deals            func(childComplexity int, ids []string, start *int, limit *int, sort *crm_models.Sort, search *string, filter *crm_models.DealFilter) int
		Department       func(childComplexity int, id string) int
		Departments      func(childComplexity int, ids []string, start *int, limit *int, sort *crm_models.Sort, search *string) int
		Developer        func(childComplexity int, id string) int
		Developers       func(childComplexity int, ids []string, start *int, limit *int, sort *crm_models.Sort, search *string, filter *crm_models.DeveloperFilterInput) int
		Employee         func(childComplexity int, id string) int
		Employees        func(childComplexity int, ids []string, start *int, limit *int, sort *crm_models.Sort, search *string, filter *crm_models.EmployeesFilterInput) int
		GeneratePDF      func(childComplexity int, content string, fileName string) int
		Lead             func(childComplexity int, id string) int
		Leads            func(childComplexity int, ids []string, start *int, limit *int, sort *crm_models.Sort, search *string, filter *crm_models.LeadFilter) int
		Logs             func(childComplexity int, ids []string, start *int, limit *int, sort *crm_models.Sort, search *string, filter *crm_models.LogsFilterInput) int
		Me               func(childComplexity int) int
		Meet             func(childComplexity int, id string) int
		Meets            func(childComplexity int, ids []string, start *int, limit *int, sort *crm_models.Sort, search *string, filter *crm_models.MeetFilter) int
		MortgageRequest  func(childComplexity int, id string) int
		MortgageRequests func(childComplexity int, ids []string, start *int, limit *int, sort *crm_models.Sort, search *string, filter *crm_models.MortgageRequestFilter) int
		Page             func(childComplexity int, id string) int
		Pages            func(childComplexity int, ids []string, start *int, limit *int, sort *crm_models.Sort, search *string, filter *crm_models.PageFilterInput) int
		Position         func(childComplexity int, id string) int
		Positions        func(childComplexity int, ids []string, start *int, limit *int, sort *crm_models.Sort, search *string) int
		Properties       func(childComplexity int, ids []string, start *int, limit *int, sort *crm_models.Sort, search *string, filter *crm_models.PropertyFilter) int
		Property         func(childComplexity int, id string) int
		Review           func(childComplexity int, id string) int
		Reviews          func(childComplexity int, ids []string, start *int, limit *int, sort *crm_models.Sort, search *string, filter *crm_models.ReviewsFilterInput) int
		Role             func(childComplexity int, id string) int
		Roles            func(childComplexity int, ids []string, start *int, limit *int, sort *crm_models.Sort, search *string) int
		Stories          func(childComplexity int, ids []string, start *int, limit *int, sort *crm_models.Sort, search *string, filter *crm_models.StoryFilterInput) int
		Story            func(childComplexity int, id string) int
		Task             func(childComplexity int, id string) int
		Tasks            func(childComplexity int, ids []string, start *int, limit *int, sort *crm_models.Sort, search *string, filter *crm_models.TaskFilter) int
		Vacancies        func(childComplexity int, ids []string, start *int, limit *int, sort *crm_models.Sort, search *string) int
		Vacancy          func(childComplexity int, id string) int
		VacancyRequest   func(childComplexity int, id string) int
		VacancyRequests  func(childComplexity int, ids []string, start *int, limit *int, sort *crm_models.Sort, search *string) int
		Village          func(childComplexity int, id string) int
		Villages         func(childComplexity int, ids []string, start *int, limit *int, sort *crm_models.Sort, search *string, filter *crm_models.VillageFilter) int
	}

	Readiness struct {
		Quarter func(childComplexity int) int
		Year    func(childComplexity int) int
	}

	Review struct {
		AuthorName        func(childComplexity int) int
		AuthorPhone       func(childComplexity int) int
		CreatedAt         func(childComplexity int) int
		Employee          func(childComplexity int) int
		ID                func(childComplexity int) int
		PublicationStatus func(childComplexity int) int
		Status            func(childComplexity int) int
		Text              func(childComplexity int) int
		UpdatedAt         func(childComplexity int) int
	}

	ReviewConnection struct {
		Edges      func(childComplexity int) int
		Nodes      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	ReviewEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	Role struct {
		CreatedAt   func(childComplexity int) int
		ID          func(childComplexity int) int
		Permissions func(childComplexity int) int
		Title       func(childComplexity int) int
		UpdatedAt   func(childComplexity int) int
	}

	RoleConnection struct {
		Edges      func(childComplexity int) int
		Nodes      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	RoleEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	Story struct {
		Category      func(childComplexity int) int
		ContentBlocks func(childComplexity int) int
		Cover         func(childComplexity int) int
		CreatedAt     func(childComplexity int) int
		ID            func(childComplexity int) int
		Status        func(childComplexity int) int
		Teaser        func(childComplexity int) int
		Title         func(childComplexity int) int
		UpdatedAt     func(childComplexity int) int
	}

	StoryConnection struct {
		Edges      func(childComplexity int) int
		Nodes      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	StoryEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	Task struct {
		Assignee       func(childComplexity int) int
		Contact        func(childComplexity int) int
		ContactPhone   func(childComplexity int) int
		CreatedAt      func(childComplexity int) int
		Deal           func(childComplexity int) int
		Details        func(childComplexity int) int
		DurationDays   func(childComplexity int) int
		DurationHours  func(childComplexity int) int
		EndDate        func(childComplexity int) int
		ID             func(childComplexity int) int
		InternalNumber func(childComplexity int) int
		IsCompleted    func(childComplexity int) int
		IsDeleted      func(childComplexity int) int
		IsHot          func(childComplexity int) int
		Label          func(childComplexity int) int
		Lead           func(childComplexity int) int
		Property       func(childComplexity int) int
		Reporter       func(childComplexity int) int
		StartDate      func(childComplexity int) int
		Status         func(childComplexity int) int
		Tag            func(childComplexity int) int
		Title          func(childComplexity int) int
		UpdatedAt      func(childComplexity int) int
	}

	TaskConnection struct {
		Edges      func(childComplexity int) int
		Nodes      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	TaskEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	Vacancy struct {
		CreatedAt         func(childComplexity int) int
		Description       func(childComplexity int) int
		Experience        func(childComplexity int) int
		ID                func(childComplexity int) int
		PublicationStatus func(childComplexity int) int
		Salary            func(childComplexity int) int
		Schedule          func(childComplexity int) int
		Title             func(childComplexity int) int
		UpdatedAt         func(childComplexity int) int
	}

	VacancyConnection struct {
		Edges      func(childComplexity int) int
		Nodes      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	VacancyEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	VacancyRequest struct {
		Attachments     func(childComplexity int) int
		CreatedAt       func(childComplexity int) int
		ID              func(childComplexity int) int
		InternalComment func(childComplexity int) int
		Letter          func(childComplexity int) int
		Name            func(childComplexity int) int
		Status          func(childComplexity int) int
		UpdatedAt       func(childComplexity int) int
		Vacancy         func(childComplexity int) int
	}

	VacancyRequestConnection struct {
		Edges      func(childComplexity int) int
		Nodes      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	VacancyRequestEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	Village struct {
		Address             func(childComplexity int) int
		CadastrNumber       func(childComplexity int) int
		CityDistance        func(childComplexity int) int
		CreatedAt           func(childComplexity int) int
		Description         func(childComplexity int) int
		Developer           func(childComplexity int) int
		Documents           func(childComplexity int) int
		ID                  func(childComplexity int) int
		Images              func(childComplexity int) int
		InCity              func(childComplexity int) int
		InternalInfo        func(childComplexity int) int
		IsDeleted           func(childComplexity int) int
		IsReady             func(childComplexity int) int
		Lat                 func(childComplexity int) int
		Lon                 func(childComplexity int) int
		ProjectDeclarations func(childComplexity int) int
		PublicationStatus   func(childComplexity int) int
		ReadinessQuarter    func(childComplexity int) int
		ReadinessYear       func(childComplexity int) int
		Region              func(childComplexity int) int
		SeoText             func(childComplexity int) int
		SubRegion           func(childComplexity int) int
		Title               func(childComplexity int) int
		TourLink            func(childComplexity int) int
		UpdatedAt           func(childComplexity int) int
		YoutubeLink         func(childComplexity int) int
	}

	VillageConnection struct {
		Edges      func(childComplexity int) int
		Nodes      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	VillageEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}
}

type ArticleResolver interface {
	Group(ctx context.Context, obj *crm_models.Article) (*crm_models.ArticleGroup, error)

	Cover(ctx context.Context, obj *crm_models.Article) (*crm_models.Image, error)
}
type ComplexResolver interface {
	Developer(ctx context.Context, obj *crm_models.Complex) (*crm_models.Developer, error)

	Images(ctx context.Context, obj *crm_models.Complex) ([]*crm_models.Image, error)
	Documents(ctx context.Context, obj *crm_models.Complex) ([]*crm_models.Document, error)
	ProjectDeclarations(ctx context.Context, obj *crm_models.Complex) ([]*crm_models.Document, error)
}
type ComplexHouseResolver interface {
	Complex(ctx context.Context, obj *crm_models.ComplexHouse) (*crm_models.Complex, error)

	Images(ctx context.Context, obj *crm_models.ComplexHouse) ([]*crm_models.Image, error)
	Documents(ctx context.Context, obj *crm_models.ComplexHouse) ([]*crm_models.Document, error)
	ProjectDeclarations(ctx context.Context, obj *crm_models.ComplexHouse) ([]*crm_models.Document, error)
}
type ContactResolver interface {
	Properties(ctx context.Context, obj *crm_models.Contact) ([]*crm_models.Property, error)

	Deals(ctx context.Context, obj *crm_models.Contact) ([]*crm_models.Deal, error)
	Agents(ctx context.Context, obj *crm_models.Contact) ([]*crm_models.Employee, error)
	Contracts(ctx context.Context, obj *crm_models.Contact) ([]*crm_models.Document, error)
	Documents(ctx context.Context, obj *crm_models.Contact) ([]*crm_models.Document, error)
	Lead(ctx context.Context, obj *crm_models.Contact) (*crm_models.Lead, error)
}
type DealResolver interface {
	SellerAgent(ctx context.Context, obj *crm_models.Deal) (*crm_models.Employee, error)
	SellerContact(ctx context.Context, obj *crm_models.Deal) (*crm_models.Contact, error)

	SellerDocuments(ctx context.Context, obj *crm_models.Deal) ([]*crm_models.Document, error)
	BuyerAgent(ctx context.Context, obj *crm_models.Deal) (*crm_models.Employee, error)
	BuyerContact(ctx context.Context, obj *crm_models.Deal) (*crm_models.Contact, error)

	BuyerDocuments(ctx context.Context, obj *crm_models.Deal) ([]*crm_models.Document, error)
	Property(ctx context.Context, obj *crm_models.Deal) (*crm_models.Property, error)

	MortgageBroker(ctx context.Context, obj *crm_models.Deal) (*crm_models.Employee, error)
	MortgageRequest(ctx context.Context, obj *crm_models.Deal) (*crm_models.MortgageRequest, error)
	MortgageDocuments(ctx context.Context, obj *crm_models.Deal) ([]*crm_models.Document, error)
	Lawer(ctx context.Context, obj *crm_models.Deal) (*crm_models.Employee, error)
	LawerDocuments(ctx context.Context, obj *crm_models.Deal) ([]*crm_models.Document, error)
	Accountant(ctx context.Context, obj *crm_models.Deal) (*crm_models.Employee, error)
	AccountantDocuments(ctx context.Context, obj *crm_models.Deal) ([]*crm_models.Document, error)
}
type DeveloperResolver interface {
	Logo(ctx context.Context, obj *crm_models.Developer) (*crm_models.Image, error)
}
type EmployeeResolver interface {
	Position(ctx context.Context, obj *crm_models.Employee) (*crm_models.Position, error)
	Department(ctx context.Context, obj *crm_models.Employee) (*crm_models.Department, error)
	Group(ctx context.Context, obj *crm_models.Employee) (*crm_models.DepartmentGroup, error)
	Role(ctx context.Context, obj *crm_models.Employee) (*crm_models.Role, error)

	Avatar(ctx context.Context, obj *crm_models.Employee) (*crm_models.Image, error)
	PublicImage(ctx context.Context, obj *crm_models.Employee) (*crm_models.Image, error)
}
type LeadResolver interface {
	Agents(ctx context.Context, obj *crm_models.Lead) ([]*crm_models.Employee, error)
}
type LogResolver interface {
	Author(ctx context.Context, obj *crm_models.Log) (*crm_models.Employee, error)
}
type MeResolver interface {
	Avatar(ctx context.Context, obj *crm_models.Me) (*crm_models.Image, error)
}
type MeetResolver interface {
	Property(ctx context.Context, obj *crm_models.Meet) (*crm_models.Property, error)

	SellerAgent(ctx context.Context, obj *crm_models.Meet) (*crm_models.Employee, error)
	SellerContact(ctx context.Context, obj *crm_models.Meet) (*crm_models.Contact, error)

	BuyerAgent(ctx context.Context, obj *crm_models.Meet) (*crm_models.Employee, error)
	BuyerContact(ctx context.Context, obj *crm_models.Meet) (*crm_models.Contact, error)

	Lawer(ctx context.Context, obj *crm_models.Meet) (*crm_models.Employee, error)
	Accountant(ctx context.Context, obj *crm_models.Meet) (*crm_models.Employee, error)
	MortgageBroker(ctx context.Context, obj *crm_models.Meet) (*crm_models.Employee, error)
}
type MortgageRequestResolver interface {
	Contact(ctx context.Context, obj *crm_models.MortgageRequest) (*crm_models.Contact, error)
	Banks(ctx context.Context, obj *crm_models.MortgageRequest) ([]*crm_models.Bank, error)
	MortgageBroker(ctx context.Context, obj *crm_models.MortgageRequest) (*crm_models.Employee, error)
	Agent(ctx context.Context, obj *crm_models.MortgageRequest) (*crm_models.Employee, error)
	Deal(ctx context.Context, obj *crm_models.MortgageRequest) (*crm_models.Deal, error)
	Property(ctx context.Context, obj *crm_models.MortgageRequest) (*crm_models.Property, error)

	Contracts(ctx context.Context, obj *crm_models.MortgageRequest) ([]*crm_models.Document, error)
	Documents(ctx context.Context, obj *crm_models.MortgageRequest) ([]*crm_models.Document, error)
}
type MutationResolver interface {
	SaveArticleGroup(ctx context.Context, input crm_models.ArticleGroupInput) (bool, error)
	DeleteArticleGroup(ctx context.Context, id string) (bool, error)
	SaveArticle(ctx context.Context, input crm_models.ArticleInput) (bool, error)
	DeleteArticle(ctx context.Context, id string) (bool, error)
	Login(ctx context.Context, email string, password string) (*crm_models.LoginOutput, error)
	Logout(ctx context.Context) (bool, error)
	SaveComplexHouse(ctx context.Context, input crm_models.ComplexHouseInput) (bool, error)
	DeleteComplexHouse(ctx context.Context, id string) (bool, error)
	BulkDeleteComplexHouses(ctx context.Context, ids []string) (bool, error)
	SaveComplex(ctx context.Context, input crm_models.ComplexInput) (bool, error)
	DeleteComplex(ctx context.Context, id string) (bool, error)
	BulkDeleteComplexes(ctx context.Context, ids []string) (bool, error)
	SaveContact(ctx context.Context, input crm_models.ContactInput) (bool, error)
	DeleteContact(ctx context.Context, id string) (bool, error)
	BulkDeleteContacts(ctx context.Context, ids []string) (bool, error)
	SaveDeal(ctx context.Context, input crm_models.DealInput) (bool, error)
	DeleteDeal(ctx context.Context, id string) (bool, error)
	ChangeDealStage(ctx context.Context, id string, stage crm_models.DealStageEnum) (bool, error)
	BulkDeleteDeals(ctx context.Context, ids []string) (bool, error)
	BulkChangeDealsStage(ctx context.Context, ids []string, stage crm_models.DealStageEnum) (bool, error)
	SaveDepartment(ctx context.Context, input crm_models.DepartmentInput) (bool, error)
	DeleteDepartment(ctx context.Context, id string) (bool, error)
	SaveDeveloper(ctx context.Context, input crm_models.DeveloperInput) (bool, error)
	DeleteDeveloper(ctx context.Context, id string) (bool, error)
	BulkDeleteDevelopers(ctx context.Context, ids []string) (bool, error)
	SaveEmployee(ctx context.Context, input crm_models.EmployeeInput) (bool, error)
	DeleteEmployee(ctx context.Context, id string) (bool, error)
	DeleteEmployees(ctx context.Context, ids []string) (bool, error)
	ActivateEmployees(ctx context.Context, ids []string) (bool, error)
	DeactivateEmployees(ctx context.Context, ids []string) (bool, error)
	PublishEmployees(ctx context.Context, ids []string) (bool, error)
	UnpublishEmployees(ctx context.Context, ids []string) (bool, error)
	AssignDepartmentToEmployees(ctx context.Context, department string, ids []string) (bool, error)
	AssignRoleToEmployees(ctx context.Context, role string, ids []string) (bool, error)
	UploadImage(ctx context.Context, input crm_models.ImageInput) (*crm_models.Image, error)
	DeleteImage(ctx context.Context, id string) (bool, error)
	UploadDocument(ctx context.Context, input crm_models.DocumentInput) (*crm_models.Document, error)
	DeleteDocument(ctx context.Context, id string) (bool, error)
	SaveLead(ctx context.Context, input crm_models.LeadInput) (bool, error)
	DeleteLead(ctx context.Context, id string) (bool, error)
	ChangeLeadStatus(ctx context.Context, id string, status crm_models.LeadStatusEnum, comment *string) (bool, error)
	BulkChangeLeadsStatus(ctx context.Context, ids []string, status crm_models.LeadStatusEnum, comment *string) (bool, error)
	BulkDeleteLeads(ctx context.Context, ids []string) (bool, error)
	SaveMeet(ctx context.Context, input crm_models.MeetInput) (bool, error)
	DeleteMeet(ctx context.Context, id string) (bool, error)
	ChangeMeetStatus(ctx context.Context, id string, status crm_models.MeetStatusEnum) (bool, error)
	BulkChangeMeetsStatus(ctx context.Context, ids []string, status crm_models.MeetStatusEnum) (bool, error)
	BulkDeleteMeets(ctx context.Context, ids []string) (bool, error)
	SaveMortgageRequest(ctx context.Context, input crm_models.MortgageRequestInput) (bool, error)
	DeleteMortgageRequest(ctx context.Context, id string) (bool, error)
	ChangeMortgageRequestStatus(ctx context.Context, id string, status crm_models.MortgageRequestStatusEnum) (bool, error)
	BulkChangeMortgageRequestsStatus(ctx context.Context, ids []string, status crm_models.MortgageRequestStatusEnum) (bool, error)
	BulkDeleteMortgageRequests(ctx context.Context, ids []string) (bool, error)
	SavePage(ctx context.Context, input crm_models.PageInput) (bool, error)
	DeletePage(ctx context.Context, id string) (bool, error)
	SavePosition(ctx context.Context, input crm_models.PositionInput) (bool, error)
	DeletePosition(ctx context.Context, id string) (bool, error)
	SaveProperty(ctx context.Context, input crm_models.PropertyInput) (bool, error)
	DeleteProperty(ctx context.Context, id string) (bool, error)
	RefreshProperty(ctx context.Context, id string) (bool, error)
	ApproveProperty(ctx context.Context, id string) (bool, error)
	DeclineProperty(ctx context.Context, id string) (bool, error)
	ArchiveProperty(ctx context.Context, id string) (bool, error)
	BulkDeleteProperties(ctx context.Context, ids []string) (bool, error)
	BulkRefreshProperties(ctx context.Context, ids []string) (bool, error)
	BulkApproveProperties(ctx context.Context, ids []string) (bool, error)
	BulkDeclineProperties(ctx context.Context, ids []string) (bool, error)
	BulkArchiveProperties(ctx context.Context, ids []string) (bool, error)
	SaveReview(ctx context.Context, input crm_models.ReviewInput) (bool, error)
	DeleteReview(ctx context.Context, id string) (bool, error)
	BulkApproveReviews(ctx context.Context, ids []string) (bool, error)
	BulkDeclineReviews(ctx context.Context, ids []string) (bool, error)
	BulkDeleteReviews(ctx context.Context, ids []string) (bool, error)
	SaveRole(ctx context.Context, input crm_models.RoleInput) (bool, error)
	DeleteRole(ctx context.Context, id string) (bool, error)
	SaveStory(ctx context.Context, input crm_models.StoryInput) (bool, error)
	DeleteStory(ctx context.Context, id string) (bool, error)
	SaveTask(ctx context.Context, input crm_models.TaskInput) (bool, error)
	DeleteTask(ctx context.Context, id string) (bool, error)
	CompleteTask(ctx context.Context, id string) (bool, error)
	BulkCompleteTasks(ctx context.Context, ids []string) (bool, error)
	BulkDeleteTasks(ctx context.Context, ids []string) (bool, error)
	SaveVacancy(ctx context.Context, input crm_models.VacancyInput) (bool, error)
	DeleteVacancy(ctx context.Context, id string) (bool, error)
	ApproveVacancyRequest(ctx context.Context, id string) (bool, error)
	DeclineVacancyRequest(ctx context.Context, id string) (bool, error)
	SaveVillage(ctx context.Context, input crm_models.VillageInput) (bool, error)
	DeleteVillage(ctx context.Context, id string) (bool, error)
	BulkDeleteVillages(ctx context.Context, ids []string) (bool, error)
}
type PropertyResolver interface {
	Complex(ctx context.Context, obj *crm_models.Property) (*crm_models.Complex, error)
	ComplexHouse(ctx context.Context, obj *crm_models.Property) (*crm_models.ComplexHouse, error)

	Village(ctx context.Context, obj *crm_models.Property) (*crm_models.Village, error)

	Documents(ctx context.Context, obj *crm_models.Property) ([]*crm_models.Document, error)
	Images(ctx context.Context, obj *crm_models.Property) ([]*crm_models.Image, error)
}
type QueryResolver interface {
	ArticleGroups(ctx context.Context, start *int, limit *int, sort *crm_models.Sort, search *string) (*crm_models.ArticleGroupConnection, error)
	ArticleGroup(ctx context.Context, id string) (*crm_models.ArticleGroup, error)
	Articles(ctx context.Context, ids []string, start *int, limit *int, sort *crm_models.Sort, search *string, filter *crm_models.ArticlesFilterInput) (*crm_models.ArticleConnection, error)
	Article(ctx context.Context, id string) (*crm_models.Article, error)
	Me(ctx context.Context) (*crm_models.Me, error)
	ComplexHouses(ctx context.Context, ids []string, start *int, limit *int, sort *crm_models.Sort, search *string, filter *crm_models.ComplexHouseFilter) (*crm_models.ComplexHouseConnection, error)
	ComplexHouse(ctx context.Context, id string) (*crm_models.ComplexHouse, error)
	Complexes(ctx context.Context, ids []string, start *int, limit *int, sort *crm_models.Sort, search *string, filter *crm_models.ComplexFilter) (*crm_models.ComplexConnection, error)
	Complex(ctx context.Context, id string) (*crm_models.Complex, error)
	Contacts(ctx context.Context, ids []string, start *int, limit *int, sort *crm_models.Sort, search *string, filter *crm_models.ContactFilter) (*crm_models.ContactConnection, error)
	Contact(ctx context.Context, id string) (*crm_models.Contact, error)
	Deals(ctx context.Context, ids []string, start *int, limit *int, sort *crm_models.Sort, search *string, filter *crm_models.DealFilter) (*crm_models.DealConnection, error)
	Deal(ctx context.Context, id string) (*crm_models.Deal, error)
	Departments(ctx context.Context, ids []string, start *int, limit *int, sort *crm_models.Sort, search *string) (*crm_models.DepartmentConnection, error)
	Department(ctx context.Context, id string) (*crm_models.Department, error)
	Developers(ctx context.Context, ids []string, start *int, limit *int, sort *crm_models.Sort, search *string, filter *crm_models.DeveloperFilterInput) (*crm_models.DeveloperConnection, error)
	Developer(ctx context.Context, id string) (*crm_models.Developer, error)
	Employees(ctx context.Context, ids []string, start *int, limit *int, sort *crm_models.Sort, search *string, filter *crm_models.EmployeesFilterInput) (*crm_models.EmployeeConnection, error)
	Employee(ctx context.Context, id string) (*crm_models.Employee, error)
	GeneratePDF(ctx context.Context, content string, fileName string) (string, error)
	Leads(ctx context.Context, ids []string, start *int, limit *int, sort *crm_models.Sort, search *string, filter *crm_models.LeadFilter) (*crm_models.LeadConnection, error)
	Lead(ctx context.Context, id string) (*crm_models.Lead, error)
	Logs(ctx context.Context, ids []string, start *int, limit *int, sort *crm_models.Sort, search *string, filter *crm_models.LogsFilterInput) (*crm_models.LogConnection, error)
	Meets(ctx context.Context, ids []string, start *int, limit *int, sort *crm_models.Sort, search *string, filter *crm_models.MeetFilter) (*crm_models.MeetConnection, error)
	Meet(ctx context.Context, id string) (*crm_models.Meet, error)
	MortgageRequests(ctx context.Context, ids []string, start *int, limit *int, sort *crm_models.Sort, search *string, filter *crm_models.MortgageRequestFilter) (*crm_models.MortgageRequestConnection, error)
	MortgageRequest(ctx context.Context, id string) (*crm_models.MortgageRequest, error)
	Pages(ctx context.Context, ids []string, start *int, limit *int, sort *crm_models.Sort, search *string, filter *crm_models.PageFilterInput) (*crm_models.PageConnection, error)
	Page(ctx context.Context, id string) (*crm_models.Page, error)
	Positions(ctx context.Context, ids []string, start *int, limit *int, sort *crm_models.Sort, search *string) (*crm_models.PositionConnection, error)
	Position(ctx context.Context, id string) (*crm_models.Position, error)
	Properties(ctx context.Context, ids []string, start *int, limit *int, sort *crm_models.Sort, search *string, filter *crm_models.PropertyFilter) (*crm_models.PropertyConnection, error)
	Property(ctx context.Context, id string) (*crm_models.Property, error)
	Reviews(ctx context.Context, ids []string, start *int, limit *int, sort *crm_models.Sort, search *string, filter *crm_models.ReviewsFilterInput) (*crm_models.ReviewConnection, error)
	Review(ctx context.Context, id string) (*crm_models.Review, error)
	Roles(ctx context.Context, ids []string, start *int, limit *int, sort *crm_models.Sort, search *string) (*crm_models.RoleConnection, error)
	Role(ctx context.Context, id string) (*crm_models.Role, error)
	Stories(ctx context.Context, ids []string, start *int, limit *int, sort *crm_models.Sort, search *string, filter *crm_models.StoryFilterInput) (*crm_models.StoryConnection, error)
	Story(ctx context.Context, id string) (*crm_models.Story, error)
	Tasks(ctx context.Context, ids []string, start *int, limit *int, sort *crm_models.Sort, search *string, filter *crm_models.TaskFilter) (*crm_models.TaskConnection, error)
	Task(ctx context.Context, id string) (*crm_models.Task, error)
	Vacancies(ctx context.Context, ids []string, start *int, limit *int, sort *crm_models.Sort, search *string) (*crm_models.VacancyConnection, error)
	Vacancy(ctx context.Context, id string) (*crm_models.Vacancy, error)
	VacancyRequests(ctx context.Context, ids []string, start *int, limit *int, sort *crm_models.Sort, search *string) (*crm_models.VacancyRequestConnection, error)
	VacancyRequest(ctx context.Context, id string) (*crm_models.VacancyRequest, error)
	Villages(ctx context.Context, ids []string, start *int, limit *int, sort *crm_models.Sort, search *string, filter *crm_models.VillageFilter) (*crm_models.VillageConnection, error)
	Village(ctx context.Context, id string) (*crm_models.Village, error)
}
type ReviewResolver interface {
	Employee(ctx context.Context, obj *crm_models.Review) (*crm_models.Employee, error)
}
type StoryResolver interface {
	Cover(ctx context.Context, obj *crm_models.Story) (*crm_models.Image, error)
}
type TaskResolver interface {
	Assignee(ctx context.Context, obj *crm_models.Task) (*crm_models.Employee, error)
	Reporter(ctx context.Context, obj *crm_models.Task) (*crm_models.Employee, error)
	Property(ctx context.Context, obj *crm_models.Task) (*crm_models.Property, error)
	Contact(ctx context.Context, obj *crm_models.Task) (*crm_models.Contact, error)

	Lead(ctx context.Context, obj *crm_models.Task) (*crm_models.Lead, error)
	Deal(ctx context.Context, obj *crm_models.Task) (*crm_models.Deal, error)
}
type VillageResolver interface {
	Developer(ctx context.Context, obj *crm_models.Village) (*crm_models.Developer, error)

	Images(ctx context.Context, obj *crm_models.Village) ([]*crm_models.Image, error)
	Documents(ctx context.Context, obj *crm_models.Village) ([]*crm_models.Document, error)
	ProjectDeclarations(ctx context.Context, obj *crm_models.Village) ([]*crm_models.Document, error)
}

type ArticleInputResolver interface {
	Cover(ctx context.Context, obj *crm_models.ArticleInput, data *crm_models.ImageInput) error
}
type ComplexHouseInputResolver interface {
	Images(ctx context.Context, obj *crm_models.ComplexHouseInput, data []*crm_models.ImageInput) error
	Documents(ctx context.Context, obj *crm_models.ComplexHouseInput, data []*crm_models.DocumentInput) error
	ProjectDeclarations(ctx context.Context, obj *crm_models.ComplexHouseInput, data []*crm_models.DocumentInput) error
}
type ComplexInputResolver interface {
	Images(ctx context.Context, obj *crm_models.ComplexInput, data []*crm_models.ImageInput) error
	Documents(ctx context.Context, obj *crm_models.ComplexInput, data []*crm_models.DocumentInput) error
	ProjectDeclarations(ctx context.Context, obj *crm_models.ComplexInput, data []*crm_models.DocumentInput) error
}
type ContactInputResolver interface {
	Contracts(ctx context.Context, obj *crm_models.ContactInput, data []*crm_models.DocumentInput) error
	Documents(ctx context.Context, obj *crm_models.ContactInput, data []*crm_models.DocumentInput) error
}
type DealInputResolver interface {
	SellerDocuments(ctx context.Context, obj *crm_models.DealInput, data []*crm_models.DocumentInput) error

	BuyerDocuments(ctx context.Context, obj *crm_models.DealInput, data []*crm_models.DocumentInput) error

	MortgageDocuments(ctx context.Context, obj *crm_models.DealInput, data []*crm_models.DocumentInput) error

	LawerDocuments(ctx context.Context, obj *crm_models.DealInput, data []*crm_models.DocumentInput) error

	AccountantDocuments(ctx context.Context, obj *crm_models.DealInput, data []*crm_models.DocumentInput) error
}
type DeveloperInputResolver interface {
	Logo(ctx context.Context, obj *crm_models.DeveloperInput, data *crm_models.ImageInput) error
}
type EmployeeInputResolver interface {
	Avatar(ctx context.Context, obj *crm_models.EmployeeInput, data *crm_models.ImageInput) error
	PublicImage(ctx context.Context, obj *crm_models.EmployeeInput, data *crm_models.ImageInput) error
}
type MortgageRequestInputResolver interface {
	Contracts(ctx context.Context, obj *crm_models.MortgageRequestInput, data []*crm_models.DocumentInput) error
	Documents(ctx context.Context, obj *crm_models.MortgageRequestInput, data []*crm_models.DocumentInput) error
}
type PropertyInputResolver interface {
	Documents(ctx context.Context, obj *crm_models.PropertyInput, data []*crm_models.DocumentInput) error
	Images(ctx context.Context, obj *crm_models.PropertyInput, data []*crm_models.ImageInput) error
}
type StoryInputResolver interface {
	Cover(ctx context.Context, obj *crm_models.StoryInput, data *crm_models.ImageInput) error
}
type VillageInputResolver interface {
	Images(ctx context.Context, obj *crm_models.VillageInput, data []*crm_models.ImageInput) error
	Documents(ctx context.Context, obj *crm_models.VillageInput, data []*crm_models.DocumentInput) error
	ProjectDeclarations(ctx context.Context, obj *crm_models.VillageInput, data []*crm_models.DocumentInput) error
}

type executableSchema struct {
	schema     *ast.Schema
	resolvers  ResolverRoot
	directives DirectiveRoot
	complexity ComplexityRoot
}

func (e *executableSchema) Schema() *ast.Schema {
	if e.schema != nil {
		return e.schema
	}
	return parsedSchema
}

func (e *executableSchema) Complexity(typeName, field string, childComplexity int, rawArgs map[string]interface{}) (int, bool) {
	ec := executionContext{nil, e, 0, 0, nil}
	_ = ec
	switch typeName + "." + field {

	case "Article.contentBlocks":
		if e.complexity.Article.ContentBlocks == nil {
			break
		}

		return e.complexity.Article.ContentBlocks(childComplexity), true

	case "Article.cover":
		if e.complexity.Article.Cover == nil {
			break
		}

		return e.complexity.Article.Cover(childComplexity), true

	case "Article.createdAt":
		if e.complexity.Article.CreatedAt == nil {
			break
		}

		return e.complexity.Article.CreatedAt(childComplexity), true

	case "Article.group":
		if e.complexity.Article.Group == nil {
			break
		}

		return e.complexity.Article.Group(childComplexity), true

	case "Article.id":
		if e.complexity.Article.ID == nil {
			break
		}

		return e.complexity.Article.ID(childComplexity), true

	case "Article.status":
		if e.complexity.Article.Status == nil {
			break
		}

		return e.complexity.Article.Status(childComplexity), true

	case "Article.title":
		if e.complexity.Article.Title == nil {
			break
		}

		return e.complexity.Article.Title(childComplexity), true

	case "Article.updatedAt":
		if e.complexity.Article.UpdatedAt == nil {
			break
		}

		return e.complexity.Article.UpdatedAt(childComplexity), true

	case "ArticleConnection.edges":
		if e.complexity.ArticleConnection.Edges == nil {
			break
		}

		return e.complexity.ArticleConnection.Edges(childComplexity), true

	case "ArticleConnection.nodes":
		if e.complexity.ArticleConnection.Nodes == nil {
			break
		}

		return e.complexity.ArticleConnection.Nodes(childComplexity), true

	case "ArticleConnection.pageInfo":
		if e.complexity.ArticleConnection.PageInfo == nil {
			break
		}

		return e.complexity.ArticleConnection.PageInfo(childComplexity), true

	case "ArticleConnection.totalCount":
		if e.complexity.ArticleConnection.TotalCount == nil {
			break
		}

		return e.complexity.ArticleConnection.TotalCount(childComplexity), true

	case "ArticleEdge.cursor":
		if e.complexity.ArticleEdge.Cursor == nil {
			break
		}

		return e.complexity.ArticleEdge.Cursor(childComplexity), true

	case "ArticleEdge.node":
		if e.complexity.ArticleEdge.Node == nil {
			break
		}

		return e.complexity.ArticleEdge.Node(childComplexity), true

	case "ArticleGroup.createdAt":
		if e.complexity.ArticleGroup.CreatedAt == nil {
			break
		}

		return e.complexity.ArticleGroup.CreatedAt(childComplexity), true

	case "ArticleGroup.id":
		if e.complexity.ArticleGroup.ID == nil {
			break
		}

		return e.complexity.ArticleGroup.ID(childComplexity), true

	case "ArticleGroup.title":
		if e.complexity.ArticleGroup.Title == nil {
			break
		}

		return e.complexity.ArticleGroup.Title(childComplexity), true

	case "ArticleGroup.updatedAt":
		if e.complexity.ArticleGroup.UpdatedAt == nil {
			break
		}

		return e.complexity.ArticleGroup.UpdatedAt(childComplexity), true

	case "ArticleGroupConnection.edges":
		if e.complexity.ArticleGroupConnection.Edges == nil {
			break
		}

		return e.complexity.ArticleGroupConnection.Edges(childComplexity), true

	case "ArticleGroupConnection.nodes":
		if e.complexity.ArticleGroupConnection.Nodes == nil {
			break
		}

		return e.complexity.ArticleGroupConnection.Nodes(childComplexity), true

	case "ArticleGroupConnection.pageInfo":
		if e.complexity.ArticleGroupConnection.PageInfo == nil {
			break
		}

		return e.complexity.ArticleGroupConnection.PageInfo(childComplexity), true

	case "ArticleGroupConnection.totalCount":
		if e.complexity.ArticleGroupConnection.TotalCount == nil {
			break
		}

		return e.complexity.ArticleGroupConnection.TotalCount(childComplexity), true

	case "ArticleGroupEdge.cursor":
		if e.complexity.ArticleGroupEdge.Cursor == nil {
			break
		}

		return e.complexity.ArticleGroupEdge.Cursor(childComplexity), true

	case "ArticleGroupEdge.node":
		if e.complexity.ArticleGroupEdge.Node == nil {
			break
		}

		return e.complexity.ArticleGroupEdge.Node(childComplexity), true

	case "Bank.id":
		if e.complexity.Bank.ID == nil {
			break
		}

		return e.complexity.Bank.ID(childComplexity), true

	case "Bank.title":
		if e.complexity.Bank.Title == nil {
			break
		}

		return e.complexity.Bank.Title(childComplexity), true

	case "Complex.address":
		if e.complexity.Complex.Address == nil {
			break
		}

		return e.complexity.Complex.Address(childComplexity), true

	case "Complex.cadastrNumber":
		if e.complexity.Complex.CadastrNumber == nil {
			break
		}

		return e.complexity.Complex.CadastrNumber(childComplexity), true

	case "Complex.cityDistance":
		if e.complexity.Complex.CityDistance == nil {
			break
		}

		return e.complexity.Complex.CityDistance(childComplexity), true

	case "Complex.createdAt":
		if e.complexity.Complex.CreatedAt == nil {
			break
		}

		return e.complexity.Complex.CreatedAt(childComplexity), true

	case "Complex.description":
		if e.complexity.Complex.Description == nil {
			break
		}

		return e.complexity.Complex.Description(childComplexity), true

	case "Complex.developer":
		if e.complexity.Complex.Developer == nil {
			break
		}

		return e.complexity.Complex.Developer(childComplexity), true

	case "Complex.documents":
		if e.complexity.Complex.Documents == nil {
			break
		}

		return e.complexity.Complex.Documents(childComplexity), true

	case "Complex.id":
		if e.complexity.Complex.ID == nil {
			break
		}

		return e.complexity.Complex.ID(childComplexity), true

	case "Complex.images":
		if e.complexity.Complex.Images == nil {
			break
		}

		return e.complexity.Complex.Images(childComplexity), true

	case "Complex.inCity":
		if e.complexity.Complex.InCity == nil {
			break
		}

		return e.complexity.Complex.InCity(childComplexity), true

	case "Complex.internalInfo":
		if e.complexity.Complex.InternalInfo == nil {
			break
		}

		return e.complexity.Complex.InternalInfo(childComplexity), true

	case "Complex.isDeleted":
		if e.complexity.Complex.IsDeleted == nil {
			break
		}

		return e.complexity.Complex.IsDeleted(childComplexity), true

	case "Complex.isReady":
		if e.complexity.Complex.IsReady == nil {
			break
		}

		return e.complexity.Complex.IsReady(childComplexity), true

	case "Complex.lat":
		if e.complexity.Complex.Lat == nil {
			break
		}

		return e.complexity.Complex.Lat(childComplexity), true

	case "Complex.lon":
		if e.complexity.Complex.Lon == nil {
			break
		}

		return e.complexity.Complex.Lon(childComplexity), true

	case "Complex.projectDeclarations":
		if e.complexity.Complex.ProjectDeclarations == nil {
			break
		}

		return e.complexity.Complex.ProjectDeclarations(childComplexity), true

	case "Complex.publicationStatus":
		if e.complexity.Complex.PublicationStatus == nil {
			break
		}

		return e.complexity.Complex.PublicationStatus(childComplexity), true

	case "Complex.readinessQuarter":
		if e.complexity.Complex.ReadinessQuarter == nil {
			break
		}

		return e.complexity.Complex.ReadinessQuarter(childComplexity), true

	case "Complex.readinessYear":
		if e.complexity.Complex.ReadinessYear == nil {
			break
		}

		return e.complexity.Complex.ReadinessYear(childComplexity), true

	case "Complex.region":
		if e.complexity.Complex.Region == nil {
			break
		}

		return e.complexity.Complex.Region(childComplexity), true

	case "Complex.seoText":
		if e.complexity.Complex.SeoText == nil {
			break
		}

		return e.complexity.Complex.SeoText(childComplexity), true

	case "Complex.subRegion":
		if e.complexity.Complex.SubRegion == nil {
			break
		}

		return e.complexity.Complex.SubRegion(childComplexity), true

	case "Complex.title":
		if e.complexity.Complex.Title == nil {
			break
		}

		return e.complexity.Complex.Title(childComplexity), true

	case "Complex.tourLink":
		if e.complexity.Complex.TourLink == nil {
			break
		}

		return e.complexity.Complex.TourLink(childComplexity), true

	case "Complex.updatedAt":
		if e.complexity.Complex.UpdatedAt == nil {
			break
		}

		return e.complexity.Complex.UpdatedAt(childComplexity), true

	case "Complex.youtubeLink":
		if e.complexity.Complex.YoutubeLink == nil {
			break
		}

		return e.complexity.Complex.YoutubeLink(childComplexity), true

	case "ComplexConnection.edges":
		if e.complexity.ComplexConnection.Edges == nil {
			break
		}

		return e.complexity.ComplexConnection.Edges(childComplexity), true

	case "ComplexConnection.nodes":
		if e.complexity.ComplexConnection.Nodes == nil {
			break
		}

		return e.complexity.ComplexConnection.Nodes(childComplexity), true

	case "ComplexConnection.pageInfo":
		if e.complexity.ComplexConnection.PageInfo == nil {
			break
		}

		return e.complexity.ComplexConnection.PageInfo(childComplexity), true

	case "ComplexConnection.totalCount":
		if e.complexity.ComplexConnection.TotalCount == nil {
			break
		}

		return e.complexity.ComplexConnection.TotalCount(childComplexity), true

	case "ComplexEdge.cursor":
		if e.complexity.ComplexEdge.Cursor == nil {
			break
		}

		return e.complexity.ComplexEdge.Cursor(childComplexity), true

	case "ComplexEdge.node":
		if e.complexity.ComplexEdge.Node == nil {
			break
		}

		return e.complexity.ComplexEdge.Node(childComplexity), true

	case "ComplexHouse.address":
		if e.complexity.ComplexHouse.Address == nil {
			break
		}

		return e.complexity.ComplexHouse.Address(childComplexity), true

	case "ComplexHouse.cadastrNumber":
		if e.complexity.ComplexHouse.CadastrNumber == nil {
			break
		}

		return e.complexity.ComplexHouse.CadastrNumber(childComplexity), true

	case "ComplexHouse.complex":
		if e.complexity.ComplexHouse.Complex == nil {
			break
		}

		return e.complexity.ComplexHouse.Complex(childComplexity), true

	case "ComplexHouse.createdAt":
		if e.complexity.ComplexHouse.CreatedAt == nil {
			break
		}

		return e.complexity.ComplexHouse.CreatedAt(childComplexity), true

	case "ComplexHouse.description":
		if e.complexity.ComplexHouse.Description == nil {
			break
		}

		return e.complexity.ComplexHouse.Description(childComplexity), true

	case "ComplexHouse.documents":
		if e.complexity.ComplexHouse.Documents == nil {
			break
		}

		return e.complexity.ComplexHouse.Documents(childComplexity), true

	case "ComplexHouse.id":
		if e.complexity.ComplexHouse.ID == nil {
			break
		}

		return e.complexity.ComplexHouse.ID(childComplexity), true

	case "ComplexHouse.images":
		if e.complexity.ComplexHouse.Images == nil {
			break
		}

		return e.complexity.ComplexHouse.Images(childComplexity), true

	case "ComplexHouse.internalInfo":
		if e.complexity.ComplexHouse.InternalInfo == nil {
			break
		}

		return e.complexity.ComplexHouse.InternalInfo(childComplexity), true

	case "ComplexHouse.isDeleted":
		if e.complexity.ComplexHouse.IsDeleted == nil {
			break
		}

		return e.complexity.ComplexHouse.IsDeleted(childComplexity), true

	case "ComplexHouse.isReady":
		if e.complexity.ComplexHouse.IsReady == nil {
			break
		}

		return e.complexity.ComplexHouse.IsReady(childComplexity), true

	case "ComplexHouse.lat":
		if e.complexity.ComplexHouse.Lat == nil {
			break
		}

		return e.complexity.ComplexHouse.Lat(childComplexity), true

	case "ComplexHouse.lon":
		if e.complexity.ComplexHouse.Lon == nil {
			break
		}

		return e.complexity.ComplexHouse.Lon(childComplexity), true

	case "ComplexHouse.projectDeclarations":
		if e.complexity.ComplexHouse.ProjectDeclarations == nil {
			break
		}

		return e.complexity.ComplexHouse.ProjectDeclarations(childComplexity), true

	case "ComplexHouse.publicationStatus":
		if e.complexity.ComplexHouse.PublicationStatus == nil {
			break
		}

		return e.complexity.ComplexHouse.PublicationStatus(childComplexity), true

	case "ComplexHouse.readinessQuarter":
		if e.complexity.ComplexHouse.ReadinessQuarter == nil {
			break
		}

		return e.complexity.ComplexHouse.ReadinessQuarter(childComplexity), true

	case "ComplexHouse.readinessYear":
		if e.complexity.ComplexHouse.ReadinessYear == nil {
			break
		}

		return e.complexity.ComplexHouse.ReadinessYear(childComplexity), true

	case "ComplexHouse.seoText":
		if e.complexity.ComplexHouse.SeoText == nil {
			break
		}

		return e.complexity.ComplexHouse.SeoText(childComplexity), true

	case "ComplexHouse.title":
		if e.complexity.ComplexHouse.Title == nil {
			break
		}

		return e.complexity.ComplexHouse.Title(childComplexity), true

	case "ComplexHouse.tourLink":
		if e.complexity.ComplexHouse.TourLink == nil {
			break
		}

		return e.complexity.ComplexHouse.TourLink(childComplexity), true

	case "ComplexHouse.updatedAt":
		if e.complexity.ComplexHouse.UpdatedAt == nil {
			break
		}

		return e.complexity.ComplexHouse.UpdatedAt(childComplexity), true

	case "ComplexHouse.youtubeLink":
		if e.complexity.ComplexHouse.YoutubeLink == nil {
			break
		}

		return e.complexity.ComplexHouse.YoutubeLink(childComplexity), true

	case "ComplexHouseConnection.edges":
		if e.complexity.ComplexHouseConnection.Edges == nil {
			break
		}

		return e.complexity.ComplexHouseConnection.Edges(childComplexity), true

	case "ComplexHouseConnection.nodes":
		if e.complexity.ComplexHouseConnection.Nodes == nil {
			break
		}

		return e.complexity.ComplexHouseConnection.Nodes(childComplexity), true

	case "ComplexHouseConnection.pageInfo":
		if e.complexity.ComplexHouseConnection.PageInfo == nil {
			break
		}

		return e.complexity.ComplexHouseConnection.PageInfo(childComplexity), true

	case "ComplexHouseConnection.totalCount":
		if e.complexity.ComplexHouseConnection.TotalCount == nil {
			break
		}

		return e.complexity.ComplexHouseConnection.TotalCount(childComplexity), true

	case "ComplexHouseEdge.cursor":
		if e.complexity.ComplexHouseEdge.Cursor == nil {
			break
		}

		return e.complexity.ComplexHouseEdge.Cursor(childComplexity), true

	case "ComplexHouseEdge.node":
		if e.complexity.ComplexHouseEdge.Node == nil {
			break
		}

		return e.complexity.ComplexHouseEdge.Node(childComplexity), true

	case "Contact.additionalPhones":
		if e.complexity.Contact.AdditionalPhones == nil {
			break
		}

		return e.complexity.Contact.AdditionalPhones(childComplexity), true

	case "Contact.address":
		if e.complexity.Contact.Address == nil {
			break
		}

		return e.complexity.Contact.Address(childComplexity), true

	case "Contact.agents":
		if e.complexity.Contact.Agents == nil {
			break
		}

		return e.complexity.Contact.Agents(childComplexity), true

	case "Contact.birthday":
		if e.complexity.Contact.Birthday == nil {
			break
		}

		return e.complexity.Contact.Birthday(childComplexity), true

	case "Contact.company":
		if e.complexity.Contact.Company == nil {
			break
		}

		return e.complexity.Contact.Company(childComplexity), true

	case "Contact.contracts":
		if e.complexity.Contact.Contracts == nil {
			break
		}

		return e.complexity.Contact.Contracts(childComplexity), true

	case "Contact.createdAt":
		if e.complexity.Contact.CreatedAt == nil {
			break
		}

		return e.complexity.Contact.CreatedAt(childComplexity), true

	case "Contact.deals":
		if e.complexity.Contact.Deals == nil {
			break
		}

		return e.complexity.Contact.Deals(childComplexity), true

	case "Contact.documents":
		if e.complexity.Contact.Documents == nil {
			break
		}

		return e.complexity.Contact.Documents(childComplexity), true

	case "Contact.email":
		if e.complexity.Contact.Email == nil {
			break
		}

		return e.complexity.Contact.Email(childComplexity), true

	case "Contact.id":
		if e.complexity.Contact.ID == nil {
			break
		}

		return e.complexity.Contact.ID(childComplexity), true

	case "Contact.internalInfo":
		if e.complexity.Contact.InternalInfo == nil {
			break
		}

		return e.complexity.Contact.InternalInfo(childComplexity), true

	case "Contact.internalNumber":
		if e.complexity.Contact.InternalNumber == nil {
			break
		}

		return e.complexity.Contact.InternalNumber(childComplexity), true

	case "Contact.isDeleted":
		if e.complexity.Contact.IsDeleted == nil {
			break
		}

		return e.complexity.Contact.IsDeleted(childComplexity), true

	case "Contact.lead":
		if e.complexity.Contact.Lead == nil {
			break
		}

		return e.complexity.Contact.Lead(childComplexity), true

	case "Contact.name":
		if e.complexity.Contact.Name == nil {
			break
		}

		return e.complexity.Contact.Name(childComplexity), true

	case "Contact.note":
		if e.complexity.Contact.Note == nil {
			break
		}

		return e.complexity.Contact.Note(childComplexity), true

	case "Contact.passportIssueDate":
		if e.complexity.Contact.PassportIssueDate == nil {
			break
		}

		return e.complexity.Contact.PassportIssueDate(childComplexity), true

	case "Contact.passportIssuedBy":
		if e.complexity.Contact.PassportIssuedBy == nil {
			break
		}

		return e.complexity.Contact.PassportIssuedBy(childComplexity), true

	case "Contact.passportIssuerCode":
		if e.complexity.Contact.PassportIssuerCode == nil {
			break
		}

		return e.complexity.Contact.PassportIssuerCode(childComplexity), true

	case "Contact.passportNumber":
		if e.complexity.Contact.PassportNumber == nil {
			break
		}

		return e.complexity.Contact.PassportNumber(childComplexity), true

	case "Contact.patronymic":
		if e.complexity.Contact.Patronymic == nil {
			break
		}

		return e.complexity.Contact.Patronymic(childComplexity), true

	case "Contact.phone":
		if e.complexity.Contact.Phone == nil {
			break
		}

		return e.complexity.Contact.Phone(childComplexity), true

	case "Contact.properties":
		if e.complexity.Contact.Properties == nil {
			break
		}

		return e.complexity.Contact.Properties(childComplexity), true

	case "Contact.source":
		if e.complexity.Contact.Source == nil {
			break
		}

		return e.complexity.Contact.Source(childComplexity), true

	case "Contact.surname":
		if e.complexity.Contact.Surname == nil {
			break
		}

		return e.complexity.Contact.Surname(childComplexity), true

	case "Contact.type":
		if e.complexity.Contact.Type == nil {
			break
		}

		return e.complexity.Contact.Type(childComplexity), true

	case "Contact.updatedAt":
		if e.complexity.Contact.UpdatedAt == nil {
			break
		}

		return e.complexity.Contact.UpdatedAt(childComplexity), true

	case "ContactConnection.edges":
		if e.complexity.ContactConnection.Edges == nil {
			break
		}

		return e.complexity.ContactConnection.Edges(childComplexity), true

	case "ContactConnection.nodes":
		if e.complexity.ContactConnection.Nodes == nil {
			break
		}

		return e.complexity.ContactConnection.Nodes(childComplexity), true

	case "ContactConnection.pageInfo":
		if e.complexity.ContactConnection.PageInfo == nil {
			break
		}

		return e.complexity.ContactConnection.PageInfo(childComplexity), true

	case "ContactConnection.totalCount":
		if e.complexity.ContactConnection.TotalCount == nil {
			break
		}

		return e.complexity.ContactConnection.TotalCount(childComplexity), true

	case "ContactEdge.cursor":
		if e.complexity.ContactEdge.Cursor == nil {
			break
		}

		return e.complexity.ContactEdge.Cursor(childComplexity), true

	case "ContactEdge.node":
		if e.complexity.ContactEdge.Node == nil {
			break
		}

		return e.complexity.ContactEdge.Node(childComplexity), true

	case "ContentBlock.data":
		if e.complexity.ContentBlock.Data == nil {
			break
		}

		return e.complexity.ContentBlock.Data(childComplexity), true

	case "ContentBlock.isVisible":
		if e.complexity.ContentBlock.IsVisible == nil {
			break
		}

		return e.complexity.ContentBlock.IsVisible(childComplexity), true

	case "ContentBlock.type":
		if e.complexity.ContentBlock.Type == nil {
			break
		}

		return e.complexity.ContentBlock.Type(childComplexity), true

	case "Deal.accountant":
		if e.complexity.Deal.Accountant == nil {
			break
		}

		return e.complexity.Deal.Accountant(childComplexity), true

	case "Deal.accountantDocuments":
		if e.complexity.Deal.AccountantDocuments == nil {
			break
		}

		return e.complexity.Deal.AccountantDocuments(childComplexity), true

	case "Deal.address":
		if e.complexity.Deal.Address == nil {
			break
		}

		return e.complexity.Deal.Address(childComplexity), true

	case "Deal.buyerAgent":
		if e.complexity.Deal.BuyerAgent == nil {
			break
		}

		return e.complexity.Deal.BuyerAgent(childComplexity), true

	case "Deal.buyerContact":
		if e.complexity.Deal.BuyerContact == nil {
			break
		}

		return e.complexity.Deal.BuyerContact(childComplexity), true

	case "Deal.buyerDocuments":
		if e.complexity.Deal.BuyerDocuments == nil {
			break
		}

		return e.complexity.Deal.BuyerDocuments(childComplexity), true

	case "Deal.buyerPhone":
		if e.complexity.Deal.BuyerPhone == nil {
			break
		}

		return e.complexity.Deal.BuyerPhone(childComplexity), true

	case "Deal.commissionAmount":
		if e.complexity.Deal.CommissionAmount == nil {
			break
		}

		return e.complexity.Deal.CommissionAmount(childComplexity), true

	case "Deal.createdAt":
		if e.complexity.Deal.CreatedAt == nil {
			break
		}

		return e.complexity.Deal.CreatedAt(childComplexity), true

	case "Deal.dealDate":
		if e.complexity.Deal.DealDate == nil {
			break
		}

		return e.complexity.Deal.DealDate(childComplexity), true

	case "Deal.depositDate":
		if e.complexity.Deal.DepositDate == nil {
			break
		}

		return e.complexity.Deal.DepositDate(childComplexity), true

	case "Deal.finishedAt":
		if e.complexity.Deal.FinishedAt == nil {
			break
		}

		return e.complexity.Deal.FinishedAt(childComplexity), true

	case "Deal.id":
		if e.complexity.Deal.ID == nil {
			break
		}

		return e.complexity.Deal.ID(childComplexity), true

	case "Deal.internalComment":
		if e.complexity.Deal.InternalComment == nil {
			break
		}

		return e.complexity.Deal.InternalComment(childComplexity), true

	case "Deal.internalNumber":
		if e.complexity.Deal.InternalNumber == nil {
			break
		}

		return e.complexity.Deal.InternalNumber(childComplexity), true

	case "Deal.isDeleted":
		if e.complexity.Deal.IsDeleted == nil {
			break
		}

		return e.complexity.Deal.IsDeleted(childComplexity), true

	case "Deal.lawer":
		if e.complexity.Deal.Lawer == nil {
			break
		}

		return e.complexity.Deal.Lawer(childComplexity), true

	case "Deal.lawerDocuments":
		if e.complexity.Deal.LawerDocuments == nil {
			break
		}

		return e.complexity.Deal.LawerDocuments(childComplexity), true

	case "Deal.mortgageBroker":
		if e.complexity.Deal.MortgageBroker == nil {
			break
		}

		return e.complexity.Deal.MortgageBroker(childComplexity), true

	case "Deal.mortgageDocuments":
		if e.complexity.Deal.MortgageDocuments == nil {
			break
		}

		return e.complexity.Deal.MortgageDocuments(childComplexity), true

	case "Deal.mortgageRequest":
		if e.complexity.Deal.MortgageRequest == nil {
			break
		}

		return e.complexity.Deal.MortgageRequest(childComplexity), true

	case "Deal.property":
		if e.complexity.Deal.Property == nil {
			break
		}

		return e.complexity.Deal.Property(childComplexity), true

	case "Deal.sellerAgent":
		if e.complexity.Deal.SellerAgent == nil {
			break
		}

		return e.complexity.Deal.SellerAgent(childComplexity), true

	case "Deal.sellerContact":
		if e.complexity.Deal.SellerContact == nil {
			break
		}

		return e.complexity.Deal.SellerContact(childComplexity), true

	case "Deal.sellerDocuments":
		if e.complexity.Deal.SellerDocuments == nil {
			break
		}

		return e.complexity.Deal.SellerDocuments(childComplexity), true

	case "Deal.sellerPhone":
		if e.complexity.Deal.SellerPhone == nil {
			break
		}

		return e.complexity.Deal.SellerPhone(childComplexity), true

	case "Deal.stage":
		if e.complexity.Deal.Stage == nil {
			break
		}

		return e.complexity.Deal.Stage(childComplexity), true

	case "Deal.type":
		if e.complexity.Deal.Type == nil {
			break
		}

		return e.complexity.Deal.Type(childComplexity), true

	case "Deal.updatedAt":
		if e.complexity.Deal.UpdatedAt == nil {
			break
		}

		return e.complexity.Deal.UpdatedAt(childComplexity), true

	case "DealConnection.edges":
		if e.complexity.DealConnection.Edges == nil {
			break
		}

		return e.complexity.DealConnection.Edges(childComplexity), true

	case "DealConnection.nodes":
		if e.complexity.DealConnection.Nodes == nil {
			break
		}

		return e.complexity.DealConnection.Nodes(childComplexity), true

	case "DealConnection.pageInfo":
		if e.complexity.DealConnection.PageInfo == nil {
			break
		}

		return e.complexity.DealConnection.PageInfo(childComplexity), true

	case "DealConnection.totalCount":
		if e.complexity.DealConnection.TotalCount == nil {
			break
		}

		return e.complexity.DealConnection.TotalCount(childComplexity), true

	case "DealEdge.cursor":
		if e.complexity.DealEdge.Cursor == nil {
			break
		}

		return e.complexity.DealEdge.Cursor(childComplexity), true

	case "DealEdge.node":
		if e.complexity.DealEdge.Node == nil {
			break
		}

		return e.complexity.DealEdge.Node(childComplexity), true

	case "Department.createdAt":
		if e.complexity.Department.CreatedAt == nil {
			break
		}

		return e.complexity.Department.CreatedAt(childComplexity), true

	case "Department.groups":
		if e.complexity.Department.Groups == nil {
			break
		}

		return e.complexity.Department.Groups(childComplexity), true

	case "Department.id":
		if e.complexity.Department.ID == nil {
			break
		}

		return e.complexity.Department.ID(childComplexity), true

	case "Department.title":
		if e.complexity.Department.Title == nil {
			break
		}

		return e.complexity.Department.Title(childComplexity), true

	case "Department.updatedAt":
		if e.complexity.Department.UpdatedAt == nil {
			break
		}

		return e.complexity.Department.UpdatedAt(childComplexity), true

	case "DepartmentConnection.edges":
		if e.complexity.DepartmentConnection.Edges == nil {
			break
		}

		return e.complexity.DepartmentConnection.Edges(childComplexity), true

	case "DepartmentConnection.nodes":
		if e.complexity.DepartmentConnection.Nodes == nil {
			break
		}

		return e.complexity.DepartmentConnection.Nodes(childComplexity), true

	case "DepartmentConnection.pageInfo":
		if e.complexity.DepartmentConnection.PageInfo == nil {
			break
		}

		return e.complexity.DepartmentConnection.PageInfo(childComplexity), true

	case "DepartmentConnection.totalCount":
		if e.complexity.DepartmentConnection.TotalCount == nil {
			break
		}

		return e.complexity.DepartmentConnection.TotalCount(childComplexity), true

	case "DepartmentEdge.cursor":
		if e.complexity.DepartmentEdge.Cursor == nil {
			break
		}

		return e.complexity.DepartmentEdge.Cursor(childComplexity), true

	case "DepartmentEdge.node":
		if e.complexity.DepartmentEdge.Node == nil {
			break
		}

		return e.complexity.DepartmentEdge.Node(childComplexity), true

	case "DepartmentGroup.createdAt":
		if e.complexity.DepartmentGroup.CreatedAt == nil {
			break
		}

		return e.complexity.DepartmentGroup.CreatedAt(childComplexity), true

	case "DepartmentGroup.id":
		if e.complexity.DepartmentGroup.ID == nil {
			break
		}

		return e.complexity.DepartmentGroup.ID(childComplexity), true

	case "DepartmentGroup.title":
		if e.complexity.DepartmentGroup.Title == nil {
			break
		}

		return e.complexity.DepartmentGroup.Title(childComplexity), true

	case "DepartmentGroup.updatedAt":
		if e.complexity.DepartmentGroup.UpdatedAt == nil {
			break
		}

		return e.complexity.DepartmentGroup.UpdatedAt(childComplexity), true

	case "Developer.createdAt":
		if e.complexity.Developer.CreatedAt == nil {
			break
		}

		return e.complexity.Developer.CreatedAt(childComplexity), true

	case "Developer.id":
		if e.complexity.Developer.ID == nil {
			break
		}

		return e.complexity.Developer.ID(childComplexity), true

	case "Developer.isDeleted":
		if e.complexity.Developer.IsDeleted == nil {
			break
		}

		return e.complexity.Developer.IsDeleted(childComplexity), true

	case "Developer.logo":
		if e.complexity.Developer.Logo == nil {
			break
		}

		return e.complexity.Developer.Logo(childComplexity), true

	case "Developer.title":
		if e.complexity.Developer.Title == nil {
			break
		}

		return e.complexity.Developer.Title(childComplexity), true

	case "Developer.url":
		if e.complexity.Developer.URL == nil {
			break
		}

		return e.complexity.Developer.URL(childComplexity), true

	case "Developer.updatedAt":
		if e.complexity.Developer.UpdatedAt == nil {
			break
		}

		return e.complexity.Developer.UpdatedAt(childComplexity), true

	case "DeveloperConnection.edges":
		if e.complexity.DeveloperConnection.Edges == nil {
			break
		}

		return e.complexity.DeveloperConnection.Edges(childComplexity), true

	case "DeveloperConnection.nodes":
		if e.complexity.DeveloperConnection.Nodes == nil {
			break
		}

		return e.complexity.DeveloperConnection.Nodes(childComplexity), true

	case "DeveloperConnection.pageInfo":
		if e.complexity.DeveloperConnection.PageInfo == nil {
			break
		}

		return e.complexity.DeveloperConnection.PageInfo(childComplexity), true

	case "DeveloperConnection.totalCount":
		if e.complexity.DeveloperConnection.TotalCount == nil {
			break
		}

		return e.complexity.DeveloperConnection.TotalCount(childComplexity), true

	case "DeveloperEdge.cursor":
		if e.complexity.DeveloperEdge.Cursor == nil {
			break
		}

		return e.complexity.DeveloperEdge.Cursor(childComplexity), true

	case "DeveloperEdge.node":
		if e.complexity.DeveloperEdge.Node == nil {
			break
		}

		return e.complexity.DeveloperEdge.Node(childComplexity), true

	case "Document.createdAt":
		if e.complexity.Document.CreatedAt == nil {
			break
		}

		return e.complexity.Document.CreatedAt(childComplexity), true

	case "Document.fileName":
		if e.complexity.Document.FileName == nil {
			break
		}

		return e.complexity.Document.FileName(childComplexity), true

	case "Document.fileType":
		if e.complexity.Document.FileType == nil {
			break
		}

		return e.complexity.Document.FileType(childComplexity), true

	case "Document.id":
		if e.complexity.Document.ID == nil {
			break
		}

		return e.complexity.Document.ID(childComplexity), true

	case "Document.path":
		if e.complexity.Document.Path == nil {
			break
		}

		return e.complexity.Document.Path(childComplexity), true

	case "Document.title":
		if e.complexity.Document.Title == nil {
			break
		}

		return e.complexity.Document.Title(childComplexity), true

	case "Document.url":
		if e.complexity.Document.URL == nil {
			break
		}

		return e.complexity.Document.URL(childComplexity), true

	case "Employee.avatar":
		if e.complexity.Employee.Avatar == nil {
			break
		}

		return e.complexity.Employee.Avatar(childComplexity), true

	case "Employee.birthday":
		if e.complexity.Employee.Birthday == nil {
			break
		}

		return e.complexity.Employee.Birthday(childComplexity), true

	case "Employee.createdAt":
		if e.complexity.Employee.CreatedAt == nil {
			break
		}

		return e.complexity.Employee.CreatedAt(childComplexity), true

	case "Employee.department":
		if e.complexity.Employee.Department == nil {
			break
		}

		return e.complexity.Employee.Department(childComplexity), true

	case "Employee.description":
		if e.complexity.Employee.Description == nil {
			break
		}

		return e.complexity.Employee.Description(childComplexity), true

	case "Employee.email":
		if e.complexity.Employee.Email == nil {
			break
		}

		return e.complexity.Employee.Email(childComplexity), true

	case "Employee.group":
		if e.complexity.Employee.Group == nil {
			break
		}

		return e.complexity.Employee.Group(childComplexity), true

	case "Employee.id":
		if e.complexity.Employee.ID == nil {
			break
		}

		return e.complexity.Employee.ID(childComplexity), true

	case "Employee.internalInfo":
		if e.complexity.Employee.InternalInfo == nil {
			break
		}

		return e.complexity.Employee.InternalInfo(childComplexity), true

	case "Employee.isDeleted":
		if e.complexity.Employee.IsDeleted == nil {
			break
		}

		return e.complexity.Employee.IsDeleted(childComplexity), true

	case "Employee.isPublished":
		if e.complexity.Employee.IsPublished == nil {
			break
		}

		return e.complexity.Employee.IsPublished(childComplexity), true

	case "Employee.name":
		if e.complexity.Employee.Name == nil {
			break
		}

		return e.complexity.Employee.Name(childComplexity), true

	case "Employee.patronymic":
		if e.complexity.Employee.Patronymic == nil {
			break
		}

		return e.complexity.Employee.Patronymic(childComplexity), true

	case "Employee.phone":
		if e.complexity.Employee.Phone == nil {
			break
		}

		return e.complexity.Employee.Phone(childComplexity), true

	case "Employee.position":
		if e.complexity.Employee.Position == nil {
			break
		}

		return e.complexity.Employee.Position(childComplexity), true

	case "Employee.publicImage":
		if e.complexity.Employee.PublicImage == nil {
			break
		}

		return e.complexity.Employee.PublicImage(childComplexity), true

	case "Employee.role":
		if e.complexity.Employee.Role == nil {
			break
		}

		return e.complexity.Employee.Role(childComplexity), true

	case "Employee.shortDescription":
		if e.complexity.Employee.ShortDescription == nil {
			break
		}

		return e.complexity.Employee.ShortDescription(childComplexity), true

	case "Employee.surname":
		if e.complexity.Employee.Surname == nil {
			break
		}

		return e.complexity.Employee.Surname(childComplexity), true

	case "Employee.updatedAt":
		if e.complexity.Employee.UpdatedAt == nil {
			break
		}

		return e.complexity.Employee.UpdatedAt(childComplexity), true

	case "EmployeeConnection.edges":
		if e.complexity.EmployeeConnection.Edges == nil {
			break
		}

		return e.complexity.EmployeeConnection.Edges(childComplexity), true

	case "EmployeeConnection.nodes":
		if e.complexity.EmployeeConnection.Nodes == nil {
			break
		}

		return e.complexity.EmployeeConnection.Nodes(childComplexity), true

	case "EmployeeConnection.pageInfo":
		if e.complexity.EmployeeConnection.PageInfo == nil {
			break
		}

		return e.complexity.EmployeeConnection.PageInfo(childComplexity), true

	case "EmployeeConnection.totalCount":
		if e.complexity.EmployeeConnection.TotalCount == nil {
			break
		}

		return e.complexity.EmployeeConnection.TotalCount(childComplexity), true

	case "EmployeeEdge.cursor":
		if e.complexity.EmployeeEdge.Cursor == nil {
			break
		}

		return e.complexity.EmployeeEdge.Cursor(childComplexity), true

	case "EmployeeEdge.node":
		if e.complexity.EmployeeEdge.Node == nil {
			break
		}

		return e.complexity.EmployeeEdge.Node(childComplexity), true

	case "Image.blurHash":
		if e.complexity.Image.BlurHash == nil {
			break
		}

		return e.complexity.Image.BlurHash(childComplexity), true

	case "Image.createdAt":
		if e.complexity.Image.CreatedAt == nil {
			break
		}

		return e.complexity.Image.CreatedAt(childComplexity), true

	case "Image.fileName":
		if e.complexity.Image.FileName == nil {
			break
		}

		return e.complexity.Image.FileName(childComplexity), true

	case "Image.fileType":
		if e.complexity.Image.FileType == nil {
			break
		}

		return e.complexity.Image.FileType(childComplexity), true

	case "Image.id":
		if e.complexity.Image.ID == nil {
			break
		}

		return e.complexity.Image.ID(childComplexity), true

	case "Image.path":
		if e.complexity.Image.Path == nil {
			break
		}

		return e.complexity.Image.Path(childComplexity), true

	case "Image.preset":
		if e.complexity.Image.Preset == nil {
			break
		}

		return e.complexity.Image.Preset(childComplexity), true

	case "Image.previewPath":
		if e.complexity.Image.PreviewPath == nil {
			break
		}

		return e.complexity.Image.PreviewPath(childComplexity), true

	case "Image.previewUrl":
		if e.complexity.Image.PreviewURL == nil {
			break
		}

		return e.complexity.Image.PreviewURL(childComplexity), true

	case "Image.title":
		if e.complexity.Image.Title == nil {
			break
		}

		return e.complexity.Image.Title(childComplexity), true

	case "Image.url":
		if e.complexity.Image.URL == nil {
			break
		}

		return e.complexity.Image.URL(childComplexity), true

	case "Lead.additionalPhones":
		if e.complexity.Lead.AdditionalPhones == nil {
			break
		}

		return e.complexity.Lead.AdditionalPhones(childComplexity), true

	case "Lead.address":
		if e.complexity.Lead.Address == nil {
			break
		}

		return e.complexity.Lead.Address(childComplexity), true

	case "Lead.agents":
		if e.complexity.Lead.Agents == nil {
			break
		}

		return e.complexity.Lead.Agents(childComplexity), true

	case "Lead.birthday":
		if e.complexity.Lead.Birthday == nil {
			break
		}

		return e.complexity.Lead.Birthday(childComplexity), true

	case "Lead.comment":
		if e.complexity.Lead.Comment == nil {
			break
		}

		return e.complexity.Lead.Comment(childComplexity), true

	case "Lead.company":
		if e.complexity.Lead.Company == nil {
			break
		}

		return e.complexity.Lead.Company(childComplexity), true

	case "Lead.createdAt":
		if e.complexity.Lead.CreatedAt == nil {
			break
		}

		return e.complexity.Lead.CreatedAt(childComplexity), true

	case "Lead.email":
		if e.complexity.Lead.Email == nil {
			break
		}

		return e.complexity.Lead.Email(childComplexity), true

	case "Lead.id":
		if e.complexity.Lead.ID == nil {
			break
		}

		return e.complexity.Lead.ID(childComplexity), true

	case "Lead.internalNumber":
		if e.complexity.Lead.InternalNumber == nil {
			break
		}

		return e.complexity.Lead.InternalNumber(childComplexity), true

	case "Lead.isDeleted":
		if e.complexity.Lead.IsDeleted == nil {
			break
		}

		return e.complexity.Lead.IsDeleted(childComplexity), true

	case "Lead.name":
		if e.complexity.Lead.Name == nil {
			break
		}

		return e.complexity.Lead.Name(childComplexity), true

	case "Lead.patronymic":
		if e.complexity.Lead.Patronymic == nil {
			break
		}

		return e.complexity.Lead.Patronymic(childComplexity), true

	case "Lead.phone":
		if e.complexity.Lead.Phone == nil {
			break
		}

		return e.complexity.Lead.Phone(childComplexity), true

	case "Lead.request":
		if e.complexity.Lead.Request == nil {
			break
		}

		return e.complexity.Lead.Request(childComplexity), true

	case "Lead.source":
		if e.complexity.Lead.Source == nil {
			break
		}

		return e.complexity.Lead.Source(childComplexity), true

	case "Lead.status":
		if e.complexity.Lead.Status == nil {
			break
		}

		return e.complexity.Lead.Status(childComplexity), true

	case "Lead.surname":
		if e.complexity.Lead.Surname == nil {
			break
		}

		return e.complexity.Lead.Surname(childComplexity), true

	case "Lead.type":
		if e.complexity.Lead.Type == nil {
			break
		}

		return e.complexity.Lead.Type(childComplexity), true

	case "Lead.updatedAt":
		if e.complexity.Lead.UpdatedAt == nil {
			break
		}

		return e.complexity.Lead.UpdatedAt(childComplexity), true

	case "LeadConnection.edges":
		if e.complexity.LeadConnection.Edges == nil {
			break
		}

		return e.complexity.LeadConnection.Edges(childComplexity), true

	case "LeadConnection.nodes":
		if e.complexity.LeadConnection.Nodes == nil {
			break
		}

		return e.complexity.LeadConnection.Nodes(childComplexity), true

	case "LeadConnection.pageInfo":
		if e.complexity.LeadConnection.PageInfo == nil {
			break
		}

		return e.complexity.LeadConnection.PageInfo(childComplexity), true

	case "LeadConnection.totalCount":
		if e.complexity.LeadConnection.TotalCount == nil {
			break
		}

		return e.complexity.LeadConnection.TotalCount(childComplexity), true

	case "LeadEdge.cursor":
		if e.complexity.LeadEdge.Cursor == nil {
			break
		}

		return e.complexity.LeadEdge.Cursor(childComplexity), true

	case "LeadEdge.node":
		if e.complexity.LeadEdge.Node == nil {
			break
		}

		return e.complexity.LeadEdge.Node(childComplexity), true

	case "Log.author":
		if e.complexity.Log.Author == nil {
			break
		}

		return e.complexity.Log.Author(childComplexity), true

	case "Log.createdAt":
		if e.complexity.Log.CreatedAt == nil {
			break
		}

		return e.complexity.Log.CreatedAt(childComplexity), true

	case "Log.eid":
		if e.complexity.Log.Eid == nil {
			break
		}

		return e.complexity.Log.Eid(childComplexity), true

	case "Log.id":
		if e.complexity.Log.ID == nil {
			break
		}

		return e.complexity.Log.ID(childComplexity), true

	case "Log.level":
		if e.complexity.Log.Level == nil {
			break
		}

		return e.complexity.Log.Level(childComplexity), true

	case "Log.status":
		if e.complexity.Log.Status == nil {
			break
		}

		return e.complexity.Log.Status(childComplexity), true

	case "Log.type":
		if e.complexity.Log.Type == nil {
			break
		}

		return e.complexity.Log.Type(childComplexity), true

	case "LogConnection.edges":
		if e.complexity.LogConnection.Edges == nil {
			break
		}

		return e.complexity.LogConnection.Edges(childComplexity), true

	case "LogConnection.nodes":
		if e.complexity.LogConnection.Nodes == nil {
			break
		}

		return e.complexity.LogConnection.Nodes(childComplexity), true

	case "LogConnection.pageInfo":
		if e.complexity.LogConnection.PageInfo == nil {
			break
		}

		return e.complexity.LogConnection.PageInfo(childComplexity), true

	case "LogConnection.totalCount":
		if e.complexity.LogConnection.TotalCount == nil {
			break
		}

		return e.complexity.LogConnection.TotalCount(childComplexity), true

	case "LogEdge.cursor":
		if e.complexity.LogEdge.Cursor == nil {
			break
		}

		return e.complexity.LogEdge.Cursor(childComplexity), true

	case "LogEdge.node":
		if e.complexity.LogEdge.Node == nil {
			break
		}

		return e.complexity.LogEdge.Node(childComplexity), true

	case "LoginOutput.me":
		if e.complexity.LoginOutput.Me == nil {
			break
		}

		return e.complexity.LoginOutput.Me(childComplexity), true

	case "LoginOutput.token":
		if e.complexity.LoginOutput.Token == nil {
			break
		}

		return e.complexity.LoginOutput.Token(childComplexity), true

	case "Me.avatar":
		if e.complexity.Me.Avatar == nil {
			break
		}

		return e.complexity.Me.Avatar(childComplexity), true

	case "Me.id":
		if e.complexity.Me.ID == nil {
			break
		}

		return e.complexity.Me.ID(childComplexity), true

	case "Me.name":
		if e.complexity.Me.Name == nil {
			break
		}

		return e.complexity.Me.Name(childComplexity), true

	case "Me.surname":
		if e.complexity.Me.Surname == nil {
			break
		}

		return e.complexity.Me.Surname(childComplexity), true

	case "Meet.accountant":
		if e.complexity.Meet.Accountant == nil {
			break
		}

		return e.complexity.Meet.Accountant(childComplexity), true

	case "Meet.address":
		if e.complexity.Meet.Address == nil {
			break
		}

		return e.complexity.Meet.Address(childComplexity), true

	case "Meet.buyerAgency":
		if e.complexity.Meet.BuyerAgency == nil {
			break
		}

		return e.complexity.Meet.BuyerAgency(childComplexity), true

	case "Meet.buyerAgent":
		if e.complexity.Meet.BuyerAgent == nil {
			break
		}

		return e.complexity.Meet.BuyerAgent(childComplexity), true

	case "Meet.buyerContact":
		if e.complexity.Meet.BuyerContact == nil {
			break
		}

		return e.complexity.Meet.BuyerContact(childComplexity), true

	case "Meet.buyerPhone":
		if e.complexity.Meet.BuyerPhone == nil {
			break
		}

		return e.complexity.Meet.BuyerPhone(childComplexity), true

	case "Meet.cancelReason":
		if e.complexity.Meet.CancelReason == nil {
			break
		}

		return e.complexity.Meet.CancelReason(childComplexity), true

	case "Meet.cancelReasonCustom":
		if e.complexity.Meet.CancelReasonCustom == nil {
			break
		}

		return e.complexity.Meet.CancelReasonCustom(childComplexity), true

	case "Meet.comment":
		if e.complexity.Meet.Comment == nil {
			break
		}

		return e.complexity.Meet.Comment(childComplexity), true

	case "Meet.contactType":
		if e.complexity.Meet.ContactType == nil {
			break
		}

		return e.complexity.Meet.ContactType(childComplexity), true

	case "Meet.createdAt":
		if e.complexity.Meet.CreatedAt == nil {
			break
		}

		return e.complexity.Meet.CreatedAt(childComplexity), true

	case "Meet.dateTime":
		if e.complexity.Meet.DateTime == nil {
			break
		}

		return e.complexity.Meet.DateTime(childComplexity), true

	case "Meet.dealType":
		if e.complexity.Meet.DealType == nil {
			break
		}

		return e.complexity.Meet.DealType(childComplexity), true

	case "Meet.id":
		if e.complexity.Meet.ID == nil {
			break
		}

		return e.complexity.Meet.ID(childComplexity), true

	case "Meet.internalNumber":
		if e.complexity.Meet.InternalNumber == nil {
			break
		}

		return e.complexity.Meet.InternalNumber(childComplexity), true

	case "Meet.isDeleted":
		if e.complexity.Meet.IsDeleted == nil {
			break
		}

		return e.complexity.Meet.IsDeleted(childComplexity), true

	case "Meet.isOnline":
		if e.complexity.Meet.IsOnline == nil {
			break
		}

		return e.complexity.Meet.IsOnline(childComplexity), true

	case "Meet.lawer":
		if e.complexity.Meet.Lawer == nil {
			break
		}

		return e.complexity.Meet.Lawer(childComplexity), true

	case "Meet.mortgageBroker":
		if e.complexity.Meet.MortgageBroker == nil {
			break
		}

		return e.complexity.Meet.MortgageBroker(childComplexity), true

	case "Meet.property":
		if e.complexity.Meet.Property == nil {
			break
		}

		return e.complexity.Meet.Property(childComplexity), true

	case "Meet.sellerAgent":
		if e.complexity.Meet.SellerAgent == nil {
			break
		}

		return e.complexity.Meet.SellerAgent(childComplexity), true

	case "Meet.sellerContact":
		if e.complexity.Meet.SellerContact == nil {
			break
		}

		return e.complexity.Meet.SellerContact(childComplexity), true

	case "Meet.sellerPhone":
		if e.complexity.Meet.SellerPhone == nil {
			break
		}

		return e.complexity.Meet.SellerPhone(childComplexity), true

	case "Meet.status":
		if e.complexity.Meet.Status == nil {
			break
		}

		return e.complexity.Meet.Status(childComplexity), true

	case "Meet.type":
		if e.complexity.Meet.Type == nil {
			break
		}

		return e.complexity.Meet.Type(childComplexity), true

	case "Meet.updatedAt":
		if e.complexity.Meet.UpdatedAt == nil {
			break
		}

		return e.complexity.Meet.UpdatedAt(childComplexity), true

	case "Meet.useDealDeposit":
		if e.complexity.Meet.UseDealDeposit == nil {
			break
		}

		return e.complexity.Meet.UseDealDeposit(childComplexity), true

	case "Meet.useMortgage":
		if e.complexity.Meet.UseMortgage == nil {
			break
		}

		return e.complexity.Meet.UseMortgage(childComplexity), true

	case "MeetConnection.edges":
		if e.complexity.MeetConnection.Edges == nil {
			break
		}

		return e.complexity.MeetConnection.Edges(childComplexity), true

	case "MeetConnection.nodes":
		if e.complexity.MeetConnection.Nodes == nil {
			break
		}

		return e.complexity.MeetConnection.Nodes(childComplexity), true

	case "MeetConnection.pageInfo":
		if e.complexity.MeetConnection.PageInfo == nil {
			break
		}

		return e.complexity.MeetConnection.PageInfo(childComplexity), true

	case "MeetConnection.totalCount":
		if e.complexity.MeetConnection.TotalCount == nil {
			break
		}

		return e.complexity.MeetConnection.TotalCount(childComplexity), true

	case "MeetEdge.cursor":
		if e.complexity.MeetEdge.Cursor == nil {
			break
		}

		return e.complexity.MeetEdge.Cursor(childComplexity), true

	case "MeetEdge.node":
		if e.complexity.MeetEdge.Node == nil {
			break
		}

		return e.complexity.MeetEdge.Node(childComplexity), true

	case "MortgageRequest.agent":
		if e.complexity.MortgageRequest.Agent == nil {
			break
		}

		return e.complexity.MortgageRequest.Agent(childComplexity), true

	case "MortgageRequest.amount":
		if e.complexity.MortgageRequest.Amount == nil {
			break
		}

		return e.complexity.MortgageRequest.Amount(childComplexity), true

	case "MortgageRequest.banks":
		if e.complexity.MortgageRequest.Banks == nil {
			break
		}

		return e.complexity.MortgageRequest.Banks(childComplexity), true

	case "MortgageRequest.comment":
		if e.complexity.MortgageRequest.Comment == nil {
			break
		}

		return e.complexity.MortgageRequest.Comment(childComplexity), true

	case "MortgageRequest.contact":
		if e.complexity.MortgageRequest.Contact == nil {
			break
		}

		return e.complexity.MortgageRequest.Contact(childComplexity), true

	case "MortgageRequest.contracts":
		if e.complexity.MortgageRequest.Contracts == nil {
			break
		}

		return e.complexity.MortgageRequest.Contracts(childComplexity), true

	case "MortgageRequest.createdAt":
		if e.complexity.MortgageRequest.CreatedAt == nil {
			break
		}

		return e.complexity.MortgageRequest.CreatedAt(childComplexity), true

	case "MortgageRequest.deal":
		if e.complexity.MortgageRequest.Deal == nil {
			break
		}

		return e.complexity.MortgageRequest.Deal(childComplexity), true

	case "MortgageRequest.documents":
		if e.complexity.MortgageRequest.Documents == nil {
			break
		}

		return e.complexity.MortgageRequest.Documents(childComplexity), true

	case "MortgageRequest.firstDeposit":
		if e.complexity.MortgageRequest.FirstDeposit == nil {
			break
		}

		return e.complexity.MortgageRequest.FirstDeposit(childComplexity), true

	case "MortgageRequest.id":
		if e.complexity.MortgageRequest.ID == nil {
			break
		}

		return e.complexity.MortgageRequest.ID(childComplexity), true

	case "MortgageRequest.internalNumber":
		if e.complexity.MortgageRequest.InternalNumber == nil {
			break
		}

		return e.complexity.MortgageRequest.InternalNumber(childComplexity), true

	case "MortgageRequest.isDeleted":
		if e.complexity.MortgageRequest.IsDeleted == nil {
			break
		}

		return e.complexity.MortgageRequest.IsDeleted(childComplexity), true

	case "MortgageRequest.mortgageBroker":
		if e.complexity.MortgageRequest.MortgageBroker == nil {
			break
		}

		return e.complexity.MortgageRequest.MortgageBroker(childComplexity), true

	case "MortgageRequest.percentage":
		if e.complexity.MortgageRequest.Percentage == nil {
			break
		}

		return e.complexity.MortgageRequest.Percentage(childComplexity), true

	case "MortgageRequest.period":
		if e.complexity.MortgageRequest.Period == nil {
			break
		}

		return e.complexity.MortgageRequest.Period(childComplexity), true

	case "MortgageRequest.property":
		if e.complexity.MortgageRequest.Property == nil {
			break
		}

		return e.complexity.MortgageRequest.Property(childComplexity), true

	case "MortgageRequest.responseDate":
		if e.complexity.MortgageRequest.ResponseDate == nil {
			break
		}

		return e.complexity.MortgageRequest.ResponseDate(childComplexity), true

	case "MortgageRequest.sendDate":
		if e.complexity.MortgageRequest.SendDate == nil {
			break
		}

		return e.complexity.MortgageRequest.SendDate(childComplexity), true

	case "MortgageRequest.status":
		if e.complexity.MortgageRequest.Status == nil {
			break
		}

		return e.complexity.MortgageRequest.Status(childComplexity), true

	case "MortgageRequest.updatedAt":
		if e.complexity.MortgageRequest.UpdatedAt == nil {
			break
		}

		return e.complexity.MortgageRequest.UpdatedAt(childComplexity), true

	case "MortgageRequest.validTillDate":
		if e.complexity.MortgageRequest.ValidTillDate == nil {
			break
		}

		return e.complexity.MortgageRequest.ValidTillDate(childComplexity), true

	case "MortgageRequestConnection.edges":
		if e.complexity.MortgageRequestConnection.Edges == nil {
			break
		}

		return e.complexity.MortgageRequestConnection.Edges(childComplexity), true

	case "MortgageRequestConnection.nodes":
		if e.complexity.MortgageRequestConnection.Nodes == nil {
			break
		}

		return e.complexity.MortgageRequestConnection.Nodes(childComplexity), true

	case "MortgageRequestConnection.pageInfo":
		if e.complexity.MortgageRequestConnection.PageInfo == nil {
			break
		}

		return e.complexity.MortgageRequestConnection.PageInfo(childComplexity), true

	case "MortgageRequestConnection.totalCount":
		if e.complexity.MortgageRequestConnection.TotalCount == nil {
			break
		}

		return e.complexity.MortgageRequestConnection.TotalCount(childComplexity), true

	case "MortgageRequestEdge.cursor":
		if e.complexity.MortgageRequestEdge.Cursor == nil {
			break
		}

		return e.complexity.MortgageRequestEdge.Cursor(childComplexity), true

	case "MortgageRequestEdge.node":
		if e.complexity.MortgageRequestEdge.Node == nil {
			break
		}

		return e.complexity.MortgageRequestEdge.Node(childComplexity), true

	case "Mutation.activateEmployees":
		if e.complexity.Mutation.ActivateEmployees == nil {
			break
		}

		args, err := ec.field_Mutation_activateEmployees_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ActivateEmployees(childComplexity, args["ids"].([]string)), true

	case "Mutation.approveProperty":
		if e.complexity.Mutation.ApproveProperty == nil {
			break
		}

		args, err := ec.field_Mutation_approveProperty_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ApproveProperty(childComplexity, args["id"].(string)), true

	case "Mutation.approveVacancyRequest":
		if e.complexity.Mutation.ApproveVacancyRequest == nil {
			break
		}

		args, err := ec.field_Mutation_approveVacancyRequest_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ApproveVacancyRequest(childComplexity, args["id"].(string)), true

	case "Mutation.archiveProperty":
		if e.complexity.Mutation.ArchiveProperty == nil {
			break
		}

		args, err := ec.field_Mutation_archiveProperty_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ArchiveProperty(childComplexity, args["id"].(string)), true

	case "Mutation.assignDepartmentToEmployees":
		if e.complexity.Mutation.AssignDepartmentToEmployees == nil {
			break
		}

		args, err := ec.field_Mutation_assignDepartmentToEmployees_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.AssignDepartmentToEmployees(childComplexity, args["department"].(string), args["ids"].([]string)), true

	case "Mutation.assignRoleToEmployees":
		if e.complexity.Mutation.AssignRoleToEmployees == nil {
			break
		}

		args, err := ec.field_Mutation_assignRoleToEmployees_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.AssignRoleToEmployees(childComplexity, args["role"].(string), args["ids"].([]string)), true

	case "Mutation.bulkApproveProperties":
		if e.complexity.Mutation.BulkApproveProperties == nil {
			break
		}

		args, err := ec.field_Mutation_bulkApproveProperties_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.BulkApproveProperties(childComplexity, args["ids"].([]string)), true

	case "Mutation.bulkApproveReviews":
		if e.complexity.Mutation.BulkApproveReviews == nil {
			break
		}

		args, err := ec.field_Mutation_bulkApproveReviews_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.BulkApproveReviews(childComplexity, args["ids"].([]string)), true

	case "Mutation.bulkArchiveProperties":
		if e.complexity.Mutation.BulkArchiveProperties == nil {
			break
		}

		args, err := ec.field_Mutation_bulkArchiveProperties_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.BulkArchiveProperties(childComplexity, args["ids"].([]string)), true

	case "Mutation.bulkChangeDealsStage":
		if e.complexity.Mutation.BulkChangeDealsStage == nil {
			break
		}

		args, err := ec.field_Mutation_bulkChangeDealsStage_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.BulkChangeDealsStage(childComplexity, args["ids"].([]string), args["stage"].(crm_models.DealStageEnum)), true

	case "Mutation.bulkChangeLeadsStatus":
		if e.complexity.Mutation.BulkChangeLeadsStatus == nil {
			break
		}

		args, err := ec.field_Mutation_bulkChangeLeadsStatus_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.BulkChangeLeadsStatus(childComplexity, args["ids"].([]string), args["status"].(crm_models.LeadStatusEnum), args["comment"].(*string)), true

	case "Mutation.bulkChangeMeetsStatus":
		if e.complexity.Mutation.BulkChangeMeetsStatus == nil {
			break
		}

		args, err := ec.field_Mutation_bulkChangeMeetsStatus_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.BulkChangeMeetsStatus(childComplexity, args["ids"].([]string), args["status"].(crm_models.MeetStatusEnum)), true

	case "Mutation.bulkChangeMortgageRequestsStatus":
		if e.complexity.Mutation.BulkChangeMortgageRequestsStatus == nil {
			break
		}

		args, err := ec.field_Mutation_bulkChangeMortgageRequestsStatus_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.BulkChangeMortgageRequestsStatus(childComplexity, args["ids"].([]string), args["status"].(crm_models.MortgageRequestStatusEnum)), true

	case "Mutation.bulkCompleteTasks":
		if e.complexity.Mutation.BulkCompleteTasks == nil {
			break
		}

		args, err := ec.field_Mutation_bulkCompleteTasks_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.BulkCompleteTasks(childComplexity, args["ids"].([]string)), true

	case "Mutation.bulkDeclineProperties":
		if e.complexity.Mutation.BulkDeclineProperties == nil {
			break
		}

		args, err := ec.field_Mutation_bulkDeclineProperties_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.BulkDeclineProperties(childComplexity, args["ids"].([]string)), true

	case "Mutation.bulkDeclineReviews":
		if e.complexity.Mutation.BulkDeclineReviews == nil {
			break
		}

		args, err := ec.field_Mutation_bulkDeclineReviews_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.BulkDeclineReviews(childComplexity, args["ids"].([]string)), true

	case "Mutation.bulkDeleteComplexHouses":
		if e.complexity.Mutation.BulkDeleteComplexHouses == nil {
			break
		}

		args, err := ec.field_Mutation_bulkDeleteComplexHouses_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.BulkDeleteComplexHouses(childComplexity, args["ids"].([]string)), true

	case "Mutation.bulkDeleteComplexes":
		if e.complexity.Mutation.BulkDeleteComplexes == nil {
			break
		}

		args, err := ec.field_Mutation_bulkDeleteComplexes_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.BulkDeleteComplexes(childComplexity, args["ids"].([]string)), true

	case "Mutation.bulkDeleteContacts":
		if e.complexity.Mutation.BulkDeleteContacts == nil {
			break
		}

		args, err := ec.field_Mutation_bulkDeleteContacts_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.BulkDeleteContacts(childComplexity, args["ids"].([]string)), true

	case "Mutation.bulkDeleteDeals":
		if e.complexity.Mutation.BulkDeleteDeals == nil {
			break
		}

		args, err := ec.field_Mutation_bulkDeleteDeals_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.BulkDeleteDeals(childComplexity, args["ids"].([]string)), true

	case "Mutation.bulkDeleteDevelopers":
		if e.complexity.Mutation.BulkDeleteDevelopers == nil {
			break
		}

		args, err := ec.field_Mutation_bulkDeleteDevelopers_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.BulkDeleteDevelopers(childComplexity, args["ids"].([]string)), true

	case "Mutation.bulkDeleteLeads":
		if e.complexity.Mutation.BulkDeleteLeads == nil {
			break
		}

		args, err := ec.field_Mutation_bulkDeleteLeads_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.BulkDeleteLeads(childComplexity, args["ids"].([]string)), true

	case "Mutation.bulkDeleteMeets":
		if e.complexity.Mutation.BulkDeleteMeets == nil {
			break
		}

		args, err := ec.field_Mutation_bulkDeleteMeets_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.BulkDeleteMeets(childComplexity, args["ids"].([]string)), true

	case "Mutation.bulkDeleteMortgageRequests":
		if e.complexity.Mutation.BulkDeleteMortgageRequests == nil {
			break
		}

		args, err := ec.field_Mutation_bulkDeleteMortgageRequests_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.BulkDeleteMortgageRequests(childComplexity, args["ids"].([]string)), true

	case "Mutation.bulkDeleteProperties":
		if e.complexity.Mutation.BulkDeleteProperties == nil {
			break
		}

		args, err := ec.field_Mutation_bulkDeleteProperties_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.BulkDeleteProperties(childComplexity, args["ids"].([]string)), true

	case "Mutation.bulkDeleteReviews":
		if e.complexity.Mutation.BulkDeleteReviews == nil {
			break
		}

		args, err := ec.field_Mutation_bulkDeleteReviews_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.BulkDeleteReviews(childComplexity, args["ids"].([]string)), true

	case "Mutation.bulkDeleteTasks":
		if e.complexity.Mutation.BulkDeleteTasks == nil {
			break
		}

		args, err := ec.field_Mutation_bulkDeleteTasks_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.BulkDeleteTasks(childComplexity, args["ids"].([]string)), true

	case "Mutation.bulkDeleteVillages":
		if e.complexity.Mutation.BulkDeleteVillages == nil {
			break
		}

		args, err := ec.field_Mutation_bulkDeleteVillages_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.BulkDeleteVillages(childComplexity, args["ids"].([]string)), true

	case "Mutation.bulkRefreshProperties":
		if e.complexity.Mutation.BulkRefreshProperties == nil {
			break
		}

		args, err := ec.field_Mutation_bulkRefreshProperties_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.BulkRefreshProperties(childComplexity, args["ids"].([]string)), true

	case "Mutation.changeDealStage":
		if e.complexity.Mutation.ChangeDealStage == nil {
			break
		}

		args, err := ec.field_Mutation_changeDealStage_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ChangeDealStage(childComplexity, args["id"].(string), args["stage"].(crm_models.DealStageEnum)), true

	case "Mutation.changeLeadStatus":
		if e.complexity.Mutation.ChangeLeadStatus == nil {
			break
		}

		args, err := ec.field_Mutation_changeLeadStatus_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ChangeLeadStatus(childComplexity, args["id"].(string), args["status"].(crm_models.LeadStatusEnum), args["comment"].(*string)), true

	case "Mutation.changeMeetStatus":
		if e.complexity.Mutation.ChangeMeetStatus == nil {
			break
		}

		args, err := ec.field_Mutation_changeMeetStatus_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ChangeMeetStatus(childComplexity, args["id"].(string), args["status"].(crm_models.MeetStatusEnum)), true

	case "Mutation.changeMortgageRequestStatus":
		if e.complexity.Mutation.ChangeMortgageRequestStatus == nil {
			break
		}

		args, err := ec.field_Mutation_changeMortgageRequestStatus_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ChangeMortgageRequestStatus(childComplexity, args["id"].(string), args["status"].(crm_models.MortgageRequestStatusEnum)), true

	case "Mutation.completeTask":
		if e.complexity.Mutation.CompleteTask == nil {
			break
		}

		args, err := ec.field_Mutation_completeTask_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CompleteTask(childComplexity, args["id"].(string)), true

	case "Mutation.deactivateEmployees":
		if e.complexity.Mutation.DeactivateEmployees == nil {
			break
		}

		args, err := ec.field_Mutation_deactivateEmployees_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeactivateEmployees(childComplexity, args["ids"].([]string)), true

	case "Mutation.declineProperty":
		if e.complexity.Mutation.DeclineProperty == nil {
			break
		}

		args, err := ec.field_Mutation_declineProperty_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeclineProperty(childComplexity, args["id"].(string)), true

	case "Mutation.declineVacancyRequest":
		if e.complexity.Mutation.DeclineVacancyRequest == nil {
			break
		}

		args, err := ec.field_Mutation_declineVacancyRequest_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeclineVacancyRequest(childComplexity, args["id"].(string)), true

	case "Mutation.deleteArticle":
		if e.complexity.Mutation.DeleteArticle == nil {
			break
		}

		args, err := ec.field_Mutation_deleteArticle_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteArticle(childComplexity, args["id"].(string)), true

	case "Mutation.deleteArticleGroup":
		if e.complexity.Mutation.DeleteArticleGroup == nil {
			break
		}

		args, err := ec.field_Mutation_deleteArticleGroup_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteArticleGroup(childComplexity, args["id"].(string)), true

	case "Mutation.deleteComplex":
		if e.complexity.Mutation.DeleteComplex == nil {
			break
		}

		args, err := ec.field_Mutation_deleteComplex_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteComplex(childComplexity, args["id"].(string)), true

	case "Mutation.deleteComplexHouse":
		if e.complexity.Mutation.DeleteComplexHouse == nil {
			break
		}

		args, err := ec.field_Mutation_deleteComplexHouse_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteComplexHouse(childComplexity, args["id"].(string)), true

	case "Mutation.deleteContact":
		if e.complexity.Mutation.DeleteContact == nil {
			break
		}

		args, err := ec.field_Mutation_deleteContact_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteContact(childComplexity, args["id"].(string)), true

	case "Mutation.deleteDeal":
		if e.complexity.Mutation.DeleteDeal == nil {
			break
		}

		args, err := ec.field_Mutation_deleteDeal_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteDeal(childComplexity, args["id"].(string)), true

	case "Mutation.deleteDepartment":
		if e.complexity.Mutation.DeleteDepartment == nil {
			break
		}

		args, err := ec.field_Mutation_deleteDepartment_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteDepartment(childComplexity, args["id"].(string)), true

	case "Mutation.deleteDeveloper":
		if e.complexity.Mutation.DeleteDeveloper == nil {
			break
		}

		args, err := ec.field_Mutation_deleteDeveloper_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteDeveloper(childComplexity, args["id"].(string)), true

	case "Mutation.deleteDocument":
		if e.complexity.Mutation.DeleteDocument == nil {
			break
		}

		args, err := ec.field_Mutation_deleteDocument_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteDocument(childComplexity, args["id"].(string)), true

	case "Mutation.deleteEmployee":
		if e.complexity.Mutation.DeleteEmployee == nil {
			break
		}

		args, err := ec.field_Mutation_deleteEmployee_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteEmployee(childComplexity, args["id"].(string)), true

	case "Mutation.deleteEmployees":
		if e.complexity.Mutation.DeleteEmployees == nil {
			break
		}

		args, err := ec.field_Mutation_deleteEmployees_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteEmployees(childComplexity, args["ids"].([]string)), true

	case "Mutation.deleteImage":
		if e.complexity.Mutation.DeleteImage == nil {
			break
		}

		args, err := ec.field_Mutation_deleteImage_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteImage(childComplexity, args["id"].(string)), true

	case "Mutation.deleteLead":
		if e.complexity.Mutation.DeleteLead == nil {
			break
		}

		args, err := ec.field_Mutation_deleteLead_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteLead(childComplexity, args["id"].(string)), true

	case "Mutation.deleteMeet":
		if e.complexity.Mutation.DeleteMeet == nil {
			break
		}

		args, err := ec.field_Mutation_deleteMeet_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteMeet(childComplexity, args["id"].(string)), true

	case "Mutation.deleteMortgageRequest":
		if e.complexity.Mutation.DeleteMortgageRequest == nil {
			break
		}

		args, err := ec.field_Mutation_deleteMortgageRequest_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteMortgageRequest(childComplexity, args["id"].(string)), true

	case "Mutation.deletePage":
		if e.complexity.Mutation.DeletePage == nil {
			break
		}

		args, err := ec.field_Mutation_deletePage_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeletePage(childComplexity, args["id"].(string)), true

	case "Mutation.deletePosition":
		if e.complexity.Mutation.DeletePosition == nil {
			break
		}

		args, err := ec.field_Mutation_deletePosition_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeletePosition(childComplexity, args["id"].(string)), true

	case "Mutation.deleteProperty":
		if e.complexity.Mutation.DeleteProperty == nil {
			break
		}

		args, err := ec.field_Mutation_deleteProperty_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteProperty(childComplexity, args["id"].(string)), true

	case "Mutation.deleteReview":
		if e.complexity.Mutation.DeleteReview == nil {
			break
		}

		args, err := ec.field_Mutation_deleteReview_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteReview(childComplexity, args["id"].(string)), true

	case "Mutation.deleteRole":
		if e.complexity.Mutation.DeleteRole == nil {
			break
		}

		args, err := ec.field_Mutation_deleteRole_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteRole(childComplexity, args["id"].(string)), true

	case "Mutation.deleteStory":
		if e.complexity.Mutation.DeleteStory == nil {
			break
		}

		args, err := ec.field_Mutation_deleteStory_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteStory(childComplexity, args["id"].(string)), true

	case "Mutation.deleteTask":
		if e.complexity.Mutation.DeleteTask == nil {
			break
		}

		args, err := ec.field_Mutation_deleteTask_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteTask(childComplexity, args["id"].(string)), true

	case "Mutation.deleteVacancy":
		if e.complexity.Mutation.DeleteVacancy == nil {
			break
		}

		args, err := ec.field_Mutation_deleteVacancy_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteVacancy(childComplexity, args["id"].(string)), true

	case "Mutation.deleteVillage":
		if e.complexity.Mutation.DeleteVillage == nil {
			break
		}

		args, err := ec.field_Mutation_deleteVillage_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteVillage(childComplexity, args["id"].(string)), true

	case "Mutation.login":
		if e.complexity.Mutation.Login == nil {
			break
		}

		args, err := ec.field_Mutation_login_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.Login(childComplexity, args["email"].(string), args["password"].(string)), true

	case "Mutation.logout":
		if e.complexity.Mutation.Logout == nil {
			break
		}

		return e.complexity.Mutation.Logout(childComplexity), true

	case "Mutation.publishEmployees":
		if e.complexity.Mutation.PublishEmployees == nil {
			break
		}

		args, err := ec.field_Mutation_publishEmployees_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.PublishEmployees(childComplexity, args["ids"].([]string)), true

	case "Mutation.refreshProperty":
		if e.complexity.Mutation.RefreshProperty == nil {
			break
		}

		args, err := ec.field_Mutation_refreshProperty_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.RefreshProperty(childComplexity, args["id"].(string)), true

	case "Mutation.saveArticle":
		if e.complexity.Mutation.SaveArticle == nil {
			break
		}

		args, err := ec.field_Mutation_saveArticle_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.SaveArticle(childComplexity, args["input"].(crm_models.ArticleInput)), true

	case "Mutation.saveArticleGroup":
		if e.complexity.Mutation.SaveArticleGroup == nil {
			break
		}

		args, err := ec.field_Mutation_saveArticleGroup_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.SaveArticleGroup(childComplexity, args["input"].(crm_models.ArticleGroupInput)), true

	case "Mutation.saveComplex":
		if e.complexity.Mutation.SaveComplex == nil {
			break
		}

		args, err := ec.field_Mutation_saveComplex_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.SaveComplex(childComplexity, args["input"].(crm_models.ComplexInput)), true

	case "Mutation.saveComplexHouse":
		if e.complexity.Mutation.SaveComplexHouse == nil {
			break
		}

		args, err := ec.field_Mutation_saveComplexHouse_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.SaveComplexHouse(childComplexity, args["input"].(crm_models.ComplexHouseInput)), true

	case "Mutation.saveContact":
		if e.complexity.Mutation.SaveContact == nil {
			break
		}

		args, err := ec.field_Mutation_saveContact_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.SaveContact(childComplexity, args["input"].(crm_models.ContactInput)), true

	case "Mutation.saveDeal":
		if e.complexity.Mutation.SaveDeal == nil {
			break
		}

		args, err := ec.field_Mutation_saveDeal_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.SaveDeal(childComplexity, args["input"].(crm_models.DealInput)), true

	case "Mutation.saveDepartment":
		if e.complexity.Mutation.SaveDepartment == nil {
			break
		}

		args, err := ec.field_Mutation_saveDepartment_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.SaveDepartment(childComplexity, args["input"].(crm_models.DepartmentInput)), true

	case "Mutation.saveDeveloper":
		if e.complexity.Mutation.SaveDeveloper == nil {
			break
		}

		args, err := ec.field_Mutation_saveDeveloper_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.SaveDeveloper(childComplexity, args["input"].(crm_models.DeveloperInput)), true

	case "Mutation.saveEmployee":
		if e.complexity.Mutation.SaveEmployee == nil {
			break
		}

		args, err := ec.field_Mutation_saveEmployee_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.SaveEmployee(childComplexity, args["input"].(crm_models.EmployeeInput)), true

	case "Mutation.saveLead":
		if e.complexity.Mutation.SaveLead == nil {
			break
		}

		args, err := ec.field_Mutation_saveLead_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.SaveLead(childComplexity, args["input"].(crm_models.LeadInput)), true

	case "Mutation.saveMeet":
		if e.complexity.Mutation.SaveMeet == nil {
			break
		}

		args, err := ec.field_Mutation_saveMeet_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.SaveMeet(childComplexity, args["input"].(crm_models.MeetInput)), true

	case "Mutation.saveMortgageRequest":
		if e.complexity.Mutation.SaveMortgageRequest == nil {
			break
		}

		args, err := ec.field_Mutation_saveMortgageRequest_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.SaveMortgageRequest(childComplexity, args["input"].(crm_models.MortgageRequestInput)), true

	case "Mutation.savePage":
		if e.complexity.Mutation.SavePage == nil {
			break
		}

		args, err := ec.field_Mutation_savePage_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.SavePage(childComplexity, args["input"].(crm_models.PageInput)), true

	case "Mutation.savePosition":
		if e.complexity.Mutation.SavePosition == nil {
			break
		}

		args, err := ec.field_Mutation_savePosition_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.SavePosition(childComplexity, args["input"].(crm_models.PositionInput)), true

	case "Mutation.saveProperty":
		if e.complexity.Mutation.SaveProperty == nil {
			break
		}

		args, err := ec.field_Mutation_saveProperty_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.SaveProperty(childComplexity, args["input"].(crm_models.PropertyInput)), true

	case "Mutation.saveReview":
		if e.complexity.Mutation.SaveReview == nil {
			break
		}

		args, err := ec.field_Mutation_saveReview_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.SaveReview(childComplexity, args["input"].(crm_models.ReviewInput)), true

	case "Mutation.saveRole":
		if e.complexity.Mutation.SaveRole == nil {
			break
		}

		args, err := ec.field_Mutation_saveRole_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.SaveRole(childComplexity, args["input"].(crm_models.RoleInput)), true

	case "Mutation.saveStory":
		if e.complexity.Mutation.SaveStory == nil {
			break
		}

		args, err := ec.field_Mutation_saveStory_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.SaveStory(childComplexity, args["input"].(crm_models.StoryInput)), true

	case "Mutation.saveTask":
		if e.complexity.Mutation.SaveTask == nil {
			break
		}

		args, err := ec.field_Mutation_saveTask_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.SaveTask(childComplexity, args["input"].(crm_models.TaskInput)), true

	case "Mutation.saveVacancy":
		if e.complexity.Mutation.SaveVacancy == nil {
			break
		}

		args, err := ec.field_Mutation_saveVacancy_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.SaveVacancy(childComplexity, args["input"].(crm_models.VacancyInput)), true

	case "Mutation.saveVillage":
		if e.complexity.Mutation.SaveVillage == nil {
			break
		}

		args, err := ec.field_Mutation_saveVillage_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.SaveVillage(childComplexity, args["input"].(crm_models.VillageInput)), true

	case "Mutation.unpublishEmployees":
		if e.complexity.Mutation.UnpublishEmployees == nil {
			break
		}

		args, err := ec.field_Mutation_unpublishEmployees_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UnpublishEmployees(childComplexity, args["ids"].([]string)), true

	case "Mutation.uploadDocument":
		if e.complexity.Mutation.UploadDocument == nil {
			break
		}

		args, err := ec.field_Mutation_uploadDocument_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UploadDocument(childComplexity, args["input"].(crm_models.DocumentInput)), true

	case "Mutation.uploadImage":
		if e.complexity.Mutation.UploadImage == nil {
			break
		}

		args, err := ec.field_Mutation_uploadImage_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UploadImage(childComplexity, args["input"].(crm_models.ImageInput)), true

	case "Page.contentBlocks":
		if e.complexity.Page.ContentBlocks == nil {
			break
		}

		return e.complexity.Page.ContentBlocks(childComplexity), true

	case "Page.createdAt":
		if e.complexity.Page.CreatedAt == nil {
			break
		}

		return e.complexity.Page.CreatedAt(childComplexity), true

	case "Page.description":
		if e.complexity.Page.Description == nil {
			break
		}

		return e.complexity.Page.Description(childComplexity), true

	case "Page.id":
		if e.complexity.Page.ID == nil {
			break
		}

		return e.complexity.Page.ID(childComplexity), true

	case "Page.status":
		if e.complexity.Page.Status == nil {
			break
		}

		return e.complexity.Page.Status(childComplexity), true

	case "Page.title":
		if e.complexity.Page.Title == nil {
			break
		}

		return e.complexity.Page.Title(childComplexity), true

	case "Page.url":
		if e.complexity.Page.URL == nil {
			break
		}

		return e.complexity.Page.URL(childComplexity), true

	case "Page.updatedAt":
		if e.complexity.Page.UpdatedAt == nil {
			break
		}

		return e.complexity.Page.UpdatedAt(childComplexity), true

	case "PageConnection.edges":
		if e.complexity.PageConnection.Edges == nil {
			break
		}

		return e.complexity.PageConnection.Edges(childComplexity), true

	case "PageConnection.nodes":
		if e.complexity.PageConnection.Nodes == nil {
			break
		}

		return e.complexity.PageConnection.Nodes(childComplexity), true

	case "PageConnection.pageInfo":
		if e.complexity.PageConnection.PageInfo == nil {
			break
		}

		return e.complexity.PageConnection.PageInfo(childComplexity), true

	case "PageConnection.totalCount":
		if e.complexity.PageConnection.TotalCount == nil {
			break
		}

		return e.complexity.PageConnection.TotalCount(childComplexity), true

	case "PageEdge.cursor":
		if e.complexity.PageEdge.Cursor == nil {
			break
		}

		return e.complexity.PageEdge.Cursor(childComplexity), true

	case "PageEdge.node":
		if e.complexity.PageEdge.Node == nil {
			break
		}

		return e.complexity.PageEdge.Node(childComplexity), true

	case "PageInfo.endCursor":
		if e.complexity.PageInfo.EndCursor == nil {
			break
		}

		return e.complexity.PageInfo.EndCursor(childComplexity), true

	case "PageInfo.hasNextPage":
		if e.complexity.PageInfo.HasNextPage == nil {
			break
		}

		return e.complexity.PageInfo.HasNextPage(childComplexity), true

	case "PageInfo.hasPreviousPage":
		if e.complexity.PageInfo.HasPreviousPage == nil {
			break
		}

		return e.complexity.PageInfo.HasPreviousPage(childComplexity), true

	case "PageInfo.startCursor":
		if e.complexity.PageInfo.StartCursor == nil {
			break
		}

		return e.complexity.PageInfo.StartCursor(childComplexity), true

	case "Position.createdAt":
		if e.complexity.Position.CreatedAt == nil {
			break
		}

		return e.complexity.Position.CreatedAt(childComplexity), true

	case "Position.id":
		if e.complexity.Position.ID == nil {
			break
		}

		return e.complexity.Position.ID(childComplexity), true

	case "Position.title":
		if e.complexity.Position.Title == nil {
			break
		}

		return e.complexity.Position.Title(childComplexity), true

	case "Position.updatedAt":
		if e.complexity.Position.UpdatedAt == nil {
			break
		}

		return e.complexity.Position.UpdatedAt(childComplexity), true

	case "PositionConnection.edges":
		if e.complexity.PositionConnection.Edges == nil {
			break
		}

		return e.complexity.PositionConnection.Edges(childComplexity), true

	case "PositionConnection.nodes":
		if e.complexity.PositionConnection.Nodes == nil {
			break
		}

		return e.complexity.PositionConnection.Nodes(childComplexity), true

	case "PositionConnection.pageInfo":
		if e.complexity.PositionConnection.PageInfo == nil {
			break
		}

		return e.complexity.PositionConnection.PageInfo(childComplexity), true

	case "PositionConnection.totalCount":
		if e.complexity.PositionConnection.TotalCount == nil {
			break
		}

		return e.complexity.PositionConnection.TotalCount(childComplexity), true

	case "PositionEdge.cursor":
		if e.complexity.PositionEdge.Cursor == nil {
			break
		}

		return e.complexity.PositionEdge.Cursor(childComplexity), true

	case "PositionEdge.node":
		if e.complexity.PositionEdge.Node == nil {
			break
		}

		return e.complexity.PositionEdge.Node(childComplexity), true

	case "Property.address":
		if e.complexity.Property.Address == nil {
			break
		}

		return e.complexity.Property.Address(childComplexity), true

	case "Property.area":
		if e.complexity.Property.Area == nil {
			break
		}

		return e.complexity.Property.Area(childComplexity), true

	case "Property.cadastrNumber":
		if e.complexity.Property.CadastrNumber == nil {
			break
		}

		return e.complexity.Property.CadastrNumber(childComplexity), true

	case "Property.ceilingHeight":
		if e.complexity.Property.CeilingHeight == nil {
			break
		}

		return e.complexity.Property.CeilingHeight(childComplexity), true

	case "Property.cityDistance":
		if e.complexity.Property.CityDistance == nil {
			break
		}

		return e.complexity.Property.CityDistance(childComplexity), true

	case "Property.comissionAmount":
		if e.complexity.Property.ComissionAmount == nil {
			break
		}

		return e.complexity.Property.ComissionAmount(childComplexity), true

	case "Property.comissionPercent":
		if e.complexity.Property.ComissionPercent == nil {
			break
		}

		return e.complexity.Property.ComissionPercent(childComplexity), true

	case "Property.commercialUsage":
		if e.complexity.Property.CommercialUsage == nil {
			break
		}

		return e.complexity.Property.CommercialUsage(childComplexity), true

	case "Property.complex":
		if e.complexity.Property.Complex == nil {
			break
		}

		return e.complexity.Property.Complex(childComplexity), true

	case "Property.complexHouse":
		if e.complexity.Property.ComplexHouse == nil {
			break
		}

		return e.complexity.Property.ComplexHouse(childComplexity), true

	case "Property.createdAt":
		if e.complexity.Property.CreatedAt == nil {
			break
		}

		return e.complexity.Property.CreatedAt(childComplexity), true

	case "Property.deal":
		if e.complexity.Property.Deal == nil {
			break
		}

		return e.complexity.Property.Deal(childComplexity), true

	case "Property.description":
		if e.complexity.Property.Description == nil {
			break
		}

		return e.complexity.Property.Description(childComplexity), true

	case "Property.documents":
		if e.complexity.Property.Documents == nil {
			break
		}

		return e.complexity.Property.Documents(childComplexity), true

	case "Property.floor":
		if e.complexity.Property.Floor == nil {
			break
		}

		return e.complexity.Property.Floor(childComplexity), true

	case "Property.floors":
		if e.complexity.Property.Floors == nil {
			break
		}

		return e.complexity.Property.Floors(childComplexity), true

	case "Property.fromDeveloper":
		if e.complexity.Property.FromDeveloper == nil {
			break
		}

		return e.complexity.Property.FromDeveloper(childComplexity), true

	case "Property.id":
		if e.complexity.Property.ID == nil {
			break
		}

		return e.complexity.Property.ID(childComplexity), true

	case "Property.images":
		if e.complexity.Property.Images == nil {
			break
		}

		return e.complexity.Property.Images(childComplexity), true

	case "Property.inCity":
		if e.complexity.Property.InCity == nil {
			break
		}

		return e.complexity.Property.InCity(childComplexity), true

	case "Property.inComplex":
		if e.complexity.Property.InComplex == nil {
			break
		}

		return e.complexity.Property.InComplex(childComplexity), true

	case "Property.inVillage":
		if e.complexity.Property.InVillage == nil {
			break
		}

		return e.complexity.Property.InVillage(childComplexity), true

	case "Property.internalID":
		if e.complexity.Property.InternalID == nil {
			break
		}

		return e.complexity.Property.InternalID(childComplexity), true

	case "Property.internalInfo":
		if e.complexity.Property.InternalInfo == nil {
			break
		}

		return e.complexity.Property.InternalInfo(childComplexity), true

	case "Property.isDeleted":
		if e.complexity.Property.IsDeleted == nil {
			break
		}

		return e.complexity.Property.IsDeleted(childComplexity), true

	case "Property.isEditable":
		if e.complexity.Property.IsEditable == nil {
			break
		}

		return e.complexity.Property.IsEditable(childComplexity), true

	case "Property.isHot":
		if e.complexity.Property.IsHot == nil {
			break
		}

		return e.complexity.Property.IsHot(childComplexity), true

	case "Property.isReady":
		if e.complexity.Property.IsReady == nil {
			break
		}

		return e.complexity.Property.IsReady(childComplexity), true

	case "Property.kitchenArea":
		if e.complexity.Property.KitchenArea == nil {
			break
		}

		return e.complexity.Property.KitchenArea(childComplexity), true

	case "Property.landArea":
		if e.complexity.Property.LandArea == nil {
			break
		}

		return e.complexity.Property.LandArea(childComplexity), true

	case "Property.lat":
		if e.complexity.Property.Lat == nil {
			break
		}

		return e.complexity.Property.Lat(childComplexity), true

	case "Property.livingArea":
		if e.complexity.Property.LivingArea == nil {
			break
		}

		return e.complexity.Property.LivingArea(childComplexity), true

	case "Property.lon":
		if e.complexity.Property.Lon == nil {
			break
		}

		return e.complexity.Property.Lon(childComplexity), true

	case "Property.price":
		if e.complexity.Property.Price == nil {
			break
		}

		return e.complexity.Property.Price(childComplexity), true

	case "Property.priceHistory":
		if e.complexity.Property.PriceHistory == nil {
			break
		}

		return e.complexity.Property.PriceHistory(childComplexity), true

	case "Property.pricePerAr":
		if e.complexity.Property.PricePerAr == nil {
			break
		}

		return e.complexity.Property.PricePerAr(childComplexity), true

	case "Property.pricePerMeter":
		if e.complexity.Property.PricePerMeter == nil {
			break
		}

		return e.complexity.Property.PricePerMeter(childComplexity), true

	case "Property.readinessQuarter":
		if e.complexity.Property.ReadinessQuarter == nil {
			break
		}

		return e.complexity.Property.ReadinessQuarter(childComplexity), true

	case "Property.readinessYear":
		if e.complexity.Property.ReadinessYear == nil {
			break
		}

		return e.complexity.Property.ReadinessYear(childComplexity), true

	case "Property.refreshDate":
		if e.complexity.Property.RefreshDate == nil {
			break
		}

		return e.complexity.Property.RefreshDate(childComplexity), true

	case "Property.region":
		if e.complexity.Property.Region == nil {
			break
		}

		return e.complexity.Property.Region(childComplexity), true

	case "Property.rehabType":
		if e.complexity.Property.RehabType == nil {
			break
		}

		return e.complexity.Property.RehabType(childComplexity), true

	case "Property.rooms":
		if e.complexity.Property.Rooms == nil {
			break
		}

		return e.complexity.Property.Rooms(childComplexity), true

	case "Property.seoText":
		if e.complexity.Property.SeoText == nil {
			break
		}

		return e.complexity.Property.SeoText(childComplexity), true

	case "Property.source":
		if e.complexity.Property.Source == nil {
			break
		}

		return e.complexity.Property.Source(childComplexity), true

	case "Property.status":
		if e.complexity.Property.Status == nil {
			break
		}

		return e.complexity.Property.Status(childComplexity), true

	case "Property.subRegion":
		if e.complexity.Property.SubRegion == nil {
			break
		}

		return e.complexity.Property.SubRegion(childComplexity), true

	case "Property.subType":
		if e.complexity.Property.SubType == nil {
			break
		}

		return e.complexity.Property.SubType(childComplexity), true

	case "Property.title":
		if e.complexity.Property.Title == nil {
			break
		}

		return e.complexity.Property.Title(childComplexity), true

	case "Property.toiletType":
		if e.complexity.Property.ToiletType == nil {
			break
		}

		return e.complexity.Property.ToiletType(childComplexity), true

	case "Property.tourLink":
		if e.complexity.Property.TourLink == nil {
			break
		}

		return e.complexity.Property.TourLink(childComplexity), true

	case "Property.type":
		if e.complexity.Property.Type == nil {
			break
		}

		return e.complexity.Property.Type(childComplexity), true

	case "Property.updatedAt":
		if e.complexity.Property.UpdatedAt == nil {
			break
		}

		return e.complexity.Property.UpdatedAt(childComplexity), true

	case "Property.village":
		if e.complexity.Property.Village == nil {
			break
		}

		return e.complexity.Property.Village(childComplexity), true

	case "Property.youtubeLink":
		if e.complexity.Property.YoutubeLink == nil {
			break
		}

		return e.complexity.Property.YoutubeLink(childComplexity), true

	case "PropertyConnection.edges":
		if e.complexity.PropertyConnection.Edges == nil {
			break
		}

		return e.complexity.PropertyConnection.Edges(childComplexity), true

	case "PropertyConnection.nodes":
		if e.complexity.PropertyConnection.Nodes == nil {
			break
		}

		return e.complexity.PropertyConnection.Nodes(childComplexity), true

	case "PropertyConnection.pageInfo":
		if e.complexity.PropertyConnection.PageInfo == nil {
			break
		}

		return e.complexity.PropertyConnection.PageInfo(childComplexity), true

	case "PropertyConnection.totalCount":
		if e.complexity.PropertyConnection.TotalCount == nil {
			break
		}

		return e.complexity.PropertyConnection.TotalCount(childComplexity), true

	case "PropertyEdge.cursor":
		if e.complexity.PropertyEdge.Cursor == nil {
			break
		}

		return e.complexity.PropertyEdge.Cursor(childComplexity), true

	case "PropertyEdge.node":
		if e.complexity.PropertyEdge.Node == nil {
			break
		}

		return e.complexity.PropertyEdge.Node(childComplexity), true

	case "Query.article":
		if e.complexity.Query.Article == nil {
			break
		}

		args, err := ec.field_Query_article_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Article(childComplexity, args["id"].(string)), true

	case "Query.articleGroup":
		if e.complexity.Query.ArticleGroup == nil {
			break
		}

		args, err := ec.field_Query_articleGroup_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ArticleGroup(childComplexity, args["id"].(string)), true

	case "Query.articleGroups":
		if e.complexity.Query.ArticleGroups == nil {
			break
		}

		args, err := ec.field_Query_articleGroups_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ArticleGroups(childComplexity, args["start"].(*int), args["limit"].(*int), args["sort"].(*crm_models.Sort), args["search"].(*string)), true

	case "Query.articles":
		if e.complexity.Query.Articles == nil {
			break
		}

		args, err := ec.field_Query_articles_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Articles(childComplexity, args["ids"].([]string), args["start"].(*int), args["limit"].(*int), args["sort"].(*crm_models.Sort), args["search"].(*string), args["filter"].(*crm_models.ArticlesFilterInput)), true

	case "Query.complex":
		if e.complexity.Query.Complex == nil {
			break
		}

		args, err := ec.field_Query_complex_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Complex(childComplexity, args["id"].(string)), true

	case "Query.complexHouse":
		if e.complexity.Query.ComplexHouse == nil {
			break
		}

		args, err := ec.field_Query_complexHouse_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ComplexHouse(childComplexity, args["id"].(string)), true

	case "Query.complexHouses":
		if e.complexity.Query.ComplexHouses == nil {
			break
		}

		args, err := ec.field_Query_complexHouses_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ComplexHouses(childComplexity, args["ids"].([]string), args["start"].(*int), args["limit"].(*int), args["sort"].(*crm_models.Sort), args["search"].(*string), args["filter"].(*crm_models.ComplexHouseFilter)), true

	case "Query.complexes":
		if e.complexity.Query.Complexes == nil {
			break
		}

		args, err := ec.field_Query_complexes_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Complexes(childComplexity, args["ids"].([]string), args["start"].(*int), args["limit"].(*int), args["sort"].(*crm_models.Sort), args["search"].(*string), args["filter"].(*crm_models.ComplexFilter)), true

	case "Query.contact":
		if e.complexity.Query.Contact == nil {
			break
		}

		args, err := ec.field_Query_contact_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Contact(childComplexity, args["id"].(string)), true

	case "Query.contacts":
		if e.complexity.Query.Contacts == nil {
			break
		}

		args, err := ec.field_Query_contacts_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Contacts(childComplexity, args["ids"].([]string), args["start"].(*int), args["limit"].(*int), args["sort"].(*crm_models.Sort), args["search"].(*string), args["filter"].(*crm_models.ContactFilter)), true

	case "Query.deal":
		if e.complexity.Query.Deal == nil {
			break
		}

		args, err := ec.field_Query_deal_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Deal(childComplexity, args["id"].(string)), true

	case "Query.deals":
		if e.complexity.Query.Deals == nil {
			break
		}

		args, err := ec.field_Query_deals_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Deals(childComplexity, args["ids"].([]string), args["start"].(*int), args["limit"].(*int), args["sort"].(*crm_models.Sort), args["search"].(*string), args["filter"].(*crm_models.DealFilter)), true

	case "Query.department":
		if e.complexity.Query.Department == nil {
			break
		}

		args, err := ec.field_Query_department_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Department(childComplexity, args["id"].(string)), true

	case "Query.departments":
		if e.complexity.Query.Departments == nil {
			break
		}

		args, err := ec.field_Query_departments_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Departments(childComplexity, args["ids"].([]string), args["start"].(*int), args["limit"].(*int), args["sort"].(*crm_models.Sort), args["search"].(*string)), true

	case "Query.developer":
		if e.complexity.Query.Developer == nil {
			break
		}

		args, err := ec.field_Query_developer_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Developer(childComplexity, args["id"].(string)), true

	case "Query.developers":
		if e.complexity.Query.Developers == nil {
			break
		}

		args, err := ec.field_Query_developers_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Developers(childComplexity, args["ids"].([]string), args["start"].(*int), args["limit"].(*int), args["sort"].(*crm_models.Sort), args["search"].(*string), args["filter"].(*crm_models.DeveloperFilterInput)), true

	case "Query.employee":
		if e.complexity.Query.Employee == nil {
			break
		}

		args, err := ec.field_Query_employee_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Employee(childComplexity, args["id"].(string)), true

	case "Query.employees":
		if e.complexity.Query.Employees == nil {
			break
		}

		args, err := ec.field_Query_employees_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Employees(childComplexity, args["ids"].([]string), args["start"].(*int), args["limit"].(*int), args["sort"].(*crm_models.Sort), args["search"].(*string), args["filter"].(*crm_models.EmployeesFilterInput)), true

	case "Query.generatePdf":
		if e.complexity.Query.GeneratePDF == nil {
			break
		}

		args, err := ec.field_Query_generatePdf_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GeneratePDF(childComplexity, args["content"].(string), args["fileName"].(string)), true

	case "Query.lead":
		if e.complexity.Query.Lead == nil {
			break
		}

		args, err := ec.field_Query_lead_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Lead(childComplexity, args["id"].(string)), true

	case "Query.leads":
		if e.complexity.Query.Leads == nil {
			break
		}

		args, err := ec.field_Query_leads_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Leads(childComplexity, args["ids"].([]string), args["start"].(*int), args["limit"].(*int), args["sort"].(*crm_models.Sort), args["search"].(*string), args["filter"].(*crm_models.LeadFilter)), true

	case "Query.logs":
		if e.complexity.Query.Logs == nil {
			break
		}

		args, err := ec.field_Query_logs_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Logs(childComplexity, args["ids"].([]string), args["start"].(*int), args["limit"].(*int), args["sort"].(*crm_models.Sort), args["search"].(*string), args["filter"].(*crm_models.LogsFilterInput)), true

	case "Query.me":
		if e.complexity.Query.Me == nil {
			break
		}

		return e.complexity.Query.Me(childComplexity), true

	case "Query.meet":
		if e.complexity.Query.Meet == nil {
			break
		}

		args, err := ec.field_Query_meet_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Meet(childComplexity, args["id"].(string)), true

	case "Query.meets":
		if e.complexity.Query.Meets == nil {
			break
		}

		args, err := ec.field_Query_meets_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Meets(childComplexity, args["ids"].([]string), args["start"].(*int), args["limit"].(*int), args["sort"].(*crm_models.Sort), args["search"].(*string), args["filter"].(*crm_models.MeetFilter)), true

	case "Query.mortgageRequest":
		if e.complexity.Query.MortgageRequest == nil {
			break
		}

		args, err := ec.field_Query_mortgageRequest_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.MortgageRequest(childComplexity, args["id"].(string)), true

	case "Query.mortgageRequests":
		if e.complexity.Query.MortgageRequests == nil {
			break
		}

		args, err := ec.field_Query_mortgageRequests_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.MortgageRequests(childComplexity, args["ids"].([]string), args["start"].(*int), args["limit"].(*int), args["sort"].(*crm_models.Sort), args["search"].(*string), args["filter"].(*crm_models.MortgageRequestFilter)), true

	case "Query.page":
		if e.complexity.Query.Page == nil {
			break
		}

		args, err := ec.field_Query_page_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Page(childComplexity, args["id"].(string)), true

	case "Query.pages":
		if e.complexity.Query.Pages == nil {
			break
		}

		args, err := ec.field_Query_pages_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Pages(childComplexity, args["ids"].([]string), args["start"].(*int), args["limit"].(*int), args["sort"].(*crm_models.Sort), args["search"].(*string), args["filter"].(*crm_models.PageFilterInput)), true

	case "Query.position":
		if e.complexity.Query.Position == nil {
			break
		}

		args, err := ec.field_Query_position_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Position(childComplexity, args["id"].(string)), true

	case "Query.positions":
		if e.complexity.Query.Positions == nil {
			break
		}

		args, err := ec.field_Query_positions_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Positions(childComplexity, args["ids"].([]string), args["start"].(*int), args["limit"].(*int), args["sort"].(*crm_models.Sort), args["search"].(*string)), true

	case "Query.properties":
		if e.complexity.Query.Properties == nil {
			break
		}

		args, err := ec.field_Query_properties_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Properties(childComplexity, args["ids"].([]string), args["start"].(*int), args["limit"].(*int), args["sort"].(*crm_models.Sort), args["search"].(*string), args["filter"].(*crm_models.PropertyFilter)), true

	case "Query.property":
		if e.complexity.Query.Property == nil {
			break
		}

		args, err := ec.field_Query_property_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Property(childComplexity, args["id"].(string)), true

	case "Query.review":
		if e.complexity.Query.Review == nil {
			break
		}

		args, err := ec.field_Query_review_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Review(childComplexity, args["id"].(string)), true

	case "Query.reviews":
		if e.complexity.Query.Reviews == nil {
			break
		}

		args, err := ec.field_Query_reviews_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Reviews(childComplexity, args["ids"].([]string), args["start"].(*int), args["limit"].(*int), args["sort"].(*crm_models.Sort), args["search"].(*string), args["filter"].(*crm_models.ReviewsFilterInput)), true

	case "Query.role":
		if e.complexity.Query.Role == nil {
			break
		}

		args, err := ec.field_Query_role_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Role(childComplexity, args["id"].(string)), true

	case "Query.roles":
		if e.complexity.Query.Roles == nil {
			break
		}

		args, err := ec.field_Query_roles_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Roles(childComplexity, args["ids"].([]string), args["start"].(*int), args["limit"].(*int), args["sort"].(*crm_models.Sort), args["search"].(*string)), true

	case "Query.stories":
		if e.complexity.Query.Stories == nil {
			break
		}

		args, err := ec.field_Query_stories_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Stories(childComplexity, args["ids"].([]string), args["start"].(*int), args["limit"].(*int), args["sort"].(*crm_models.Sort), args["search"].(*string), args["filter"].(*crm_models.StoryFilterInput)), true

	case "Query.story":
		if e.complexity.Query.Story == nil {
			break
		}

		args, err := ec.field_Query_story_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Story(childComplexity, args["id"].(string)), true

	case "Query.task":
		if e.complexity.Query.Task == nil {
			break
		}

		args, err := ec.field_Query_task_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Task(childComplexity, args["id"].(string)), true

	case "Query.tasks":
		if e.complexity.Query.Tasks == nil {
			break
		}

		args, err := ec.field_Query_tasks_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Tasks(childComplexity, args["ids"].([]string), args["start"].(*int), args["limit"].(*int), args["sort"].(*crm_models.Sort), args["search"].(*string), args["filter"].(*crm_models.TaskFilter)), true

	case "Query.vacancies":
		if e.complexity.Query.Vacancies == nil {
			break
		}

		args, err := ec.field_Query_vacancies_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Vacancies(childComplexity, args["ids"].([]string), args["start"].(*int), args["limit"].(*int), args["sort"].(*crm_models.Sort), args["search"].(*string)), true

	case "Query.vacancy":
		if e.complexity.Query.Vacancy == nil {
			break
		}

		args, err := ec.field_Query_vacancy_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Vacancy(childComplexity, args["id"].(string)), true

	case "Query.vacancyRequest":
		if e.complexity.Query.VacancyRequest == nil {
			break
		}

		args, err := ec.field_Query_vacancyRequest_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.VacancyRequest(childComplexity, args["id"].(string)), true

	case "Query.vacancyRequests":
		if e.complexity.Query.VacancyRequests == nil {
			break
		}

		args, err := ec.field_Query_vacancyRequests_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.VacancyRequests(childComplexity, args["ids"].([]string), args["start"].(*int), args["limit"].(*int), args["sort"].(*crm_models.Sort), args["search"].(*string)), true

	case "Query.village":
		if e.complexity.Query.Village == nil {
			break
		}

		args, err := ec.field_Query_village_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Village(childComplexity, args["id"].(string)), true

	case "Query.villages":
		if e.complexity.Query.Villages == nil {
			break
		}

		args, err := ec.field_Query_villages_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Villages(childComplexity, args["ids"].([]string), args["start"].(*int), args["limit"].(*int), args["sort"].(*crm_models.Sort), args["search"].(*string), args["filter"].(*crm_models.VillageFilter)), true

	case "Readiness.quarter":
		if e.complexity.Readiness.Quarter == nil {
			break
		}

		return e.complexity.Readiness.Quarter(childComplexity), true

	case "Readiness.year":
		if e.complexity.Readiness.Year == nil {
			break
		}

		return e.complexity.Readiness.Year(childComplexity), true

	case "Review.authorName":
		if e.complexity.Review.AuthorName == nil {
			break
		}

		return e.complexity.Review.AuthorName(childComplexity), true

	case "Review.authorPhone":
		if e.complexity.Review.AuthorPhone == nil {
			break
		}

		return e.complexity.Review.AuthorPhone(childComplexity), true

	case "Review.createdAt":
		if e.complexity.Review.CreatedAt == nil {
			break
		}

		return e.complexity.Review.CreatedAt(childComplexity), true

	case "Review.employee":
		if e.complexity.Review.Employee == nil {
			break
		}

		return e.complexity.Review.Employee(childComplexity), true

	case "Review.id":
		if e.complexity.Review.ID == nil {
			break
		}

		return e.complexity.Review.ID(childComplexity), true

	case "Review.publicationStatus":
		if e.complexity.Review.PublicationStatus == nil {
			break
		}

		return e.complexity.Review.PublicationStatus(childComplexity), true

	case "Review.status":
		if e.complexity.Review.Status == nil {
			break
		}

		return e.complexity.Review.Status(childComplexity), true

	case "Review.text":
		if e.complexity.Review.Text == nil {
			break
		}

		return e.complexity.Review.Text(childComplexity), true

	case "Review.updatedAt":
		if e.complexity.Review.UpdatedAt == nil {
			break
		}

		return e.complexity.Review.UpdatedAt(childComplexity), true

	case "ReviewConnection.edges":
		if e.complexity.ReviewConnection.Edges == nil {
			break
		}

		return e.complexity.ReviewConnection.Edges(childComplexity), true

	case "ReviewConnection.nodes":
		if e.complexity.ReviewConnection.Nodes == nil {
			break
		}

		return e.complexity.ReviewConnection.Nodes(childComplexity), true

	case "ReviewConnection.pageInfo":
		if e.complexity.ReviewConnection.PageInfo == nil {
			break
		}

		return e.complexity.ReviewConnection.PageInfo(childComplexity), true

	case "ReviewConnection.totalCount":
		if e.complexity.ReviewConnection.TotalCount == nil {
			break
		}

		return e.complexity.ReviewConnection.TotalCount(childComplexity), true

	case "ReviewEdge.cursor":
		if e.complexity.ReviewEdge.Cursor == nil {
			break
		}

		return e.complexity.ReviewEdge.Cursor(childComplexity), true

	case "ReviewEdge.node":
		if e.complexity.ReviewEdge.Node == nil {
			break
		}

		return e.complexity.ReviewEdge.Node(childComplexity), true

	case "Role.createdAt":
		if e.complexity.Role.CreatedAt == nil {
			break
		}

		return e.complexity.Role.CreatedAt(childComplexity), true

	case "Role.id":
		if e.complexity.Role.ID == nil {
			break
		}

		return e.complexity.Role.ID(childComplexity), true

	case "Role.permissions":
		if e.complexity.Role.Permissions == nil {
			break
		}

		return e.complexity.Role.Permissions(childComplexity), true

	case "Role.title":
		if e.complexity.Role.Title == nil {
			break
		}

		return e.complexity.Role.Title(childComplexity), true

	case "Role.updatedAt":
		if e.complexity.Role.UpdatedAt == nil {
			break
		}

		return e.complexity.Role.UpdatedAt(childComplexity), true

	case "RoleConnection.edges":
		if e.complexity.RoleConnection.Edges == nil {
			break
		}

		return e.complexity.RoleConnection.Edges(childComplexity), true

	case "RoleConnection.nodes":
		if e.complexity.RoleConnection.Nodes == nil {
			break
		}

		return e.complexity.RoleConnection.Nodes(childComplexity), true

	case "RoleConnection.pageInfo":
		if e.complexity.RoleConnection.PageInfo == nil {
			break
		}

		return e.complexity.RoleConnection.PageInfo(childComplexity), true

	case "RoleConnection.totalCount":
		if e.complexity.RoleConnection.TotalCount == nil {
			break
		}

		return e.complexity.RoleConnection.TotalCount(childComplexity), true

	case "RoleEdge.cursor":
		if e.complexity.RoleEdge.Cursor == nil {
			break
		}

		return e.complexity.RoleEdge.Cursor(childComplexity), true

	case "RoleEdge.node":
		if e.complexity.RoleEdge.Node == nil {
			break
		}

		return e.complexity.RoleEdge.Node(childComplexity), true

	case "Story.category":
		if e.complexity.Story.Category == nil {
			break
		}

		return e.complexity.Story.Category(childComplexity), true

	case "Story.contentBlocks":
		if e.complexity.Story.ContentBlocks == nil {
			break
		}

		return e.complexity.Story.ContentBlocks(childComplexity), true

	case "Story.cover":
		if e.complexity.Story.Cover == nil {
			break
		}

		return e.complexity.Story.Cover(childComplexity), true

	case "Story.createdAt":
		if e.complexity.Story.CreatedAt == nil {
			break
		}

		return e.complexity.Story.CreatedAt(childComplexity), true

	case "Story.id":
		if e.complexity.Story.ID == nil {
			break
		}

		return e.complexity.Story.ID(childComplexity), true

	case "Story.status":
		if e.complexity.Story.Status == nil {
			break
		}

		return e.complexity.Story.Status(childComplexity), true

	case "Story.teaser":
		if e.complexity.Story.Teaser == nil {
			break
		}

		return e.complexity.Story.Teaser(childComplexity), true

	case "Story.title":
		if e.complexity.Story.Title == nil {
			break
		}

		return e.complexity.Story.Title(childComplexity), true

	case "Story.updatedAt":
		if e.complexity.Story.UpdatedAt == nil {
			break
		}

		return e.complexity.Story.UpdatedAt(childComplexity), true

	case "StoryConnection.edges":
		if e.complexity.StoryConnection.Edges == nil {
			break
		}

		return e.complexity.StoryConnection.Edges(childComplexity), true

	case "StoryConnection.nodes":
		if e.complexity.StoryConnection.Nodes == nil {
			break
		}

		return e.complexity.StoryConnection.Nodes(childComplexity), true

	case "StoryConnection.pageInfo":
		if e.complexity.StoryConnection.PageInfo == nil {
			break
		}

		return e.complexity.StoryConnection.PageInfo(childComplexity), true

	case "StoryConnection.totalCount":
		if e.complexity.StoryConnection.TotalCount == nil {
			break
		}

		return e.complexity.StoryConnection.TotalCount(childComplexity), true

	case "StoryEdge.cursor":
		if e.complexity.StoryEdge.Cursor == nil {
			break
		}

		return e.complexity.StoryEdge.Cursor(childComplexity), true

	case "StoryEdge.node":
		if e.complexity.StoryEdge.Node == nil {
			break
		}

		return e.complexity.StoryEdge.Node(childComplexity), true

	case "Task.assignee":
		if e.complexity.Task.Assignee == nil {
			break
		}

		return e.complexity.Task.Assignee(childComplexity), true

	case "Task.contact":
		if e.complexity.Task.Contact == nil {
			break
		}

		return e.complexity.Task.Contact(childComplexity), true

	case "Task.contactPhone":
		if e.complexity.Task.ContactPhone == nil {
			break
		}

		return e.complexity.Task.ContactPhone(childComplexity), true

	case "Task.createdAt":
		if e.complexity.Task.CreatedAt == nil {
			break
		}

		return e.complexity.Task.CreatedAt(childComplexity), true

	case "Task.deal":
		if e.complexity.Task.Deal == nil {
			break
		}

		return e.complexity.Task.Deal(childComplexity), true

	case "Task.details":
		if e.complexity.Task.Details == nil {
			break
		}

		return e.complexity.Task.Details(childComplexity), true

	case "Task.durationDays":
		if e.complexity.Task.DurationDays == nil {
			break
		}

		return e.complexity.Task.DurationDays(childComplexity), true

	case "Task.durationHours":
		if e.complexity.Task.DurationHours == nil {
			break
		}

		return e.complexity.Task.DurationHours(childComplexity), true

	case "Task.endDate":
		if e.complexity.Task.EndDate == nil {
			break
		}

		return e.complexity.Task.EndDate(childComplexity), true

	case "Task.id":
		if e.complexity.Task.ID == nil {
			break
		}

		return e.complexity.Task.ID(childComplexity), true

	case "Task.internalNumber":
		if e.complexity.Task.InternalNumber == nil {
			break
		}

		return e.complexity.Task.InternalNumber(childComplexity), true

	case "Task.isCompleted":
		if e.complexity.Task.IsCompleted == nil {
			break
		}

		return e.complexity.Task.IsCompleted(childComplexity), true

	case "Task.isDeleted":
		if e.complexity.Task.IsDeleted == nil {
			break
		}

		return e.complexity.Task.IsDeleted(childComplexity), true

	case "Task.isHot":
		if e.complexity.Task.IsHot == nil {
			break
		}

		return e.complexity.Task.IsHot(childComplexity), true

	case "Task.label":
		if e.complexity.Task.Label == nil {
			break
		}

		return e.complexity.Task.Label(childComplexity), true

	case "Task.lead":
		if e.complexity.Task.Lead == nil {
			break
		}

		return e.complexity.Task.Lead(childComplexity), true

	case "Task.property":
		if e.complexity.Task.Property == nil {
			break
		}

		return e.complexity.Task.Property(childComplexity), true

	case "Task.reporter":
		if e.complexity.Task.Reporter == nil {
			break
		}

		return e.complexity.Task.Reporter(childComplexity), true

	case "Task.startDate":
		if e.complexity.Task.StartDate == nil {
			break
		}

		return e.complexity.Task.StartDate(childComplexity), true

	case "Task.status":
		if e.complexity.Task.Status == nil {
			break
		}

		return e.complexity.Task.Status(childComplexity), true

	case "Task.tag":
		if e.complexity.Task.Tag == nil {
			break
		}

		return e.complexity.Task.Tag(childComplexity), true

	case "Task.title":
		if e.complexity.Task.Title == nil {
			break
		}

		return e.complexity.Task.Title(childComplexity), true

	case "Task.updatedAt":
		if e.complexity.Task.UpdatedAt == nil {
			break
		}

		return e.complexity.Task.UpdatedAt(childComplexity), true

	case "TaskConnection.edges":
		if e.complexity.TaskConnection.Edges == nil {
			break
		}

		return e.complexity.TaskConnection.Edges(childComplexity), true

	case "TaskConnection.nodes":
		if e.complexity.TaskConnection.Nodes == nil {
			break
		}

		return e.complexity.TaskConnection.Nodes(childComplexity), true

	case "TaskConnection.pageInfo":
		if e.complexity.TaskConnection.PageInfo == nil {
			break
		}

		return e.complexity.TaskConnection.PageInfo(childComplexity), true

	case "TaskConnection.totalCount":
		if e.complexity.TaskConnection.TotalCount == nil {
			break
		}

		return e.complexity.TaskConnection.TotalCount(childComplexity), true

	case "TaskEdge.cursor":
		if e.complexity.TaskEdge.Cursor == nil {
			break
		}

		return e.complexity.TaskEdge.Cursor(childComplexity), true

	case "TaskEdge.node":
		if e.complexity.TaskEdge.Node == nil {
			break
		}

		return e.complexity.TaskEdge.Node(childComplexity), true

	case "Vacancy.createdAt":
		if e.complexity.Vacancy.CreatedAt == nil {
			break
		}

		return e.complexity.Vacancy.CreatedAt(childComplexity), true

	case "Vacancy.description":
		if e.complexity.Vacancy.Description == nil {
			break
		}

		return e.complexity.Vacancy.Description(childComplexity), true

	case "Vacancy.experience":
		if e.complexity.Vacancy.Experience == nil {
			break
		}

		return e.complexity.Vacancy.Experience(childComplexity), true

	case "Vacancy.id":
		if e.complexity.Vacancy.ID == nil {
			break
		}

		return e.complexity.Vacancy.ID(childComplexity), true

	case "Vacancy.publicationStatus":
		if e.complexity.Vacancy.PublicationStatus == nil {
			break
		}

		return e.complexity.Vacancy.PublicationStatus(childComplexity), true

	case "Vacancy.salary":
		if e.complexity.Vacancy.Salary == nil {
			break
		}

		return e.complexity.Vacancy.Salary(childComplexity), true

	case "Vacancy.schedule":
		if e.complexity.Vacancy.Schedule == nil {
			break
		}

		return e.complexity.Vacancy.Schedule(childComplexity), true

	case "Vacancy.title":
		if e.complexity.Vacancy.Title == nil {
			break
		}

		return e.complexity.Vacancy.Title(childComplexity), true

	case "Vacancy.updatedAt":
		if e.complexity.Vacancy.UpdatedAt == nil {
			break
		}

		return e.complexity.Vacancy.UpdatedAt(childComplexity), true

	case "VacancyConnection.edges":
		if e.complexity.VacancyConnection.Edges == nil {
			break
		}

		return e.complexity.VacancyConnection.Edges(childComplexity), true

	case "VacancyConnection.nodes":
		if e.complexity.VacancyConnection.Nodes == nil {
			break
		}

		return e.complexity.VacancyConnection.Nodes(childComplexity), true

	case "VacancyConnection.pageInfo":
		if e.complexity.VacancyConnection.PageInfo == nil {
			break
		}

		return e.complexity.VacancyConnection.PageInfo(childComplexity), true

	case "VacancyConnection.totalCount":
		if e.complexity.VacancyConnection.TotalCount == nil {
			break
		}

		return e.complexity.VacancyConnection.TotalCount(childComplexity), true

	case "VacancyEdge.cursor":
		if e.complexity.VacancyEdge.Cursor == nil {
			break
		}

		return e.complexity.VacancyEdge.Cursor(childComplexity), true

	case "VacancyEdge.node":
		if e.complexity.VacancyEdge.Node == nil {
			break
		}

		return e.complexity.VacancyEdge.Node(childComplexity), true

	case "VacancyRequest.attachments":
		if e.complexity.VacancyRequest.Attachments == nil {
			break
		}

		return e.complexity.VacancyRequest.Attachments(childComplexity), true

	case "VacancyRequest.createdAt":
		if e.complexity.VacancyRequest.CreatedAt == nil {
			break
		}

		return e.complexity.VacancyRequest.CreatedAt(childComplexity), true

	case "VacancyRequest.id":
		if e.complexity.VacancyRequest.ID == nil {
			break
		}

		return e.complexity.VacancyRequest.ID(childComplexity), true

	case "VacancyRequest.internalComment":
		if e.complexity.VacancyRequest.InternalComment == nil {
			break
		}

		return e.complexity.VacancyRequest.InternalComment(childComplexity), true

	case "VacancyRequest.letter":
		if e.complexity.VacancyRequest.Letter == nil {
			break
		}

		return e.complexity.VacancyRequest.Letter(childComplexity), true

	case "VacancyRequest.name":
		if e.complexity.VacancyRequest.Name == nil {
			break
		}

		return e.complexity.VacancyRequest.Name(childComplexity), true

	case "VacancyRequest.status":
		if e.complexity.VacancyRequest.Status == nil {
			break
		}

		return e.complexity.VacancyRequest.Status(childComplexity), true

	case "VacancyRequest.updatedAt":
		if e.complexity.VacancyRequest.UpdatedAt == nil {
			break
		}

		return e.complexity.VacancyRequest.UpdatedAt(childComplexity), true

	case "VacancyRequest.vacancy":
		if e.complexity.VacancyRequest.Vacancy == nil {
			break
		}

		return e.complexity.VacancyRequest.Vacancy(childComplexity), true

	case "VacancyRequestConnection.edges":
		if e.complexity.VacancyRequestConnection.Edges == nil {
			break
		}

		return e.complexity.VacancyRequestConnection.Edges(childComplexity), true

	case "VacancyRequestConnection.nodes":
		if e.complexity.VacancyRequestConnection.Nodes == nil {
			break
		}

		return e.complexity.VacancyRequestConnection.Nodes(childComplexity), true

	case "VacancyRequestConnection.pageInfo":
		if e.complexity.VacancyRequestConnection.PageInfo == nil {
			break
		}

		return e.complexity.VacancyRequestConnection.PageInfo(childComplexity), true

	case "VacancyRequestConnection.totalCount":
		if e.complexity.VacancyRequestConnection.TotalCount == nil {
			break
		}

		return e.complexity.VacancyRequestConnection.TotalCount(childComplexity), true

	case "VacancyRequestEdge.cursor":
		if e.complexity.VacancyRequestEdge.Cursor == nil {
			break
		}

		return e.complexity.VacancyRequestEdge.Cursor(childComplexity), true

	case "VacancyRequestEdge.node":
		if e.complexity.VacancyRequestEdge.Node == nil {
			break
		}

		return e.complexity.VacancyRequestEdge.Node(childComplexity), true

	case "Village.address":
		if e.complexity.Village.Address == nil {
			break
		}

		return e.complexity.Village.Address(childComplexity), true

	case "Village.cadastrNumber":
		if e.complexity.Village.CadastrNumber == nil {
			break
		}

		return e.complexity.Village.CadastrNumber(childComplexity), true

	case "Village.cityDistance":
		if e.complexity.Village.CityDistance == nil {
			break
		}

		return e.complexity.Village.CityDistance(childComplexity), true

	case "Village.createdAt":
		if e.complexity.Village.CreatedAt == nil {
			break
		}

		return e.complexity.Village.CreatedAt(childComplexity), true

	case "Village.description":
		if e.complexity.Village.Description == nil {
			break
		}

		return e.complexity.Village.Description(childComplexity), true

	case "Village.developer":
		if e.complexity.Village.Developer == nil {
			break
		}

		return e.complexity.Village.Developer(childComplexity), true

	case "Village.documents":
		if e.complexity.Village.Documents == nil {
			break
		}

		return e.complexity.Village.Documents(childComplexity), true

	case "Village.id":
		if e.complexity.Village.ID == nil {
			break
		}

		return e.complexity.Village.ID(childComplexity), true

	case "Village.images":
		if e.complexity.Village.Images == nil {
			break
		}

		return e.complexity.Village.Images(childComplexity), true

	case "Village.inCity":
		if e.complexity.Village.InCity == nil {
			break
		}

		return e.complexity.Village.InCity(childComplexity), true

	case "Village.internalInfo":
		if e.complexity.Village.InternalInfo == nil {
			break
		}

		return e.complexity.Village.InternalInfo(childComplexity), true

	case "Village.isDeleted":
		if e.complexity.Village.IsDeleted == nil {
			break
		}

		return e.complexity.Village.IsDeleted(childComplexity), true

	case "Village.isReady":
		if e.complexity.Village.IsReady == nil {
			break
		}

		return e.complexity.Village.IsReady(childComplexity), true

	case "Village.lat":
		if e.complexity.Village.Lat == nil {
			break
		}

		return e.complexity.Village.Lat(childComplexity), true

	case "Village.lon":
		if e.complexity.Village.Lon == nil {
			break
		}

		return e.complexity.Village.Lon(childComplexity), true

	case "Village.projectDeclarations":
		if e.complexity.Village.ProjectDeclarations == nil {
			break
		}

		return e.complexity.Village.ProjectDeclarations(childComplexity), true

	case "Village.publicationStatus":
		if e.complexity.Village.PublicationStatus == nil {
			break
		}

		return e.complexity.Village.PublicationStatus(childComplexity), true

	case "Village.readinessQuarter":
		if e.complexity.Village.ReadinessQuarter == nil {
			break
		}

		return e.complexity.Village.ReadinessQuarter(childComplexity), true

	case "Village.readinessYear":
		if e.complexity.Village.ReadinessYear == nil {
			break
		}

		return e.complexity.Village.ReadinessYear(childComplexity), true

	case "Village.region":
		if e.complexity.Village.Region == nil {
			break
		}

		return e.complexity.Village.Region(childComplexity), true

	case "Village.seoText":
		if e.complexity.Village.SeoText == nil {
			break
		}

		return e.complexity.Village.SeoText(childComplexity), true

	case "Village.subRegion":
		if e.complexity.Village.SubRegion == nil {
			break
		}

		return e.complexity.Village.SubRegion(childComplexity), true

	case "Village.title":
		if e.complexity.Village.Title == nil {
			break
		}

		return e.complexity.Village.Title(childComplexity), true

	case "Village.tourLink":
		if e.complexity.Village.TourLink == nil {
			break
		}

		return e.complexity.Village.TourLink(childComplexity), true

	case "Village.updatedAt":
		if e.complexity.Village.UpdatedAt == nil {
			break
		}

		return e.complexity.Village.UpdatedAt(childComplexity), true

	case "Village.youtubeLink":
		if e.complexity.Village.YoutubeLink == nil {
			break
		}

		return e.complexity.Village.YoutubeLink(childComplexity), true

	case "VillageConnection.edges":
		if e.complexity.VillageConnection.Edges == nil {
			break
		}

		return e.complexity.VillageConnection.Edges(childComplexity), true

	case "VillageConnection.nodes":
		if e.complexity.VillageConnection.Nodes == nil {
			break
		}

		return e.complexity.VillageConnection.Nodes(childComplexity), true

	case "VillageConnection.pageInfo":
		if e.complexity.VillageConnection.PageInfo == nil {
			break
		}

		return e.complexity.VillageConnection.PageInfo(childComplexity), true

	case "VillageConnection.totalCount":
		if e.complexity.VillageConnection.TotalCount == nil {
			break
		}

		return e.complexity.VillageConnection.TotalCount(childComplexity), true

	case "VillageEdge.cursor":
		if e.complexity.VillageEdge.Cursor == nil {
			break
		}

		return e.complexity.VillageEdge.Cursor(childComplexity), true

	case "VillageEdge.node":
		if e.complexity.VillageEdge.Node == nil {
			break
		}

		return e.complexity.VillageEdge.Node(childComplexity), true

	}
	return 0, false
}

func (e *executableSchema) Exec(ctx context.Context) graphql.ResponseHandler {
	rc := graphql.GetOperationContext(ctx)
	ec := executionContext{rc, e, 0, 0, make(chan graphql.DeferredResult)}
	inputUnmarshalMap := graphql.BuildUnmarshalerMap(
		ec.unmarshalInputArticleGroupInput,
		ec.unmarshalInputArticleInput,
		ec.unmarshalInputArticlesFilterInput,
		ec.unmarshalInputComplexFilter,
		ec.unmarshalInputComplexHouseFilter,
		ec.unmarshalInputComplexHouseInput,
		ec.unmarshalInputComplexInput,
		ec.unmarshalInputContactFilter,
		ec.unmarshalInputContactInput,
		ec.unmarshalInputContentBlockInput,
		ec.unmarshalInputDealFilter,
		ec.unmarshalInputDealInput,
		ec.unmarshalInputDepartmentGroupInput,
		ec.unmarshalInputDepartmentInput,
		ec.unmarshalInputDeveloperFilterInput,
		ec.unmarshalInputDeveloperInput,
		ec.unmarshalInputDocumentInput,
		ec.unmarshalInputEmployeeInput,
		ec.unmarshalInputEmployeesFilterInput,
		ec.unmarshalInputImageInput,
		ec.unmarshalInputLeadFilter,
		ec.unmarshalInputLeadInput,
		ec.unmarshalInputLogsFilterInput,
		ec.unmarshalInputMeetFilter,
		ec.unmarshalInputMeetInput,
		ec.unmarshalInputMortgageRequestFilter,
		ec.unmarshalInputMortgageRequestInput,
		ec.unmarshalInputPageFilterInput,
		ec.unmarshalInputPageInput,
		ec.unmarshalInputPaginationInput,
		ec.unmarshalInputPositionInput,
		ec.unmarshalInputPropertyFilter,
		ec.unmarshalInputPropertyInput,
		ec.unmarshalInputReadinessInput,
		ec.unmarshalInputReviewInput,
		ec.unmarshalInputReviewsFilterInput,
		ec.unmarshalInputRoleInput,
		ec.unmarshalInputSort,
		ec.unmarshalInputStoryFilterInput,
		ec.unmarshalInputStoryInput,
		ec.unmarshalInputTaskFilter,
		ec.unmarshalInputTaskInput,
		ec.unmarshalInputVacancyInput,
		ec.unmarshalInputVillageFilter,
		ec.unmarshalInputVillageInput,
	)
	first := true

	switch rc.Operation.Operation {
	case ast.Query:
		return func(ctx context.Context) *graphql.Response {
			var response graphql.Response
			var data graphql.Marshaler
			if first {
				first = false
				ctx = graphql.WithUnmarshalerMap(ctx, inputUnmarshalMap)
				data = ec._Query(ctx, rc.Operation.SelectionSet)
			} else {
				if atomic.LoadInt32(&ec.pendingDeferred) > 0 {
					result := <-ec.deferredResults
					atomic.AddInt32(&ec.pendingDeferred, -1)
					data = result.Result
					response.Path = result.Path
					response.Label = result.Label
					response.Errors = result.Errors
				} else {
					return nil
				}
			}
			var buf bytes.Buffer
			data.MarshalGQL(&buf)
			response.Data = buf.Bytes()
			if atomic.LoadInt32(&ec.deferred) > 0 {
				hasNext := atomic.LoadInt32(&ec.pendingDeferred) > 0
				response.HasNext = &hasNext
			}

			return &response
		}
	case ast.Mutation:
		return func(ctx context.Context) *graphql.Response {
			if !first {
				return nil
			}
			first = false
			ctx = graphql.WithUnmarshalerMap(ctx, inputUnmarshalMap)
			data := ec._Mutation(ctx, rc.Operation.SelectionSet)
			var buf bytes.Buffer
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}

	default:
		return graphql.OneShot(graphql.ErrorResponse(ctx, "unsupported GraphQL operation"))
	}
}

type executionContext struct {
	*graphql.OperationContext
	*executableSchema
	deferred        int32
	pendingDeferred int32
	deferredResults chan graphql.DeferredResult
}

func (ec *executionContext) processDeferredGroup(dg graphql.DeferredGroup) {
	atomic.AddInt32(&ec.pendingDeferred, 1)
	go func() {
		ctx := graphql.WithFreshResponseContext(dg.Context)
		dg.FieldSet.Dispatch(ctx)
		ds := graphql.DeferredResult{
			Path:   dg.Path,
			Label:  dg.Label,
			Result: dg.FieldSet,
			Errors: graphql.GetErrors(ctx),
		}
		// null fields should bubble up
		if dg.FieldSet.Invalids > 0 {
			ds.Result = graphql.Null
		}
		ec.deferredResults <- ds
	}()
}

func (ec *executionContext) introspectSchema() (*introspection.Schema, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapSchema(ec.Schema()), nil
}

func (ec *executionContext) introspectType(name string) (*introspection.Type, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapTypeFromDef(ec.Schema(), ec.Schema().Types[name]), nil
}

var sources = []*ast.Source{
	{Name: "../schema/_shared.graphql", Input: `#
# Custom Scalars
#

scalar Time
scalar Upload
scalar Cursor
scalar JSON

#
# Directives
#

directive @goModel(
  model: String
  models: [String!]
  forceGenerate: Boolean
) on OBJECT | INPUT_OBJECT | SCALAR | ENUM | ENUM_VALUE | INTERFACE | UNION

directive @goField(
  forceResolver: Boolean
  name: String
  omittable: Boolean
) on INPUT_FIELD_DEFINITION | FIELD_DEFINITION

directive @goTag(
  key: String!
  value: String
) on INPUT_FIELD_DEFINITION | FIELD_DEFINITION

directive @goExtraField(
  name: String
  type: String!
  overrideTags: String
  description: String
) on OBJECT | INPUT_OBJECT

directive @hasPermission(permission: String!) on FIELD_DEFINITION

directive @auth on FIELD_DEFINITION

directive @validate(
  constraint: String!
) on INPUT_FIELD_DEFINITION | ARGUMENT_DEFINITION

"""
Направления сортировки
"""
enum SortDirection {
  """
  По возрастанию
  """
  ASC
  """
  По убыванию
  """
  DESC
}

"""
Режим сортировки для списочных методов
"""
input Sort {
  """
  Поле, по которому производится сортировка
  """
  field: String = "id"
  """
  Направление сортировки по выбранному полю
  """
  direction: SortDirection = ASC
}

"""
Статус публикации
"""
enum PublicationStatusEnum {
  """
  Запись опубликована
  """
  PUBLISHED
  """
  Черновик
  """
  DRAFT
  """
  Запись снята с публикации
  """
  UNPUBLISHED
}

type Readiness {
  year: Int
  quarter: Int
}

input ReadinessInput {
  year: Int
  quarter: Int
}

# Interfaces

interface Node {
  id: ID!
}

# Pagination

type PageInfo {
  startCursor: Cursor
  endCursor: Cursor
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
}

input PaginationInput {
  first: Int
  last: Int
  after: Cursor
  before: Cursor
}

enum QuarterEnum {
  I
  II
  III
  IV
}

enum StatusCodeEnum {
	STATUS_010100
	STATUS_010101
	STATUS_010102
	STATUS_010103

	STATUS_010200

	STATUS_010300
	STATUS_010301
	STATUS_010302

	STATUS_010400
	STATUS_010401
	STATUS_010402

	STATUS_010500
	STATUS_010501
	STATUS_010502

	STATUS_010600
	STATUS_010601
	STATUS_010602

	STATUS_010700
	STATUS_010701
	STATUS_010702

	STATUS_010800
	STATUS_010801
	STATUS_010802

	STATUS_010900
	STATUS_010901
	STATUS_010902
    STATUS_010903

	STATUS_011000
	STATUS_011001
	STATUS_011002
	STATUS_011003
	STATUS_011004

	STATUS_011100
	STATUS_011101
	STATUS_011102

	STATUS_011200
	STATUS_011201
	STATUS_011202

	STATUS_011300
	STATUS_011301
	STATUS_011302

	STATUS_011400
	STATUS_011401
	STATUS_011402

	STATUS_011500
	STATUS_011501
	STATUS_011502

	STATUS_011600
	STATUS_011601
	STATUS_011602

	STATUS_011700
	STATUS_011701
	STATUS_011702

	STATUS_011800
	STATUS_011801
	STATUS_011802

	STATUS_011900
	STATUS_011901
	STATUS_011902
	STATUS_011903

	STATUS_012000
	STATUS_012001
	STATUS_012002
	STATUS_012003
    STATUS_012004
	STATUS_012005
	STATUS_012006
	STATUS_012007
	STATUS_012008

	STATUS_012100
	STATUS_012101
	STATUS_012102
	STATUS_012103

	STATUS_012200
	STATUS_012201
	STATUS_012202
    STATUS_012203

	STATUS_020100
	STATUS_020101
	STATUS_020102

	STATUS_020200
	STATUS_020201
	STATUS_020202

	STATUS_020300
	STATUS_020301
	STATUS_020302

	STATUS_020400
	STATUS_020401
	STATUS_020402

	STATUS_020500
	STATUS_020501
	STATUS_020502

	STATUS_020600
	STATUS_020601
	STATUS_020602

	STATUS_020700
	STATUS_020701
	STATUS_020702

	STATUS_020800
	STATUS_020801
	STATUS_020802

	STATUS_020900
	STATUS_020901
	STATUS_020902

	STATUS_021000
	STATUS_021001
	STATUS_021002

	STATUS_021100
	STATUS_021101
	STATUS_021102

	STATUS_021200
	STATUS_021201
	STATUS_021202

	STATUS_021300
	STATUS_021301
	STATUS_021302

	STATUS_021400
	STATUS_021401
	STATUS_021402

	STATUS_021500
	STATUS_021501
	STATUS_021502

	STATUS_021600
	STATUS_021601
	STATUS_021602

	STATUS_021700
	STATUS_021701
	STATUS_021702

	STATUS_021800
	STATUS_021801
	STATUS_021802

	STATUS_021900
	STATUS_021901
	STATUS_021902

	STATUS_022000
	STATUS_022001
	STATUS_022002

	STATUS_022100

	STATUS_022200
	STATUS_022201
	STATUS_022202

	STATUS_022300
	STATUS_022301
	STATUS_022302

	STATUS_022400
	STATUS_022401
	STATUS_022402

	STATUS_022500
	STATUS_022501
	STATUS_022502

	STATUS_030100
	STATUS_030101
	STATUS_030102

	STATUS_030200
	STATUS_030201
	STATUS_030202

	STATUS_030300
	STATUS_030301
	STATUS_030302

	STATUS_030400
	STATUS_030401
	STATUS_030402

	STATUS_030500
	STATUS_030501
	STATUS_030502

	STATUS_030600
	STATUS_030601
	STATUS_030602

	STATUS_030700
	STATUS_030701
	STATUS_030702

	STATUS_030800
	STATUS_030801
	STATUS_030802

	STATUS_030900
	STATUS_030901
	STATUS_030902

	STATUS_031000
	STATUS_031001
	STATUS_031002

	STATUS_031100
	STATUS_031101
	STATUS_031102

	STATUS_031200
	STATUS_031201
	STATUS_031202

	STATUS_031300
	STATUS_031301
	STATUS_031302

	STATUS_031400
	STATUS_031401
	STATUS_031402

	STATUS_031500
	STATUS_031501
	STATUS_031502

	STATUS_031600
	STATUS_031601
	STATUS_031602

	STATUS_031700
	STATUS_031701
	STATUS_031702

	STATUS_031800
	STATUS_031801
	STATUS_031802

	STATUS_031900
	STATUS_031901
	STATUS_031902

	STATUS_032000
	STATUS_032001
	STATUS_032002

	STATUS_032100
	STATUS_032101
	STATUS_032102

	STATUS_032200
	STATUS_032201
	STATUS_032202

	STATUS_032300
	STATUS_032301
	STATUS_032302

	STATUS_032400
	STATUS_032401
	STATUS_032402

	STATUS_032500
	STATUS_032501
	STATUS_032502

	STATUS_032600
	STATUS_032601
	STATUS_032602

	STATUS_032700
	STATUS_032701
	STATUS_032702

	STATUS_032800
	STATUS_032801
	STATUS_032802

	STATUS_032900
	STATUS_032901
	STATUS_032902

	STATUS_033000
	STATUS_033001
	STATUS_033002

	STATUS_033100
	STATUS_033101
	STATUS_033102

	STATUS_033200
	STATUS_033201
	STATUS_033202

	STATUS_033300
	STATUS_033301
	STATUS_033302

	STATUS_033400
	STATUS_033401
	STATUS_033402
}
`, BuiltIn: false},
	{Name: "../schema/articleGroups.graphql", Input: `#
# Выходные типы
#

type ArticleGroup {
  id: ID!
  title: String!
  createdAt: Time!
  updatedAt: Time!
}

#
# Выдача списочного результата
#

type ArticleGroupConnection {
  totalCount: Int!
  edges: [ArticleGroupEdge!]!
  nodes: [ArticleGroup!]!
  pageInfo: PageInfo!
}

type ArticleGroupEdge {
  node: ArticleGroup!
  cursor: Cursor!
}

#
# Входные типы
#

input ArticleGroupInput {
  """
  Уникальный идентификатор
  При отсутствии будет создан автоматически
  """
  id: ID @validate(constraint: "mongodb")
  title: String!
}

#
# Структура запросов
#

extend type Query {
  articleGroups(
    """
    Начало для постраничной навигации
    """
    start: Int @validate(constraint: "number,gte=0")
    """
    Количество элементов для постраничной навигации
    """
    limit: Int @validate(constraint: "number,gte=1")
    """
    Режим сортировки
    """
    sort: Sort
    """
    Ключевые слова для полнотекстового поиска
    """
    search: String @validate(constraint: "min=3,max=32")
  ): ArticleGroupConnection! @auth

  articleGroup(
    id: ID! @validate(constraint: "required,mongodb")
  ): ArticleGroup! @auth
}

extend type Mutation {
  saveArticleGroup(input: ArticleGroupInput!): Boolean!
    @hasPermission(permission: "CONTENT_SAVE_ARTICLE_GROUP")

  deleteArticleGroup(id: ID!): Boolean!
    @hasPermission(permission: "CONTENT_DELETE_ARTICLE_GROUP")
}
`, BuiltIn: false},
	{Name: "../schema/articles.graphql", Input: `#
# Выходные типы
#

type Article {
  id: ID!
  group: ArticleGroup @goField(forceResolver: true)
  title: String!
  contentBlocks: [ContentBlock!]!
  status: PublicationStatusEnum!
  cover: Image @goField(forceResolver: true)
  createdAt: Time!
  updatedAt: Time!
}

#
# Выдача списочного результата
#

type ArticleConnection {
  totalCount: Int!
  edges: [ArticleEdge!]!
  nodes: [Article!]!
  pageInfo: PageInfo!
}

type ArticleEdge {
  node: Article!
  cursor: Cursor!
}

#
# Входные типы
#

input ArticlesFilterInput {
  groupID: ID @validate(constraint: "mongodb")
  status: PublicationStatusEnum
}

input ArticleInput {
  """
  Уникальный идентификатор
  При отсутствии будет создан автоматически
  """
  id: ID @validate(constraint: "mongodb")
  groupID: ID!
  title: String!
  contentBlocks: [ContentBlockInput!]!
  status: PublicationStatusEnum!
  cover: ImageInput @goField(forceResolver: true)
}

#
# Структура запросов
#

extend type Query {
  articles(
    """
    Перечень идентификаторов для ограничения выборки
    """
    ids: [ID!] @validate(constraint: "dive,required,mongodb")
    """
    Начало для постраничной навигации
    """
    start: Int @validate(constraint: "number,gte=0")
    """
    Количество элементов для постраничной навигации
    """
    limit: Int @validate(constraint: "number,gte=1")
    """
    Режим сортировки
    """
    sort: Sort
    """
    Ключевые слова для полнотекстового поиска
    """
    search: String @validate(constraint: "min=3,max=32")
    filter: ArticlesFilterInput
  ): ArticleConnection! @auth

  article(id: ID! @validate(constraint: "required,mongodb")): Article! @auth
}

extend type Mutation {
  saveArticle(input: ArticleInput!): Boolean!
    @hasPermission(permission: "CONTENT_SAVE_ARTICLE")

  deleteArticle(id: ID!): Boolean!
    @hasPermission(permission: "CONTENT_DELETE_ARTICLE")
}
`, BuiltIn: false},
	{Name: "../schema/auth.graphql", Input: `"""
Результат аутентификации
"""
type LoginOutput {
  """
  JWT-токен пользователя
  """
  token: String!
  """
  Сведения о текущем пользователе
  """
  me: Me!
}

"""
Сведения о текущем пользователе
"""
type Me {
  """
  Уникальный идентификатор
  """
  id: ID!
  """
  Имя пользователя
  """
  name: String
  """
  Фамилия пользователя
  """
  surname: String
  """
  Основное изображение профиля пользователя
  """
  avatar: Image
}

extend type Query {
  """
  Получение информации о текущем пользователе
  """
  me: Me! @auth
}

extend type Mutation {
  """
  Аутентификация по e-mail и паролю
  """
  login(
    email: String! @validate(constraint: "required,email")
    password: String! @validate(constraint: "required,min=4,max=32")
  ): LoginOutput!

  """
  Выход из системы и завершение сессии пользователя
  """
  logout: Boolean! @auth
}
`, BuiltIn: false},
	{Name: "../schema/banks.graphql", Input: `type Bank {
    id: ID!
    title: String
}`, BuiltIn: false},
	{Name: "../schema/complexHouses.graphql", Input: `type ComplexHouse {
  id: ID!

  complex: Complex @goField(forceResolver: true)

  title: String!
  description: String!
  address: String!
  lat: Float
  lon: Float
  cadastrNumber: String
  seoText: String
  youtubeLink: String
  tourLink: String

  isReady: Boolean
  readinessQuarter: QuarterEnum
  readinessYear: Int

  images: [Image!] @goField(forceResolver: true)
  documents: [Document!] @goField(forceResolver: true)
  projectDeclarations: [Document!] @goField(forceResolver: true)

  publicationStatus: PublicationStatusEnum

  internalInfo: String

  isDeleted: Boolean

  createdAt: Time!
  updatedAt: Time!
}

type ComplexHouseConnection {
  totalCount: Int!
  edges: [ComplexHouseEdge!]!
  nodes: [ComplexHouse!]!
  pageInfo: PageInfo!
}

type ComplexHouseEdge {
  node: ComplexHouse!
  cursor: Cursor!
}

input ComplexHouseInput {
  id: ID @validate(constraint: "omitempty,mongodb")

  complexID: ID @validate(constraint: "omitempty,mongodb")

  title: String! @validate(constraint: "required,min=3,max=256")
  description: String! @validate(constraint: "required,min=3,max=4096")
  address: String! @validate(constraint: "required,min=3,max=256")
  lat: Float @validate(constraint: "omitempty,latitude")
  lon: Float @validate(constraint: "omitempty,longitude")
  cadastrNumber: String @validate(constraint: "omitempty,max=20")
  seoText: String @validate(constraint: "omitempty,max=1024")
  youtubeLink: String @validate(constraint: "omitempty,url")
  tourLink: String @validate(constraint: "omitempty,url")

  isReady: Boolean @validate(constraint: "omitempty,boolean")
  readinessQuarter: QuarterEnum @validate(constraint: "omitempty")
  readinessYear: Int @validate(constraint: "omitempty,gte=1800,lte=3000")

  images: [ImageInput!] @validate(constraint: "omitempty")
  documents: [DocumentInput!] @validate(constraint: "omitempty")
  projectDeclarations: [DocumentInput!] @validate(constraint: "omitempty")

  publicationStatus: PublicationStatusEnum @validate(constraint: "omitempty")

  internalInfo: String @validate(constraint: "omitempty,max=256")
}

input ComplexHouseFilter {
  complexID: ID @validate(constraint: "mongodb")
  isDeleted: Boolean @validate(constraint: "boolean")
  publicationStatus: PublicationStatusEnum
  withPhotos: Boolean @validate(constraint: "boolean")
}

extend type Query {
  """
  Запрос списка ЖК
  """
  complexHouses(
    """
    Перечень идентификаторов для ограничения выборки
    """
    ids: [ID!] @validate(constraint: "dive,required,mongodb")
    """
    Начало для постраничной навигации
    """
    start: Int @validate(constraint: "number,gte=0")
    """
    Количество элементов для постраничной навигации
    """
    limit: Int @validate(constraint: "number,gte=1")
    """
    Режим сортировки
    """
    sort: Sort
    """
    Ключевые слова для полнотекстового поиска
    """
    search: String @validate(constraint: "max=32")
    """
    Дополнительные параметры фильтрации
    """
    filter: ComplexHouseFilter
  ): ComplexHouseConnection! @auth

  """
  Запрос ЖК по идентификатору
  """
  complexHouse(
    id: ID! @validate(constraint: "required,mongodb")
  ): ComplexHouse! @auth
}

extend type Mutation {
  """
  Создание/Редактирование новостройки
  """
  saveComplexHouse(input: ComplexHouseInput!): Boolean! @auth

  """
  Удаление новостройки по идентификатору
  """
  deleteComplexHouse(id: ID!): Boolean! @auth

  """
  Массовое удаление новостройки по идентификаторам
  """
  bulkDeleteComplexHouses(ids: [ID!]!): Boolean! @auth
}
`, BuiltIn: false},
	{Name: "../schema/complexes.graphql", Input: `type Complex {
  id: ID!

  title: String!
  description: String!
  address: String!
  lat: Float
  lon: Float
  cadastrNumber: String
  seoText: String
  youtubeLink: String
  tourLink: String

  inCity: Boolean
  cityDistance: Int
  region: String
  subRegion: String

  developer: Developer @goField(forceResolver: true)

  isReady: Boolean
  readinessQuarter: QuarterEnum
  readinessYear: Int

  images: [Image!] @goField(forceResolver: true)
  documents: [Document!] @goField(forceResolver: true)
  projectDeclarations: [Document!] @goField(forceResolver: true)

  publicationStatus: PublicationStatusEnum

  internalInfo: String

  isDeleted: Boolean

  createdAt: Time!
  updatedAt: Time!
}

type ComplexConnection {
  totalCount: Int!
  edges: [ComplexEdge!]!
  nodes: [Complex!]!
  pageInfo: PageInfo!
}

type ComplexEdge {
  node: Complex!
  cursor: Cursor!
}

input ComplexInput {
  id: ID @validate(constraint: "omitempty,mongodb")

  title: String! @validate(constraint: "required,min=3,max=256")
  description: String! @validate(constraint: "required,min=3,max=4096")
  address: String! @validate(constraint: "required,min=3,max=256")
  lat: Float @validate(constraint: "omitempty,latitude")
  lon: Float @validate(constraint: "omitempty,longitude")
  cadastrNumber: String @validate(constraint: "omitempty,max=20")
  seoText: String @validate(constraint: "omitempty,max=1024")
  youtubeLink: String @validate(constraint: "omitempty,url")
  tourLink: String @validate(constraint: "omitempty,url")

  inCity: Boolean @validate(constraint: "omitempty,boolean")
  cityDistance: Int @validate(constraint: "omitempty,gte=0")
  region: String @validate(constraint: "omitempty,max=256")
  subRegion: String @validate(constraint: "omitempty,max=256")

  developerID: ID @validate(constraint: "omitempty,mongodb")

  isReady: Boolean @validate(constraint: "omitempty,boolean")
  readinessQuarter: QuarterEnum @validate(constraint: "omitempty")
  readinessYear: Int @validate(constraint: "omitempty,gte=1800,lte=3000")

  images: [ImageInput!] @validate(constraint: "omitempty")
  documents: [DocumentInput!] @validate(constraint: "omitempty")
  projectDeclarations: [DocumentInput!] @validate(constraint: "omitempty")

  publicationStatus: PublicationStatusEnum @validate(constraint: "omitempty")

  internalInfo: String @validate(constraint: "omitempty,max=256")
}

input ComplexFilter {
  developerID: ID @validate(constraint: "mongodb")
  isDeleted: Boolean @validate(constraint: "boolean")
  publicationStatus: PublicationStatusEnum
  withPhotos: Boolean @validate(constraint: "boolean")
}

extend type Query {
  """
  Запрос списка ЖК
  """
  complexes(
    """
    Перечень идентификаторов для ограничения выборки
    """
    ids: [ID!] @validate(constraint: "dive,required,mongodb")
    """
    Начало для постраничной навигации
    """
    start: Int @validate(constraint: "number,gte=0")
    """
    Количество элементов для постраничной навигации
    """
    limit: Int @validate(constraint: "number,gte=1")
    """
    Режим сортировки
    """
    sort: Sort
    """
    Ключевые слова для полнотекстового поиска
    """
    search: String @validate(constraint: "max=32")
    """
    Дополнительные параметры фильтрации
    """
    filter: ComplexFilter
  ): ComplexConnection! @auth

  """
  Запрос ЖК по идентификатору
  """
  complex(id: ID! @validate(constraint: "required,mongodb")): Complex! @auth
}

extend type Mutation {
  """
  Создание/Редактирование ЖК
  """
  saveComplex(input: ComplexInput!): Boolean! @auth

  """
  Удаление ЖК по идентификатору
  """
  deleteComplex(id: ID!): Boolean! @auth

  """
  Массовое удаление ЖК по идентификаторам
  """
  bulkDeleteComplexes(ids: [ID!]!): Boolean! @auth
}
`, BuiltIn: false},
	{Name: "../schema/contacts.graphql", Input: `enum CounterPartyTypeEnum {
  SALER
  BUYER
  BOTH
}

enum ContactSourceEnum {
  SOURCE
}

type Contact {
  id: ID!
  internalNumber: Int
  type: CounterPartyTypeEnum
  source: ContactSourceEnum
  name: String
  surname: String
  patronymic: String
  birthday: Time
  phone: String
  additionalPhones: [String!]
  email: String
  company: String
  address: String
  properties: [Property!]
  passportNumber: String
  passportIssuedBy: String
  passportIssueDate: Time
  passportIssuerCode: String
  internalInfo: String
  note: String
  deals: [Deal!]
  agents: [Employee!]
  contracts: [Document!]
  documents: [Document!]
  lead: Lead
  isDeleted: Boolean!
  createdAt: Time!
  updatedAt: Time!
}

type ContactConnection {
  totalCount: Int!
  edges: [ContactEdge!]!
  nodes: [Contact!]!
  pageInfo: PageInfo!
}

type ContactEdge {
  node: Contact!
  cursor: Cursor!
}

input ContactInput {
  id: ID @validate(constraint: "omitempty,mongodb")
  type: CounterPartyTypeEnum @validate(constraint: "omitempty")
  source: ContactSourceEnum @validate(constraint: "omitempty")
  name: String! @validate(constraint: "required,max=100")
  surname: String! @validate(constraint: "required,max=100")
  patronymic: String @validate(constraint: "max=100,omitempty")
  birthday: Time @validate(constraint: "omitempty")
  phone: String! @validate(constraint: "required,len=11,startswith=8,number")
  additionalPhones: [String!]
    @validate(constraint: "omitempty,dive,len=11,startswith=8,number")
  email: String! @validate(constraint: "required,email")
  company: String @validate(constraint: "omitempty,max=255")
  address: String @validate(constraint: "omitempty")
  propertyIDs: [ID!] @validate(constraint: "dive,omitempty,mongodb")
  passportNumber: String @validate(constraint: "omitempty,max=20")
  passportIssuedBy: String @validate(constraint: "omitempty,max=255")
  passportIssueDate: Time @validate(constraint: "omitempty")
  passportIssuerCode: String @validate(constraint: "omitempty")
  internalInfo: String @validate(constraint: "omitempty")
  note: String @validate(constraint: "max=4096,omitempty")
  dealIDs: [ID!] @validate(constraint: "dive,omitempty,mongodb")
  agentIDs: [ID!] @validate(constraint: "dive,omitempty,mongodb")
  contracts: [DocumentInput!] @validate(constraint: "omitempty")
  documents: [DocumentInput!] @validate(constraint: "omitempty")
  leadID: ID @validate(constraint: "omitempty,mongodb")
}

input ContactFilter {
  phone: String @validate(constraint: "len=11,startswith=8,number,omitempty")
  email: String @validate(constraint: "email,omitempty")
  type: CounterPartyTypeEnum @validate(constraint: "omitempty")
  company: String @validate(constraint: "max=255,omitempty")
  address: String @validate(constraint: "omitempty")
  employee: ID @validate(constraint: "omitempty")
  createdAtMin: Time @validate(constraint: "omitempty")
  createdAtMax: Time @validate(constraint: "omitempty")
}

extend type Query {
  contacts(
    ids: [ID!] @validate(constraint: "dive,omitempty,mongodb")
    start: Int @validate(constraint: "number,gte=0,omitempty")
    limit: Int @validate(constraint: "number,gte=1,omitemtpy")
    sort: Sort @validate(constraint: "omitempty")
    search: String @validate(constraint: "max=32,omitempty")
    filter: ContactFilter @validate(constraint: "omitempty")
  ): ContactConnection! @auth
  contact(id: ID! @validate(constraint: "required,mongodb")): Contact! @auth
}

extend type Mutation {
  saveContact(input: ContactInput!): Boolean! @auth
  deleteContact(id: ID! @validate(constraint: "required,mongodb")): Boolean!
    @auth
  bulkDeleteContacts(
    ids: [ID!]! @validate(constraint: "dive,required,mongodb")
  ): Boolean! @auth
}
`, BuiltIn: false},
	{Name: "../schema/contentBlocks.graphql", Input: `type ContentBlock {
  type: ContentBlockType!
  data: JSON!
  isVisible: Boolean!
}

input ContentBlockInput {
  type: ContentBlockType!
  data: JSON!
  isVisible: Boolean!
}

enum ContentBlockType {
  TEXT
  CITE
  DocumentS
  YOUTUBE
  IMAGES
  ACCORDION
  SPECIAL
}
`, BuiltIn: false},
	{Name: "../schema/deals.graphql", Input: `enum DealTypeEnum {
    PURCHASE
    SALE
}

enum DealStageEnum {
    DEPOSIT_PREPARATION
    DEPOSIT_PAID
    SCHEDULED_FOR_DEAL
    MFC_REGISTRATION
    REGISTERED
}

type Deal {
    id: ID! 
    internalNumber: Int
    type: DealTypeEnum
    stage: DealStageEnum
    sellerAgent: Employee
    sellerContact: Contact
    sellerPhone: String
    sellerDocuments: [Document!]
    buyerAgent: Employee
    buyerContact: Contact
    buyerPhone: String
    buyerDocuments: [Document!]
    property: Property
    address: String
    mortgageBroker: Employee
    mortgageRequest: MortgageRequest
    mortgageDocuments: [Document!]
    lawer: Employee
    lawerDocuments: [Document!]
    accountant: Employee
    accountantDocuments: [Document!]
    depositDate: Time
    dealDate: Time
    finishedAt: Time
    commissionAmount: Float
    internalComment: String
    isDeleted: Boolean
    createdAt: Time!
    updatedAt: Time!
}

type DealConnection {
    totalCount: Int! 
    edges: [DealEdge!]!
    nodes: [Deal!]! 
    pageInfo: PageInfo! 
}

type DealEdge {
    node: Deal! 
    cursor: Cursor! 
}

input DealInput {
    id: ID @validate(constraint: "omitempty,mongodb")
    type: DealTypeEnum @validate(constraint: "omitempty")
    stage: DealStageEnum @validate(constraint: "omitempty")
    sellerAgentID: ID @validate(constraint: "omitempty,mongodb")
    sellerContactID: ID @validate(constraint: "omitempty,mongodb")
    sellerPhone: String @validate(constraint: "required,len=11,startswith=8,number")
    sellerDocuments: [DocumentInput!] @validate(constraint: "omitempty")
    buyerAgentID: ID @validate(constraint: "omitempty,mongodb")
    buyerContactID: ID @validate(constraint: "omitempty,mongodb")
    buyerPhone: String @validate(constraint: "required,len=11,startswith=8,number")
    buyerDocuments: [DocumentInput!] @validate(constraint: "omitempty")
    propertyID: ID @validate(constraint: "omitempty,mongodb")
    address: String @validate(constraint: "omitempty")
    mortgageBrokerID: ID @validate(constraint: "omitempty,mongodb")
    mortgageRequestID: ID @validate(constraint: "omitempty,mongodb")
    mortgageDocuments: [DocumentInput!] @validate(constraint: "omitempty")
    lawerID: ID @validate(constraint: "omitempty,mongodb")
    lawerDocuments: [DocumentInput!] @validate(constraint: "omitempty")
    accountantID: ID @validate(constraint: "omitempty,mongodb")
    accountantDocuments: [DocumentInput!] @validate(constraint: "omitempty")
    depositDate: Time @validate(constraint: "omitempty")
    dealDate: Time @validate(constraint: "omitempty")
    commissionAmount: Float @validate(constraint: "omitempty")
    internalComment: String @validate(constraint: "max=4096,omitempty")
}

input DealFilter {
    Type: DealTypeEnum @validate(constraint:"omitempty")
    deal: ID @validate(constraint: "omitempty,mongodb")
    stage: DealStageEnum @validate(constraint:"omitempty")
    propertyType: PropertyTypeEnum @validate(constraint:"omitempty")
    phone: String @validate(constraint: "len=11,startswith=8,number,omitempty")
    employee: ID @validate (constraint: "mongodb,omitempty")
    contact: ID @validate(constraint: "mongodb,omitempty")
    isDeleted: Boolean @validate(constraint: "boolean,omitempty")
    createdAtMin: Time @validate(constraint: "omitempty")
    createdAtMax: Time @validate(constraint: "omitempty")
    finishedAtMin: Time @validate(constraint: "omitempty")
    finishedAtMax: Time @validate(constraint: "omitempty")
}

extend type Query {
    deals(
        ids: [ID!] @validate(constraint: "dive,omitempty,mongodb")
        start: Int @validate(constraint: "number,gte=0,omitempty")
        limit: Int @validate(constraint: "number,gte=1,omitemtpy")
        sort: Sort @validate(constraint: "omitempty")
        search: String @validate(constraint: "max=32,omitempty")
        filter: DealFilter @validate(constraint: "omitempty")
    ): DealConnection! @auth

    deal(id: ID! @validate(constraint: "required,mongodb")): Deal! @auth
}

extend type Mutation {
    saveDeal(input: DealInput!): Boolean! @auth
    deleteDeal(id: ID! @validate(constraint: "required,mongodb")): Boolean! @auth
    changeDealStage(id: ID! @validate(constraint: "required,mongodb"),stage: DealStageEnum! @validate(constraint: "required")): Boolean! @auth
    bulkDeleteDeals(ids: [ID!]! @validate(constraint: "dive,required,mongodb")): Boolean! @auth
    bulkChangeDealsStage(ids: [ID!]! @validate(constraint: "dive,required,mongodb"),stage: DealStageEnum! @validate(constraint: "required")): Boolean! @auth
}`, BuiltIn: false},
	{Name: "../schema/departments.graphql", Input: `"""
Отдел
"""
type Department {
  """
  Уникальный идентификатор
  """
  id: ID!
  """
  Название отдела
  """
  title: String!
  """
  Группы внутри отдела
  """
  groups: [DepartmentGroup!]!
  """
  Дата и время создания
  """
  createdAt: Time!
  """
  Дата и время обновления
  """
  updatedAt: Time!
}

"""
Группа внутри отдела
"""
type DepartmentGroup {
  """
  Уникальный идентификатор
  """
  id: ID!
  """
  Название группы
  """
  title: String!
  """
  Дата и время создания
  """
  createdAt: Time!
  """
  Дата и время обновления
  """
  updatedAt: Time!
}

#
# Выдача списочного результата
#

type DepartmentConnection {
  totalCount: Int!
  edges: [DepartmentEdge!]!
  nodes: [Department!]!
  pageInfo: PageInfo!
}

type DepartmentEdge {
  node: Department!
  cursor: Cursor!
}

"""
Входные параметры для группы
"""
input DepartmentGroupInput {
  """
  Уникальный идентификатор
  При отсутствии будет создан автоматически
  """
  id: ID @validate(constraint: "mongodb")
  """
  Название группы
  """
  title: String! @validate(constraint: "required,max=100,min=3")
}

"""
Входные параметры для отдела
"""
input DepartmentInput {
  """
  Уникальный идентификатор
  При отсутствии будет создан автоматически
  """
  id: ID @validate(constraint: "mongodb")
  """
  Название отдела
  """
  title: String! @validate(constraint: "required,max=100,min=3")
  """
  Группы внутри отдела
  Группы без идентификатора будут созданы
  Непереданные группы, имевшиеся ранее в отделе, будут удалены
  """
  groups: [DepartmentGroupInput!]!
    @validate(constraint: "required,dive,required")
}

extend type Query {
  """
  Получение списка отделов
  """
  departments(
    """
    Перечень идентификаторов для ограничения выборки
    """
    ids: [ID!] @validate(constraint: "dive,required,mongodb")
    """
    Начало для постраничной навигации
    """
    start: Int @validate(constraint: "number,gte=0")
    """
    Количество элементов для постраничной навигации
    """
    limit: Int @validate(constraint: "number,gte=1")
    """
    Режим сортировки
    """
    sort: Sort
    """
    Ключевые слова для полнотекстового поиска
    """
    search: String @validate(constraint: "min=3,max=32")
  ): DepartmentConnection! @auth

  """
  Получение отдела по идентификатору
  """
  department(
    """
    Уникальный идентификатор отдела
    """
    id: ID! @validate(constraint: "required,mongodb")
  ): Department! @auth
}

extend type Mutation {
  """
  Сохранение отдела
  """
  saveDepartment(
    """
    Информация об отделе
    """
    input: DepartmentInput!
  ): Boolean! @hasPermission(permission: "STAFF_SAVE_DEPARTMENT")

  """
  Удаление отдела
  """
  deleteDepartment(
    """
    Уникальный идентификатор
    """
    id: ID!
  ): Boolean! @hasPermission(permission: "STAFF_DELETE_DEPARTMENT")
}
`, BuiltIn: false},
	{Name: "../schema/developers.graphql", Input: `type Developer {
  id: ID!

  title: String!
  url: String
  logo: Image
  isDeleted: Boolean

  createdAt: Time!
  updatedAt: Time!
}

type DeveloperConnection {
  totalCount: Int!
  edges: [DeveloperEdge!]!
  nodes: [Developer!]!
  pageInfo: PageInfo!
}

type DeveloperEdge {
  node: Developer!
  cursor: Cursor!
}

input DeveloperInput {
  id: ID @validate(constraint: "mongodb")

  title: String! @validate(constraint: "required,min=3,max=500")
  url: String @validate(constraint: "omitempty,url")
  logo: ImageInput
}

input DeveloperFilterInput {
  isDeleted: Boolean @validate(constraint: "boolean")
}

extend type Query {
  """
  Запрос списка застройщиков
  """
  developers(
    """
    Перечень идентификаторов для ограничения выборки
    """
    ids: [ID!] @validate(constraint: "dive,required,mongodb")
    """
    Начало для постраничной навигации
    """
    start: Int @validate(constraint: "number,gte=0")
    """
    Количество элементов для постраничной навигации
    """
    limit: Int @validate(constraint: "number,gte=1")
    """
    Режим сортировки
    """
    sort: Sort
    """
    Ключевые слова для полнотекстового поиска
    """
    search: String @validate(constraint: "min=3,max=32")
    filter: DeveloperFilterInput
  ): DeveloperConnection! @auth

  """
  Запрос застройщика по идентификатору
  """
  developer(id: ID! @validate(constraint: "required,mongodb")): Developer! @auth
}

extend type Mutation {
  """
  Создание/Редактирование застройщика
  """
  saveDeveloper(input: DeveloperInput!): Boolean! @auth

  """
  Удаление застройщика по идентификатору
  """
  deleteDeveloper(id: ID!): Boolean! @auth

  """
  Массовое удаление застройщиков по идентификаторам
  """
  bulkDeleteDevelopers(ids: [ID!]!): Boolean! @auth
}
`, BuiltIn: false},
	{Name: "../schema/employees.graphql", Input: `type Employee {
  id: ID!
  name: String!
  surname: String!
  patronymic: String
  birthday: Time
  email: String!
  phone: String!
  position: Position @goField(forceResolver: true)
  department: Department @goField(forceResolver: true)
  group: DepartmentGroup @goField(forceResolver: true)
  role: Role @goField(forceResolver: true)
  internalInfo: String
  shortDescription: String
  description: String
  isPublished: Boolean!
  isDeleted: Boolean!
  avatar: Image @goField(forceResolver: true)
  publicImage: Image @goField(forceResolver: true)
  createdAt: Time!
  updatedAt: Time!
}

#
# Выдача списочного результата
#

type EmployeeConnection {
  totalCount: Int!
  edges: [EmployeeEdge!]!
  nodes: [Employee!]!
  pageInfo: PageInfo!
}

type EmployeeEdge {
  node: Employee!
  cursor: Cursor!
}

input EmployeesFilterInput {
  position: ID @validate(constraint: "mongodb")
  department: ID @validate(constraint: "mongodb")
  group: ID @validate(constraint: "mongodb")
  role: ID @validate(constraint: "mongodb")
  isActive: Boolean @validate(constraint: "boolean")
  isPublished: Boolean @validate(constraint: "boolean")
  isDeleted: Boolean @validate(constraint: "boolean")
}

input EmployeeInput {
  """
  Уникальный идентифкатор
  При отсутствии будет создан автоматически
  """
  id: ID @validate(constraint: "mongodb")
  name: String! @validate(constraint: "required,max=100,min=3")
  surname: String! @validate(constraint: "required,max=100,min=3")
  patronymic: String @validate(constraint: "max=100,min=3")
  birthday: Time
  email: String! @validate(constraint: "required,email")
  phone: String! @validate(constraint: "required,len=11,startswith=8,number")
  password: String @validate(constraint: "max=32,min=6,alphanum")
  positionID: ID @validate(constraint: "mongodb")
  departmentID: ID @validate(constraint: "mongodb")
  groupID: ID @validate(constraint: "mongodb")
  roleID: ID @validate(constraint: "mongodb")
  internalInfo: String @validate(constraint: "max=1000,min=3")
  shortDescription: String @validate(constraint: "max=200,min=3")
  description: String @validate(constraint: "max=1000,min=3")
  isPublished: Boolean
  avatar: ImageInput @goField(forceResolver: true)
  publicImage: ImageInput @goField(forceResolver: true)
}

extend type Query {
  employees(
    ids: [ID!] @validate(constraint: "dive,required,mongodb")
    start: Int @validate(constraint: "number,gte=0")
    limit: Int @validate(constraint: "number,gte=1")
    sort: Sort
    search: String @validate(constraint: "min=3,max=32")
    filter: EmployeesFilterInput
  ): EmployeeConnection! @auth

  employee(id: ID! @validate(constraint: "required,mongodb")): Employee! @auth
}

extend type Mutation {
  saveEmployee(input: EmployeeInput!): Boolean!
    @hasPermission(permission: "STAFF_SAVE_EMPLOYEE")
  deleteEmployee(id: ID!): Boolean!
    @hasPermission(permission: "STAFF_DELETE_EMPLOYEE")
  deleteEmployees(ids: [ID!]!): Boolean!
    @hasPermission(permission: "STAFF_DELETE_EMPLOYEE")
  activateEmployees(ids: [ID!]!): Boolean!
    @hasPermission(permission: "STAFF_SAVE_EMPLOYEE")
  deactivateEmployees(ids: [ID!]!): Boolean!
    @hasPermission(permission: "STAFF_SAVE_EMPLOYEE")
  publishEmployees(ids: [ID!]!): Boolean!
    @hasPermission(permission: "STAFF_SAVE_EMPLOYEE")
  unpublishEmployees(ids: [ID!]!): Boolean!
    @hasPermission(permission: "STAFF_SAVE_EMPLOYEE")
  assignDepartmentToEmployees(department: ID!, ids: [ID!]!): Boolean!
    @hasPermission(permission: "STAFF_SAVE_EMPLOYEE")
  assignRoleToEmployees(role: ID!, ids: [ID!]!): Boolean!
    @hasPermission(permission: "STAFF_SAVE_EMPLOYEE")
}
`, BuiltIn: false},
	{Name: "../schema/exchange.graphql", Input: `extend type Query {
  generatePdf(content: String!, fileName: String!): String! @auth
}

extend type Mutation {
  uploadImage(input: ImageInput!): Image! @auth
  deleteImage(id: ID! @validate(constraint: "required,mongodb")): Boolean! @auth

  uploadDocument(input: DocumentInput!): Document! @auth
  deleteDocument(id: ID! @validate(constraint: "required,mongodb")): Boolean!
    @auth
}

enum ImagePreset {
  STAFF_EMPLOYEE_AVATAR
  STAFF_EMPLOYEE_PUBLIC_IMAGE
  #
  CONTENT_KB_ARTICLE_COVER
  CONTENT_SITE_STORY_COVER
  CONTENT_SITE_STORY_PHOTO
  #
  ESTATE_PROPERTY_PHOTO
  ESTATE_COMPLEX_PHOTO
}

input ImageInput {
  id: ID
  file: Upload
  title: String @validate(constraint: "max=100,min=3")
  preset: ImagePreset
}

input DocumentInput {
  id: ID
  file: Upload
  title: String @validate(constraint: "max=100,min=3")
}

type Document {
  id: ID!
  url: String!
  path: String!
  title: String
  fileName: String!
  fileType: String!
  createdAt: Time!
}

type Image {
  id: ID!
  url: String!
  path: String!
  title: String
  fileName: String!
  fileType: String!
  previewUrl: String
  previewPath: String
  blurHash: String
  preset: ImagePreset!
  createdAt: Time!
}
`, BuiltIn: false},
	{Name: "../schema/leads.graphql", Input: `enum LeadTypeEnum {
  SALER
  BUYER
  BOTH
}

enum LeadStatusEnum {
  NEW
  IN_PROGRESS
  REFUSED
  SUCCESS
  THINKING
}

enum LeadSourceEnum {
  SOURCE
}

type Lead {
  id: ID!
  internalNumber: Int
  type: LeadTypeEnum
  source: LeadSourceEnum
  name: String
  surname: String
  patronymic: String
  birthday: Time
  phone: String
  additionalPhones: [String!]
  email: String
  company: String
  address: String
  request: String
  agents: [Employee!]
  status: LeadStatusEnum
  comment: String
  isDeleted: Boolean!
  createdAt: Time!
  updatedAt: Time!
}

type LeadConnection {
  totalCount: Int!
  edges: [LeadEdge!]!
  nodes: [Lead!]!
  pageInfo: PageInfo!
}

type LeadEdge {
  node: Lead!
  cursor: Cursor!
}

input LeadInput {
  id: ID @validate(constraint: "omitempty,mongodb")
  type: LeadTypeEnum @validate(constraint: "omitempty")
  source: LeadSourceEnum @validate(constraint: "omitempty")
  name: String @validate(constraint: "required,max=100")
  surname: String @validate(constraint: "required,max=100")
  patronymic: String @validate(constraint: "omitempty,max=100")
  birthday: Time @validate(constraint: "omitempty")
  phone: String @validate(constraint: "required,len=11,startswith=8,number")
  additionalPhones: [String!]
    @validate(constraint: "omitempty,dive,len=11,startswith=8,number")
  email: String @validate(constraint: "required,email")
  company: String @validate(constraint: "omitempty,max=255")
  address: String @validate(constraint: "omitempty")
  request: String @validate(constraint: "omitempty")
  agentIDs: [ID!] @validate(constraint: "dive,omitempty,mongodb")
  status: LeadStatusEnum @validate(constraint: "omitempty")
  comment: String @validate(constraint: "omitempty,max=4096")
}

input LeadFilter {
  phone: String @validate(constraint: "len=11,startswith=8,number,omitempty")
  email: String @validate(constraint: "email,omitempty")
  type: LeadTypeEnum @validate(constraint: "omitempty")
  status: LeadStatusEnum @validate(constraint: "omitempty")
  company: String @validate(constraint: "max=255,omitempty")
  createdAtMin: Time @validate(constraint: "omitempty")
  createdAtMax: Time @validate(constraint: "omitempty")
}

extend type Query {
  leads(
    ids: [ID!] @validate(constraint: "dive,omitempty,mongodb")
    start: Int @validate(constraint: "number,gte=0,omitempty")
    limit: Int @validate(constraint: "number,gte=1,omitemtpy")
    sort: Sort @validate(constraint: "omitempty")
    search: String @validate(constraint: "max=32,omitempty")
    filter: LeadFilter @validate(constraint: "omitempty")
  ): LeadConnection! @auth
  lead(id: ID! @validate(constraint: "required,mongodb")): Lead! @auth
}

extend type Mutation {
  saveLead(input: LeadInput!): Boolean! @auth
  deleteLead(id: ID! @validate(constraint: "required,mongodb")): Boolean! @auth
  changeLeadStatus(
    id: ID! @validate(constraint: "required,mongodb")
    status: LeadStatusEnum! @validate(constraint: "required")
    comment: String @validate(constraint: "omitempty")
  ): Boolean! @auth
  bulkChangeLeadsStatus(
    ids: [ID!]! @validate(constraint: "dive,required,mongodb")
    status: LeadStatusEnum! @validate(constraint: "required")
    comment: String @validate(constraint: "omitempty")
  ): Boolean! @auth
  bulkDeleteLeads(
    ids: [ID!]! @validate(constraint: "dive,required,mongodb")
  ): Boolean! @auth
}
`, BuiltIn: false},
	{Name: "../schema/logs.graphql", Input: `type Log {
  id: ID!
  eid: ID
  author: Employee @goField(forceResolver: true)
  status: StatusCodeEnum!
  type: LogTypeEnum!
  level: LogLevelEnum!
  createdAt: Time!
}

type LogConnection {
  totalCount: Int!
  edges: [LogEdge!]!
  nodes: [Log!]!
  pageInfo: PageInfo!
}

type LogEdge {
  node: Log!
  cursor: Cursor!
}

input LogsFilterInput {
  author: ID @validate(constraint: "mongodb")
  type: LogTypeEnum
  level: LogLevelEnum
}

enum LogTypeEnum {
  AUTH_LOGIN
  AUTH_LOGOUT

  STAFF_EMPLOYEE_CREATE
  STAFF_EMPLOYEE_UPDATE
  STAFF_EMPLOYEE_DELETE
  STAFF_EMPLOYEES_DELETE
  STAFF_EMPLOYEES_ACTIVATE
  STAFF_EMPLOYEES_DEACTIVATE
  STAFF_EMPLOYEES_PUBLISH
  STAFF_EMPLOYEES_UNPUBLISH
  STAFF_EMPLOYEES_ASSIGN_DEPARTMENT
  STAFF_EMPLOYEES_ASSIGN_ROLE

  STAFF_ROLE_CREATE
  STAFF_ROLE_UPDATE
  STAFF_ROLE_DELETE
  STAFF_ROLES_DELETE

  STAFF_DEPARTMENT_CREATE
  STAFF_DEPARTMENT_UPDATE
  STAFF_DEPARTMENT_DELETE
  STAFF_DEPARTMENTS_DELETE

  STAFF_POSITION_CREATE
  STAFF_POSITION_UPDATE
  STAFF_POSITION_DELETE
  STAFF_POSITIONS_DELETE

  ESTATE_COMPLEX_HOUSE_CREATE
  ESTATE_COMPLEX_HOUSE_UPDATE
  ESTATE_COMPLEX_HOUSE_DELETE
  ESTATE_COMPLEX_HOUSES_DELETE

  ESTATE_COMPLEX_CREATE
  ESTATE_COMPLEX_UPDATE
  ESTATE_COMPLEX_DELETE
  ESTATE_COMPLEXES_DELETE

  ESTATE_DEVELOPER_CREATE
  ESTATE_DEVELOPER_UPDATE
  ESTATE_DEVELOPER_DELETE
  ESTATE_DEVELOPERS_DELETE

  ESTATE_PROPERTY_CREATE
  ESTATE_PROPERTY_UPDATE
  ESTATE_PROPERTY_DELETE
  ESTATE_PROPERTY_REFRESH
  ESTATE_PROPERTY_CHANGE_STATUS
  ESTATE_PROPERTIES_DELETE
  ESTATE_PROPERTIES_REFRESH
  ESTATE_PROPERTIES_CHANGE_STATUS
  ESTATE_PROPERTY_UPDATE_PRICE_HISTORY

  ESTATE_VILLAGE_CREATE
  ESTATE_VILLAGE_UPDATE
  ESTATE_VILLAGE_DELETE
  ESTATE_VILLAGES_DELETE

  SALES_CONTACT_CREATE
  SALES_CONTACT_UPDATE
  SALES_CONTACT_DELETE
  SALES_CONTACTS_DELETE

  SALES_DEAL_CREATE
  SALES_DEAL_UPDATE
  SALES_DEAL_DELETE
  SALES_DEAL_CHANGE_STAGE
  SALES_DEALS_DELETE
  SALES_DEALS_CHANGE_STAGE

  SALES_LEAD_CREATE
  SALES_LEAD_UPDATE
  SALES_LEAD_DELETE
  SALES_LEAD_CHANGE_STATUS
  SALES_LEADS_DELETE
  SALES_LEADS_CHANGE_STATUS

  SALES_MEET_CREATE
  SALES_MEET_UPDATE
  SALES_MEET_DELETE
  SALES_MEET_CHANGE_STATUS
  SALES_MEETS_DELETE
  SALES_MEETS_CHANGE_STATUS

  SALES_TASK_CREATE
  SALES_TASK_UPDATE
  SALES_TASK_DELETE
  SALES_TASK_COMPLETE
  SALES_TASKS_DELETE
  SALES_TASKS_COMPLETE

  SALES_MORTGAGE_REQUEST_CREATE
  SALES_MORTGAGE_REQUEST_UPDATE
  SALES_MORTGAGE_REQUEST_DELETE
  SALES_MORTGAGE_REQUEST_CHANGE_STATUS
  SALES_MORTGAGE_REQUESTS_DELETE
  SALES_MORTGAGE_REQUESTS_CHANGE_STATUS
}

enum LogLevelEnum {
  DEBUG
  INFO
  WARNING
  ERROR
  FATAL
}

extend type Query {
  logs(
    ids: [ID!] @validate(constraint: "dive,required,mongodb")
    start: Int @validate(constraint: "number,gte=0")
    limit: Int @validate(constraint: "number,gte=1")
    sort: Sort
    search: String @validate(constraint: "min=3,max=32")
    filter: LogsFilterInput
  ): LogConnection! @hasPermission(permission: "SYSTEM_VIEW_LOG")
}
`, BuiltIn: false},
	{Name: "../schema/meets.graphql", Input: `enum MeetTypeEnum {
    RENT
    SALE
}

enum MeetStatusEnum {
    GOING_ON_SALE
    CANCELLED
    FINISHED
}

enum MeetCancelReasonEnum {
    CHANGED_MIND
    REFUSAL
    OWN_OPINION
}

type Meet {
    id: ID!
    internalNumber: Int
    type: MeetTypeEnum
    dealType: DealTypeEnum
    contactType: CounterPartyTypeEnum
    dateTime: Time
    property: Property
    address: String
    comment: String
    isOnline: Boolean
    sellerAgent: Employee
    sellerContact: Contact
    sellerPhone: String
    buyerAgent: Employee
    buyerContact: Contact
    buyerPhone: String
    buyerAgency: String
    status: MeetStatusEnum
    cancelReason: MeetCancelReasonEnum
    cancelReasonCustom: String
    useDealDeposit: Boolean
    lawer: Employee
    accountant: Employee
    mortgageBroker: Employee
    useMortgage: Boolean
    isDeleted: Boolean
    createdAt: Time!
    updatedAt: Time!
}

type MeetConnection {
    totalCount: Int! 
    edges: [MeetEdge!]!
    nodes: [Meet!]! 
    pageInfo: PageInfo! 
}

type MeetEdge {
    node: Meet! 
    cursor: Cursor! 
}

input MeetInput {
    id: ID @validate(constraint: "omitempty,mongodb")
    type: MeetTypeEnum @validate(constraint: "omitempty")
    dateTime: Time @validate(constraint: "omitempty")
    dealType: DealTypeEnum @validate(constraint: "omitempty")
    contactType: CounterPartyTypeEnum @validate(constraint: "omitempty")
    propertyID: ID @validate(constraint: "omitempty,mongodb")
    address: String @validate(constraint: "omitempty")
    comment: String @validate(constraint: "max=4096,omitempty")
    isOnline: Boolean @validate(constraint: "omitempty,boolean")
    sellerAgentID: ID @validate(constraint: "omitempty,mongodb")
    sellerContactID: ID @validate(constraint: "omitempty,mongodb")
    sellerPhone: String @validate(constraint: "omitempty,len=11,startswith=8,number")
    buyerAgentID: ID @validate(constraint: "omitempty,mongodb")
    buyerContactID: ID @validate(constraint: "omitempty,mongodb")
    buyerPhone: String @validate(constraint: "omitempty,len=11,startswith=8,number")
    buyerAgency: String @validate(constraint: "omitempty")
    status: MeetStatusEnum @validate(constraint: "omitempty")
    cancelReason: MeetCancelReasonEnum @validate(constraint: "omitempty")
    cancelReasonCustom: String @validate(constraint: "omitempty")
    useDealDeposit: Boolean @validate(constraint: "omitempty,boolean")
    lawerID: ID @validate(constraint: "omitempty,mongodb")
    accountantID: ID @validate(constraint: "omitempty,mongodb")
    mortgageBrokerID: ID @validate(constraint: "omitempty,mongodb")
    useMortgage: Boolean @validate(constraint: "omitempty,boolean")
}

input MeetFilter {
    type: MeetTypeEnum @validate(constraint: "omitempty")
    status: [MeetStatusEnum!] @validate(constraint: "omitempty")
    dealType: DealTypeEnum @validate(constraint: "omitempty")
    sellerAgent: ID @validate(constraint: "omitempty,mongodb")
    buyerAgent: ID @validate(constraint: "omitempty,mongodb")
    buyerContact: ID @validate(constraint: "omitempty,mongodb")
    sellerContact: ID @validate(constraint: "omitempty,mongodb")
    property: ID @validate(constraint: "mongodb")
    phone: String @validate(constraint: "len=11,startswith=8,number,omitempty")
    address: String @validate(constraint: "omitempty")
    createdAtMin: Time @validate(constraint: "omitempty")
    createdAtMax: Time @validate(constraint: "omitempty")
}

extend type Query {
    meets(
        ids: [ID!] @validate(constraint: "dive,omitempty,mongodb")
        start: Int @validate(constraint: "number,gte=0,omitempty")
        limit: Int @validate(constraint: "number,gte=1,omitemtpy")
        sort: Sort @validate(constraint: "omitempty")
        search: String @validate(constraint: "max=32,omitempty")
        filter: MeetFilter @validate(constraint: "omitempty")
    ): MeetConnection! @auth

    meet(id: ID! @validate(constraint: "required,mongodb")): Meet! @auth
}

extend type Mutation {
    saveMeet(input: MeetInput!): Boolean! @auth
    deleteMeet(id: ID! @validate(constraint: "required,mongodb")): Boolean! @auth
    changeMeetStatus(id: ID! @validate(constraint:"required,mongodb"),status: MeetStatusEnum! @validate(constraint:"required")): Boolean! @auth
    bulkChangeMeetsStatus(ids: [ID!]! @validate(constraint: "dive,required,mongodb"),status: MeetStatusEnum! @validate(constraint:"required")): Boolean! @auth
    bulkDeleteMeets(ids: [ID!]! @validate(constraint: "dive,required,mongodb")): Boolean! @auth
}`, BuiltIn: false},
	{Name: "../schema/mortgageRequests.graphql", Input: `enum MortgageRequestStatusEnum {
    SENT
    APPROVED
    REFUSAL
    OBJECT_APPROVAL
    BANK_EXPECTATION
}

type MortgageRequest {
    id: ID!
    internalNumber: Int
    status: MortgageRequestStatusEnum
    contact: Contact
    banks: [Bank!]
    mortgageBroker: Employee
    agent: Employee
    deal: Deal
    property: Property
    amount: Float
    firstDeposit: Float
    period: Int
    comment: String
    contracts: [Document!]
    documents: [Document!]
    sendDate: Time
    responseDate: Time
    validTillDate: Time
    percentage: Float
    isDeleted: Boolean
    createdAt: Time!
    updatedAt: Time!
}

type MortgageRequestConnection {
    totalCount: Int! 
    edges: [MortgageRequestEdge!]!
    nodes: [MortgageRequest!]! 
    pageInfo: PageInfo! 
}

type MortgageRequestEdge {
    node: MortgageRequest! 
    cursor: Cursor! 
}

input MortgageRequestInput {
    id: ID @validate(constraint: "omitempty,mongodb")
    status: MortgageRequestStatusEnum @validate(constraint:"omitempty")
    contactID: ID @validate(constraint:"mongodb,omitempty")
    bankIDs: [ID!] @validate(constraint:"dive,omitempty,mongodb")
    mortgageBrokerID: ID @validate(constraint:"mongodb,omitempty")
    agentID: ID @validate(constraint:"mongodb,omitempty")
    dealID: ID @validate(constraint:"mongodb,omitempty")
    propertyID: ID @validate(constraint: "mongodb,omitempty")
    amount: Float @validate(constraint:"omitempty")
    firstDeposit: Float @validate(constraint:"omitempty")
    period: Int @validate(constraint:"omitempty")
    comment: String @validate(constraint: "max=4096,omitempty")
    contracts: [DocumentInput!] @validate(constraint:"omitempty")
    documents: [DocumentInput!] @validate(constraint:"omitempty")
    sendDate: Time @validate(constraint:"omitempty")
    responseDate: Time @validate(constraint:"omitempty")
    validTillDate: Time @validate(constraint:"omitempty")
    percentage: Float @validate(constraint:"omitempty")
}

input MortgageRequestFilter {
    status: MortgageRequestStatusEnum @validate(constraint: "omitempty")
    mortgageBroker: ID @validate(constraint: "omitempty,mongodb")
    agent: ID @validate(constraint: "omitempty,mongodb")
    contact: ID @validate(constraint: "mongodb,omitempty")
    property: ID @validate(constraint: "mongodb,omitempty")
    deal: ID @validate(constraint:"mongodb,omitempty")
    amount: Float @validate(constraint:"omitempty")
    firstDeposit: Float @validate(constraint:"omitempty")
    period: Int @validate(constraint:"omitempty")
    percentage: Float @validate(constraint:"omitempty")
    sendDate: Time @validate(constraint: "omitempty")
    responseDate: Time @validate(constraint: "omitempty")
    createdAtMin: Time @validate(constraint: "omitempty")
    createdAtMax: Time @validate(constraint: "omitempty")
}

extend type Query {
    mortgageRequests(
        ids: [ID!] @validate(constraint: "dive,omitempty,mongodb")
        start: Int @validate(constraint: "number,gte=0,omitempty")
        limit: Int @validate(constraint: "number,gte=1,omitemtpy")
        sort: Sort @validate(constraint: "omitempty")
        search: String @validate(constraint: "max=32,omitempty")
        filter: MortgageRequestFilter @validate(constraint: "omitempty")
    ): MortgageRequestConnection! @auth

    mortgageRequest(id: ID! @validate(constraint: "required,mongodb")): MortgageRequest! @auth
}

extend type Mutation {
    saveMortgageRequest(input: MortgageRequestInput!): Boolean! @auth
    deleteMortgageRequest(id: ID! @validate(constraint: "required,mongodb")): Boolean! @auth
    changeMortgageRequestStatus(id: ID! @validate(constraint:"required,mongodb"),status: MortgageRequestStatusEnum! @validate(constraint:"required")): Boolean! @auth
    bulkChangeMortgageRequestsStatus(ids: [ID!]! @validate(constraint: "dive,required,mongodb"),status: MortgageRequestStatusEnum! @validate(constraint:"required")): Boolean! @auth
    bulkDeleteMortgageRequests(ids: [ID!]! @validate(constraint: "dive,required,mongodb")): Boolean! @auth
}`, BuiltIn: false},
	{Name: "../schema/pages.graphql", Input: `type Page {
  id: ID!
  url: String!
  title: String!
  description: String!
  contentBlocks: [ContentBlock!]!
  status: PublicationStatusEnum!
  createdAt: Time!
  updatedAt: Time!
}

#
# Выдача списочного результата
#

type PageConnection {
  totalCount: Int!
  edges: [PageEdge!]!
  nodes: [Page!]!
  pageInfo: PageInfo!
}

type PageEdge {
  node: Page!
  cursor: Cursor!
}

input PageFilterInput {
  status: PublicationStatusEnum
}

input PageInput {
  """
  Уникальный идентификатор
  При отсутствии будет создан автоматически
  """
  id: ID @validate(constraint: "mongodb")
  url: String!
  title: String!
  description: String!
  contentBlocks: [ContentBlockInput!]!
  status: PublicationStatusEnum!
}

extend type Query {
  """
  Получение списка страниц
  """
  pages(
    """
    Перечень идентификаторов для ограничения выборки
    """
    ids: [ID!] @validate(constraint: "dive,required,mongodb")
    """
    Начало для постраничной навигации
    """
    start: Int @validate(constraint: "number,gte=0")
    """
    Количество элементов для постраничной навигации
    """
    limit: Int @validate(constraint: "number,gte=1")
    """
    Режим сортировки
    """
    sort: Sort
    """
    Ключевые слова для полнотекстового поиска
    """
    search: String @validate(constraint: "min=3,max=32")
    filter: PageFilterInput
  ): PageConnection! @auth

  """
  Получение страницы по идентификатору
  """
  page(
    """
    Уникальный идентификатор
    """
    id: ID! @validate(constraint: "required,mongodb")
  ): Page! @auth
}

extend type Mutation {
  """
  Сохранение страницы
  """
  savePage(
    """
    Информация о странице
    """
    input: PageInput!
  ): Boolean! @hasPermission(permission: "CONTENT_SAVE_PAGE")

  """
  Удаление страницы
  """
  deletePage(
    """
    Уникальный идентификатор
    """
    id: ID!
  ): Boolean! @hasPermission(permission: "CONTENT_DELETE_PAGE")
}
`, BuiltIn: false},
	{Name: "../schema/positions.graphql", Input: `"""
Должность
"""
type Position {
  """
  Уникальный идентификатор
  """
  id: ID!
  """
  Название должности
  """
  title: String!
  """
  Дата и время создания
  """
  createdAt: Time!
  """
  Дата и время обновления
  """
  updatedAt: Time!
}

#
# Выдача списочного результата
#

"""
Результат списочного метода
"""
type PositionConnection {
  """
  Общее количество записей
  """
  totalCount: Int!
  """
  Конечные точки
  """
  edges: [PositionEdge!]!
  """
  Объекты
  """
  nodes: [Position!]!
  """
  Информация для постраничной навигации
  """
  pageInfo: PageInfo!
}

"""
Конечная точка
"""
type PositionEdge {
  """
  Объект
  """
  node: Position!
  """
  Курсор (идентификатор объекта)
  """
  cursor: Cursor!
}

"""
Входные параметры для должности
"""
input PositionInput {
  """
  Уникальный идентифкатор
  При отсутствии будет создан автоматически
  """
  id: ID @validate(constraint: "mongodb")
  """
  Название должности
  """
  title: String! @validate(constraint: "required,max=100,min=3")
}

extend type Query {
  """
  Получение списка должностей
  """
  positions(
    """
    Перечень идентификаторов для ограничения выборки
    """
    ids: [ID!] @validate(constraint: "dive,required,mongodb")
    """
    Начало для постраничной навигации
    """
    start: Int @validate(constraint: "number,gte=0")
    """
    Количество элементов для постраничной навигации
    """
    limit: Int @validate(constraint: "number,gte=1")
    """
    Режим сортировки
    """
    sort: Sort
    """
    Ключевые слова для полнотекстового поиска
    """
    search: String @validate(constraint: "min=3,max=32")
  ): PositionConnection! @auth

  """
  Получение должности по идентификатору
  """
  position(
    """
    Уникальный идентификатор
    """
    id: ID! @validate(constraint: "required,mongodb")
  ): Position! @auth
}

extend type Mutation {
  """
  Сохранение должности
  """
  savePosition(
    """
    Информация о должности
    """
    input: PositionInput!
  ): Boolean! @hasPermission(permission: "STAFF_SAVE_POSITION")

  """
  Удаление должности
  """
  deletePosition(
    """
    Уникальный идентификатор
    """
    id: ID!
  ): Boolean! @hasPermission(permission: "STAFF_DELETE_POSITION")
}
`, BuiltIn: false},
	{Name: "../schema/properties.graphql", Input: `enum ToiletTypeEnum {
  UNITED
  SPLITTED
}

enum RehabTypeEnum {
  NONE
  DRAFT
  DEVELOPER
  DESIGN
  CLEAN
}

enum PropertySourceEnum {
  AVITO
  YOULA
  CIAN
  DOMCLICK
  YANDEX
  OTHER_AGGREGATOR
  RECOMMENDATION
  RETURNED_CLIENT
  LISTS
  SELECTION
  OTHER
}

enum PropertyStatusEnum {
  PUBLISHED
  UNPUBLISHED
  ON_MODERATION
  ARCHIVED
  TRASH
}

enum PropertyTypeEnum {
  USED
  NEW
  VILLAGE
  SUBURBAN
  COMMERCIAL
}

enum PropertySubTypeEnum {
  FLAT
  ROOM
  APARTMENT
  STUDIO
  LAND
  HOUSE
  TOWNHOUSE
  SUMMER_HOUSE
  GARAGE
  PARKING
}

enum CommercialUsageEnum {
  RETAIL
  OFFICE
  FREE_USAGE
  BASE
  BUSINESS
  PRODUCTION
  PARKING
  WAREHOUSE
}

enum DealEnum {
  SELL
  RENT
}

type Property {
  id: ID!

  internalID: Int
  deal: DealEnum
  type: PropertyTypeEnum
  subType: PropertySubTypeEnum
  commercialUsage: [CommercialUsageEnum]

  fromDeveloper: Boolean

  inComplex: Boolean
  complex: Complex
  complexHouse: ComplexHouse

  inVillage: Boolean
  village: Village

  isHot: Boolean

  title: String
  description: String
  address: String
  lat: Float
  lon: Float
  cadastrNumber: String
  seoText: String
  youtubeLink: String
  tourLink: String

  documents: [Document]
  images: [Image]

  isDeleted: Boolean
  isEditable: Boolean
  refreshDate: Time

  status: PropertyStatusEnum

  price: Float
  pricePerMeter: Float
  pricePerAr: Float
  priceHistory: [Float!]

  isReady: Boolean
  readinessYear: Int
  readinessQuarter: QuarterEnum

  inCity: Boolean
  cityDistance: Int
  region: String
  subRegion: String

  source: PropertySourceEnum

  rooms: Int
  area: Float
  landArea: Float
  livingArea: Float
  kitchenArea: Float
  toiletType: ToiletTypeEnum
  rehabType: RehabTypeEnum
  floor: Int
  floors: Int
  ceilingHeight: Float

  internalInfo: String

  comissionPercent: Float
  comissionAmount: Float

  createdAt: Time!
  updatedAt: Time!
}

type PropertyConnection {
  totalCount: Int!
  edges: [PropertyEdge!]!
  nodes: [Property!]!
  pageInfo: PageInfo!
}

type PropertyEdge {
  node: Property!
  cursor: Cursor!
}

input PropertyInput {
  id: ID @validate(constraint: "mongodb")

  deal: DealEnum @validate(constraint: "omitempty")
  type: PropertyTypeEnum @validate(constraint: "omitempty")
  subType: PropertySubTypeEnum @validate(constraint: "omitempty")
  commercialUsage: [CommercialUsageEnum!]

  fromDeveloper: Boolean @validate(constraint: "omitempty,boolean")

  inComplex: Boolean @validate(constraint: "omitempty,boolean")
  complexID: ID @validate(constraint: "mongodb")
  complexHouseID: ID @validate(constraint: "mongodb")

  inVillage: Boolean @validate(constraint: "omitempty,boolean")
  villageID: ID @validate(constraint: "mongodb")

  isHot: Boolean @validate(constraint: "omitempty,boolean")

  title: String @validate(constraint: "required,min=3,max=256")
  description: String @validate(constraint: "required,min=3,max=4096")
  address: String @validate(constraint: "required,min=3,max=256")
  lat: Float @validate(constraint: "omitempty,latitude")
  lon: Float @validate(constraint: "omitempty,longitude")
  cadastrNumber: String @validate(constraint: "omitempty,max=20")
  seoText: String @validate(constraint: "omitempty,max=1024")
  youtubeLink: String @validate(constraint: "omitempty,url")
  tourLink: String @validate(constraint: "omitempty,url")

  documents: [DocumentInput]
  images: [ImageInput]

  status: PropertyStatusEnum @validate(constraint: "omitempty")

  price: Float @validate(constraint: "omitempty,gte=0")

  isReady: Boolean @validate(constraint: "omitempty,boolean")
  readinessYear: Int @validate(constraint: "omitempty,gte=1800,lte=3000")
  readinessQuarter: QuarterEnum @validate(constraint: "omitempty")

  inCity: Boolean @validate(constraint: "omitempty,boolean")
  cityDistance: Int @validate(constraint: "omitempty,gte=0")
  region: String @validate(constraint: "omitempty,max=256")
  subRegion: String @validate(constraint: "omitempty,max=256")

  source: PropertySourceEnum @validate(constraint: "omitempty")

  rooms: Int @validate(constraint: "omitempty,gte=0")
  area: Float @validate(constraint: "omitempty,gte=0")
  landArea: Float @validate(constraint: "omitempty,gte=0")
  livingArea: Float @validate(constraint: "omitempty,gte=0")
  kitchenArea: Float @validate(constraint: "omitempty,gte=0")
  toiletType: ToiletTypeEnum @validate(constraint: "omitempty")
  rehabType: RehabTypeEnum @validate(constraint: "omitempty")
  floor: Int @validate(constraint: "omitempty")
  floors: Int @validate(constraint: "omitempty,gte=0")
  ceilingHeight: Float @validate(constraint: "omitempty,gte=0")

  internalInfo: String @validate(constraint: "omitempty,max=4096")

  comissionPercent: Float @validate(constraint: "omitempty,gte=0")
  comissionAmount: Float @validate(constraint: "omitempty,gte=0")
}

input PropertyFilter {
  deal: DealEnum
  type: PropertyTypeEnum
  subType: PropertySubTypeEnum
  fromDeveloper: Boolean @validate(constraint: "boolean")
  complexID: String @validate(constraint: "mongodb")
  complexHouseID: String @validate(constraint: "mongodb")
  villageID: String @validate(constraint: "mongodb")
  isHot: Boolean @validate(constraint: "boolean")
  isDeleted: Boolean @validate(constraint: "boolean")
  statuses: [PropertyStatusEnum!]
  isStudio: Boolean @validate(constraint: "boolean")
  minRooms: Float @validate(constraint: "gte=0")
  maxRooms: Float @validate(constraint: "gte=0")
  minPrice: Float @validate(constraint: "gte=0")
  maxPrice: Float @validate(constraint: "gte=0")
  minPricePerMeter: Float @validate(constraint: "gte=0")
  maxPricePerMeter: Float @validate(constraint: "gte=0")
  minPricePerAr: Float @validate(constraint: "gte=0")
  maxPricePerAr: Float @validate(constraint: "gte=0")
  minArea: Float @validate(constraint: "gte=0")
  maxArea: Float @validate(constraint: "gte=0")
  minLandArea: Float @validate(constraint: "gte=0")
  maxLandArea: Float @validate(constraint: "gte=0")
  isReady: Boolean @validate(constraint: "boolean")
  inCity: Boolean @validate(constraint: "boolean")
  minCityDistance: Int @validate(constraint: "gte=0")
  maxCityDistance: Int @validate(constraint: "gte=0")
  minCreatedAt: Time
  maxCreatedAt: Time
  withPhotos: Boolean @validate(constraint: "boolean")
}

extend type Query {
  properties(
    """
    Перечень идентификаторов для ограничения выборки
    """
    ids: [ID!] @validate(constraint: "dive,required,mongodb")
    """
    Начало для постраничной навигации
    """
    start: Int @validate(constraint: "number,gte=0")
    """
    Количество элементов для постраничной навигации
    """
    limit: Int @validate(constraint: "number,gte=1")
    """
    Режим сортировки
    """
    sort: Sort
    """
    Ключевые слова для полнотекстового поиска
    """
    search: String @validate(constraint: "min=3,max=32")
    """
    Дополнительные параметры фильтрации
    """
    filter: PropertyFilter
  ): PropertyConnection! @auth

  property(id: ID! @validate(constraint: "required,mongodb")): Property! @auth
}

extend type Mutation {
  saveProperty(input: PropertyInput!): Boolean! @auth
  deleteProperty(id: ID!): Boolean! @auth
  refreshProperty(id: ID!): Boolean! @auth
  approveProperty(id: ID!): Boolean! @auth
  declineProperty(id: ID!): Boolean! @auth
  archiveProperty(id: ID!): Boolean! @auth

  """
  Массовое удаление объектов по идентификаторам
  """
  bulkDeleteProperties(ids: [ID!]!): Boolean! @auth
  bulkRefreshProperties(ids: [ID!]!): Boolean! @auth
  bulkApproveProperties(ids: [ID!]!): Boolean! @auth
  bulkDeclineProperties(ids: [ID!]!): Boolean! @auth
  bulkArchiveProperties(ids: [ID!]!): Boolean! @auth
}
`, BuiltIn: false},
	{Name: "../schema/reviews.graphql", Input: `"""
Отзыв
"""
type Review {
  """
  Уникальный идентификатор
  """
  id: ID!
  """
  Сотрудник
  """
  employee: Employee @goField(forceResolver: true)
  """
  Текст отзыва
  """
  text: String!
  """
  Имя автора
  """
  authorName: String!
  """
  Номер телефона автора
  """
  authorPhone: String!
  """
  Статус отзыва
  """
  status: ReviewStatusEnum!
  """
  Статус публикации
  """
  publicationStatus: PublicationStatusEnum!
  """
  Дата и время создания
  """
  createdAt: Time!
  """
  Дата и время обновления
  """
  updatedAt: Time!
}

#
# Выдача списочного результата
#

type ReviewConnection {
  totalCount: Int!
  edges: [ReviewEdge!]!
  nodes: [Review!]!
  pageInfo: PageInfo!
}

type ReviewEdge {
  node: Review!
  cursor: Cursor!
}

"""
Расширенный фильтр по отзывам
"""
input ReviewsFilterInput {
  """
  Набор статусов для фильтрации
  """
  status: ReviewStatusEnum
  """
  Набор статусов для фильтрации
  """
  publicationStatus: PublicationStatusEnum
  """
  Набор идентфикаторов сотрудников для фильтрации
  """
  employeeID: ID @validate(constraint: "mongodb")
}

"""
Входные параметры для обновления вакансии
"""
input ReviewInput {
  """
  Уникальный идентификатор
  При отсутствии будет создан автоматически
  """
  id: ID @validate(constraint: "mongodb")
  """
  Идентификатор сотрудника
  """
  employeeID: ID! @validate(constraint: "required,mongodb")
  """
  Текст отзыва
  """
  text: String! @validate(constraint: "required,max=100,min=3")
  """
  Имя автора
  """
  authorName: String! @validate(constraint: "required,max=100,min=3")
  """
  Номер телефона автора
  """
  authorPhone: String! @validate(constraint: "required,max=100,min=3")
  """
  Статус отзыва
  """
  status: ReviewStatusEnum! @validate(constraint: "required")
}

"""
Статус отзыва
"""
enum ReviewStatusEnum {
  """
  Новый
  """
  NEW
  """
  Подтверждён
  """
  APPROVED
  """
  Отклонён
  """
  DECLINED
}

extend type Query {
  """
  Получение списка отзывов
  """
  reviews(
    """
    Перечень идентификаторов для ограничения выборки
    """
    ids: [ID!] @validate(constraint: "dive,required,mongodb")
    """
    Начало для постраничной навигации
    """
    start: Int @validate(constraint: "number,gte=0")
    """
    Количество элементов для постраничной навигации
    """
    limit: Int @validate(constraint: "number,gte=1")
    """
    Режим сортировки
    """
    sort: Sort
    """
    Ключевые слова для полнотекстового поиска
    """
    search: String @validate(constraint: "min=3,max=32")
    """
    Расширенный фильтр
    """
    filter: ReviewsFilterInput
  ): ReviewConnection! @auth

  """
  Получение отзыва по идентификатору
  """
  review(
    """
    Уникальный идентификатор
    """
    id: ID! @validate(constraint: "required,mongodb")
  ): Review! @auth
}

extend type Mutation {
  """
  Сохранение отзыва
  """
  saveReview(
    """
    Информация об отзыве
    """
    input: ReviewInput!
  ): Boolean! @hasPermission(permission: "CONTENT_SAVE_REVIEW")

  """
  Удаление отзыва
  """
  deleteReview(
    """
    Уникальный идентификатор
    """
    id: ID!
  ): Boolean! @hasPermission(permission: "CONTENT_DELETE_REVIEW")

  """
  Массовое подтверждение отзывов
  """
  bulkApproveReviews(
    """
    Массив уникальных идентификаторов
    """
    ids: [ID!]!
  ): Boolean! @hasPermission(permission: "CONTENT_SAVE_REVIEW")

  """
  Массовое отклонение отзывов
  """
  bulkDeclineReviews(
    """
    Массив уникальных идентификаторов
    """
    ids: [ID!]!
  ): Boolean! @hasPermission(permission: "CONTENT_SAVE_REVIEW")

  """
  Массовое удаление отзывов
  """
  bulkDeleteReviews(
    """
    Массив уникальных идентификаторов
    """
    ids: [ID!]!
  ): Boolean! @hasPermission(permission: "CONTENT_DELETE_REVIEW")
}
`, BuiltIn: false},
	{Name: "../schema/roles.graphql", Input: `"""
Роль
"""
type Role {
  """
  Уникальный идентифкатор
  """
  id: ID!
  """
  Название роли
  """
  title: String!
  """
  Набор доступных полномочий в виде массива строк
  """
  permissions: [RolePermissionsEnum!]!
  """
  Дата и время создания
  """
  createdAt: Time!
  """
  Дата и время обновления
  """
  updatedAt: Time!
}

#
# Выдача списочного результата
#

"""
Результат списочного метода
"""
type RoleConnection {
  """
  Общее количество записей
  """
  totalCount: Int!
  """
  Конечные точки
  """
  edges: [RoleEdge!]!
  """
  Объекты
  """
  nodes: [Role!]!
  """
  Информация для постраничной навигации
  """
  pageInfo: PageInfo!
}

"""
Конечная точка
"""
type RoleEdge {
  """
  Объект
  """
  node: Role!
  """
  Курсор (идентификатор объекта)
  """
  cursor: Cursor!
}

"""
Список доступных разрешений
"""
enum RolePermissionsEnum {
  STAFF_SAVE_EMPLOYEE
  STAFF_SAVE_POSITION
  STAFF_SAVE_DEPARTMENT
  STAFF_SAVE_ROLE

  STAFF_DELETE_EMPLOYEE
  STAFF_DELETE_POSITION
  STAFF_DELETE_DEPARTMENT
  STAFF_DELETE_ROLE

  CONTENT_SAVE_ARTICLE
  CONTENT_SAVE_ARTICLE_GROUP
  CONTENT_SAVE_PAGE
  CONTENT_SAVE_REVIEW
  CONTENT_SAVE_STORY
  CONTENT_SAVE_VACANCY

  CONTENT_DELETE_ARTICLE
  CONTENT_DELETE_ARTICLE_GROUP
  CONTENT_DELETE_PAGE
  CONTENT_DELETE_REVIEW
  CONTENT_DELETE_STORY
  CONTENT_DELETE_VACANCY

  SYSTEM_VIEW_LOG
}

"""
Входные параметры для роли
"""
input RoleInput {
  """
  Уникальный идентифкатор
  При отсутствии будет создан автоматически
  """
  id: ID @validate(constraint: "mongodb")
  """
  Название роли
  """
  title: String! @validate(constraint: "required,max=100,min=3")
  """
  Набор полномочий
  """
  permissions: [RolePermissionsEnum!]!
    @validate(constraint: "required,dive,required")
}

extend type Query {
  """
  Получение списка ролей
  """
  roles(
    """
    Перечень идентификаторов для ограничения выборки
    """
    ids: [ID!] @validate(constraint: "dive,required,mongodb")
    """
    Начало для постраничной навигации
    """
    start: Int @validate(constraint: "number,gte=0")
    """
    Количество элементов для постраничной навигации
    """
    limit: Int @validate(constraint: "number,gte=1")
    """
    Режим сортировки
    """
    sort: Sort
    """
    Ключевые слова для полнотекстового поиска
    """
    search: String @validate(constraint: "min=3,max=32")
  ): RoleConnection! @auth

  """
  Получение роли по идентификатору
  """
  role(
    """
    Уникальный идентификатор роли
    """
    id: ID! @validate(constraint: "required,mongodb")
  ): Role! @auth
}

extend type Mutation {
  """
  Сохранение роли
  """
  saveRole(
    """
    Информация о роли
    """
    input: RoleInput!
  ): Boolean! @hasPermission(permission: "STAFF_SAVE_ROLE")

  """
  Удаление роли
  """
  deleteRole(
    """
    Уникальный идентификатор роли
    """
    id: ID!
  ): Boolean! @hasPermission(permission: "STAFF_DELETE_ROLE")
}
`, BuiltIn: false},
	{Name: "../schema/stories.graphql", Input: `"""
Новость
"""
type Story {
  """
  Уникальный идентификатор
  """
  id: ID!
  category: StoryCategoryEnum!
  """
  Название
  """
  title: String!
  teaser: String
  contentBlocks: [ContentBlock!]!
  cover: Image
  status: PublicationStatusEnum!
  """
  Дата и время создания
  """
  createdAt: Time!
  """
  Дата и время обновления
  """
  updatedAt: Time!
}

#
# Выдача списочного результата
#

type StoryConnection {
  totalCount: Int!
  edges: [StoryEdge!]!
  nodes: [Story!]!
  pageInfo: PageInfo!
}

type StoryEdge {
  node: Story!
  cursor: Cursor!
}

input StoryFilterInput {
  category: StoryCategoryEnum
  publicationStatus: PublicationStatusEnum
}

"""
Входные параметры для новости
"""
input StoryInput {
  """
  Уникальный идентификатор
  При отсутствии будет создан автоматически
  """
  id: ID @validate(constraint: "mongodb")
  """
  Категория
  """
  category: StoryCategoryEnum! @validate(constraint: "required")
  """
  Название
  """
  title: String! @validate(constraint: "required,max=100,min=3")
  """
  Тизер
  """
  teaser: String @validate(constraint: "max=100,min=3")
  """
  Текст
  """
  contentBlocks: [ContentBlockInput!]! @validate(constraint: "required")
  """
  Основное изображение (обложка)
  """
  cover: ImageInput
}

"""
Категория новости
"""
enum StoryCategoryEnum {
  """
  Новости
  """
  NEWS
  """
  Недвижимость
  """
  ESTATE
  """
  Жизнь компании
  """
  COMPANY
}

extend type Query {
  """
  Получение списка новостей
  """
  stories(
    """
    Перечень идентификаторов для ограничения выборки
    """
    ids: [ID!] @validate(constraint: "dive,required,mongodb")
    """
    Начало для постраничной навигации
    """
    start: Int @validate(constraint: "number,gte=0")
    """
    Количество элементов для постраничной навигации
    """
    limit: Int @validate(constraint: "number,gte=1")
    """
    Режим сортировки
    """
    sort: Sort
    """
    Ключевые слова для полнотекстового поиска
    """
    search: String @validate(constraint: "min=3,max=32")
    filter: StoryFilterInput
  ): StoryConnection! @auth

  """
  Получение новости по идентификатору
  """
  story(
    """
    Уникальный идентификатор
    """
    id: ID! @validate(constraint: "required,mongodb")
  ): Story! @auth
}

extend type Mutation {
  """
  Сохранение новости
  """
  saveStory(
    """
    Информация о новости
    """
    input: StoryInput!
  ): Boolean! @hasPermission(permission: "CONTENT_SAVE_STORY")

  """
  Удаление новости
  """
  deleteStory(
    """
    Уникальный идентификатор
    """
    id: ID!
  ): Boolean! @hasPermission(permission: "CONTENT_DELETE_STORY")
}
`, BuiltIn: false},
	{Name: "../schema/tasks.graphql", Input: `enum TaskStatusEnum {
    NEW
    IN_PROGRESS
    COMPLETED
    CLOSED
    OVERDUE
}

enum TaskLabelEnum {
    IMPORTANT
    NO_MATTER
}

type Task {
    id: ID! 
    internalNumber: Int
    title: String
    label: TaskLabelEnum
    isHot: Boolean
    status: TaskStatusEnum
    assignee: Employee
    reporter: Employee
    property: Property
    contact: Contact
    contactPhone: String
    lead: Lead
    deal: Deal
    startDate: Time
    durationDays: Int
    durationHours: Int
    details: String
    isCompleted: Boolean
    endDate: Time
    tag: String
    isDeleted: Boolean
    createdAt: Time!
    updatedAt: Time!
}

type TaskConnection {
    totalCount: Int! 
    edges: [TaskEdge!]!
    nodes: [Task!]! 
    pageInfo: PageInfo! 
}

type TaskEdge {
    node: Task! 
    cursor: Cursor! 
}

input TaskInput {
    id: ID @validate(constraint: "mongodb,omitempty")
    title: String @validate(constraint: "omitempty,min=3,max=500")
    status: TaskStatusEnum @validate(constraint: "omitempty")
    label: TaskLabelEnum @validate(constraint: "omitempty")
    isHot: Boolean @validate(constraint: "omitempty,boolean")
    assigneeID: ID @validate(constraint: "mongodb,omitempty")
    reporterID: ID @validate(constraint: "mongodb,omitempty")
    propertyID: ID @validate(constraint: "mongodb,omitempty")
    contactID: ID @validate(constraint: "mongodb,omitempty")
    contactPhone: String @validate(constraint: "omitempty,len=11,startswith=8,number")
    leadID: ID @validate(constraint: "mongodb,omitempty")
    dealID: ID @validate(constraint: "mongodb,omitempty")
    startDate: Time @validate(constraint: "omitempty")
    durationDays: Int @validate(constraint: "omitempty")
    durationHours: Int @validate(constraint: "omitempty")
    details: String @validate(constraint: "max=1000,omitempty" )
    tag: String @validate(constraint: "max=30,omitempty")
}

input TaskFilter {
    status: TaskStatusEnum @validate(constraint: "omitempty")
    lead: ID @validate(constraint: "mongodb,omitempty")
    deal: ID @validate(constraint: "mongodb,omitempty")
    phone: String @validate(constraint: "len=11,startswith=8,number,omitempty")
    assignee: ID @validate (constraint: "mongodb,omitempty")
    reporter: ID @validate (constraint: "mongodb,omitempty")
    contact: ID @validate(constraint: "mongodb,omitempty")
    property: ID @validate(constraint: "mongodb,omitempty")
    isHot: Boolean @validate(constraint: "omitempty,boolean")
    label: TaskLabelEnum @validate(constraint: "omitempty")
    createdAtMin: Time @validate(constraint: "omitempty")
    createdAtMax: Time @validate(constraint: "omitempty")
}

extend type Query {
    tasks(
        ids: [ID!] @validate(constraint: "dive,omitempty,mongodb")
        start: Int @validate(constraint: "number,gte=0,omitempty")
        limit: Int @validate(constraint: "number,gte=1,omitemtpy")
        sort: Sort @validate(constraint: "omitempty")
        search: String @validate(constraint: "max=32,omitempty")
        filter: TaskFilter @validate(constraint: "omitempty")
    ): TaskConnection! @auth

    task(id: ID! @validate(constraint: "required,mongodb")): Task! @auth
}

extend type Mutation {
    saveTask(input: TaskInput!): Boolean! @auth
    deleteTask(id: ID! @validate(constraint: "required,mongodb")): Boolean! @auth
    completeTask(id: ID! @validate(constraint:"required,mongodb")): Boolean! @auth
    bulkCompleteTasks(ids: [ID!]! @validate(constraint: "dive,required,mongodb")): Boolean! @auth
    bulkDeleteTasks(ids: [ID!]! @validate(constraint: "dive,required,mongodb")): Boolean! @auth
}

`, BuiltIn: false},
	{Name: "../schema/vacancies.graphql", Input: `"""
Вакансия
"""
type Vacancy {
  """
  Уникальный идентификатор
  """
  id: ID!
  """
  Название вакансии
  """
  title: String!
  """
  Описание вакансии
  """
  description: String!
  """
  Стаж
  """
  experience: String
  """
  Заработная плата
  """
  salary: String
  """
  График работы
  """
  schedule: VacancyScheduleEnum!
  """
  Статус вакансии
  """
  publicationStatus: PublicationStatusEnum!
  """
  Дата и время создания
  """
  createdAt: Time!
  """
  Дата и время обновления
  """
  updatedAt: Time!
}

#
# Выдача списочного результата
#

type VacancyConnection {
  totalCount: Int!
  edges: [VacancyEdge!]!
  nodes: [Vacancy!]!
  pageInfo: PageInfo!
}

type VacancyEdge {
  node: Vacancy!
  cursor: Cursor!
}

"""
Входные параметры для вакансии
"""
input VacancyInput {
  """
  Уникальный идентификатор
  При отсутствии будет создан автоматически
  """
  id: ID @validate(constraint: "mongodb")
  """
  Название вакансии
  """
  title: String! @validate(constraint: "required,max=100,min=3")
  """
  Описание вакансии
  """
  description: String! @validate(constraint: "required,max=1000,min=3")
  """
  Стаж
  """
  experience: String @validate(constraint: "max=100,min=3")
  """
  Зарабтная плата
  """
  salary: String @validate(constraint: "max=100,min=3")
  """
  График работы
  """
  schedule: VacancyScheduleEnum! @validate(constraint: "required")
  """
  Статус вакансии
  """
  publicationStatus: PublicationStatusEnum! @validate(constraint: "required")
}

"""
График работы по вакансии
"""
enum VacancyScheduleEnum {
  """
  Полный день
  """
  FULL_TIME
  """
  Частичная занятость
  """
  PART_TIME
}

extend type Query {
  """
  Получение списка вакансий
  """
  vacancies(
    """
    Перечень идентификаторов для ограничения выборки
    """
    ids: [ID!] @validate(constraint: "dive,required,mongodb")
    """
    Начало для постраничной навигации
    """
    start: Int @validate(constraint: "number,gte=0")
    """
    Количество элементов для постраничной навигации
    """
    limit: Int @validate(constraint: "number,gte=1")
    """
    Режим сортировки
    """
    sort: Sort
    """
    Ключевые слова для полнотекстового поиска
    """
    search: String @validate(constraint: "min=3,max=32")
  ): VacancyConnection! @auth

  """
  Получение вакансии по идентификатору
  """
  vacancy(
    """
    Уникальный идентификатор
    """
    id: ID! @validate(constraint: "required,mongodb")
  ): Vacancy! @auth
}

extend type Mutation {
  """
  Сохранение вакансии
  """
  saveVacancy(
    """
    Информация о вакансии
    """
    input: VacancyInput!
  ): Boolean! @hasPermission(permission: "CONTENT_SAVE_VACANCY")

  """
  Удаление вакансии
  """
  deleteVacancy(
    """
    Уникальный идентификатор
    """
    id: ID!
  ): Boolean! @hasPermission(permission: "CONTENT_DELETE_VACANCY")
}
`, BuiltIn: false},
	{Name: "../schema/vacancyRequests.graphql", Input: `"""
Отклик на вакансию
"""
type VacancyRequest {
  """
  Уникальный идентификатор
  """
  id: ID!
  """
  Связанная вакансия
  """
  vacancy: Vacancy!
  """
  Имя соискателя
  """
  name: String!
  """
  Сопроводительное письмо
  """
  letter: String!
  """
  Вложения
  """
  attachments: [Document!]
  """
  Внутренний комментарий
  """
  internalComment: String
  """
  Статус отклика
  """
  status: VacancyRequestStatusEnum!
  """
  Дата и время создания
  """
  createdAt: Time!
  """
  Дата и время обновления
  """
  updatedAt: Time!
}

#
# Выдача списочного результата
#

type VacancyRequestConnection {
  totalCount: Int!
  edges: [VacancyRequestEdge!]!
  nodes: [VacancyRequest!]!
  pageInfo: PageInfo!
}

type VacancyRequestEdge {
  node: VacancyRequest!
  cursor: Cursor!
}

"""
Статус отклика на вакансию
"""
enum VacancyRequestStatusEnum {
  """
  Новый
  """
  NEW
  """
  Отклонён
  """
  DECLINED
  """
  Принят в работу
  """
  APPROVED
}

extend type Query {
  """
  Получение списка откликов
  """
  vacancyRequests(
    """
    Перечень идентификаторов для ограничения выборки
    """
    ids: [ID!] @validate(constraint: "dive,required,mongodb")
    """
    Начало для постраничной навигации
    """
    start: Int @validate(constraint: "number,gte=0")
    """
    Количество элементов для постраничной навигации
    """
    limit: Int @validate(constraint: "number,gte=1")
    """
    Режим сортировки
    """
    sort: Sort
    """
    Ключевые слова для полнотекстового поиска
    """
    search: String @validate(constraint: "min=3,max=32")
  ): VacancyRequestConnection! @auth

  """
  Получение отклика по идентификатору
  """
  vacancyRequest(
    """
    Уникальный идентификатор
    """
    id: ID! @validate(constraint: "required,mongodb")
  ): VacancyRequest! @auth
}

extend type Mutation {
  approveVacancyRequest(
    """
    Уникальный идентификатор
    """
    id: ID! @validate(constraint: "required,mongodb")
  ): Boolean! @auth

  declineVacancyRequest(
    """
    Уникальный идентификатор
    """
    id: ID! @validate(constraint: "required,mongodb")
  ): Boolean! @auth
}
`, BuiltIn: false},
	{Name: "../schema/villages.graphql", Input: `type Village {
  id: ID!

  title: String!
  description: String!
  address: String!
  lat: Float
  lon: Float
  cadastrNumber: String
  seoText: String
  youtubeLink: String
  tourLink: String

  inCity: Boolean
  cityDistance: Int
  region: String
  subRegion: String

  developer: Developer @goField(forceResolver: true)

  isReady: Boolean
  readinessQuarter: QuarterEnum
  readinessYear: Int

  images: [Image!] @goField(forceResolver: true)
  documents: [Document!] @goField(forceResolver: true)
  projectDeclarations: [Document!] @goField(forceResolver: true)

  publicationStatus: PublicationStatusEnum

  internalInfo: String

  isDeleted: Boolean

  createdAt: Time!
  updatedAt: Time!
}

type VillageConnection {
  totalCount: Int!
  edges: [VillageEdge!]!
  nodes: [Village!]!
  pageInfo: PageInfo!
}

type VillageEdge {
  node: Village!
  cursor: Cursor!
}

input VillageInput {
  id: ID @validate(constraint: "omitempty,mongodb")

  title: String! @validate(constraint: "required,min=3,max=256")
  description: String! @validate(constraint: "required,min=3,max=4096")
  address: String! @validate(constraint: "required,min=3,max=256")
  lat: Float @validate(constraint: "omitempty,latitude")
  lon: Float @validate(constraint: "omitempty,longitude")
  cadastrNumber: String @validate(constraint: "omitempty,max=20")
  seoText: String @validate(constraint: "omitempty,max=1024")
  youtubeLink: String @validate(constraint: "omitempty,url")
  tourLink: String @validate(constraint: "omitempty,url")

  inCity: Boolean @validate(constraint: "omitempty,boolean")
  cityDistance: Int @validate(constraint: "omitempty,gte=0")
  region: String @validate(constraint: "omitempty,max=256")
  subRegion: String @validate(constraint: "omitempty,max=256")

  developerID: ID @validate(constraint: "omitempty,mongodb")

  isReady: Boolean @validate(constraint: "omitempty,boolean")
  readinessQuarter: QuarterEnum @validate(constraint: "omitempty")
  readinessYear: Int @validate(constraint: "omitempty,gte=1800,lte=3000")

  images: [ImageInput!] @validate(constraint: "omitempty")
  documents: [DocumentInput!] @validate(constraint: "omitempty")
  projectDeclarations: [DocumentInput!] @validate(constraint: "omitempty")

  publicationStatus: PublicationStatusEnum @validate(constraint: "omitempty")

  internalInfo: String @validate(constraint: "omitempty,max=256")
}

input VillageFilter {
  developerID: ID @validate(constraint: "mongodb")
  isDeleted: Boolean @validate(constraint: "boolean")
  publicationStatus: PublicationStatusEnum
  withPhotos: Boolean @validate(constraint: "boolean")
}

extend type Query {
  """
  Запрос списка КП
  """
  villages(
    """
    Перечень идентификаторов для ограничения выборки
    """
    ids: [ID!] @validate(constraint: "dive,required,mongodb")
    """
    Начало для постраничной навигации
    """
    start: Int @validate(constraint: "number,gte=0")
    """
    Количество элементов для постраничной навигации
    """
    limit: Int @validate(constraint: "number,gte=1")
    """
    Режим сортировки
    """
    sort: Sort
    """
    Ключевые слова для полнотекстового поиска
    """
    search: String @validate(constraint: "min=3,max=32")
    """
    Дополнительные параметры фильтрации
    """
    filter: VillageFilter
  ): VillageConnection! @auth

  """
  Запрос КП по идентификатору
  """
  village(id: ID! @validate(constraint: "required,mongodb")): Village! @auth
}

extend type Mutation {
  """
  Создание/Редактирование КП
  """
  saveVillage(input: VillageInput!): Boolean! @auth

  """
  Удаление КП по идентификатору
  """
  deleteVillage(id: ID!): Boolean! @auth

  """
  Массовое удаление КП по идентификаторам
  """
  bulkDeleteVillages(ids: [ID!]!): Boolean! @auth
}
`, BuiltIn: false},
}
var parsedSchema = gqlparser.MustLoadSchema(sources...)

// endregion ************************** generated!.gotpl **************************

// region    ***************************** args.gotpl *****************************

func (ec *executionContext) dir_hasPermission_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["permission"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("permission"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["permission"] = arg0
	return args, nil
}

func (ec *executionContext) dir_validate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["constraint"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("constraint"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["constraint"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_activateEmployees_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []string
	if tmp, ok := rawArgs["ids"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ids"))
		arg0, err = ec.unmarshalNID2ᚕstringᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["ids"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_approveProperty_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_approveVacancyRequest_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalNID2string(ctx, tmp) }
		directive1 := func(ctx context.Context) (interface{}, error) {
			constraint, err := ec.unmarshalNString2string(ctx, "required,mongodb")
			if err != nil {
				return nil, err
			}
			if ec.directives.Validate == nil {
				return nil, errors.New("directive validate is not implemented")
			}
			return ec.directives.Validate(ctx, rawArgs, directive0, constraint)
		}

		tmp, err = directive1(ctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if data, ok := tmp.(string); ok {
			arg0 = data
		} else {
			return nil, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be string`, tmp))
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_archiveProperty_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_assignDepartmentToEmployees_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["department"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("department"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["department"] = arg0
	var arg1 []string
	if tmp, ok := rawArgs["ids"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ids"))
		arg1, err = ec.unmarshalNID2ᚕstringᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["ids"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_assignRoleToEmployees_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["role"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("role"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["role"] = arg0
	var arg1 []string
	if tmp, ok := rawArgs["ids"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ids"))
		arg1, err = ec.unmarshalNID2ᚕstringᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["ids"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_bulkApproveProperties_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []string
	if tmp, ok := rawArgs["ids"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ids"))
		arg0, err = ec.unmarshalNID2ᚕstringᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["ids"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_bulkApproveReviews_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []string
	if tmp, ok := rawArgs["ids"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ids"))
		arg0, err = ec.unmarshalNID2ᚕstringᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["ids"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_bulkArchiveProperties_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []string
	if tmp, ok := rawArgs["ids"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ids"))
		arg0, err = ec.unmarshalNID2ᚕstringᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["ids"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_bulkChangeDealsStage_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []string
	if tmp, ok := rawArgs["ids"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ids"))
		directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalNID2ᚕstringᚄ(ctx, tmp) }
		directive1 := func(ctx context.Context) (interface{}, error) {
			constraint, err := ec.unmarshalNString2string(ctx, "dive,required,mongodb")
			if err != nil {
				return nil, err
			}
			if ec.directives.Validate == nil {
				return nil, errors.New("directive validate is not implemented")
			}
			return ec.directives.Validate(ctx, rawArgs, directive0, constraint)
		}

		tmp, err = directive1(ctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if data, ok := tmp.([]string); ok {
			arg0 = data
		} else if tmp == nil {
			arg0 = nil
		} else {
			return nil, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be []string`, tmp))
		}
	}
	args["ids"] = arg0
	var arg1 crm_models.DealStageEnum
	if tmp, ok := rawArgs["stage"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stage"))
		directive0 := func(ctx context.Context) (interface{}, error) {
			return ec.unmarshalNDealStageEnum2githubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐDealStageEnum(ctx, tmp)
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			constraint, err := ec.unmarshalNString2string(ctx, "required")
			if err != nil {
				return nil, err
			}
			if ec.directives.Validate == nil {
				return nil, errors.New("directive validate is not implemented")
			}
			return ec.directives.Validate(ctx, rawArgs, directive0, constraint)
		}

		tmp, err = directive1(ctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if data, ok := tmp.(crm_models.DealStageEnum); ok {
			arg1 = data
		} else {
			return nil, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be github.com/pinks-agency/ecn/server/internal/crm-facade/models.DealStageEnum`, tmp))
		}
	}
	args["stage"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_bulkChangeLeadsStatus_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []string
	if tmp, ok := rawArgs["ids"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ids"))
		directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalNID2ᚕstringᚄ(ctx, tmp) }
		directive1 := func(ctx context.Context) (interface{}, error) {
			constraint, err := ec.unmarshalNString2string(ctx, "dive,required,mongodb")
			if err != nil {
				return nil, err
			}
			if ec.directives.Validate == nil {
				return nil, errors.New("directive validate is not implemented")
			}
			return ec.directives.Validate(ctx, rawArgs, directive0, constraint)
		}

		tmp, err = directive1(ctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if data, ok := tmp.([]string); ok {
			arg0 = data
		} else if tmp == nil {
			arg0 = nil
		} else {
			return nil, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be []string`, tmp))
		}
	}
	args["ids"] = arg0
	var arg1 crm_models.LeadStatusEnum
	if tmp, ok := rawArgs["status"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status"))
		directive0 := func(ctx context.Context) (interface{}, error) {
			return ec.unmarshalNLeadStatusEnum2githubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐLeadStatusEnum(ctx, tmp)
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			constraint, err := ec.unmarshalNString2string(ctx, "required")
			if err != nil {
				return nil, err
			}
			if ec.directives.Validate == nil {
				return nil, errors.New("directive validate is not implemented")
			}
			return ec.directives.Validate(ctx, rawArgs, directive0, constraint)
		}

		tmp, err = directive1(ctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if data, ok := tmp.(crm_models.LeadStatusEnum); ok {
			arg1 = data
		} else {
			return nil, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be github.com/pinks-agency/ecn/server/internal/crm-facade/models.LeadStatusEnum`, tmp))
		}
	}
	args["status"] = arg1
	var arg2 *string
	if tmp, ok := rawArgs["comment"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("comment"))
		directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚖstring(ctx, tmp) }
		directive1 := func(ctx context.Context) (interface{}, error) {
			constraint, err := ec.unmarshalNString2string(ctx, "omitempty")
			if err != nil {
				return nil, err
			}
			if ec.directives.Validate == nil {
				return nil, errors.New("directive validate is not implemented")
			}
			return ec.directives.Validate(ctx, rawArgs, directive0, constraint)
		}

		tmp, err = directive1(ctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if data, ok := tmp.(*string); ok {
			arg2 = data
		} else if tmp == nil {
			arg2 = nil
		} else {
			return nil, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp))
		}
	}
	args["comment"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_bulkChangeMeetsStatus_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []string
	if tmp, ok := rawArgs["ids"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ids"))
		directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalNID2ᚕstringᚄ(ctx, tmp) }
		directive1 := func(ctx context.Context) (interface{}, error) {
			constraint, err := ec.unmarshalNString2string(ctx, "dive,required,mongodb")
			if err != nil {
				return nil, err
			}
			if ec.directives.Validate == nil {
				return nil, errors.New("directive validate is not implemented")
			}
			return ec.directives.Validate(ctx, rawArgs, directive0, constraint)
		}

		tmp, err = directive1(ctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if data, ok := tmp.([]string); ok {
			arg0 = data
		} else if tmp == nil {
			arg0 = nil
		} else {
			return nil, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be []string`, tmp))
		}
	}
	args["ids"] = arg0
	var arg1 crm_models.MeetStatusEnum
	if tmp, ok := rawArgs["status"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status"))
		directive0 := func(ctx context.Context) (interface{}, error) {
			return ec.unmarshalNMeetStatusEnum2githubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐMeetStatusEnum(ctx, tmp)
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			constraint, err := ec.unmarshalNString2string(ctx, "required")
			if err != nil {
				return nil, err
			}
			if ec.directives.Validate == nil {
				return nil, errors.New("directive validate is not implemented")
			}
			return ec.directives.Validate(ctx, rawArgs, directive0, constraint)
		}

		tmp, err = directive1(ctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if data, ok := tmp.(crm_models.MeetStatusEnum); ok {
			arg1 = data
		} else {
			return nil, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be github.com/pinks-agency/ecn/server/internal/crm-facade/models.MeetStatusEnum`, tmp))
		}
	}
	args["status"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_bulkChangeMortgageRequestsStatus_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []string
	if tmp, ok := rawArgs["ids"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ids"))
		directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalNID2ᚕstringᚄ(ctx, tmp) }
		directive1 := func(ctx context.Context) (interface{}, error) {
			constraint, err := ec.unmarshalNString2string(ctx, "dive,required,mongodb")
			if err != nil {
				return nil, err
			}
			if ec.directives.Validate == nil {
				return nil, errors.New("directive validate is not implemented")
			}
			return ec.directives.Validate(ctx, rawArgs, directive0, constraint)
		}

		tmp, err = directive1(ctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if data, ok := tmp.([]string); ok {
			arg0 = data
		} else if tmp == nil {
			arg0 = nil
		} else {
			return nil, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be []string`, tmp))
		}
	}
	args["ids"] = arg0
	var arg1 crm_models.MortgageRequestStatusEnum
	if tmp, ok := rawArgs["status"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status"))
		directive0 := func(ctx context.Context) (interface{}, error) {
			return ec.unmarshalNMortgageRequestStatusEnum2githubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐMortgageRequestStatusEnum(ctx, tmp)
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			constraint, err := ec.unmarshalNString2string(ctx, "required")
			if err != nil {
				return nil, err
			}
			if ec.directives.Validate == nil {
				return nil, errors.New("directive validate is not implemented")
			}
			return ec.directives.Validate(ctx, rawArgs, directive0, constraint)
		}

		tmp, err = directive1(ctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if data, ok := tmp.(crm_models.MortgageRequestStatusEnum); ok {
			arg1 = data
		} else {
			return nil, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be github.com/pinks-agency/ecn/server/internal/crm-facade/models.MortgageRequestStatusEnum`, tmp))
		}
	}
	args["status"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_bulkCompleteTasks_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []string
	if tmp, ok := rawArgs["ids"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ids"))
		directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalNID2ᚕstringᚄ(ctx, tmp) }
		directive1 := func(ctx context.Context) (interface{}, error) {
			constraint, err := ec.unmarshalNString2string(ctx, "dive,required,mongodb")
			if err != nil {
				return nil, err
			}
			if ec.directives.Validate == nil {
				return nil, errors.New("directive validate is not implemented")
			}
			return ec.directives.Validate(ctx, rawArgs, directive0, constraint)
		}

		tmp, err = directive1(ctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if data, ok := tmp.([]string); ok {
			arg0 = data
		} else if tmp == nil {
			arg0 = nil
		} else {
			return nil, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be []string`, tmp))
		}
	}
	args["ids"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_bulkDeclineProperties_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []string
	if tmp, ok := rawArgs["ids"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ids"))
		arg0, err = ec.unmarshalNID2ᚕstringᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["ids"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_bulkDeclineReviews_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []string
	if tmp, ok := rawArgs["ids"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ids"))
		arg0, err = ec.unmarshalNID2ᚕstringᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["ids"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_bulkDeleteComplexHouses_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []string
	if tmp, ok := rawArgs["ids"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ids"))
		arg0, err = ec.unmarshalNID2ᚕstringᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["ids"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_bulkDeleteComplexes_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []string
	if tmp, ok := rawArgs["ids"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ids"))
		arg0, err = ec.unmarshalNID2ᚕstringᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["ids"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_bulkDeleteContacts_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []string
	if tmp, ok := rawArgs["ids"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ids"))
		directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalNID2ᚕstringᚄ(ctx, tmp) }
		directive1 := func(ctx context.Context) (interface{}, error) {
			constraint, err := ec.unmarshalNString2string(ctx, "dive,required,mongodb")
			if err != nil {
				return nil, err
			}
			if ec.directives.Validate == nil {
				return nil, errors.New("directive validate is not implemented")
			}
			return ec.directives.Validate(ctx, rawArgs, directive0, constraint)
		}

		tmp, err = directive1(ctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if data, ok := tmp.([]string); ok {
			arg0 = data
		} else if tmp == nil {
			arg0 = nil
		} else {
			return nil, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be []string`, tmp))
		}
	}
	args["ids"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_bulkDeleteDeals_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []string
	if tmp, ok := rawArgs["ids"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ids"))
		directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalNID2ᚕstringᚄ(ctx, tmp) }
		directive1 := func(ctx context.Context) (interface{}, error) {
			constraint, err := ec.unmarshalNString2string(ctx, "dive,required,mongodb")
			if err != nil {
				return nil, err
			}
			if ec.directives.Validate == nil {
				return nil, errors.New("directive validate is not implemented")
			}
			return ec.directives.Validate(ctx, rawArgs, directive0, constraint)
		}

		tmp, err = directive1(ctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if data, ok := tmp.([]string); ok {
			arg0 = data
		} else if tmp == nil {
			arg0 = nil
		} else {
			return nil, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be []string`, tmp))
		}
	}
	args["ids"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_bulkDeleteDevelopers_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []string
	if tmp, ok := rawArgs["ids"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ids"))
		arg0, err = ec.unmarshalNID2ᚕstringᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["ids"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_bulkDeleteLeads_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []string
	if tmp, ok := rawArgs["ids"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ids"))
		directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalNID2ᚕstringᚄ(ctx, tmp) }
		directive1 := func(ctx context.Context) (interface{}, error) {
			constraint, err := ec.unmarshalNString2string(ctx, "dive,required,mongodb")
			if err != nil {
				return nil, err
			}
			if ec.directives.Validate == nil {
				return nil, errors.New("directive validate is not implemented")
			}
			return ec.directives.Validate(ctx, rawArgs, directive0, constraint)
		}

		tmp, err = directive1(ctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if data, ok := tmp.([]string); ok {
			arg0 = data
		} else if tmp == nil {
			arg0 = nil
		} else {
			return nil, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be []string`, tmp))
		}
	}
	args["ids"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_bulkDeleteMeets_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []string
	if tmp, ok := rawArgs["ids"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ids"))
		directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalNID2ᚕstringᚄ(ctx, tmp) }
		directive1 := func(ctx context.Context) (interface{}, error) {
			constraint, err := ec.unmarshalNString2string(ctx, "dive,required,mongodb")
			if err != nil {
				return nil, err
			}
			if ec.directives.Validate == nil {
				return nil, errors.New("directive validate is not implemented")
			}
			return ec.directives.Validate(ctx, rawArgs, directive0, constraint)
		}

		tmp, err = directive1(ctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if data, ok := tmp.([]string); ok {
			arg0 = data
		} else if tmp == nil {
			arg0 = nil
		} else {
			return nil, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be []string`, tmp))
		}
	}
	args["ids"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_bulkDeleteMortgageRequests_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []string
	if tmp, ok := rawArgs["ids"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ids"))
		directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalNID2ᚕstringᚄ(ctx, tmp) }
		directive1 := func(ctx context.Context) (interface{}, error) {
			constraint, err := ec.unmarshalNString2string(ctx, "dive,required,mongodb")
			if err != nil {
				return nil, err
			}
			if ec.directives.Validate == nil {
				return nil, errors.New("directive validate is not implemented")
			}
			return ec.directives.Validate(ctx, rawArgs, directive0, constraint)
		}

		tmp, err = directive1(ctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if data, ok := tmp.([]string); ok {
			arg0 = data
		} else if tmp == nil {
			arg0 = nil
		} else {
			return nil, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be []string`, tmp))
		}
	}
	args["ids"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_bulkDeleteProperties_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []string
	if tmp, ok := rawArgs["ids"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ids"))
		arg0, err = ec.unmarshalNID2ᚕstringᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["ids"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_bulkDeleteReviews_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []string
	if tmp, ok := rawArgs["ids"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ids"))
		arg0, err = ec.unmarshalNID2ᚕstringᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["ids"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_bulkDeleteTasks_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []string
	if tmp, ok := rawArgs["ids"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ids"))
		directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalNID2ᚕstringᚄ(ctx, tmp) }
		directive1 := func(ctx context.Context) (interface{}, error) {
			constraint, err := ec.unmarshalNString2string(ctx, "dive,required,mongodb")
			if err != nil {
				return nil, err
			}
			if ec.directives.Validate == nil {
				return nil, errors.New("directive validate is not implemented")
			}
			return ec.directives.Validate(ctx, rawArgs, directive0, constraint)
		}

		tmp, err = directive1(ctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if data, ok := tmp.([]string); ok {
			arg0 = data
		} else if tmp == nil {
			arg0 = nil
		} else {
			return nil, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be []string`, tmp))
		}
	}
	args["ids"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_bulkDeleteVillages_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []string
	if tmp, ok := rawArgs["ids"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ids"))
		arg0, err = ec.unmarshalNID2ᚕstringᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["ids"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_bulkRefreshProperties_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []string
	if tmp, ok := rawArgs["ids"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ids"))
		arg0, err = ec.unmarshalNID2ᚕstringᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["ids"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_changeDealStage_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalNID2string(ctx, tmp) }
		directive1 := func(ctx context.Context) (interface{}, error) {
			constraint, err := ec.unmarshalNString2string(ctx, "required,mongodb")
			if err != nil {
				return nil, err
			}
			if ec.directives.Validate == nil {
				return nil, errors.New("directive validate is not implemented")
			}
			return ec.directives.Validate(ctx, rawArgs, directive0, constraint)
		}

		tmp, err = directive1(ctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if data, ok := tmp.(string); ok {
			arg0 = data
		} else {
			return nil, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be string`, tmp))
		}
	}
	args["id"] = arg0
	var arg1 crm_models.DealStageEnum
	if tmp, ok := rawArgs["stage"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stage"))
		directive0 := func(ctx context.Context) (interface{}, error) {
			return ec.unmarshalNDealStageEnum2githubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐDealStageEnum(ctx, tmp)
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			constraint, err := ec.unmarshalNString2string(ctx, "required")
			if err != nil {
				return nil, err
			}
			if ec.directives.Validate == nil {
				return nil, errors.New("directive validate is not implemented")
			}
			return ec.directives.Validate(ctx, rawArgs, directive0, constraint)
		}

		tmp, err = directive1(ctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if data, ok := tmp.(crm_models.DealStageEnum); ok {
			arg1 = data
		} else {
			return nil, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be github.com/pinks-agency/ecn/server/internal/crm-facade/models.DealStageEnum`, tmp))
		}
	}
	args["stage"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_changeLeadStatus_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalNID2string(ctx, tmp) }
		directive1 := func(ctx context.Context) (interface{}, error) {
			constraint, err := ec.unmarshalNString2string(ctx, "required,mongodb")
			if err != nil {
				return nil, err
			}
			if ec.directives.Validate == nil {
				return nil, errors.New("directive validate is not implemented")
			}
			return ec.directives.Validate(ctx, rawArgs, directive0, constraint)
		}

		tmp, err = directive1(ctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if data, ok := tmp.(string); ok {
			arg0 = data
		} else {
			return nil, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be string`, tmp))
		}
	}
	args["id"] = arg0
	var arg1 crm_models.LeadStatusEnum
	if tmp, ok := rawArgs["status"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status"))
		directive0 := func(ctx context.Context) (interface{}, error) {
			return ec.unmarshalNLeadStatusEnum2githubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐLeadStatusEnum(ctx, tmp)
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			constraint, err := ec.unmarshalNString2string(ctx, "required")
			if err != nil {
				return nil, err
			}
			if ec.directives.Validate == nil {
				return nil, errors.New("directive validate is not implemented")
			}
			return ec.directives.Validate(ctx, rawArgs, directive0, constraint)
		}

		tmp, err = directive1(ctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if data, ok := tmp.(crm_models.LeadStatusEnum); ok {
			arg1 = data
		} else {
			return nil, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be github.com/pinks-agency/ecn/server/internal/crm-facade/models.LeadStatusEnum`, tmp))
		}
	}
	args["status"] = arg1
	var arg2 *string
	if tmp, ok := rawArgs["comment"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("comment"))
		directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚖstring(ctx, tmp) }
		directive1 := func(ctx context.Context) (interface{}, error) {
			constraint, err := ec.unmarshalNString2string(ctx, "omitempty")
			if err != nil {
				return nil, err
			}
			if ec.directives.Validate == nil {
				return nil, errors.New("directive validate is not implemented")
			}
			return ec.directives.Validate(ctx, rawArgs, directive0, constraint)
		}

		tmp, err = directive1(ctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if data, ok := tmp.(*string); ok {
			arg2 = data
		} else if tmp == nil {
			arg2 = nil
		} else {
			return nil, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp))
		}
	}
	args["comment"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_changeMeetStatus_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalNID2string(ctx, tmp) }
		directive1 := func(ctx context.Context) (interface{}, error) {
			constraint, err := ec.unmarshalNString2string(ctx, "required,mongodb")
			if err != nil {
				return nil, err
			}
			if ec.directives.Validate == nil {
				return nil, errors.New("directive validate is not implemented")
			}
			return ec.directives.Validate(ctx, rawArgs, directive0, constraint)
		}

		tmp, err = directive1(ctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if data, ok := tmp.(string); ok {
			arg0 = data
		} else {
			return nil, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be string`, tmp))
		}
	}
	args["id"] = arg0
	var arg1 crm_models.MeetStatusEnum
	if tmp, ok := rawArgs["status"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status"))
		directive0 := func(ctx context.Context) (interface{}, error) {
			return ec.unmarshalNMeetStatusEnum2githubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐMeetStatusEnum(ctx, tmp)
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			constraint, err := ec.unmarshalNString2string(ctx, "required")
			if err != nil {
				return nil, err
			}
			if ec.directives.Validate == nil {
				return nil, errors.New("directive validate is not implemented")
			}
			return ec.directives.Validate(ctx, rawArgs, directive0, constraint)
		}

		tmp, err = directive1(ctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if data, ok := tmp.(crm_models.MeetStatusEnum); ok {
			arg1 = data
		} else {
			return nil, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be github.com/pinks-agency/ecn/server/internal/crm-facade/models.MeetStatusEnum`, tmp))
		}
	}
	args["status"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_changeMortgageRequestStatus_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalNID2string(ctx, tmp) }
		directive1 := func(ctx context.Context) (interface{}, error) {
			constraint, err := ec.unmarshalNString2string(ctx, "required,mongodb")
			if err != nil {
				return nil, err
			}
			if ec.directives.Validate == nil {
				return nil, errors.New("directive validate is not implemented")
			}
			return ec.directives.Validate(ctx, rawArgs, directive0, constraint)
		}

		tmp, err = directive1(ctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if data, ok := tmp.(string); ok {
			arg0 = data
		} else {
			return nil, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be string`, tmp))
		}
	}
	args["id"] = arg0
	var arg1 crm_models.MortgageRequestStatusEnum
	if tmp, ok := rawArgs["status"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status"))
		directive0 := func(ctx context.Context) (interface{}, error) {
			return ec.unmarshalNMortgageRequestStatusEnum2githubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐMortgageRequestStatusEnum(ctx, tmp)
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			constraint, err := ec.unmarshalNString2string(ctx, "required")
			if err != nil {
				return nil, err
			}
			if ec.directives.Validate == nil {
				return nil, errors.New("directive validate is not implemented")
			}
			return ec.directives.Validate(ctx, rawArgs, directive0, constraint)
		}

		tmp, err = directive1(ctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if data, ok := tmp.(crm_models.MortgageRequestStatusEnum); ok {
			arg1 = data
		} else {
			return nil, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be github.com/pinks-agency/ecn/server/internal/crm-facade/models.MortgageRequestStatusEnum`, tmp))
		}
	}
	args["status"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_completeTask_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalNID2string(ctx, tmp) }
		directive1 := func(ctx context.Context) (interface{}, error) {
			constraint, err := ec.unmarshalNString2string(ctx, "required,mongodb")
			if err != nil {
				return nil, err
			}
			if ec.directives.Validate == nil {
				return nil, errors.New("directive validate is not implemented")
			}
			return ec.directives.Validate(ctx, rawArgs, directive0, constraint)
		}

		tmp, err = directive1(ctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if data, ok := tmp.(string); ok {
			arg0 = data
		} else {
			return nil, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be string`, tmp))
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deactivateEmployees_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []string
	if tmp, ok := rawArgs["ids"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ids"))
		arg0, err = ec.unmarshalNID2ᚕstringᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["ids"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_declineProperty_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_declineVacancyRequest_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalNID2string(ctx, tmp) }
		directive1 := func(ctx context.Context) (interface{}, error) {
			constraint, err := ec.unmarshalNString2string(ctx, "required,mongodb")
			if err != nil {
				return nil, err
			}
			if ec.directives.Validate == nil {
				return nil, errors.New("directive validate is not implemented")
			}
			return ec.directives.Validate(ctx, rawArgs, directive0, constraint)
		}

		tmp, err = directive1(ctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if data, ok := tmp.(string); ok {
			arg0 = data
		} else {
			return nil, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be string`, tmp))
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteArticleGroup_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteArticle_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteComplexHouse_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteComplex_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteContact_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalNID2string(ctx, tmp) }
		directive1 := func(ctx context.Context) (interface{}, error) {
			constraint, err := ec.unmarshalNString2string(ctx, "required,mongodb")
			if err != nil {
				return nil, err
			}
			if ec.directives.Validate == nil {
				return nil, errors.New("directive validate is not implemented")
			}
			return ec.directives.Validate(ctx, rawArgs, directive0, constraint)
		}

		tmp, err = directive1(ctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if data, ok := tmp.(string); ok {
			arg0 = data
		} else {
			return nil, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be string`, tmp))
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteDeal_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalNID2string(ctx, tmp) }
		directive1 := func(ctx context.Context) (interface{}, error) {
			constraint, err := ec.unmarshalNString2string(ctx, "required,mongodb")
			if err != nil {
				return nil, err
			}
			if ec.directives.Validate == nil {
				return nil, errors.New("directive validate is not implemented")
			}
			return ec.directives.Validate(ctx, rawArgs, directive0, constraint)
		}

		tmp, err = directive1(ctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if data, ok := tmp.(string); ok {
			arg0 = data
		} else {
			return nil, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be string`, tmp))
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteDepartment_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteDeveloper_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteDocument_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalNID2string(ctx, tmp) }
		directive1 := func(ctx context.Context) (interface{}, error) {
			constraint, err := ec.unmarshalNString2string(ctx, "required,mongodb")
			if err != nil {
				return nil, err
			}
			if ec.directives.Validate == nil {
				return nil, errors.New("directive validate is not implemented")
			}
			return ec.directives.Validate(ctx, rawArgs, directive0, constraint)
		}

		tmp, err = directive1(ctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if data, ok := tmp.(string); ok {
			arg0 = data
		} else {
			return nil, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be string`, tmp))
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteEmployee_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteEmployees_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []string
	if tmp, ok := rawArgs["ids"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ids"))
		arg0, err = ec.unmarshalNID2ᚕstringᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["ids"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteImage_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalNID2string(ctx, tmp) }
		directive1 := func(ctx context.Context) (interface{}, error) {
			constraint, err := ec.unmarshalNString2string(ctx, "required,mongodb")
			if err != nil {
				return nil, err
			}
			if ec.directives.Validate == nil {
				return nil, errors.New("directive validate is not implemented")
			}
			return ec.directives.Validate(ctx, rawArgs, directive0, constraint)
		}

		tmp, err = directive1(ctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if data, ok := tmp.(string); ok {
			arg0 = data
		} else {
			return nil, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be string`, tmp))
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteLead_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalNID2string(ctx, tmp) }
		directive1 := func(ctx context.Context) (interface{}, error) {
			constraint, err := ec.unmarshalNString2string(ctx, "required,mongodb")
			if err != nil {
				return nil, err
			}
			if ec.directives.Validate == nil {
				return nil, errors.New("directive validate is not implemented")
			}
			return ec.directives.Validate(ctx, rawArgs, directive0, constraint)
		}

		tmp, err = directive1(ctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if data, ok := tmp.(string); ok {
			arg0 = data
		} else {
			return nil, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be string`, tmp))
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteMeet_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalNID2string(ctx, tmp) }
		directive1 := func(ctx context.Context) (interface{}, error) {
			constraint, err := ec.unmarshalNString2string(ctx, "required,mongodb")
			if err != nil {
				return nil, err
			}
			if ec.directives.Validate == nil {
				return nil, errors.New("directive validate is not implemented")
			}
			return ec.directives.Validate(ctx, rawArgs, directive0, constraint)
		}

		tmp, err = directive1(ctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if data, ok := tmp.(string); ok {
			arg0 = data
		} else {
			return nil, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be string`, tmp))
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteMortgageRequest_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalNID2string(ctx, tmp) }
		directive1 := func(ctx context.Context) (interface{}, error) {
			constraint, err := ec.unmarshalNString2string(ctx, "required,mongodb")
			if err != nil {
				return nil, err
			}
			if ec.directives.Validate == nil {
				return nil, errors.New("directive validate is not implemented")
			}
			return ec.directives.Validate(ctx, rawArgs, directive0, constraint)
		}

		tmp, err = directive1(ctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if data, ok := tmp.(string); ok {
			arg0 = data
		} else {
			return nil, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be string`, tmp))
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deletePage_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deletePosition_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteProperty_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteReview_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteRole_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteStory_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteTask_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalNID2string(ctx, tmp) }
		directive1 := func(ctx context.Context) (interface{}, error) {
			constraint, err := ec.unmarshalNString2string(ctx, "required,mongodb")
			if err != nil {
				return nil, err
			}
			if ec.directives.Validate == nil {
				return nil, errors.New("directive validate is not implemented")
			}
			return ec.directives.Validate(ctx, rawArgs, directive0, constraint)
		}

		tmp, err = directive1(ctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if data, ok := tmp.(string); ok {
			arg0 = data
		} else {
			return nil, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be string`, tmp))
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteVacancy_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteVillage_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_login_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["email"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email"))
		directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalNString2string(ctx, tmp) }
		directive1 := func(ctx context.Context) (interface{}, error) {
			constraint, err := ec.unmarshalNString2string(ctx, "required,email")
			if err != nil {
				return nil, err
			}
			if ec.directives.Validate == nil {
				return nil, errors.New("directive validate is not implemented")
			}
			return ec.directives.Validate(ctx, rawArgs, directive0, constraint)
		}

		tmp, err = directive1(ctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if data, ok := tmp.(string); ok {
			arg0 = data
		} else {
			return nil, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be string`, tmp))
		}
	}
	args["email"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["password"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("password"))
		directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalNString2string(ctx, tmp) }
		directive1 := func(ctx context.Context) (interface{}, error) {
			constraint, err := ec.unmarshalNString2string(ctx, "required,min=4,max=32")
			if err != nil {
				return nil, err
			}
			if ec.directives.Validate == nil {
				return nil, errors.New("directive validate is not implemented")
			}
			return ec.directives.Validate(ctx, rawArgs, directive0, constraint)
		}

		tmp, err = directive1(ctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if data, ok := tmp.(string); ok {
			arg1 = data
		} else {
			return nil, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be string`, tmp))
		}
	}
	args["password"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_publishEmployees_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []string
	if tmp, ok := rawArgs["ids"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ids"))
		arg0, err = ec.unmarshalNID2ᚕstringᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["ids"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_refreshProperty_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_saveArticleGroup_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 crm_models.ArticleGroupInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNArticleGroupInput2githubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐArticleGroupInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_saveArticle_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 crm_models.ArticleInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNArticleInput2githubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐArticleInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_saveComplexHouse_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 crm_models.ComplexHouseInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNComplexHouseInput2githubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐComplexHouseInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_saveComplex_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 crm_models.ComplexInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNComplexInput2githubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐComplexInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_saveContact_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 crm_models.ContactInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNContactInput2githubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐContactInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_saveDeal_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 crm_models.DealInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNDealInput2githubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐDealInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_saveDepartment_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 crm_models.DepartmentInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNDepartmentInput2githubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐDepartmentInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_saveDeveloper_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 crm_models.DeveloperInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNDeveloperInput2githubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐDeveloperInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_saveEmployee_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 crm_models.EmployeeInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNEmployeeInput2githubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐEmployeeInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_saveLead_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 crm_models.LeadInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNLeadInput2githubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐLeadInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_saveMeet_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 crm_models.MeetInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNMeetInput2githubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐMeetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_saveMortgageRequest_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 crm_models.MortgageRequestInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNMortgageRequestInput2githubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐMortgageRequestInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_savePage_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 crm_models.PageInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNPageInput2githubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐPageInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_savePosition_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 crm_models.PositionInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNPositionInput2githubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐPositionInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_saveProperty_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 crm_models.PropertyInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNPropertyInput2githubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐPropertyInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_saveReview_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 crm_models.ReviewInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNReviewInput2githubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐReviewInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_saveRole_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 crm_models.RoleInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNRoleInput2githubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐRoleInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_saveStory_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 crm_models.StoryInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNStoryInput2githubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐStoryInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_saveTask_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 crm_models.TaskInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNTaskInput2githubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐTaskInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_saveVacancy_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 crm_models.VacancyInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNVacancyInput2githubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐVacancyInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_saveVillage_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 crm_models.VillageInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNVillageInput2githubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐVillageInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_unpublishEmployees_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []string
	if tmp, ok := rawArgs["ids"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ids"))
		arg0, err = ec.unmarshalNID2ᚕstringᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["ids"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_uploadDocument_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 crm_models.DocumentInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNDocumentInput2githubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐDocumentInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_uploadImage_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 crm_models.ImageInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNImageInput2githubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐImageInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query___type_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["name"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["name"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_articleGroup_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalNID2string(ctx, tmp) }
		directive1 := func(ctx context.Context) (interface{}, error) {
			constraint, err := ec.unmarshalNString2string(ctx, "required,mongodb")
			if err != nil {
				return nil, err
			}
			if ec.directives.Validate == nil {
				return nil, errors.New("directive validate is not implemented")
			}
			return ec.directives.Validate(ctx, rawArgs, directive0, constraint)
		}

		tmp, err = directive1(ctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if data, ok := tmp.(string); ok {
			arg0 = data
		} else {
			return nil, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be string`, tmp))
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_articleGroups_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["start"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("start"))
		directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOInt2ᚖint(ctx, tmp) }
		directive1 := func(ctx context.Context) (interface{}, error) {
			constraint, err := ec.unmarshalNString2string(ctx, "number,gte=0")
			if err != nil {
				return nil, err
			}
			if ec.directives.Validate == nil {
				return nil, errors.New("directive validate is not implemented")
			}
			return ec.directives.Validate(ctx, rawArgs, directive0, constraint)
		}

		tmp, err = directive1(ctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if data, ok := tmp.(*int); ok {
			arg0 = data
		} else if tmp == nil {
			arg0 = nil
		} else {
			return nil, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be *int`, tmp))
		}
	}
	args["start"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOInt2ᚖint(ctx, tmp) }
		directive1 := func(ctx context.Context) (interface{}, error) {
			constraint, err := ec.unmarshalNString2string(ctx, "number,gte=1")
			if err != nil {
				return nil, err
			}
			if ec.directives.Validate == nil {
				return nil, errors.New("directive validate is not implemented")
			}
			return ec.directives.Validate(ctx, rawArgs, directive0, constraint)
		}

		tmp, err = directive1(ctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if data, ok := tmp.(*int); ok {
			arg1 = data
		} else if tmp == nil {
			arg1 = nil
		} else {
			return nil, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be *int`, tmp))
		}
	}
	args["limit"] = arg1
	var arg2 *crm_models.Sort
	if tmp, ok := rawArgs["sort"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sort"))
		arg2, err = ec.unmarshalOSort2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐSort(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["sort"] = arg2
	var arg3 *string
	if tmp, ok := rawArgs["search"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("search"))
		directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚖstring(ctx, tmp) }
		directive1 := func(ctx context.Context) (interface{}, error) {
			constraint, err := ec.unmarshalNString2string(ctx, "min=3,max=32")
			if err != nil {
				return nil, err
			}
			if ec.directives.Validate == nil {
				return nil, errors.New("directive validate is not implemented")
			}
			return ec.directives.Validate(ctx, rawArgs, directive0, constraint)
		}

		tmp, err = directive1(ctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if data, ok := tmp.(*string); ok {
			arg3 = data
		} else if tmp == nil {
			arg3 = nil
		} else {
			return nil, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp))
		}
	}
	args["search"] = arg3
	return args, nil
}

func (ec *executionContext) field_Query_article_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalNID2string(ctx, tmp) }
		directive1 := func(ctx context.Context) (interface{}, error) {
			constraint, err := ec.unmarshalNString2string(ctx, "required,mongodb")
			if err != nil {
				return nil, err
			}
			if ec.directives.Validate == nil {
				return nil, errors.New("directive validate is not implemented")
			}
			return ec.directives.Validate(ctx, rawArgs, directive0, constraint)
		}

		tmp, err = directive1(ctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if data, ok := tmp.(string); ok {
			arg0 = data
		} else {
			return nil, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be string`, tmp))
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_articles_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []string
	if tmp, ok := rawArgs["ids"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ids"))
		directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOID2ᚕstringᚄ(ctx, tmp) }
		directive1 := func(ctx context.Context) (interface{}, error) {
			constraint, err := ec.unmarshalNString2string(ctx, "dive,required,mongodb")
			if err != nil {
				return nil, err
			}
			if ec.directives.Validate == nil {
				return nil, errors.New("directive validate is not implemented")
			}
			return ec.directives.Validate(ctx, rawArgs, directive0, constraint)
		}

		tmp, err = directive1(ctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if data, ok := tmp.([]string); ok {
			arg0 = data
		} else if tmp == nil {
			arg0 = nil
		} else {
			return nil, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be []string`, tmp))
		}
	}
	args["ids"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["start"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("start"))
		directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOInt2ᚖint(ctx, tmp) }
		directive1 := func(ctx context.Context) (interface{}, error) {
			constraint, err := ec.unmarshalNString2string(ctx, "number,gte=0")
			if err != nil {
				return nil, err
			}
			if ec.directives.Validate == nil {
				return nil, errors.New("directive validate is not implemented")
			}
			return ec.directives.Validate(ctx, rawArgs, directive0, constraint)
		}

		tmp, err = directive1(ctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if data, ok := tmp.(*int); ok {
			arg1 = data
		} else if tmp == nil {
			arg1 = nil
		} else {
			return nil, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be *int`, tmp))
		}
	}
	args["start"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOInt2ᚖint(ctx, tmp) }
		directive1 := func(ctx context.Context) (interface{}, error) {
			constraint, err := ec.unmarshalNString2string(ctx, "number,gte=1")
			if err != nil {
				return nil, err
			}
			if ec.directives.Validate == nil {
				return nil, errors.New("directive validate is not implemented")
			}
			return ec.directives.Validate(ctx, rawArgs, directive0, constraint)
		}

		tmp, err = directive1(ctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if data, ok := tmp.(*int); ok {
			arg2 = data
		} else if tmp == nil {
			arg2 = nil
		} else {
			return nil, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be *int`, tmp))
		}
	}
	args["limit"] = arg2
	var arg3 *crm_models.Sort
	if tmp, ok := rawArgs["sort"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sort"))
		arg3, err = ec.unmarshalOSort2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐSort(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["sort"] = arg3
	var arg4 *string
	if tmp, ok := rawArgs["search"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("search"))
		directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚖstring(ctx, tmp) }
		directive1 := func(ctx context.Context) (interface{}, error) {
			constraint, err := ec.unmarshalNString2string(ctx, "min=3,max=32")
			if err != nil {
				return nil, err
			}
			if ec.directives.Validate == nil {
				return nil, errors.New("directive validate is not implemented")
			}
			return ec.directives.Validate(ctx, rawArgs, directive0, constraint)
		}

		tmp, err = directive1(ctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if data, ok := tmp.(*string); ok {
			arg4 = data
		} else if tmp == nil {
			arg4 = nil
		} else {
			return nil, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp))
		}
	}
	args["search"] = arg4
	var arg5 *crm_models.ArticlesFilterInput
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg5, err = ec.unmarshalOArticlesFilterInput2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐArticlesFilterInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg5
	return args, nil
}

func (ec *executionContext) field_Query_complexHouse_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalNID2string(ctx, tmp) }
		directive1 := func(ctx context.Context) (interface{}, error) {
			constraint, err := ec.unmarshalNString2string(ctx, "required,mongodb")
			if err != nil {
				return nil, err
			}
			if ec.directives.Validate == nil {
				return nil, errors.New("directive validate is not implemented")
			}
			return ec.directives.Validate(ctx, rawArgs, directive0, constraint)
		}

		tmp, err = directive1(ctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if data, ok := tmp.(string); ok {
			arg0 = data
		} else {
			return nil, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be string`, tmp))
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_complexHouses_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []string
	if tmp, ok := rawArgs["ids"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ids"))
		directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOID2ᚕstringᚄ(ctx, tmp) }
		directive1 := func(ctx context.Context) (interface{}, error) {
			constraint, err := ec.unmarshalNString2string(ctx, "dive,required,mongodb")
			if err != nil {
				return nil, err
			}
			if ec.directives.Validate == nil {
				return nil, errors.New("directive validate is not implemented")
			}
			return ec.directives.Validate(ctx, rawArgs, directive0, constraint)
		}

		tmp, err = directive1(ctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if data, ok := tmp.([]string); ok {
			arg0 = data
		} else if tmp == nil {
			arg0 = nil
		} else {
			return nil, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be []string`, tmp))
		}
	}
	args["ids"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["start"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("start"))
		directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOInt2ᚖint(ctx, tmp) }
		directive1 := func(ctx context.Context) (interface{}, error) {
			constraint, err := ec.unmarshalNString2string(ctx, "number,gte=0")
			if err != nil {
				return nil, err
			}
			if ec.directives.Validate == nil {
				return nil, errors.New("directive validate is not implemented")
			}
			return ec.directives.Validate(ctx, rawArgs, directive0, constraint)
		}

		tmp, err = directive1(ctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if data, ok := tmp.(*int); ok {
			arg1 = data
		} else if tmp == nil {
			arg1 = nil
		} else {
			return nil, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be *int`, tmp))
		}
	}
	args["start"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOInt2ᚖint(ctx, tmp) }
		directive1 := func(ctx context.Context) (interface{}, error) {
			constraint, err := ec.unmarshalNString2string(ctx, "number,gte=1")
			if err != nil {
				return nil, err
			}
			if ec.directives.Validate == nil {
				return nil, errors.New("directive validate is not implemented")
			}
			return ec.directives.Validate(ctx, rawArgs, directive0, constraint)
		}

		tmp, err = directive1(ctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if data, ok := tmp.(*int); ok {
			arg2 = data
		} else if tmp == nil {
			arg2 = nil
		} else {
			return nil, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be *int`, tmp))
		}
	}
	args["limit"] = arg2
	var arg3 *crm_models.Sort
	if tmp, ok := rawArgs["sort"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sort"))
		arg3, err = ec.unmarshalOSort2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐSort(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["sort"] = arg3
	var arg4 *string
	if tmp, ok := rawArgs["search"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("search"))
		directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚖstring(ctx, tmp) }
		directive1 := func(ctx context.Context) (interface{}, error) {
			constraint, err := ec.unmarshalNString2string(ctx, "max=32")
			if err != nil {
				return nil, err
			}
			if ec.directives.Validate == nil {
				return nil, errors.New("directive validate is not implemented")
			}
			return ec.directives.Validate(ctx, rawArgs, directive0, constraint)
		}

		tmp, err = directive1(ctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if data, ok := tmp.(*string); ok {
			arg4 = data
		} else if tmp == nil {
			arg4 = nil
		} else {
			return nil, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp))
		}
	}
	args["search"] = arg4
	var arg5 *crm_models.ComplexHouseFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg5, err = ec.unmarshalOComplexHouseFilter2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐComplexHouseFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg5
	return args, nil
}

func (ec *executionContext) field_Query_complex_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalNID2string(ctx, tmp) }
		directive1 := func(ctx context.Context) (interface{}, error) {
			constraint, err := ec.unmarshalNString2string(ctx, "required,mongodb")
			if err != nil {
				return nil, err
			}
			if ec.directives.Validate == nil {
				return nil, errors.New("directive validate is not implemented")
			}
			return ec.directives.Validate(ctx, rawArgs, directive0, constraint)
		}

		tmp, err = directive1(ctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if data, ok := tmp.(string); ok {
			arg0 = data
		} else {
			return nil, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be string`, tmp))
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_complexes_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []string
	if tmp, ok := rawArgs["ids"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ids"))
		directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOID2ᚕstringᚄ(ctx, tmp) }
		directive1 := func(ctx context.Context) (interface{}, error) {
			constraint, err := ec.unmarshalNString2string(ctx, "dive,required,mongodb")
			if err != nil {
				return nil, err
			}
			if ec.directives.Validate == nil {
				return nil, errors.New("directive validate is not implemented")
			}
			return ec.directives.Validate(ctx, rawArgs, directive0, constraint)
		}

		tmp, err = directive1(ctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if data, ok := tmp.([]string); ok {
			arg0 = data
		} else if tmp == nil {
			arg0 = nil
		} else {
			return nil, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be []string`, tmp))
		}
	}
	args["ids"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["start"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("start"))
		directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOInt2ᚖint(ctx, tmp) }
		directive1 := func(ctx context.Context) (interface{}, error) {
			constraint, err := ec.unmarshalNString2string(ctx, "number,gte=0")
			if err != nil {
				return nil, err
			}
			if ec.directives.Validate == nil {
				return nil, errors.New("directive validate is not implemented")
			}
			return ec.directives.Validate(ctx, rawArgs, directive0, constraint)
		}

		tmp, err = directive1(ctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if data, ok := tmp.(*int); ok {
			arg1 = data
		} else if tmp == nil {
			arg1 = nil
		} else {
			return nil, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be *int`, tmp))
		}
	}
	args["start"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOInt2ᚖint(ctx, tmp) }
		directive1 := func(ctx context.Context) (interface{}, error) {
			constraint, err := ec.unmarshalNString2string(ctx, "number,gte=1")
			if err != nil {
				return nil, err
			}
			if ec.directives.Validate == nil {
				return nil, errors.New("directive validate is not implemented")
			}
			return ec.directives.Validate(ctx, rawArgs, directive0, constraint)
		}

		tmp, err = directive1(ctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if data, ok := tmp.(*int); ok {
			arg2 = data
		} else if tmp == nil {
			arg2 = nil
		} else {
			return nil, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be *int`, tmp))
		}
	}
	args["limit"] = arg2
	var arg3 *crm_models.Sort
	if tmp, ok := rawArgs["sort"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sort"))
		arg3, err = ec.unmarshalOSort2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐSort(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["sort"] = arg3
	var arg4 *string
	if tmp, ok := rawArgs["search"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("search"))
		directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚖstring(ctx, tmp) }
		directive1 := func(ctx context.Context) (interface{}, error) {
			constraint, err := ec.unmarshalNString2string(ctx, "max=32")
			if err != nil {
				return nil, err
			}
			if ec.directives.Validate == nil {
				return nil, errors.New("directive validate is not implemented")
			}
			return ec.directives.Validate(ctx, rawArgs, directive0, constraint)
		}

		tmp, err = directive1(ctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if data, ok := tmp.(*string); ok {
			arg4 = data
		} else if tmp == nil {
			arg4 = nil
		} else {
			return nil, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp))
		}
	}
	args["search"] = arg4
	var arg5 *crm_models.ComplexFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg5, err = ec.unmarshalOComplexFilter2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐComplexFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg5
	return args, nil
}

func (ec *executionContext) field_Query_contact_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalNID2string(ctx, tmp) }
		directive1 := func(ctx context.Context) (interface{}, error) {
			constraint, err := ec.unmarshalNString2string(ctx, "required,mongodb")
			if err != nil {
				return nil, err
			}
			if ec.directives.Validate == nil {
				return nil, errors.New("directive validate is not implemented")
			}
			return ec.directives.Validate(ctx, rawArgs, directive0, constraint)
		}

		tmp, err = directive1(ctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if data, ok := tmp.(string); ok {
			arg0 = data
		} else {
			return nil, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be string`, tmp))
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_contacts_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []string
	if tmp, ok := rawArgs["ids"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ids"))
		directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOID2ᚕstringᚄ(ctx, tmp) }
		directive1 := func(ctx context.Context) (interface{}, error) {
			constraint, err := ec.unmarshalNString2string(ctx, "dive,omitempty,mongodb")
			if err != nil {
				return nil, err
			}
			if ec.directives.Validate == nil {
				return nil, errors.New("directive validate is not implemented")
			}
			return ec.directives.Validate(ctx, rawArgs, directive0, constraint)
		}

		tmp, err = directive1(ctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if data, ok := tmp.([]string); ok {
			arg0 = data
		} else if tmp == nil {
			arg0 = nil
		} else {
			return nil, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be []string`, tmp))
		}
	}
	args["ids"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["start"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("start"))
		directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOInt2ᚖint(ctx, tmp) }
		directive1 := func(ctx context.Context) (interface{}, error) {
			constraint, err := ec.unmarshalNString2string(ctx, "number,gte=0,omitempty")
			if err != nil {
				return nil, err
			}
			if ec.directives.Validate == nil {
				return nil, errors.New("directive validate is not implemented")
			}
			return ec.directives.Validate(ctx, rawArgs, directive0, constraint)
		}

		tmp, err = directive1(ctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if data, ok := tmp.(*int); ok {
			arg1 = data
		} else if tmp == nil {
			arg1 = nil
		} else {
			return nil, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be *int`, tmp))
		}
	}
	args["start"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOInt2ᚖint(ctx, tmp) }
		directive1 := func(ctx context.Context) (interface{}, error) {
			constraint, err := ec.unmarshalNString2string(ctx, "number,gte=1,omitemtpy")
			if err != nil {
				return nil, err
			}
			if ec.directives.Validate == nil {
				return nil, errors.New("directive validate is not implemented")
			}
			return ec.directives.Validate(ctx, rawArgs, directive0, constraint)
		}

		tmp, err = directive1(ctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if data, ok := tmp.(*int); ok {
			arg2 = data
		} else if tmp == nil {
			arg2 = nil
		} else {
			return nil, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be *int`, tmp))
		}
	}
	args["limit"] = arg2
	var arg3 *crm_models.Sort
	if tmp, ok := rawArgs["sort"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sort"))
		directive0 := func(ctx context.Context) (interface{}, error) {
			return ec.unmarshalOSort2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐSort(ctx, tmp)
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			constraint, err := ec.unmarshalNString2string(ctx, "omitempty")
			if err != nil {
				return nil, err
			}
			if ec.directives.Validate == nil {
				return nil, errors.New("directive validate is not implemented")
			}
			return ec.directives.Validate(ctx, rawArgs, directive0, constraint)
		}

		tmp, err = directive1(ctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if data, ok := tmp.(*crm_models.Sort); ok {
			arg3 = data
		} else if tmp == nil {
			arg3 = nil
		} else {
			return nil, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be *github.com/pinks-agency/ecn/server/internal/crm-facade/models.Sort`, tmp))
		}
	}
	args["sort"] = arg3
	var arg4 *string
	if tmp, ok := rawArgs["search"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("search"))
		directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚖstring(ctx, tmp) }
		directive1 := func(ctx context.Context) (interface{}, error) {
			constraint, err := ec.unmarshalNString2string(ctx, "max=32,omitempty")
			if err != nil {
				return nil, err
			}
			if ec.directives.Validate == nil {
				return nil, errors.New("directive validate is not implemented")
			}
			return ec.directives.Validate(ctx, rawArgs, directive0, constraint)
		}

		tmp, err = directive1(ctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if data, ok := tmp.(*string); ok {
			arg4 = data
		} else if tmp == nil {
			arg4 = nil
		} else {
			return nil, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp))
		}
	}
	args["search"] = arg4
	var arg5 *crm_models.ContactFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		directive0 := func(ctx context.Context) (interface{}, error) {
			return ec.unmarshalOContactFilter2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐContactFilter(ctx, tmp)
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			constraint, err := ec.unmarshalNString2string(ctx, "omitempty")
			if err != nil {
				return nil, err
			}
			if ec.directives.Validate == nil {
				return nil, errors.New("directive validate is not implemented")
			}
			return ec.directives.Validate(ctx, rawArgs, directive0, constraint)
		}

		tmp, err = directive1(ctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if data, ok := tmp.(*crm_models.ContactFilter); ok {
			arg5 = data
		} else if tmp == nil {
			arg5 = nil
		} else {
			return nil, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be *github.com/pinks-agency/ecn/server/internal/crm-facade/models.ContactFilter`, tmp))
		}
	}
	args["filter"] = arg5
	return args, nil
}

func (ec *executionContext) field_Query_deal_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalNID2string(ctx, tmp) }
		directive1 := func(ctx context.Context) (interface{}, error) {
			constraint, err := ec.unmarshalNString2string(ctx, "required,mongodb")
			if err != nil {
				return nil, err
			}
			if ec.directives.Validate == nil {
				return nil, errors.New("directive validate is not implemented")
			}
			return ec.directives.Validate(ctx, rawArgs, directive0, constraint)
		}

		tmp, err = directive1(ctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if data, ok := tmp.(string); ok {
			arg0 = data
		} else {
			return nil, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be string`, tmp))
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_deals_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []string
	if tmp, ok := rawArgs["ids"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ids"))
		directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOID2ᚕstringᚄ(ctx, tmp) }
		directive1 := func(ctx context.Context) (interface{}, error) {
			constraint, err := ec.unmarshalNString2string(ctx, "dive,omitempty,mongodb")
			if err != nil {
				return nil, err
			}
			if ec.directives.Validate == nil {
				return nil, errors.New("directive validate is not implemented")
			}
			return ec.directives.Validate(ctx, rawArgs, directive0, constraint)
		}

		tmp, err = directive1(ctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if data, ok := tmp.([]string); ok {
			arg0 = data
		} else if tmp == nil {
			arg0 = nil
		} else {
			return nil, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be []string`, tmp))
		}
	}
	args["ids"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["start"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("start"))
		directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOInt2ᚖint(ctx, tmp) }
		directive1 := func(ctx context.Context) (interface{}, error) {
			constraint, err := ec.unmarshalNString2string(ctx, "number,gte=0,omitempty")
			if err != nil {
				return nil, err
			}
			if ec.directives.Validate == nil {
				return nil, errors.New("directive validate is not implemented")
			}
			return ec.directives.Validate(ctx, rawArgs, directive0, constraint)
		}

		tmp, err = directive1(ctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if data, ok := tmp.(*int); ok {
			arg1 = data
		} else if tmp == nil {
			arg1 = nil
		} else {
			return nil, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be *int`, tmp))
		}
	}
	args["start"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOInt2ᚖint(ctx, tmp) }
		directive1 := func(ctx context.Context) (interface{}, error) {
			constraint, err := ec.unmarshalNString2string(ctx, "number,gte=1,omitemtpy")
			if err != nil {
				return nil, err
			}
			if ec.directives.Validate == nil {
				return nil, errors.New("directive validate is not implemented")
			}
			return ec.directives.Validate(ctx, rawArgs, directive0, constraint)
		}

		tmp, err = directive1(ctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if data, ok := tmp.(*int); ok {
			arg2 = data
		} else if tmp == nil {
			arg2 = nil
		} else {
			return nil, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be *int`, tmp))
		}
	}
	args["limit"] = arg2
	var arg3 *crm_models.Sort
	if tmp, ok := rawArgs["sort"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sort"))
		directive0 := func(ctx context.Context) (interface{}, error) {
			return ec.unmarshalOSort2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐSort(ctx, tmp)
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			constraint, err := ec.unmarshalNString2string(ctx, "omitempty")
			if err != nil {
				return nil, err
			}
			if ec.directives.Validate == nil {
				return nil, errors.New("directive validate is not implemented")
			}
			return ec.directives.Validate(ctx, rawArgs, directive0, constraint)
		}

		tmp, err = directive1(ctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if data, ok := tmp.(*crm_models.Sort); ok {
			arg3 = data
		} else if tmp == nil {
			arg3 = nil
		} else {
			return nil, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be *github.com/pinks-agency/ecn/server/internal/crm-facade/models.Sort`, tmp))
		}
	}
	args["sort"] = arg3
	var arg4 *string
	if tmp, ok := rawArgs["search"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("search"))
		directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚖstring(ctx, tmp) }
		directive1 := func(ctx context.Context) (interface{}, error) {
			constraint, err := ec.unmarshalNString2string(ctx, "max=32,omitempty")
			if err != nil {
				return nil, err
			}
			if ec.directives.Validate == nil {
				return nil, errors.New("directive validate is not implemented")
			}
			return ec.directives.Validate(ctx, rawArgs, directive0, constraint)
		}

		tmp, err = directive1(ctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if data, ok := tmp.(*string); ok {
			arg4 = data
		} else if tmp == nil {
			arg4 = nil
		} else {
			return nil, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp))
		}
	}
	args["search"] = arg4
	var arg5 *crm_models.DealFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		directive0 := func(ctx context.Context) (interface{}, error) {
			return ec.unmarshalODealFilter2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐDealFilter(ctx, tmp)
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			constraint, err := ec.unmarshalNString2string(ctx, "omitempty")
			if err != nil {
				return nil, err
			}
			if ec.directives.Validate == nil {
				return nil, errors.New("directive validate is not implemented")
			}
			return ec.directives.Validate(ctx, rawArgs, directive0, constraint)
		}

		tmp, err = directive1(ctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if data, ok := tmp.(*crm_models.DealFilter); ok {
			arg5 = data
		} else if tmp == nil {
			arg5 = nil
		} else {
			return nil, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be *github.com/pinks-agency/ecn/server/internal/crm-facade/models.DealFilter`, tmp))
		}
	}
	args["filter"] = arg5
	return args, nil
}

func (ec *executionContext) field_Query_department_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalNID2string(ctx, tmp) }
		directive1 := func(ctx context.Context) (interface{}, error) {
			constraint, err := ec.unmarshalNString2string(ctx, "required,mongodb")
			if err != nil {
				return nil, err
			}
			if ec.directives.Validate == nil {
				return nil, errors.New("directive validate is not implemented")
			}
			return ec.directives.Validate(ctx, rawArgs, directive0, constraint)
		}

		tmp, err = directive1(ctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if data, ok := tmp.(string); ok {
			arg0 = data
		} else {
			return nil, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be string`, tmp))
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_departments_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []string
	if tmp, ok := rawArgs["ids"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ids"))
		directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOID2ᚕstringᚄ(ctx, tmp) }
		directive1 := func(ctx context.Context) (interface{}, error) {
			constraint, err := ec.unmarshalNString2string(ctx, "dive,required,mongodb")
			if err != nil {
				return nil, err
			}
			if ec.directives.Validate == nil {
				return nil, errors.New("directive validate is not implemented")
			}
			return ec.directives.Validate(ctx, rawArgs, directive0, constraint)
		}

		tmp, err = directive1(ctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if data, ok := tmp.([]string); ok {
			arg0 = data
		} else if tmp == nil {
			arg0 = nil
		} else {
			return nil, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be []string`, tmp))
		}
	}
	args["ids"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["start"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("start"))
		directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOInt2ᚖint(ctx, tmp) }
		directive1 := func(ctx context.Context) (interface{}, error) {
			constraint, err := ec.unmarshalNString2string(ctx, "number,gte=0")
			if err != nil {
				return nil, err
			}
			if ec.directives.Validate == nil {
				return nil, errors.New("directive validate is not implemented")
			}
			return ec.directives.Validate(ctx, rawArgs, directive0, constraint)
		}

		tmp, err = directive1(ctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if data, ok := tmp.(*int); ok {
			arg1 = data
		} else if tmp == nil {
			arg1 = nil
		} else {
			return nil, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be *int`, tmp))
		}
	}
	args["start"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOInt2ᚖint(ctx, tmp) }
		directive1 := func(ctx context.Context) (interface{}, error) {
			constraint, err := ec.unmarshalNString2string(ctx, "number,gte=1")
			if err != nil {
				return nil, err
			}
			if ec.directives.Validate == nil {
				return nil, errors.New("directive validate is not implemented")
			}
			return ec.directives.Validate(ctx, rawArgs, directive0, constraint)
		}

		tmp, err = directive1(ctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if data, ok := tmp.(*int); ok {
			arg2 = data
		} else if tmp == nil {
			arg2 = nil
		} else {
			return nil, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be *int`, tmp))
		}
	}
	args["limit"] = arg2
	var arg3 *crm_models.Sort
	if tmp, ok := rawArgs["sort"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sort"))
		arg3, err = ec.unmarshalOSort2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐSort(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["sort"] = arg3
	var arg4 *string
	if tmp, ok := rawArgs["search"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("search"))
		directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚖstring(ctx, tmp) }
		directive1 := func(ctx context.Context) (interface{}, error) {
			constraint, err := ec.unmarshalNString2string(ctx, "min=3,max=32")
			if err != nil {
				return nil, err
			}
			if ec.directives.Validate == nil {
				return nil, errors.New("directive validate is not implemented")
			}
			return ec.directives.Validate(ctx, rawArgs, directive0, constraint)
		}

		tmp, err = directive1(ctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if data, ok := tmp.(*string); ok {
			arg4 = data
		} else if tmp == nil {
			arg4 = nil
		} else {
			return nil, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp))
		}
	}
	args["search"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_developer_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalNID2string(ctx, tmp) }
		directive1 := func(ctx context.Context) (interface{}, error) {
			constraint, err := ec.unmarshalNString2string(ctx, "required,mongodb")
			if err != nil {
				return nil, err
			}
			if ec.directives.Validate == nil {
				return nil, errors.New("directive validate is not implemented")
			}
			return ec.directives.Validate(ctx, rawArgs, directive0, constraint)
		}

		tmp, err = directive1(ctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if data, ok := tmp.(string); ok {
			arg0 = data
		} else {
			return nil, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be string`, tmp))
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_developers_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []string
	if tmp, ok := rawArgs["ids"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ids"))
		directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOID2ᚕstringᚄ(ctx, tmp) }
		directive1 := func(ctx context.Context) (interface{}, error) {
			constraint, err := ec.unmarshalNString2string(ctx, "dive,required,mongodb")
			if err != nil {
				return nil, err
			}
			if ec.directives.Validate == nil {
				return nil, errors.New("directive validate is not implemented")
			}
			return ec.directives.Validate(ctx, rawArgs, directive0, constraint)
		}

		tmp, err = directive1(ctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if data, ok := tmp.([]string); ok {
			arg0 = data
		} else if tmp == nil {
			arg0 = nil
		} else {
			return nil, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be []string`, tmp))
		}
	}
	args["ids"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["start"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("start"))
		directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOInt2ᚖint(ctx, tmp) }
		directive1 := func(ctx context.Context) (interface{}, error) {
			constraint, err := ec.unmarshalNString2string(ctx, "number,gte=0")
			if err != nil {
				return nil, err
			}
			if ec.directives.Validate == nil {
				return nil, errors.New("directive validate is not implemented")
			}
			return ec.directives.Validate(ctx, rawArgs, directive0, constraint)
		}

		tmp, err = directive1(ctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if data, ok := tmp.(*int); ok {
			arg1 = data
		} else if tmp == nil {
			arg1 = nil
		} else {
			return nil, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be *int`, tmp))
		}
	}
	args["start"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOInt2ᚖint(ctx, tmp) }
		directive1 := func(ctx context.Context) (interface{}, error) {
			constraint, err := ec.unmarshalNString2string(ctx, "number,gte=1")
			if err != nil {
				return nil, err
			}
			if ec.directives.Validate == nil {
				return nil, errors.New("directive validate is not implemented")
			}
			return ec.directives.Validate(ctx, rawArgs, directive0, constraint)
		}

		tmp, err = directive1(ctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if data, ok := tmp.(*int); ok {
			arg2 = data
		} else if tmp == nil {
			arg2 = nil
		} else {
			return nil, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be *int`, tmp))
		}
	}
	args["limit"] = arg2
	var arg3 *crm_models.Sort
	if tmp, ok := rawArgs["sort"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sort"))
		arg3, err = ec.unmarshalOSort2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐSort(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["sort"] = arg3
	var arg4 *string
	if tmp, ok := rawArgs["search"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("search"))
		directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚖstring(ctx, tmp) }
		directive1 := func(ctx context.Context) (interface{}, error) {
			constraint, err := ec.unmarshalNString2string(ctx, "min=3,max=32")
			if err != nil {
				return nil, err
			}
			if ec.directives.Validate == nil {
				return nil, errors.New("directive validate is not implemented")
			}
			return ec.directives.Validate(ctx, rawArgs, directive0, constraint)
		}

		tmp, err = directive1(ctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if data, ok := tmp.(*string); ok {
			arg4 = data
		} else if tmp == nil {
			arg4 = nil
		} else {
			return nil, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp))
		}
	}
	args["search"] = arg4
	var arg5 *crm_models.DeveloperFilterInput
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg5, err = ec.unmarshalODeveloperFilterInput2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐDeveloperFilterInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg5
	return args, nil
}

func (ec *executionContext) field_Query_employee_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalNID2string(ctx, tmp) }
		directive1 := func(ctx context.Context) (interface{}, error) {
			constraint, err := ec.unmarshalNString2string(ctx, "required,mongodb")
			if err != nil {
				return nil, err
			}
			if ec.directives.Validate == nil {
				return nil, errors.New("directive validate is not implemented")
			}
			return ec.directives.Validate(ctx, rawArgs, directive0, constraint)
		}

		tmp, err = directive1(ctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if data, ok := tmp.(string); ok {
			arg0 = data
		} else {
			return nil, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be string`, tmp))
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_employees_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []string
	if tmp, ok := rawArgs["ids"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ids"))
		directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOID2ᚕstringᚄ(ctx, tmp) }
		directive1 := func(ctx context.Context) (interface{}, error) {
			constraint, err := ec.unmarshalNString2string(ctx, "dive,required,mongodb")
			if err != nil {
				return nil, err
			}
			if ec.directives.Validate == nil {
				return nil, errors.New("directive validate is not implemented")
			}
			return ec.directives.Validate(ctx, rawArgs, directive0, constraint)
		}

		tmp, err = directive1(ctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if data, ok := tmp.([]string); ok {
			arg0 = data
		} else if tmp == nil {
			arg0 = nil
		} else {
			return nil, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be []string`, tmp))
		}
	}
	args["ids"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["start"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("start"))
		directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOInt2ᚖint(ctx, tmp) }
		directive1 := func(ctx context.Context) (interface{}, error) {
			constraint, err := ec.unmarshalNString2string(ctx, "number,gte=0")
			if err != nil {
				return nil, err
			}
			if ec.directives.Validate == nil {
				return nil, errors.New("directive validate is not implemented")
			}
			return ec.directives.Validate(ctx, rawArgs, directive0, constraint)
		}

		tmp, err = directive1(ctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if data, ok := tmp.(*int); ok {
			arg1 = data
		} else if tmp == nil {
			arg1 = nil
		} else {
			return nil, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be *int`, tmp))
		}
	}
	args["start"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOInt2ᚖint(ctx, tmp) }
		directive1 := func(ctx context.Context) (interface{}, error) {
			constraint, err := ec.unmarshalNString2string(ctx, "number,gte=1")
			if err != nil {
				return nil, err
			}
			if ec.directives.Validate == nil {
				return nil, errors.New("directive validate is not implemented")
			}
			return ec.directives.Validate(ctx, rawArgs, directive0, constraint)
		}

		tmp, err = directive1(ctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if data, ok := tmp.(*int); ok {
			arg2 = data
		} else if tmp == nil {
			arg2 = nil
		} else {
			return nil, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be *int`, tmp))
		}
	}
	args["limit"] = arg2
	var arg3 *crm_models.Sort
	if tmp, ok := rawArgs["sort"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sort"))
		arg3, err = ec.unmarshalOSort2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐSort(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["sort"] = arg3
	var arg4 *string
	if tmp, ok := rawArgs["search"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("search"))
		directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚖstring(ctx, tmp) }
		directive1 := func(ctx context.Context) (interface{}, error) {
			constraint, err := ec.unmarshalNString2string(ctx, "min=3,max=32")
			if err != nil {
				return nil, err
			}
			if ec.directives.Validate == nil {
				return nil, errors.New("directive validate is not implemented")
			}
			return ec.directives.Validate(ctx, rawArgs, directive0, constraint)
		}

		tmp, err = directive1(ctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if data, ok := tmp.(*string); ok {
			arg4 = data
		} else if tmp == nil {
			arg4 = nil
		} else {
			return nil, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp))
		}
	}
	args["search"] = arg4
	var arg5 *crm_models.EmployeesFilterInput
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg5, err = ec.unmarshalOEmployeesFilterInput2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐEmployeesFilterInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg5
	return args, nil
}

func (ec *executionContext) field_Query_generatePdf_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["content"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("content"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["content"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["fileName"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fileName"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["fileName"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_lead_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalNID2string(ctx, tmp) }
		directive1 := func(ctx context.Context) (interface{}, error) {
			constraint, err := ec.unmarshalNString2string(ctx, "required,mongodb")
			if err != nil {
				return nil, err
			}
			if ec.directives.Validate == nil {
				return nil, errors.New("directive validate is not implemented")
			}
			return ec.directives.Validate(ctx, rawArgs, directive0, constraint)
		}

		tmp, err = directive1(ctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if data, ok := tmp.(string); ok {
			arg0 = data
		} else {
			return nil, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be string`, tmp))
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_leads_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []string
	if tmp, ok := rawArgs["ids"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ids"))
		directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOID2ᚕstringᚄ(ctx, tmp) }
		directive1 := func(ctx context.Context) (interface{}, error) {
			constraint, err := ec.unmarshalNString2string(ctx, "dive,omitempty,mongodb")
			if err != nil {
				return nil, err
			}
			if ec.directives.Validate == nil {
				return nil, errors.New("directive validate is not implemented")
			}
			return ec.directives.Validate(ctx, rawArgs, directive0, constraint)
		}

		tmp, err = directive1(ctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if data, ok := tmp.([]string); ok {
			arg0 = data
		} else if tmp == nil {
			arg0 = nil
		} else {
			return nil, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be []string`, tmp))
		}
	}
	args["ids"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["start"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("start"))
		directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOInt2ᚖint(ctx, tmp) }
		directive1 := func(ctx context.Context) (interface{}, error) {
			constraint, err := ec.unmarshalNString2string(ctx, "number,gte=0,omitempty")
			if err != nil {
				return nil, err
			}
			if ec.directives.Validate == nil {
				return nil, errors.New("directive validate is not implemented")
			}
			return ec.directives.Validate(ctx, rawArgs, directive0, constraint)
		}

		tmp, err = directive1(ctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if data, ok := tmp.(*int); ok {
			arg1 = data
		} else if tmp == nil {
			arg1 = nil
		} else {
			return nil, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be *int`, tmp))
		}
	}
	args["start"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOInt2ᚖint(ctx, tmp) }
		directive1 := func(ctx context.Context) (interface{}, error) {
			constraint, err := ec.unmarshalNString2string(ctx, "number,gte=1,omitemtpy")
			if err != nil {
				return nil, err
			}
			if ec.directives.Validate == nil {
				return nil, errors.New("directive validate is not implemented")
			}
			return ec.directives.Validate(ctx, rawArgs, directive0, constraint)
		}

		tmp, err = directive1(ctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if data, ok := tmp.(*int); ok {
			arg2 = data
		} else if tmp == nil {
			arg2 = nil
		} else {
			return nil, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be *int`, tmp))
		}
	}
	args["limit"] = arg2
	var arg3 *crm_models.Sort
	if tmp, ok := rawArgs["sort"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sort"))
		directive0 := func(ctx context.Context) (interface{}, error) {
			return ec.unmarshalOSort2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐSort(ctx, tmp)
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			constraint, err := ec.unmarshalNString2string(ctx, "omitempty")
			if err != nil {
				return nil, err
			}
			if ec.directives.Validate == nil {
				return nil, errors.New("directive validate is not implemented")
			}
			return ec.directives.Validate(ctx, rawArgs, directive0, constraint)
		}

		tmp, err = directive1(ctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if data, ok := tmp.(*crm_models.Sort); ok {
			arg3 = data
		} else if tmp == nil {
			arg3 = nil
		} else {
			return nil, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be *github.com/pinks-agency/ecn/server/internal/crm-facade/models.Sort`, tmp))
		}
	}
	args["sort"] = arg3
	var arg4 *string
	if tmp, ok := rawArgs["search"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("search"))
		directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚖstring(ctx, tmp) }
		directive1 := func(ctx context.Context) (interface{}, error) {
			constraint, err := ec.unmarshalNString2string(ctx, "max=32,omitempty")
			if err != nil {
				return nil, err
			}
			if ec.directives.Validate == nil {
				return nil, errors.New("directive validate is not implemented")
			}
			return ec.directives.Validate(ctx, rawArgs, directive0, constraint)
		}

		tmp, err = directive1(ctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if data, ok := tmp.(*string); ok {
			arg4 = data
		} else if tmp == nil {
			arg4 = nil
		} else {
			return nil, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp))
		}
	}
	args["search"] = arg4
	var arg5 *crm_models.LeadFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		directive0 := func(ctx context.Context) (interface{}, error) {
			return ec.unmarshalOLeadFilter2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐLeadFilter(ctx, tmp)
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			constraint, err := ec.unmarshalNString2string(ctx, "omitempty")
			if err != nil {
				return nil, err
			}
			if ec.directives.Validate == nil {
				return nil, errors.New("directive validate is not implemented")
			}
			return ec.directives.Validate(ctx, rawArgs, directive0, constraint)
		}

		tmp, err = directive1(ctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if data, ok := tmp.(*crm_models.LeadFilter); ok {
			arg5 = data
		} else if tmp == nil {
			arg5 = nil
		} else {
			return nil, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be *github.com/pinks-agency/ecn/server/internal/crm-facade/models.LeadFilter`, tmp))
		}
	}
	args["filter"] = arg5
	return args, nil
}

func (ec *executionContext) field_Query_logs_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []string
	if tmp, ok := rawArgs["ids"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ids"))
		directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOID2ᚕstringᚄ(ctx, tmp) }
		directive1 := func(ctx context.Context) (interface{}, error) {
			constraint, err := ec.unmarshalNString2string(ctx, "dive,required,mongodb")
			if err != nil {
				return nil, err
			}
			if ec.directives.Validate == nil {
				return nil, errors.New("directive validate is not implemented")
			}
			return ec.directives.Validate(ctx, rawArgs, directive0, constraint)
		}

		tmp, err = directive1(ctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if data, ok := tmp.([]string); ok {
			arg0 = data
		} else if tmp == nil {
			arg0 = nil
		} else {
			return nil, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be []string`, tmp))
		}
	}
	args["ids"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["start"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("start"))
		directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOInt2ᚖint(ctx, tmp) }
		directive1 := func(ctx context.Context) (interface{}, error) {
			constraint, err := ec.unmarshalNString2string(ctx, "number,gte=0")
			if err != nil {
				return nil, err
			}
			if ec.directives.Validate == nil {
				return nil, errors.New("directive validate is not implemented")
			}
			return ec.directives.Validate(ctx, rawArgs, directive0, constraint)
		}

		tmp, err = directive1(ctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if data, ok := tmp.(*int); ok {
			arg1 = data
		} else if tmp == nil {
			arg1 = nil
		} else {
			return nil, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be *int`, tmp))
		}
	}
	args["start"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOInt2ᚖint(ctx, tmp) }
		directive1 := func(ctx context.Context) (interface{}, error) {
			constraint, err := ec.unmarshalNString2string(ctx, "number,gte=1")
			if err != nil {
				return nil, err
			}
			if ec.directives.Validate == nil {
				return nil, errors.New("directive validate is not implemented")
			}
			return ec.directives.Validate(ctx, rawArgs, directive0, constraint)
		}

		tmp, err = directive1(ctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if data, ok := tmp.(*int); ok {
			arg2 = data
		} else if tmp == nil {
			arg2 = nil
		} else {
			return nil, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be *int`, tmp))
		}
	}
	args["limit"] = arg2
	var arg3 *crm_models.Sort
	if tmp, ok := rawArgs["sort"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sort"))
		arg3, err = ec.unmarshalOSort2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐSort(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["sort"] = arg3
	var arg4 *string
	if tmp, ok := rawArgs["search"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("search"))
		directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚖstring(ctx, tmp) }
		directive1 := func(ctx context.Context) (interface{}, error) {
			constraint, err := ec.unmarshalNString2string(ctx, "min=3,max=32")
			if err != nil {
				return nil, err
			}
			if ec.directives.Validate == nil {
				return nil, errors.New("directive validate is not implemented")
			}
			return ec.directives.Validate(ctx, rawArgs, directive0, constraint)
		}

		tmp, err = directive1(ctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if data, ok := tmp.(*string); ok {
			arg4 = data
		} else if tmp == nil {
			arg4 = nil
		} else {
			return nil, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp))
		}
	}
	args["search"] = arg4
	var arg5 *crm_models.LogsFilterInput
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg5, err = ec.unmarshalOLogsFilterInput2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐLogsFilterInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg5
	return args, nil
}

func (ec *executionContext) field_Query_meet_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalNID2string(ctx, tmp) }
		directive1 := func(ctx context.Context) (interface{}, error) {
			constraint, err := ec.unmarshalNString2string(ctx, "required,mongodb")
			if err != nil {
				return nil, err
			}
			if ec.directives.Validate == nil {
				return nil, errors.New("directive validate is not implemented")
			}
			return ec.directives.Validate(ctx, rawArgs, directive0, constraint)
		}

		tmp, err = directive1(ctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if data, ok := tmp.(string); ok {
			arg0 = data
		} else {
			return nil, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be string`, tmp))
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_meets_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []string
	if tmp, ok := rawArgs["ids"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ids"))
		directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOID2ᚕstringᚄ(ctx, tmp) }
		directive1 := func(ctx context.Context) (interface{}, error) {
			constraint, err := ec.unmarshalNString2string(ctx, "dive,omitempty,mongodb")
			if err != nil {
				return nil, err
			}
			if ec.directives.Validate == nil {
				return nil, errors.New("directive validate is not implemented")
			}
			return ec.directives.Validate(ctx, rawArgs, directive0, constraint)
		}

		tmp, err = directive1(ctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if data, ok := tmp.([]string); ok {
			arg0 = data
		} else if tmp == nil {
			arg0 = nil
		} else {
			return nil, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be []string`, tmp))
		}
	}
	args["ids"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["start"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("start"))
		directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOInt2ᚖint(ctx, tmp) }
		directive1 := func(ctx context.Context) (interface{}, error) {
			constraint, err := ec.unmarshalNString2string(ctx, "number,gte=0,omitempty")
			if err != nil {
				return nil, err
			}
			if ec.directives.Validate == nil {
				return nil, errors.New("directive validate is not implemented")
			}
			return ec.directives.Validate(ctx, rawArgs, directive0, constraint)
		}

		tmp, err = directive1(ctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if data, ok := tmp.(*int); ok {
			arg1 = data
		} else if tmp == nil {
			arg1 = nil
		} else {
			return nil, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be *int`, tmp))
		}
	}
	args["start"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOInt2ᚖint(ctx, tmp) }
		directive1 := func(ctx context.Context) (interface{}, error) {
			constraint, err := ec.unmarshalNString2string(ctx, "number,gte=1,omitemtpy")
			if err != nil {
				return nil, err
			}
			if ec.directives.Validate == nil {
				return nil, errors.New("directive validate is not implemented")
			}
			return ec.directives.Validate(ctx, rawArgs, directive0, constraint)
		}

		tmp, err = directive1(ctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if data, ok := tmp.(*int); ok {
			arg2 = data
		} else if tmp == nil {
			arg2 = nil
		} else {
			return nil, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be *int`, tmp))
		}
	}
	args["limit"] = arg2
	var arg3 *crm_models.Sort
	if tmp, ok := rawArgs["sort"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sort"))
		directive0 := func(ctx context.Context) (interface{}, error) {
			return ec.unmarshalOSort2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐSort(ctx, tmp)
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			constraint, err := ec.unmarshalNString2string(ctx, "omitempty")
			if err != nil {
				return nil, err
			}
			if ec.directives.Validate == nil {
				return nil, errors.New("directive validate is not implemented")
			}
			return ec.directives.Validate(ctx, rawArgs, directive0, constraint)
		}

		tmp, err = directive1(ctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if data, ok := tmp.(*crm_models.Sort); ok {
			arg3 = data
		} else if tmp == nil {
			arg3 = nil
		} else {
			return nil, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be *github.com/pinks-agency/ecn/server/internal/crm-facade/models.Sort`, tmp))
		}
	}
	args["sort"] = arg3
	var arg4 *string
	if tmp, ok := rawArgs["search"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("search"))
		directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚖstring(ctx, tmp) }
		directive1 := func(ctx context.Context) (interface{}, error) {
			constraint, err := ec.unmarshalNString2string(ctx, "max=32,omitempty")
			if err != nil {
				return nil, err
			}
			if ec.directives.Validate == nil {
				return nil, errors.New("directive validate is not implemented")
			}
			return ec.directives.Validate(ctx, rawArgs, directive0, constraint)
		}

		tmp, err = directive1(ctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if data, ok := tmp.(*string); ok {
			arg4 = data
		} else if tmp == nil {
			arg4 = nil
		} else {
			return nil, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp))
		}
	}
	args["search"] = arg4
	var arg5 *crm_models.MeetFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		directive0 := func(ctx context.Context) (interface{}, error) {
			return ec.unmarshalOMeetFilter2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐMeetFilter(ctx, tmp)
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			constraint, err := ec.unmarshalNString2string(ctx, "omitempty")
			if err != nil {
				return nil, err
			}
			if ec.directives.Validate == nil {
				return nil, errors.New("directive validate is not implemented")
			}
			return ec.directives.Validate(ctx, rawArgs, directive0, constraint)
		}

		tmp, err = directive1(ctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if data, ok := tmp.(*crm_models.MeetFilter); ok {
			arg5 = data
		} else if tmp == nil {
			arg5 = nil
		} else {
			return nil, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be *github.com/pinks-agency/ecn/server/internal/crm-facade/models.MeetFilter`, tmp))
		}
	}
	args["filter"] = arg5
	return args, nil
}

func (ec *executionContext) field_Query_mortgageRequest_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalNID2string(ctx, tmp) }
		directive1 := func(ctx context.Context) (interface{}, error) {
			constraint, err := ec.unmarshalNString2string(ctx, "required,mongodb")
			if err != nil {
				return nil, err
			}
			if ec.directives.Validate == nil {
				return nil, errors.New("directive validate is not implemented")
			}
			return ec.directives.Validate(ctx, rawArgs, directive0, constraint)
		}

		tmp, err = directive1(ctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if data, ok := tmp.(string); ok {
			arg0 = data
		} else {
			return nil, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be string`, tmp))
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_mortgageRequests_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []string
	if tmp, ok := rawArgs["ids"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ids"))
		directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOID2ᚕstringᚄ(ctx, tmp) }
		directive1 := func(ctx context.Context) (interface{}, error) {
			constraint, err := ec.unmarshalNString2string(ctx, "dive,omitempty,mongodb")
			if err != nil {
				return nil, err
			}
			if ec.directives.Validate == nil {
				return nil, errors.New("directive validate is not implemented")
			}
			return ec.directives.Validate(ctx, rawArgs, directive0, constraint)
		}

		tmp, err = directive1(ctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if data, ok := tmp.([]string); ok {
			arg0 = data
		} else if tmp == nil {
			arg0 = nil
		} else {
			return nil, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be []string`, tmp))
		}
	}
	args["ids"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["start"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("start"))
		directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOInt2ᚖint(ctx, tmp) }
		directive1 := func(ctx context.Context) (interface{}, error) {
			constraint, err := ec.unmarshalNString2string(ctx, "number,gte=0,omitempty")
			if err != nil {
				return nil, err
			}
			if ec.directives.Validate == nil {
				return nil, errors.New("directive validate is not implemented")
			}
			return ec.directives.Validate(ctx, rawArgs, directive0, constraint)
		}

		tmp, err = directive1(ctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if data, ok := tmp.(*int); ok {
			arg1 = data
		} else if tmp == nil {
			arg1 = nil
		} else {
			return nil, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be *int`, tmp))
		}
	}
	args["start"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOInt2ᚖint(ctx, tmp) }
		directive1 := func(ctx context.Context) (interface{}, error) {
			constraint, err := ec.unmarshalNString2string(ctx, "number,gte=1,omitemtpy")
			if err != nil {
				return nil, err
			}
			if ec.directives.Validate == nil {
				return nil, errors.New("directive validate is not implemented")
			}
			return ec.directives.Validate(ctx, rawArgs, directive0, constraint)
		}

		tmp, err = directive1(ctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if data, ok := tmp.(*int); ok {
			arg2 = data
		} else if tmp == nil {
			arg2 = nil
		} else {
			return nil, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be *int`, tmp))
		}
	}
	args["limit"] = arg2
	var arg3 *crm_models.Sort
	if tmp, ok := rawArgs["sort"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sort"))
		directive0 := func(ctx context.Context) (interface{}, error) {
			return ec.unmarshalOSort2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐSort(ctx, tmp)
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			constraint, err := ec.unmarshalNString2string(ctx, "omitempty")
			if err != nil {
				return nil, err
			}
			if ec.directives.Validate == nil {
				return nil, errors.New("directive validate is not implemented")
			}
			return ec.directives.Validate(ctx, rawArgs, directive0, constraint)
		}

		tmp, err = directive1(ctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if data, ok := tmp.(*crm_models.Sort); ok {
			arg3 = data
		} else if tmp == nil {
			arg3 = nil
		} else {
			return nil, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be *github.com/pinks-agency/ecn/server/internal/crm-facade/models.Sort`, tmp))
		}
	}
	args["sort"] = arg3
	var arg4 *string
	if tmp, ok := rawArgs["search"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("search"))
		directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚖstring(ctx, tmp) }
		directive1 := func(ctx context.Context) (interface{}, error) {
			constraint, err := ec.unmarshalNString2string(ctx, "max=32,omitempty")
			if err != nil {
				return nil, err
			}
			if ec.directives.Validate == nil {
				return nil, errors.New("directive validate is not implemented")
			}
			return ec.directives.Validate(ctx, rawArgs, directive0, constraint)
		}

		tmp, err = directive1(ctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if data, ok := tmp.(*string); ok {
			arg4 = data
		} else if tmp == nil {
			arg4 = nil
		} else {
			return nil, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp))
		}
	}
	args["search"] = arg4
	var arg5 *crm_models.MortgageRequestFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		directive0 := func(ctx context.Context) (interface{}, error) {
			return ec.unmarshalOMortgageRequestFilter2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐMortgageRequestFilter(ctx, tmp)
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			constraint, err := ec.unmarshalNString2string(ctx, "omitempty")
			if err != nil {
				return nil, err
			}
			if ec.directives.Validate == nil {
				return nil, errors.New("directive validate is not implemented")
			}
			return ec.directives.Validate(ctx, rawArgs, directive0, constraint)
		}

		tmp, err = directive1(ctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if data, ok := tmp.(*crm_models.MortgageRequestFilter); ok {
			arg5 = data
		} else if tmp == nil {
			arg5 = nil
		} else {
			return nil, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be *github.com/pinks-agency/ecn/server/internal/crm-facade/models.MortgageRequestFilter`, tmp))
		}
	}
	args["filter"] = arg5
	return args, nil
}

func (ec *executionContext) field_Query_page_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalNID2string(ctx, tmp) }
		directive1 := func(ctx context.Context) (interface{}, error) {
			constraint, err := ec.unmarshalNString2string(ctx, "required,mongodb")
			if err != nil {
				return nil, err
			}
			if ec.directives.Validate == nil {
				return nil, errors.New("directive validate is not implemented")
			}
			return ec.directives.Validate(ctx, rawArgs, directive0, constraint)
		}

		tmp, err = directive1(ctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if data, ok := tmp.(string); ok {
			arg0 = data
		} else {
			return nil, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be string`, tmp))
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_pages_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []string
	if tmp, ok := rawArgs["ids"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ids"))
		directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOID2ᚕstringᚄ(ctx, tmp) }
		directive1 := func(ctx context.Context) (interface{}, error) {
			constraint, err := ec.unmarshalNString2string(ctx, "dive,required,mongodb")
			if err != nil {
				return nil, err
			}
			if ec.directives.Validate == nil {
				return nil, errors.New("directive validate is not implemented")
			}
			return ec.directives.Validate(ctx, rawArgs, directive0, constraint)
		}

		tmp, err = directive1(ctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if data, ok := tmp.([]string); ok {
			arg0 = data
		} else if tmp == nil {
			arg0 = nil
		} else {
			return nil, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be []string`, tmp))
		}
	}
	args["ids"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["start"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("start"))
		directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOInt2ᚖint(ctx, tmp) }
		directive1 := func(ctx context.Context) (interface{}, error) {
			constraint, err := ec.unmarshalNString2string(ctx, "number,gte=0")
			if err != nil {
				return nil, err
			}
			if ec.directives.Validate == nil {
				return nil, errors.New("directive validate is not implemented")
			}
			return ec.directives.Validate(ctx, rawArgs, directive0, constraint)
		}

		tmp, err = directive1(ctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if data, ok := tmp.(*int); ok {
			arg1 = data
		} else if tmp == nil {
			arg1 = nil
		} else {
			return nil, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be *int`, tmp))
		}
	}
	args["start"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOInt2ᚖint(ctx, tmp) }
		directive1 := func(ctx context.Context) (interface{}, error) {
			constraint, err := ec.unmarshalNString2string(ctx, "number,gte=1")
			if err != nil {
				return nil, err
			}
			if ec.directives.Validate == nil {
				return nil, errors.New("directive validate is not implemented")
			}
			return ec.directives.Validate(ctx, rawArgs, directive0, constraint)
		}

		tmp, err = directive1(ctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if data, ok := tmp.(*int); ok {
			arg2 = data
		} else if tmp == nil {
			arg2 = nil
		} else {
			return nil, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be *int`, tmp))
		}
	}
	args["limit"] = arg2
	var arg3 *crm_models.Sort
	if tmp, ok := rawArgs["sort"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sort"))
		arg3, err = ec.unmarshalOSort2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐSort(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["sort"] = arg3
	var arg4 *string
	if tmp, ok := rawArgs["search"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("search"))
		directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚖstring(ctx, tmp) }
		directive1 := func(ctx context.Context) (interface{}, error) {
			constraint, err := ec.unmarshalNString2string(ctx, "min=3,max=32")
			if err != nil {
				return nil, err
			}
			if ec.directives.Validate == nil {
				return nil, errors.New("directive validate is not implemented")
			}
			return ec.directives.Validate(ctx, rawArgs, directive0, constraint)
		}

		tmp, err = directive1(ctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if data, ok := tmp.(*string); ok {
			arg4 = data
		} else if tmp == nil {
			arg4 = nil
		} else {
			return nil, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp))
		}
	}
	args["search"] = arg4
	var arg5 *crm_models.PageFilterInput
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg5, err = ec.unmarshalOPageFilterInput2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐPageFilterInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg5
	return args, nil
}

func (ec *executionContext) field_Query_position_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalNID2string(ctx, tmp) }
		directive1 := func(ctx context.Context) (interface{}, error) {
			constraint, err := ec.unmarshalNString2string(ctx, "required,mongodb")
			if err != nil {
				return nil, err
			}
			if ec.directives.Validate == nil {
				return nil, errors.New("directive validate is not implemented")
			}
			return ec.directives.Validate(ctx, rawArgs, directive0, constraint)
		}

		tmp, err = directive1(ctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if data, ok := tmp.(string); ok {
			arg0 = data
		} else {
			return nil, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be string`, tmp))
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_positions_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []string
	if tmp, ok := rawArgs["ids"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ids"))
		directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOID2ᚕstringᚄ(ctx, tmp) }
		directive1 := func(ctx context.Context) (interface{}, error) {
			constraint, err := ec.unmarshalNString2string(ctx, "dive,required,mongodb")
			if err != nil {
				return nil, err
			}
			if ec.directives.Validate == nil {
				return nil, errors.New("directive validate is not implemented")
			}
			return ec.directives.Validate(ctx, rawArgs, directive0, constraint)
		}

		tmp, err = directive1(ctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if data, ok := tmp.([]string); ok {
			arg0 = data
		} else if tmp == nil {
			arg0 = nil
		} else {
			return nil, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be []string`, tmp))
		}
	}
	args["ids"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["start"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("start"))
		directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOInt2ᚖint(ctx, tmp) }
		directive1 := func(ctx context.Context) (interface{}, error) {
			constraint, err := ec.unmarshalNString2string(ctx, "number,gte=0")
			if err != nil {
				return nil, err
			}
			if ec.directives.Validate == nil {
				return nil, errors.New("directive validate is not implemented")
			}
			return ec.directives.Validate(ctx, rawArgs, directive0, constraint)
		}

		tmp, err = directive1(ctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if data, ok := tmp.(*int); ok {
			arg1 = data
		} else if tmp == nil {
			arg1 = nil
		} else {
			return nil, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be *int`, tmp))
		}
	}
	args["start"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOInt2ᚖint(ctx, tmp) }
		directive1 := func(ctx context.Context) (interface{}, error) {
			constraint, err := ec.unmarshalNString2string(ctx, "number,gte=1")
			if err != nil {
				return nil, err
			}
			if ec.directives.Validate == nil {
				return nil, errors.New("directive validate is not implemented")
			}
			return ec.directives.Validate(ctx, rawArgs, directive0, constraint)
		}

		tmp, err = directive1(ctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if data, ok := tmp.(*int); ok {
			arg2 = data
		} else if tmp == nil {
			arg2 = nil
		} else {
			return nil, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be *int`, tmp))
		}
	}
	args["limit"] = arg2
	var arg3 *crm_models.Sort
	if tmp, ok := rawArgs["sort"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sort"))
		arg3, err = ec.unmarshalOSort2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐSort(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["sort"] = arg3
	var arg4 *string
	if tmp, ok := rawArgs["search"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("search"))
		directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚖstring(ctx, tmp) }
		directive1 := func(ctx context.Context) (interface{}, error) {
			constraint, err := ec.unmarshalNString2string(ctx, "min=3,max=32")
			if err != nil {
				return nil, err
			}
			if ec.directives.Validate == nil {
				return nil, errors.New("directive validate is not implemented")
			}
			return ec.directives.Validate(ctx, rawArgs, directive0, constraint)
		}

		tmp, err = directive1(ctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if data, ok := tmp.(*string); ok {
			arg4 = data
		} else if tmp == nil {
			arg4 = nil
		} else {
			return nil, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp))
		}
	}
	args["search"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_properties_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []string
	if tmp, ok := rawArgs["ids"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ids"))
		directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOID2ᚕstringᚄ(ctx, tmp) }
		directive1 := func(ctx context.Context) (interface{}, error) {
			constraint, err := ec.unmarshalNString2string(ctx, "dive,required,mongodb")
			if err != nil {
				return nil, err
			}
			if ec.directives.Validate == nil {
				return nil, errors.New("directive validate is not implemented")
			}
			return ec.directives.Validate(ctx, rawArgs, directive0, constraint)
		}

		tmp, err = directive1(ctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if data, ok := tmp.([]string); ok {
			arg0 = data
		} else if tmp == nil {
			arg0 = nil
		} else {
			return nil, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be []string`, tmp))
		}
	}
	args["ids"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["start"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("start"))
		directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOInt2ᚖint(ctx, tmp) }
		directive1 := func(ctx context.Context) (interface{}, error) {
			constraint, err := ec.unmarshalNString2string(ctx, "number,gte=0")
			if err != nil {
				return nil, err
			}
			if ec.directives.Validate == nil {
				return nil, errors.New("directive validate is not implemented")
			}
			return ec.directives.Validate(ctx, rawArgs, directive0, constraint)
		}

		tmp, err = directive1(ctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if data, ok := tmp.(*int); ok {
			arg1 = data
		} else if tmp == nil {
			arg1 = nil
		} else {
			return nil, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be *int`, tmp))
		}
	}
	args["start"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOInt2ᚖint(ctx, tmp) }
		directive1 := func(ctx context.Context) (interface{}, error) {
			constraint, err := ec.unmarshalNString2string(ctx, "number,gte=1")
			if err != nil {
				return nil, err
			}
			if ec.directives.Validate == nil {
				return nil, errors.New("directive validate is not implemented")
			}
			return ec.directives.Validate(ctx, rawArgs, directive0, constraint)
		}

		tmp, err = directive1(ctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if data, ok := tmp.(*int); ok {
			arg2 = data
		} else if tmp == nil {
			arg2 = nil
		} else {
			return nil, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be *int`, tmp))
		}
	}
	args["limit"] = arg2
	var arg3 *crm_models.Sort
	if tmp, ok := rawArgs["sort"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sort"))
		arg3, err = ec.unmarshalOSort2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐSort(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["sort"] = arg3
	var arg4 *string
	if tmp, ok := rawArgs["search"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("search"))
		directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚖstring(ctx, tmp) }
		directive1 := func(ctx context.Context) (interface{}, error) {
			constraint, err := ec.unmarshalNString2string(ctx, "min=3,max=32")
			if err != nil {
				return nil, err
			}
			if ec.directives.Validate == nil {
				return nil, errors.New("directive validate is not implemented")
			}
			return ec.directives.Validate(ctx, rawArgs, directive0, constraint)
		}

		tmp, err = directive1(ctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if data, ok := tmp.(*string); ok {
			arg4 = data
		} else if tmp == nil {
			arg4 = nil
		} else {
			return nil, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp))
		}
	}
	args["search"] = arg4
	var arg5 *crm_models.PropertyFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg5, err = ec.unmarshalOPropertyFilter2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐPropertyFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg5
	return args, nil
}

func (ec *executionContext) field_Query_property_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalNID2string(ctx, tmp) }
		directive1 := func(ctx context.Context) (interface{}, error) {
			constraint, err := ec.unmarshalNString2string(ctx, "required,mongodb")
			if err != nil {
				return nil, err
			}
			if ec.directives.Validate == nil {
				return nil, errors.New("directive validate is not implemented")
			}
			return ec.directives.Validate(ctx, rawArgs, directive0, constraint)
		}

		tmp, err = directive1(ctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if data, ok := tmp.(string); ok {
			arg0 = data
		} else {
			return nil, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be string`, tmp))
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_review_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalNID2string(ctx, tmp) }
		directive1 := func(ctx context.Context) (interface{}, error) {
			constraint, err := ec.unmarshalNString2string(ctx, "required,mongodb")
			if err != nil {
				return nil, err
			}
			if ec.directives.Validate == nil {
				return nil, errors.New("directive validate is not implemented")
			}
			return ec.directives.Validate(ctx, rawArgs, directive0, constraint)
		}

		tmp, err = directive1(ctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if data, ok := tmp.(string); ok {
			arg0 = data
		} else {
			return nil, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be string`, tmp))
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_reviews_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []string
	if tmp, ok := rawArgs["ids"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ids"))
		directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOID2ᚕstringᚄ(ctx, tmp) }
		directive1 := func(ctx context.Context) (interface{}, error) {
			constraint, err := ec.unmarshalNString2string(ctx, "dive,required,mongodb")
			if err != nil {
				return nil, err
			}
			if ec.directives.Validate == nil {
				return nil, errors.New("directive validate is not implemented")
			}
			return ec.directives.Validate(ctx, rawArgs, directive0, constraint)
		}

		tmp, err = directive1(ctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if data, ok := tmp.([]string); ok {
			arg0 = data
		} else if tmp == nil {
			arg0 = nil
		} else {
			return nil, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be []string`, tmp))
		}
	}
	args["ids"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["start"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("start"))
		directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOInt2ᚖint(ctx, tmp) }
		directive1 := func(ctx context.Context) (interface{}, error) {
			constraint, err := ec.unmarshalNString2string(ctx, "number,gte=0")
			if err != nil {
				return nil, err
			}
			if ec.directives.Validate == nil {
				return nil, errors.New("directive validate is not implemented")
			}
			return ec.directives.Validate(ctx, rawArgs, directive0, constraint)
		}

		tmp, err = directive1(ctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if data, ok := tmp.(*int); ok {
			arg1 = data
		} else if tmp == nil {
			arg1 = nil
		} else {
			return nil, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be *int`, tmp))
		}
	}
	args["start"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOInt2ᚖint(ctx, tmp) }
		directive1 := func(ctx context.Context) (interface{}, error) {
			constraint, err := ec.unmarshalNString2string(ctx, "number,gte=1")
			if err != nil {
				return nil, err
			}
			if ec.directives.Validate == nil {
				return nil, errors.New("directive validate is not implemented")
			}
			return ec.directives.Validate(ctx, rawArgs, directive0, constraint)
		}

		tmp, err = directive1(ctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if data, ok := tmp.(*int); ok {
			arg2 = data
		} else if tmp == nil {
			arg2 = nil
		} else {
			return nil, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be *int`, tmp))
		}
	}
	args["limit"] = arg2
	var arg3 *crm_models.Sort
	if tmp, ok := rawArgs["sort"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sort"))
		arg3, err = ec.unmarshalOSort2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐSort(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["sort"] = arg3
	var arg4 *string
	if tmp, ok := rawArgs["search"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("search"))
		directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚖstring(ctx, tmp) }
		directive1 := func(ctx context.Context) (interface{}, error) {
			constraint, err := ec.unmarshalNString2string(ctx, "min=3,max=32")
			if err != nil {
				return nil, err
			}
			if ec.directives.Validate == nil {
				return nil, errors.New("directive validate is not implemented")
			}
			return ec.directives.Validate(ctx, rawArgs, directive0, constraint)
		}

		tmp, err = directive1(ctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if data, ok := tmp.(*string); ok {
			arg4 = data
		} else if tmp == nil {
			arg4 = nil
		} else {
			return nil, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp))
		}
	}
	args["search"] = arg4
	var arg5 *crm_models.ReviewsFilterInput
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg5, err = ec.unmarshalOReviewsFilterInput2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐReviewsFilterInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg5
	return args, nil
}

func (ec *executionContext) field_Query_role_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalNID2string(ctx, tmp) }
		directive1 := func(ctx context.Context) (interface{}, error) {
			constraint, err := ec.unmarshalNString2string(ctx, "required,mongodb")
			if err != nil {
				return nil, err
			}
			if ec.directives.Validate == nil {
				return nil, errors.New("directive validate is not implemented")
			}
			return ec.directives.Validate(ctx, rawArgs, directive0, constraint)
		}

		tmp, err = directive1(ctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if data, ok := tmp.(string); ok {
			arg0 = data
		} else {
			return nil, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be string`, tmp))
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_roles_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []string
	if tmp, ok := rawArgs["ids"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ids"))
		directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOID2ᚕstringᚄ(ctx, tmp) }
		directive1 := func(ctx context.Context) (interface{}, error) {
			constraint, err := ec.unmarshalNString2string(ctx, "dive,required,mongodb")
			if err != nil {
				return nil, err
			}
			if ec.directives.Validate == nil {
				return nil, errors.New("directive validate is not implemented")
			}
			return ec.directives.Validate(ctx, rawArgs, directive0, constraint)
		}

		tmp, err = directive1(ctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if data, ok := tmp.([]string); ok {
			arg0 = data
		} else if tmp == nil {
			arg0 = nil
		} else {
			return nil, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be []string`, tmp))
		}
	}
	args["ids"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["start"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("start"))
		directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOInt2ᚖint(ctx, tmp) }
		directive1 := func(ctx context.Context) (interface{}, error) {
			constraint, err := ec.unmarshalNString2string(ctx, "number,gte=0")
			if err != nil {
				return nil, err
			}
			if ec.directives.Validate == nil {
				return nil, errors.New("directive validate is not implemented")
			}
			return ec.directives.Validate(ctx, rawArgs, directive0, constraint)
		}

		tmp, err = directive1(ctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if data, ok := tmp.(*int); ok {
			arg1 = data
		} else if tmp == nil {
			arg1 = nil
		} else {
			return nil, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be *int`, tmp))
		}
	}
	args["start"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOInt2ᚖint(ctx, tmp) }
		directive1 := func(ctx context.Context) (interface{}, error) {
			constraint, err := ec.unmarshalNString2string(ctx, "number,gte=1")
			if err != nil {
				return nil, err
			}
			if ec.directives.Validate == nil {
				return nil, errors.New("directive validate is not implemented")
			}
			return ec.directives.Validate(ctx, rawArgs, directive0, constraint)
		}

		tmp, err = directive1(ctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if data, ok := tmp.(*int); ok {
			arg2 = data
		} else if tmp == nil {
			arg2 = nil
		} else {
			return nil, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be *int`, tmp))
		}
	}
	args["limit"] = arg2
	var arg3 *crm_models.Sort
	if tmp, ok := rawArgs["sort"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sort"))
		arg3, err = ec.unmarshalOSort2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐSort(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["sort"] = arg3
	var arg4 *string
	if tmp, ok := rawArgs["search"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("search"))
		directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚖstring(ctx, tmp) }
		directive1 := func(ctx context.Context) (interface{}, error) {
			constraint, err := ec.unmarshalNString2string(ctx, "min=3,max=32")
			if err != nil {
				return nil, err
			}
			if ec.directives.Validate == nil {
				return nil, errors.New("directive validate is not implemented")
			}
			return ec.directives.Validate(ctx, rawArgs, directive0, constraint)
		}

		tmp, err = directive1(ctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if data, ok := tmp.(*string); ok {
			arg4 = data
		} else if tmp == nil {
			arg4 = nil
		} else {
			return nil, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp))
		}
	}
	args["search"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_stories_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []string
	if tmp, ok := rawArgs["ids"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ids"))
		directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOID2ᚕstringᚄ(ctx, tmp) }
		directive1 := func(ctx context.Context) (interface{}, error) {
			constraint, err := ec.unmarshalNString2string(ctx, "dive,required,mongodb")
			if err != nil {
				return nil, err
			}
			if ec.directives.Validate == nil {
				return nil, errors.New("directive validate is not implemented")
			}
			return ec.directives.Validate(ctx, rawArgs, directive0, constraint)
		}

		tmp, err = directive1(ctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if data, ok := tmp.([]string); ok {
			arg0 = data
		} else if tmp == nil {
			arg0 = nil
		} else {
			return nil, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be []string`, tmp))
		}
	}
	args["ids"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["start"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("start"))
		directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOInt2ᚖint(ctx, tmp) }
		directive1 := func(ctx context.Context) (interface{}, error) {
			constraint, err := ec.unmarshalNString2string(ctx, "number,gte=0")
			if err != nil {
				return nil, err
			}
			if ec.directives.Validate == nil {
				return nil, errors.New("directive validate is not implemented")
			}
			return ec.directives.Validate(ctx, rawArgs, directive0, constraint)
		}

		tmp, err = directive1(ctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if data, ok := tmp.(*int); ok {
			arg1 = data
		} else if tmp == nil {
			arg1 = nil
		} else {
			return nil, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be *int`, tmp))
		}
	}
	args["start"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOInt2ᚖint(ctx, tmp) }
		directive1 := func(ctx context.Context) (interface{}, error) {
			constraint, err := ec.unmarshalNString2string(ctx, "number,gte=1")
			if err != nil {
				return nil, err
			}
			if ec.directives.Validate == nil {
				return nil, errors.New("directive validate is not implemented")
			}
			return ec.directives.Validate(ctx, rawArgs, directive0, constraint)
		}

		tmp, err = directive1(ctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if data, ok := tmp.(*int); ok {
			arg2 = data
		} else if tmp == nil {
			arg2 = nil
		} else {
			return nil, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be *int`, tmp))
		}
	}
	args["limit"] = arg2
	var arg3 *crm_models.Sort
	if tmp, ok := rawArgs["sort"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sort"))
		arg3, err = ec.unmarshalOSort2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐSort(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["sort"] = arg3
	var arg4 *string
	if tmp, ok := rawArgs["search"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("search"))
		directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚖstring(ctx, tmp) }
		directive1 := func(ctx context.Context) (interface{}, error) {
			constraint, err := ec.unmarshalNString2string(ctx, "min=3,max=32")
			if err != nil {
				return nil, err
			}
			if ec.directives.Validate == nil {
				return nil, errors.New("directive validate is not implemented")
			}
			return ec.directives.Validate(ctx, rawArgs, directive0, constraint)
		}

		tmp, err = directive1(ctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if data, ok := tmp.(*string); ok {
			arg4 = data
		} else if tmp == nil {
			arg4 = nil
		} else {
			return nil, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp))
		}
	}
	args["search"] = arg4
	var arg5 *crm_models.StoryFilterInput
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg5, err = ec.unmarshalOStoryFilterInput2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐStoryFilterInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg5
	return args, nil
}

func (ec *executionContext) field_Query_story_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalNID2string(ctx, tmp) }
		directive1 := func(ctx context.Context) (interface{}, error) {
			constraint, err := ec.unmarshalNString2string(ctx, "required,mongodb")
			if err != nil {
				return nil, err
			}
			if ec.directives.Validate == nil {
				return nil, errors.New("directive validate is not implemented")
			}
			return ec.directives.Validate(ctx, rawArgs, directive0, constraint)
		}

		tmp, err = directive1(ctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if data, ok := tmp.(string); ok {
			arg0 = data
		} else {
			return nil, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be string`, tmp))
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_task_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalNID2string(ctx, tmp) }
		directive1 := func(ctx context.Context) (interface{}, error) {
			constraint, err := ec.unmarshalNString2string(ctx, "required,mongodb")
			if err != nil {
				return nil, err
			}
			if ec.directives.Validate == nil {
				return nil, errors.New("directive validate is not implemented")
			}
			return ec.directives.Validate(ctx, rawArgs, directive0, constraint)
		}

		tmp, err = directive1(ctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if data, ok := tmp.(string); ok {
			arg0 = data
		} else {
			return nil, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be string`, tmp))
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_tasks_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []string
	if tmp, ok := rawArgs["ids"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ids"))
		directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOID2ᚕstringᚄ(ctx, tmp) }
		directive1 := func(ctx context.Context) (interface{}, error) {
			constraint, err := ec.unmarshalNString2string(ctx, "dive,omitempty,mongodb")
			if err != nil {
				return nil, err
			}
			if ec.directives.Validate == nil {
				return nil, errors.New("directive validate is not implemented")
			}
			return ec.directives.Validate(ctx, rawArgs, directive0, constraint)
		}

		tmp, err = directive1(ctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if data, ok := tmp.([]string); ok {
			arg0 = data
		} else if tmp == nil {
			arg0 = nil
		} else {
			return nil, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be []string`, tmp))
		}
	}
	args["ids"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["start"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("start"))
		directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOInt2ᚖint(ctx, tmp) }
		directive1 := func(ctx context.Context) (interface{}, error) {
			constraint, err := ec.unmarshalNString2string(ctx, "number,gte=0,omitempty")
			if err != nil {
				return nil, err
			}
			if ec.directives.Validate == nil {
				return nil, errors.New("directive validate is not implemented")
			}
			return ec.directives.Validate(ctx, rawArgs, directive0, constraint)
		}

		tmp, err = directive1(ctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if data, ok := tmp.(*int); ok {
			arg1 = data
		} else if tmp == nil {
			arg1 = nil
		} else {
			return nil, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be *int`, tmp))
		}
	}
	args["start"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOInt2ᚖint(ctx, tmp) }
		directive1 := func(ctx context.Context) (interface{}, error) {
			constraint, err := ec.unmarshalNString2string(ctx, "number,gte=1,omitemtpy")
			if err != nil {
				return nil, err
			}
			if ec.directives.Validate == nil {
				return nil, errors.New("directive validate is not implemented")
			}
			return ec.directives.Validate(ctx, rawArgs, directive0, constraint)
		}

		tmp, err = directive1(ctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if data, ok := tmp.(*int); ok {
			arg2 = data
		} else if tmp == nil {
			arg2 = nil
		} else {
			return nil, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be *int`, tmp))
		}
	}
	args["limit"] = arg2
	var arg3 *crm_models.Sort
	if tmp, ok := rawArgs["sort"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sort"))
		directive0 := func(ctx context.Context) (interface{}, error) {
			return ec.unmarshalOSort2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐSort(ctx, tmp)
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			constraint, err := ec.unmarshalNString2string(ctx, "omitempty")
			if err != nil {
				return nil, err
			}
			if ec.directives.Validate == nil {
				return nil, errors.New("directive validate is not implemented")
			}
			return ec.directives.Validate(ctx, rawArgs, directive0, constraint)
		}

		tmp, err = directive1(ctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if data, ok := tmp.(*crm_models.Sort); ok {
			arg3 = data
		} else if tmp == nil {
			arg3 = nil
		} else {
			return nil, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be *github.com/pinks-agency/ecn/server/internal/crm-facade/models.Sort`, tmp))
		}
	}
	args["sort"] = arg3
	var arg4 *string
	if tmp, ok := rawArgs["search"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("search"))
		directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚖstring(ctx, tmp) }
		directive1 := func(ctx context.Context) (interface{}, error) {
			constraint, err := ec.unmarshalNString2string(ctx, "max=32,omitempty")
			if err != nil {
				return nil, err
			}
			if ec.directives.Validate == nil {
				return nil, errors.New("directive validate is not implemented")
			}
			return ec.directives.Validate(ctx, rawArgs, directive0, constraint)
		}

		tmp, err = directive1(ctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if data, ok := tmp.(*string); ok {
			arg4 = data
		} else if tmp == nil {
			arg4 = nil
		} else {
			return nil, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp))
		}
	}
	args["search"] = arg4
	var arg5 *crm_models.TaskFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		directive0 := func(ctx context.Context) (interface{}, error) {
			return ec.unmarshalOTaskFilter2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐTaskFilter(ctx, tmp)
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			constraint, err := ec.unmarshalNString2string(ctx, "omitempty")
			if err != nil {
				return nil, err
			}
			if ec.directives.Validate == nil {
				return nil, errors.New("directive validate is not implemented")
			}
			return ec.directives.Validate(ctx, rawArgs, directive0, constraint)
		}

		tmp, err = directive1(ctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if data, ok := tmp.(*crm_models.TaskFilter); ok {
			arg5 = data
		} else if tmp == nil {
			arg5 = nil
		} else {
			return nil, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be *github.com/pinks-agency/ecn/server/internal/crm-facade/models.TaskFilter`, tmp))
		}
	}
	args["filter"] = arg5
	return args, nil
}

func (ec *executionContext) field_Query_vacancies_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []string
	if tmp, ok := rawArgs["ids"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ids"))
		directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOID2ᚕstringᚄ(ctx, tmp) }
		directive1 := func(ctx context.Context) (interface{}, error) {
			constraint, err := ec.unmarshalNString2string(ctx, "dive,required,mongodb")
			if err != nil {
				return nil, err
			}
			if ec.directives.Validate == nil {
				return nil, errors.New("directive validate is not implemented")
			}
			return ec.directives.Validate(ctx, rawArgs, directive0, constraint)
		}

		tmp, err = directive1(ctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if data, ok := tmp.([]string); ok {
			arg0 = data
		} else if tmp == nil {
			arg0 = nil
		} else {
			return nil, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be []string`, tmp))
		}
	}
	args["ids"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["start"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("start"))
		directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOInt2ᚖint(ctx, tmp) }
		directive1 := func(ctx context.Context) (interface{}, error) {
			constraint, err := ec.unmarshalNString2string(ctx, "number,gte=0")
			if err != nil {
				return nil, err
			}
			if ec.directives.Validate == nil {
				return nil, errors.New("directive validate is not implemented")
			}
			return ec.directives.Validate(ctx, rawArgs, directive0, constraint)
		}

		tmp, err = directive1(ctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if data, ok := tmp.(*int); ok {
			arg1 = data
		} else if tmp == nil {
			arg1 = nil
		} else {
			return nil, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be *int`, tmp))
		}
	}
	args["start"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOInt2ᚖint(ctx, tmp) }
		directive1 := func(ctx context.Context) (interface{}, error) {
			constraint, err := ec.unmarshalNString2string(ctx, "number,gte=1")
			if err != nil {
				return nil, err
			}
			if ec.directives.Validate == nil {
				return nil, errors.New("directive validate is not implemented")
			}
			return ec.directives.Validate(ctx, rawArgs, directive0, constraint)
		}

		tmp, err = directive1(ctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if data, ok := tmp.(*int); ok {
			arg2 = data
		} else if tmp == nil {
			arg2 = nil
		} else {
			return nil, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be *int`, tmp))
		}
	}
	args["limit"] = arg2
	var arg3 *crm_models.Sort
	if tmp, ok := rawArgs["sort"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sort"))
		arg3, err = ec.unmarshalOSort2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐSort(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["sort"] = arg3
	var arg4 *string
	if tmp, ok := rawArgs["search"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("search"))
		directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚖstring(ctx, tmp) }
		directive1 := func(ctx context.Context) (interface{}, error) {
			constraint, err := ec.unmarshalNString2string(ctx, "min=3,max=32")
			if err != nil {
				return nil, err
			}
			if ec.directives.Validate == nil {
				return nil, errors.New("directive validate is not implemented")
			}
			return ec.directives.Validate(ctx, rawArgs, directive0, constraint)
		}

		tmp, err = directive1(ctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if data, ok := tmp.(*string); ok {
			arg4 = data
		} else if tmp == nil {
			arg4 = nil
		} else {
			return nil, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp))
		}
	}
	args["search"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_vacancyRequest_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalNID2string(ctx, tmp) }
		directive1 := func(ctx context.Context) (interface{}, error) {
			constraint, err := ec.unmarshalNString2string(ctx, "required,mongodb")
			if err != nil {
				return nil, err
			}
			if ec.directives.Validate == nil {
				return nil, errors.New("directive validate is not implemented")
			}
			return ec.directives.Validate(ctx, rawArgs, directive0, constraint)
		}

		tmp, err = directive1(ctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if data, ok := tmp.(string); ok {
			arg0 = data
		} else {
			return nil, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be string`, tmp))
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_vacancyRequests_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []string
	if tmp, ok := rawArgs["ids"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ids"))
		directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOID2ᚕstringᚄ(ctx, tmp) }
		directive1 := func(ctx context.Context) (interface{}, error) {
			constraint, err := ec.unmarshalNString2string(ctx, "dive,required,mongodb")
			if err != nil {
				return nil, err
			}
			if ec.directives.Validate == nil {
				return nil, errors.New("directive validate is not implemented")
			}
			return ec.directives.Validate(ctx, rawArgs, directive0, constraint)
		}

		tmp, err = directive1(ctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if data, ok := tmp.([]string); ok {
			arg0 = data
		} else if tmp == nil {
			arg0 = nil
		} else {
			return nil, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be []string`, tmp))
		}
	}
	args["ids"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["start"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("start"))
		directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOInt2ᚖint(ctx, tmp) }
		directive1 := func(ctx context.Context) (interface{}, error) {
			constraint, err := ec.unmarshalNString2string(ctx, "number,gte=0")
			if err != nil {
				return nil, err
			}
			if ec.directives.Validate == nil {
				return nil, errors.New("directive validate is not implemented")
			}
			return ec.directives.Validate(ctx, rawArgs, directive0, constraint)
		}

		tmp, err = directive1(ctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if data, ok := tmp.(*int); ok {
			arg1 = data
		} else if tmp == nil {
			arg1 = nil
		} else {
			return nil, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be *int`, tmp))
		}
	}
	args["start"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOInt2ᚖint(ctx, tmp) }
		directive1 := func(ctx context.Context) (interface{}, error) {
			constraint, err := ec.unmarshalNString2string(ctx, "number,gte=1")
			if err != nil {
				return nil, err
			}
			if ec.directives.Validate == nil {
				return nil, errors.New("directive validate is not implemented")
			}
			return ec.directives.Validate(ctx, rawArgs, directive0, constraint)
		}

		tmp, err = directive1(ctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if data, ok := tmp.(*int); ok {
			arg2 = data
		} else if tmp == nil {
			arg2 = nil
		} else {
			return nil, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be *int`, tmp))
		}
	}
	args["limit"] = arg2
	var arg3 *crm_models.Sort
	if tmp, ok := rawArgs["sort"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sort"))
		arg3, err = ec.unmarshalOSort2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐSort(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["sort"] = arg3
	var arg4 *string
	if tmp, ok := rawArgs["search"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("search"))
		directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚖstring(ctx, tmp) }
		directive1 := func(ctx context.Context) (interface{}, error) {
			constraint, err := ec.unmarshalNString2string(ctx, "min=3,max=32")
			if err != nil {
				return nil, err
			}
			if ec.directives.Validate == nil {
				return nil, errors.New("directive validate is not implemented")
			}
			return ec.directives.Validate(ctx, rawArgs, directive0, constraint)
		}

		tmp, err = directive1(ctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if data, ok := tmp.(*string); ok {
			arg4 = data
		} else if tmp == nil {
			arg4 = nil
		} else {
			return nil, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp))
		}
	}
	args["search"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_vacancy_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalNID2string(ctx, tmp) }
		directive1 := func(ctx context.Context) (interface{}, error) {
			constraint, err := ec.unmarshalNString2string(ctx, "required,mongodb")
			if err != nil {
				return nil, err
			}
			if ec.directives.Validate == nil {
				return nil, errors.New("directive validate is not implemented")
			}
			return ec.directives.Validate(ctx, rawArgs, directive0, constraint)
		}

		tmp, err = directive1(ctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if data, ok := tmp.(string); ok {
			arg0 = data
		} else {
			return nil, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be string`, tmp))
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_village_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalNID2string(ctx, tmp) }
		directive1 := func(ctx context.Context) (interface{}, error) {
			constraint, err := ec.unmarshalNString2string(ctx, "required,mongodb")
			if err != nil {
				return nil, err
			}
			if ec.directives.Validate == nil {
				return nil, errors.New("directive validate is not implemented")
			}
			return ec.directives.Validate(ctx, rawArgs, directive0, constraint)
		}

		tmp, err = directive1(ctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if data, ok := tmp.(string); ok {
			arg0 = data
		} else {
			return nil, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be string`, tmp))
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_villages_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []string
	if tmp, ok := rawArgs["ids"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ids"))
		directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOID2ᚕstringᚄ(ctx, tmp) }
		directive1 := func(ctx context.Context) (interface{}, error) {
			constraint, err := ec.unmarshalNString2string(ctx, "dive,required,mongodb")
			if err != nil {
				return nil, err
			}
			if ec.directives.Validate == nil {
				return nil, errors.New("directive validate is not implemented")
			}
			return ec.directives.Validate(ctx, rawArgs, directive0, constraint)
		}

		tmp, err = directive1(ctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if data, ok := tmp.([]string); ok {
			arg0 = data
		} else if tmp == nil {
			arg0 = nil
		} else {
			return nil, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be []string`, tmp))
		}
	}
	args["ids"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["start"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("start"))
		directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOInt2ᚖint(ctx, tmp) }
		directive1 := func(ctx context.Context) (interface{}, error) {
			constraint, err := ec.unmarshalNString2string(ctx, "number,gte=0")
			if err != nil {
				return nil, err
			}
			if ec.directives.Validate == nil {
				return nil, errors.New("directive validate is not implemented")
			}
			return ec.directives.Validate(ctx, rawArgs, directive0, constraint)
		}

		tmp, err = directive1(ctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if data, ok := tmp.(*int); ok {
			arg1 = data
		} else if tmp == nil {
			arg1 = nil
		} else {
			return nil, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be *int`, tmp))
		}
	}
	args["start"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOInt2ᚖint(ctx, tmp) }
		directive1 := func(ctx context.Context) (interface{}, error) {
			constraint, err := ec.unmarshalNString2string(ctx, "number,gte=1")
			if err != nil {
				return nil, err
			}
			if ec.directives.Validate == nil {
				return nil, errors.New("directive validate is not implemented")
			}
			return ec.directives.Validate(ctx, rawArgs, directive0, constraint)
		}

		tmp, err = directive1(ctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if data, ok := tmp.(*int); ok {
			arg2 = data
		} else if tmp == nil {
			arg2 = nil
		} else {
			return nil, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be *int`, tmp))
		}
	}
	args["limit"] = arg2
	var arg3 *crm_models.Sort
	if tmp, ok := rawArgs["sort"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sort"))
		arg3, err = ec.unmarshalOSort2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐSort(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["sort"] = arg3
	var arg4 *string
	if tmp, ok := rawArgs["search"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("search"))
		directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚖstring(ctx, tmp) }
		directive1 := func(ctx context.Context) (interface{}, error) {
			constraint, err := ec.unmarshalNString2string(ctx, "min=3,max=32")
			if err != nil {
				return nil, err
			}
			if ec.directives.Validate == nil {
				return nil, errors.New("directive validate is not implemented")
			}
			return ec.directives.Validate(ctx, rawArgs, directive0, constraint)
		}

		tmp, err = directive1(ctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if data, ok := tmp.(*string); ok {
			arg4 = data
		} else if tmp == nil {
			arg4 = nil
		} else {
			return nil, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp))
		}
	}
	args["search"] = arg4
	var arg5 *crm_models.VillageFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg5, err = ec.unmarshalOVillageFilter2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐVillageFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg5
	return args, nil
}

func (ec *executionContext) field___Type_enumValues_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
		arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

func (ec *executionContext) field___Type_fields_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
		arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

// endregion ***************************** args.gotpl *****************************

// region    ************************** directives.gotpl **************************

// endregion ************************** directives.gotpl **************************

// region    **************************** field.gotpl *****************************

func (ec *executionContext) _Article_id(ctx context.Context, field graphql.CollectedField, obj *crm_models.Article) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Article_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Article_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Article",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Article_group(ctx context.Context, field graphql.CollectedField, obj *crm_models.Article) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Article_group(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Article().Group(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*crm_models.ArticleGroup)
	fc.Result = res
	return ec.marshalOArticleGroup2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐArticleGroup(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Article_group(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Article",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ArticleGroup_id(ctx, field)
			case "title":
				return ec.fieldContext_ArticleGroup_title(ctx, field)
			case "createdAt":
				return ec.fieldContext_ArticleGroup_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_ArticleGroup_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ArticleGroup", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Article_title(ctx context.Context, field graphql.CollectedField, obj *crm_models.Article) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Article_title(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Title, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Article_title(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Article",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Article_contentBlocks(ctx context.Context, field graphql.CollectedField, obj *crm_models.Article) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Article_contentBlocks(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ContentBlocks, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]crm_models.ContentBlock)
	fc.Result = res
	return ec.marshalNContentBlock2ᚕgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐContentBlockᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Article_contentBlocks(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Article",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "type":
				return ec.fieldContext_ContentBlock_type(ctx, field)
			case "data":
				return ec.fieldContext_ContentBlock_data(ctx, field)
			case "isVisible":
				return ec.fieldContext_ContentBlock_isVisible(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ContentBlock", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Article_status(ctx context.Context, field graphql.CollectedField, obj *crm_models.Article) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Article_status(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(crm_models.PublicationStatusEnum)
	fc.Result = res
	return ec.marshalNPublicationStatusEnum2githubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐPublicationStatusEnum(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Article_status(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Article",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type PublicationStatusEnum does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Article_cover(ctx context.Context, field graphql.CollectedField, obj *crm_models.Article) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Article_cover(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Article().Cover(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*crm_models.Image)
	fc.Result = res
	return ec.marshalOImage2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐImage(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Article_cover(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Article",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Image_id(ctx, field)
			case "url":
				return ec.fieldContext_Image_url(ctx, field)
			case "path":
				return ec.fieldContext_Image_path(ctx, field)
			case "title":
				return ec.fieldContext_Image_title(ctx, field)
			case "fileName":
				return ec.fieldContext_Image_fileName(ctx, field)
			case "fileType":
				return ec.fieldContext_Image_fileType(ctx, field)
			case "previewUrl":
				return ec.fieldContext_Image_previewUrl(ctx, field)
			case "previewPath":
				return ec.fieldContext_Image_previewPath(ctx, field)
			case "blurHash":
				return ec.fieldContext_Image_blurHash(ctx, field)
			case "preset":
				return ec.fieldContext_Image_preset(ctx, field)
			case "createdAt":
				return ec.fieldContext_Image_createdAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Image", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Article_createdAt(ctx context.Context, field graphql.CollectedField, obj *crm_models.Article) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Article_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Article_createdAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Article",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Article_updatedAt(ctx context.Context, field graphql.CollectedField, obj *crm_models.Article) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Article_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Article_updatedAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Article",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ArticleConnection_totalCount(ctx context.Context, field graphql.CollectedField, obj *crm_models.ArticleConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ArticleConnection_totalCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ArticleConnection_totalCount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ArticleConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ArticleConnection_edges(ctx context.Context, field graphql.CollectedField, obj *crm_models.ArticleConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ArticleConnection_edges(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*crm_models.ArticleEdge)
	fc.Result = res
	return ec.marshalNArticleEdge2ᚕᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐArticleEdgeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ArticleConnection_edges(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ArticleConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "node":
				return ec.fieldContext_ArticleEdge_node(ctx, field)
			case "cursor":
				return ec.fieldContext_ArticleEdge_cursor(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ArticleEdge", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ArticleConnection_nodes(ctx context.Context, field graphql.CollectedField, obj *crm_models.ArticleConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ArticleConnection_nodes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Nodes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*crm_models.Article)
	fc.Result = res
	return ec.marshalNArticle2ᚕᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐArticleᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ArticleConnection_nodes(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ArticleConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Article_id(ctx, field)
			case "group":
				return ec.fieldContext_Article_group(ctx, field)
			case "title":
				return ec.fieldContext_Article_title(ctx, field)
			case "contentBlocks":
				return ec.fieldContext_Article_contentBlocks(ctx, field)
			case "status":
				return ec.fieldContext_Article_status(ctx, field)
			case "cover":
				return ec.fieldContext_Article_cover(ctx, field)
			case "createdAt":
				return ec.fieldContext_Article_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Article_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Article", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ArticleConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *crm_models.ArticleConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ArticleConnection_pageInfo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*crm_models.PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ArticleConnection_pageInfo(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ArticleConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "startCursor":
				return ec.fieldContext_PageInfo_startCursor(ctx, field)
			case "endCursor":
				return ec.fieldContext_PageInfo_endCursor(ctx, field)
			case "hasNextPage":
				return ec.fieldContext_PageInfo_hasNextPage(ctx, field)
			case "hasPreviousPage":
				return ec.fieldContext_PageInfo_hasPreviousPage(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PageInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ArticleEdge_node(ctx context.Context, field graphql.CollectedField, obj *crm_models.ArticleEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ArticleEdge_node(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*crm_models.Article)
	fc.Result = res
	return ec.marshalNArticle2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐArticle(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ArticleEdge_node(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ArticleEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Article_id(ctx, field)
			case "group":
				return ec.fieldContext_Article_group(ctx, field)
			case "title":
				return ec.fieldContext_Article_title(ctx, field)
			case "contentBlocks":
				return ec.fieldContext_Article_contentBlocks(ctx, field)
			case "status":
				return ec.fieldContext_Article_status(ctx, field)
			case "cover":
				return ec.fieldContext_Article_cover(ctx, field)
			case "createdAt":
				return ec.fieldContext_Article_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Article_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Article", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ArticleEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *crm_models.ArticleEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ArticleEdge_cursor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNCursor2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ArticleEdge_cursor(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ArticleEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Cursor does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ArticleGroup_id(ctx context.Context, field graphql.CollectedField, obj *crm_models.ArticleGroup) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ArticleGroup_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ArticleGroup_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ArticleGroup",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ArticleGroup_title(ctx context.Context, field graphql.CollectedField, obj *crm_models.ArticleGroup) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ArticleGroup_title(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Title, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ArticleGroup_title(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ArticleGroup",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ArticleGroup_createdAt(ctx context.Context, field graphql.CollectedField, obj *crm_models.ArticleGroup) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ArticleGroup_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ArticleGroup_createdAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ArticleGroup",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ArticleGroup_updatedAt(ctx context.Context, field graphql.CollectedField, obj *crm_models.ArticleGroup) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ArticleGroup_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ArticleGroup_updatedAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ArticleGroup",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ArticleGroupConnection_totalCount(ctx context.Context, field graphql.CollectedField, obj *crm_models.ArticleGroupConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ArticleGroupConnection_totalCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ArticleGroupConnection_totalCount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ArticleGroupConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ArticleGroupConnection_edges(ctx context.Context, field graphql.CollectedField, obj *crm_models.ArticleGroupConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ArticleGroupConnection_edges(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*crm_models.ArticleGroupEdge)
	fc.Result = res
	return ec.marshalNArticleGroupEdge2ᚕᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐArticleGroupEdgeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ArticleGroupConnection_edges(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ArticleGroupConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "node":
				return ec.fieldContext_ArticleGroupEdge_node(ctx, field)
			case "cursor":
				return ec.fieldContext_ArticleGroupEdge_cursor(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ArticleGroupEdge", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ArticleGroupConnection_nodes(ctx context.Context, field graphql.CollectedField, obj *crm_models.ArticleGroupConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ArticleGroupConnection_nodes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Nodes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*crm_models.ArticleGroup)
	fc.Result = res
	return ec.marshalNArticleGroup2ᚕᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐArticleGroupᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ArticleGroupConnection_nodes(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ArticleGroupConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ArticleGroup_id(ctx, field)
			case "title":
				return ec.fieldContext_ArticleGroup_title(ctx, field)
			case "createdAt":
				return ec.fieldContext_ArticleGroup_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_ArticleGroup_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ArticleGroup", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ArticleGroupConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *crm_models.ArticleGroupConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ArticleGroupConnection_pageInfo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*crm_models.PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ArticleGroupConnection_pageInfo(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ArticleGroupConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "startCursor":
				return ec.fieldContext_PageInfo_startCursor(ctx, field)
			case "endCursor":
				return ec.fieldContext_PageInfo_endCursor(ctx, field)
			case "hasNextPage":
				return ec.fieldContext_PageInfo_hasNextPage(ctx, field)
			case "hasPreviousPage":
				return ec.fieldContext_PageInfo_hasPreviousPage(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PageInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ArticleGroupEdge_node(ctx context.Context, field graphql.CollectedField, obj *crm_models.ArticleGroupEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ArticleGroupEdge_node(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*crm_models.ArticleGroup)
	fc.Result = res
	return ec.marshalNArticleGroup2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐArticleGroup(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ArticleGroupEdge_node(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ArticleGroupEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ArticleGroup_id(ctx, field)
			case "title":
				return ec.fieldContext_ArticleGroup_title(ctx, field)
			case "createdAt":
				return ec.fieldContext_ArticleGroup_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_ArticleGroup_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ArticleGroup", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ArticleGroupEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *crm_models.ArticleGroupEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ArticleGroupEdge_cursor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNCursor2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ArticleGroupEdge_cursor(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ArticleGroupEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Cursor does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Bank_id(ctx context.Context, field graphql.CollectedField, obj *crm_models.Bank) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Bank_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Bank_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Bank",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Bank_title(ctx context.Context, field graphql.CollectedField, obj *crm_models.Bank) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Bank_title(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Title, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Bank_title(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Bank",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Complex_id(ctx context.Context, field graphql.CollectedField, obj *crm_models.Complex) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Complex_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Complex_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Complex",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Complex_title(ctx context.Context, field graphql.CollectedField, obj *crm_models.Complex) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Complex_title(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Title, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Complex_title(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Complex",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Complex_description(ctx context.Context, field graphql.CollectedField, obj *crm_models.Complex) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Complex_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Complex_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Complex",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Complex_address(ctx context.Context, field graphql.CollectedField, obj *crm_models.Complex) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Complex_address(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Address, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Complex_address(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Complex",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Complex_lat(ctx context.Context, field graphql.CollectedField, obj *crm_models.Complex) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Complex_lat(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Lat, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Complex_lat(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Complex",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Complex_lon(ctx context.Context, field graphql.CollectedField, obj *crm_models.Complex) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Complex_lon(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Lon, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Complex_lon(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Complex",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Complex_cadastrNumber(ctx context.Context, field graphql.CollectedField, obj *crm_models.Complex) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Complex_cadastrNumber(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CadastrNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Complex_cadastrNumber(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Complex",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Complex_seoText(ctx context.Context, field graphql.CollectedField, obj *crm_models.Complex) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Complex_seoText(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SeoText, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Complex_seoText(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Complex",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Complex_youtubeLink(ctx context.Context, field graphql.CollectedField, obj *crm_models.Complex) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Complex_youtubeLink(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.YoutubeLink, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Complex_youtubeLink(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Complex",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Complex_tourLink(ctx context.Context, field graphql.CollectedField, obj *crm_models.Complex) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Complex_tourLink(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TourLink, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Complex_tourLink(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Complex",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Complex_inCity(ctx context.Context, field graphql.CollectedField, obj *crm_models.Complex) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Complex_inCity(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InCity, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Complex_inCity(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Complex",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Complex_cityDistance(ctx context.Context, field graphql.CollectedField, obj *crm_models.Complex) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Complex_cityDistance(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CityDistance, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Complex_cityDistance(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Complex",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Complex_region(ctx context.Context, field graphql.CollectedField, obj *crm_models.Complex) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Complex_region(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Region, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Complex_region(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Complex",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Complex_subRegion(ctx context.Context, field graphql.CollectedField, obj *crm_models.Complex) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Complex_subRegion(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubRegion, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Complex_subRegion(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Complex",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Complex_developer(ctx context.Context, field graphql.CollectedField, obj *crm_models.Complex) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Complex_developer(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Complex().Developer(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*crm_models.Developer)
	fc.Result = res
	return ec.marshalODeveloper2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐDeveloper(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Complex_developer(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Complex",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Developer_id(ctx, field)
			case "title":
				return ec.fieldContext_Developer_title(ctx, field)
			case "url":
				return ec.fieldContext_Developer_url(ctx, field)
			case "logo":
				return ec.fieldContext_Developer_logo(ctx, field)
			case "isDeleted":
				return ec.fieldContext_Developer_isDeleted(ctx, field)
			case "createdAt":
				return ec.fieldContext_Developer_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Developer_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Developer", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Complex_isReady(ctx context.Context, field graphql.CollectedField, obj *crm_models.Complex) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Complex_isReady(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsReady, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Complex_isReady(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Complex",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Complex_readinessQuarter(ctx context.Context, field graphql.CollectedField, obj *crm_models.Complex) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Complex_readinessQuarter(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ReadinessQuarter, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*crm_models.QuarterEnum)
	fc.Result = res
	return ec.marshalOQuarterEnum2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐQuarterEnum(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Complex_readinessQuarter(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Complex",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type QuarterEnum does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Complex_readinessYear(ctx context.Context, field graphql.CollectedField, obj *crm_models.Complex) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Complex_readinessYear(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ReadinessYear, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Complex_readinessYear(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Complex",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Complex_images(ctx context.Context, field graphql.CollectedField, obj *crm_models.Complex) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Complex_images(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Complex().Images(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*crm_models.Image)
	fc.Result = res
	return ec.marshalOImage2ᚕᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐImageᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Complex_images(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Complex",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Image_id(ctx, field)
			case "url":
				return ec.fieldContext_Image_url(ctx, field)
			case "path":
				return ec.fieldContext_Image_path(ctx, field)
			case "title":
				return ec.fieldContext_Image_title(ctx, field)
			case "fileName":
				return ec.fieldContext_Image_fileName(ctx, field)
			case "fileType":
				return ec.fieldContext_Image_fileType(ctx, field)
			case "previewUrl":
				return ec.fieldContext_Image_previewUrl(ctx, field)
			case "previewPath":
				return ec.fieldContext_Image_previewPath(ctx, field)
			case "blurHash":
				return ec.fieldContext_Image_blurHash(ctx, field)
			case "preset":
				return ec.fieldContext_Image_preset(ctx, field)
			case "createdAt":
				return ec.fieldContext_Image_createdAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Image", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Complex_documents(ctx context.Context, field graphql.CollectedField, obj *crm_models.Complex) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Complex_documents(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Complex().Documents(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*crm_models.Document)
	fc.Result = res
	return ec.marshalODocument2ᚕᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐDocumentᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Complex_documents(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Complex",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Document_id(ctx, field)
			case "url":
				return ec.fieldContext_Document_url(ctx, field)
			case "path":
				return ec.fieldContext_Document_path(ctx, field)
			case "title":
				return ec.fieldContext_Document_title(ctx, field)
			case "fileName":
				return ec.fieldContext_Document_fileName(ctx, field)
			case "fileType":
				return ec.fieldContext_Document_fileType(ctx, field)
			case "createdAt":
				return ec.fieldContext_Document_createdAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Document", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Complex_projectDeclarations(ctx context.Context, field graphql.CollectedField, obj *crm_models.Complex) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Complex_projectDeclarations(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Complex().ProjectDeclarations(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*crm_models.Document)
	fc.Result = res
	return ec.marshalODocument2ᚕᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐDocumentᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Complex_projectDeclarations(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Complex",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Document_id(ctx, field)
			case "url":
				return ec.fieldContext_Document_url(ctx, field)
			case "path":
				return ec.fieldContext_Document_path(ctx, field)
			case "title":
				return ec.fieldContext_Document_title(ctx, field)
			case "fileName":
				return ec.fieldContext_Document_fileName(ctx, field)
			case "fileType":
				return ec.fieldContext_Document_fileType(ctx, field)
			case "createdAt":
				return ec.fieldContext_Document_createdAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Document", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Complex_publicationStatus(ctx context.Context, field graphql.CollectedField, obj *crm_models.Complex) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Complex_publicationStatus(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PublicationStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*crm_models.PublicationStatusEnum)
	fc.Result = res
	return ec.marshalOPublicationStatusEnum2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐPublicationStatusEnum(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Complex_publicationStatus(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Complex",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type PublicationStatusEnum does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Complex_internalInfo(ctx context.Context, field graphql.CollectedField, obj *crm_models.Complex) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Complex_internalInfo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InternalInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Complex_internalInfo(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Complex",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Complex_isDeleted(ctx context.Context, field graphql.CollectedField, obj *crm_models.Complex) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Complex_isDeleted(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeleted, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Complex_isDeleted(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Complex",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Complex_createdAt(ctx context.Context, field graphql.CollectedField, obj *crm_models.Complex) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Complex_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Complex_createdAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Complex",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Complex_updatedAt(ctx context.Context, field graphql.CollectedField, obj *crm_models.Complex) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Complex_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Complex_updatedAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Complex",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ComplexConnection_totalCount(ctx context.Context, field graphql.CollectedField, obj *crm_models.ComplexConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ComplexConnection_totalCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ComplexConnection_totalCount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ComplexConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ComplexConnection_edges(ctx context.Context, field graphql.CollectedField, obj *crm_models.ComplexConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ComplexConnection_edges(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*crm_models.ComplexEdge)
	fc.Result = res
	return ec.marshalNComplexEdge2ᚕᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐComplexEdgeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ComplexConnection_edges(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ComplexConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "node":
				return ec.fieldContext_ComplexEdge_node(ctx, field)
			case "cursor":
				return ec.fieldContext_ComplexEdge_cursor(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ComplexEdge", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ComplexConnection_nodes(ctx context.Context, field graphql.CollectedField, obj *crm_models.ComplexConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ComplexConnection_nodes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Nodes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*crm_models.Complex)
	fc.Result = res
	return ec.marshalNComplex2ᚕᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐComplexᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ComplexConnection_nodes(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ComplexConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Complex_id(ctx, field)
			case "title":
				return ec.fieldContext_Complex_title(ctx, field)
			case "description":
				return ec.fieldContext_Complex_description(ctx, field)
			case "address":
				return ec.fieldContext_Complex_address(ctx, field)
			case "lat":
				return ec.fieldContext_Complex_lat(ctx, field)
			case "lon":
				return ec.fieldContext_Complex_lon(ctx, field)
			case "cadastrNumber":
				return ec.fieldContext_Complex_cadastrNumber(ctx, field)
			case "seoText":
				return ec.fieldContext_Complex_seoText(ctx, field)
			case "youtubeLink":
				return ec.fieldContext_Complex_youtubeLink(ctx, field)
			case "tourLink":
				return ec.fieldContext_Complex_tourLink(ctx, field)
			case "inCity":
				return ec.fieldContext_Complex_inCity(ctx, field)
			case "cityDistance":
				return ec.fieldContext_Complex_cityDistance(ctx, field)
			case "region":
				return ec.fieldContext_Complex_region(ctx, field)
			case "subRegion":
				return ec.fieldContext_Complex_subRegion(ctx, field)
			case "developer":
				return ec.fieldContext_Complex_developer(ctx, field)
			case "isReady":
				return ec.fieldContext_Complex_isReady(ctx, field)
			case "readinessQuarter":
				return ec.fieldContext_Complex_readinessQuarter(ctx, field)
			case "readinessYear":
				return ec.fieldContext_Complex_readinessYear(ctx, field)
			case "images":
				return ec.fieldContext_Complex_images(ctx, field)
			case "documents":
				return ec.fieldContext_Complex_documents(ctx, field)
			case "projectDeclarations":
				return ec.fieldContext_Complex_projectDeclarations(ctx, field)
			case "publicationStatus":
				return ec.fieldContext_Complex_publicationStatus(ctx, field)
			case "internalInfo":
				return ec.fieldContext_Complex_internalInfo(ctx, field)
			case "isDeleted":
				return ec.fieldContext_Complex_isDeleted(ctx, field)
			case "createdAt":
				return ec.fieldContext_Complex_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Complex_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Complex", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ComplexConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *crm_models.ComplexConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ComplexConnection_pageInfo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*crm_models.PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ComplexConnection_pageInfo(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ComplexConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "startCursor":
				return ec.fieldContext_PageInfo_startCursor(ctx, field)
			case "endCursor":
				return ec.fieldContext_PageInfo_endCursor(ctx, field)
			case "hasNextPage":
				return ec.fieldContext_PageInfo_hasNextPage(ctx, field)
			case "hasPreviousPage":
				return ec.fieldContext_PageInfo_hasPreviousPage(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PageInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ComplexEdge_node(ctx context.Context, field graphql.CollectedField, obj *crm_models.ComplexEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ComplexEdge_node(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*crm_models.Complex)
	fc.Result = res
	return ec.marshalNComplex2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐComplex(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ComplexEdge_node(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ComplexEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Complex_id(ctx, field)
			case "title":
				return ec.fieldContext_Complex_title(ctx, field)
			case "description":
				return ec.fieldContext_Complex_description(ctx, field)
			case "address":
				return ec.fieldContext_Complex_address(ctx, field)
			case "lat":
				return ec.fieldContext_Complex_lat(ctx, field)
			case "lon":
				return ec.fieldContext_Complex_lon(ctx, field)
			case "cadastrNumber":
				return ec.fieldContext_Complex_cadastrNumber(ctx, field)
			case "seoText":
				return ec.fieldContext_Complex_seoText(ctx, field)
			case "youtubeLink":
				return ec.fieldContext_Complex_youtubeLink(ctx, field)
			case "tourLink":
				return ec.fieldContext_Complex_tourLink(ctx, field)
			case "inCity":
				return ec.fieldContext_Complex_inCity(ctx, field)
			case "cityDistance":
				return ec.fieldContext_Complex_cityDistance(ctx, field)
			case "region":
				return ec.fieldContext_Complex_region(ctx, field)
			case "subRegion":
				return ec.fieldContext_Complex_subRegion(ctx, field)
			case "developer":
				return ec.fieldContext_Complex_developer(ctx, field)
			case "isReady":
				return ec.fieldContext_Complex_isReady(ctx, field)
			case "readinessQuarter":
				return ec.fieldContext_Complex_readinessQuarter(ctx, field)
			case "readinessYear":
				return ec.fieldContext_Complex_readinessYear(ctx, field)
			case "images":
				return ec.fieldContext_Complex_images(ctx, field)
			case "documents":
				return ec.fieldContext_Complex_documents(ctx, field)
			case "projectDeclarations":
				return ec.fieldContext_Complex_projectDeclarations(ctx, field)
			case "publicationStatus":
				return ec.fieldContext_Complex_publicationStatus(ctx, field)
			case "internalInfo":
				return ec.fieldContext_Complex_internalInfo(ctx, field)
			case "isDeleted":
				return ec.fieldContext_Complex_isDeleted(ctx, field)
			case "createdAt":
				return ec.fieldContext_Complex_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Complex_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Complex", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ComplexEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *crm_models.ComplexEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ComplexEdge_cursor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNCursor2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ComplexEdge_cursor(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ComplexEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Cursor does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ComplexHouse_id(ctx context.Context, field graphql.CollectedField, obj *crm_models.ComplexHouse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ComplexHouse_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ComplexHouse_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ComplexHouse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ComplexHouse_complex(ctx context.Context, field graphql.CollectedField, obj *crm_models.ComplexHouse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ComplexHouse_complex(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.ComplexHouse().Complex(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*crm_models.Complex)
	fc.Result = res
	return ec.marshalOComplex2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐComplex(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ComplexHouse_complex(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ComplexHouse",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Complex_id(ctx, field)
			case "title":
				return ec.fieldContext_Complex_title(ctx, field)
			case "description":
				return ec.fieldContext_Complex_description(ctx, field)
			case "address":
				return ec.fieldContext_Complex_address(ctx, field)
			case "lat":
				return ec.fieldContext_Complex_lat(ctx, field)
			case "lon":
				return ec.fieldContext_Complex_lon(ctx, field)
			case "cadastrNumber":
				return ec.fieldContext_Complex_cadastrNumber(ctx, field)
			case "seoText":
				return ec.fieldContext_Complex_seoText(ctx, field)
			case "youtubeLink":
				return ec.fieldContext_Complex_youtubeLink(ctx, field)
			case "tourLink":
				return ec.fieldContext_Complex_tourLink(ctx, field)
			case "inCity":
				return ec.fieldContext_Complex_inCity(ctx, field)
			case "cityDistance":
				return ec.fieldContext_Complex_cityDistance(ctx, field)
			case "region":
				return ec.fieldContext_Complex_region(ctx, field)
			case "subRegion":
				return ec.fieldContext_Complex_subRegion(ctx, field)
			case "developer":
				return ec.fieldContext_Complex_developer(ctx, field)
			case "isReady":
				return ec.fieldContext_Complex_isReady(ctx, field)
			case "readinessQuarter":
				return ec.fieldContext_Complex_readinessQuarter(ctx, field)
			case "readinessYear":
				return ec.fieldContext_Complex_readinessYear(ctx, field)
			case "images":
				return ec.fieldContext_Complex_images(ctx, field)
			case "documents":
				return ec.fieldContext_Complex_documents(ctx, field)
			case "projectDeclarations":
				return ec.fieldContext_Complex_projectDeclarations(ctx, field)
			case "publicationStatus":
				return ec.fieldContext_Complex_publicationStatus(ctx, field)
			case "internalInfo":
				return ec.fieldContext_Complex_internalInfo(ctx, field)
			case "isDeleted":
				return ec.fieldContext_Complex_isDeleted(ctx, field)
			case "createdAt":
				return ec.fieldContext_Complex_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Complex_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Complex", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ComplexHouse_title(ctx context.Context, field graphql.CollectedField, obj *crm_models.ComplexHouse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ComplexHouse_title(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Title, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ComplexHouse_title(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ComplexHouse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ComplexHouse_description(ctx context.Context, field graphql.CollectedField, obj *crm_models.ComplexHouse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ComplexHouse_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ComplexHouse_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ComplexHouse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ComplexHouse_address(ctx context.Context, field graphql.CollectedField, obj *crm_models.ComplexHouse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ComplexHouse_address(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Address, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ComplexHouse_address(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ComplexHouse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ComplexHouse_lat(ctx context.Context, field graphql.CollectedField, obj *crm_models.ComplexHouse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ComplexHouse_lat(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Lat, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ComplexHouse_lat(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ComplexHouse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ComplexHouse_lon(ctx context.Context, field graphql.CollectedField, obj *crm_models.ComplexHouse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ComplexHouse_lon(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Lon, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ComplexHouse_lon(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ComplexHouse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ComplexHouse_cadastrNumber(ctx context.Context, field graphql.CollectedField, obj *crm_models.ComplexHouse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ComplexHouse_cadastrNumber(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CadastrNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ComplexHouse_cadastrNumber(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ComplexHouse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ComplexHouse_seoText(ctx context.Context, field graphql.CollectedField, obj *crm_models.ComplexHouse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ComplexHouse_seoText(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SeoText, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ComplexHouse_seoText(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ComplexHouse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ComplexHouse_youtubeLink(ctx context.Context, field graphql.CollectedField, obj *crm_models.ComplexHouse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ComplexHouse_youtubeLink(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.YoutubeLink, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ComplexHouse_youtubeLink(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ComplexHouse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ComplexHouse_tourLink(ctx context.Context, field graphql.CollectedField, obj *crm_models.ComplexHouse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ComplexHouse_tourLink(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TourLink, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ComplexHouse_tourLink(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ComplexHouse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ComplexHouse_isReady(ctx context.Context, field graphql.CollectedField, obj *crm_models.ComplexHouse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ComplexHouse_isReady(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsReady, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ComplexHouse_isReady(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ComplexHouse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ComplexHouse_readinessQuarter(ctx context.Context, field graphql.CollectedField, obj *crm_models.ComplexHouse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ComplexHouse_readinessQuarter(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ReadinessQuarter, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*crm_models.QuarterEnum)
	fc.Result = res
	return ec.marshalOQuarterEnum2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐQuarterEnum(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ComplexHouse_readinessQuarter(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ComplexHouse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type QuarterEnum does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ComplexHouse_readinessYear(ctx context.Context, field graphql.CollectedField, obj *crm_models.ComplexHouse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ComplexHouse_readinessYear(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ReadinessYear, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ComplexHouse_readinessYear(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ComplexHouse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ComplexHouse_images(ctx context.Context, field graphql.CollectedField, obj *crm_models.ComplexHouse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ComplexHouse_images(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.ComplexHouse().Images(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*crm_models.Image)
	fc.Result = res
	return ec.marshalOImage2ᚕᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐImageᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ComplexHouse_images(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ComplexHouse",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Image_id(ctx, field)
			case "url":
				return ec.fieldContext_Image_url(ctx, field)
			case "path":
				return ec.fieldContext_Image_path(ctx, field)
			case "title":
				return ec.fieldContext_Image_title(ctx, field)
			case "fileName":
				return ec.fieldContext_Image_fileName(ctx, field)
			case "fileType":
				return ec.fieldContext_Image_fileType(ctx, field)
			case "previewUrl":
				return ec.fieldContext_Image_previewUrl(ctx, field)
			case "previewPath":
				return ec.fieldContext_Image_previewPath(ctx, field)
			case "blurHash":
				return ec.fieldContext_Image_blurHash(ctx, field)
			case "preset":
				return ec.fieldContext_Image_preset(ctx, field)
			case "createdAt":
				return ec.fieldContext_Image_createdAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Image", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ComplexHouse_documents(ctx context.Context, field graphql.CollectedField, obj *crm_models.ComplexHouse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ComplexHouse_documents(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.ComplexHouse().Documents(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*crm_models.Document)
	fc.Result = res
	return ec.marshalODocument2ᚕᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐDocumentᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ComplexHouse_documents(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ComplexHouse",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Document_id(ctx, field)
			case "url":
				return ec.fieldContext_Document_url(ctx, field)
			case "path":
				return ec.fieldContext_Document_path(ctx, field)
			case "title":
				return ec.fieldContext_Document_title(ctx, field)
			case "fileName":
				return ec.fieldContext_Document_fileName(ctx, field)
			case "fileType":
				return ec.fieldContext_Document_fileType(ctx, field)
			case "createdAt":
				return ec.fieldContext_Document_createdAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Document", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ComplexHouse_projectDeclarations(ctx context.Context, field graphql.CollectedField, obj *crm_models.ComplexHouse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ComplexHouse_projectDeclarations(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.ComplexHouse().ProjectDeclarations(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*crm_models.Document)
	fc.Result = res
	return ec.marshalODocument2ᚕᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐDocumentᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ComplexHouse_projectDeclarations(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ComplexHouse",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Document_id(ctx, field)
			case "url":
				return ec.fieldContext_Document_url(ctx, field)
			case "path":
				return ec.fieldContext_Document_path(ctx, field)
			case "title":
				return ec.fieldContext_Document_title(ctx, field)
			case "fileName":
				return ec.fieldContext_Document_fileName(ctx, field)
			case "fileType":
				return ec.fieldContext_Document_fileType(ctx, field)
			case "createdAt":
				return ec.fieldContext_Document_createdAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Document", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ComplexHouse_publicationStatus(ctx context.Context, field graphql.CollectedField, obj *crm_models.ComplexHouse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ComplexHouse_publicationStatus(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PublicationStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*crm_models.PublicationStatusEnum)
	fc.Result = res
	return ec.marshalOPublicationStatusEnum2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐPublicationStatusEnum(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ComplexHouse_publicationStatus(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ComplexHouse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type PublicationStatusEnum does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ComplexHouse_internalInfo(ctx context.Context, field graphql.CollectedField, obj *crm_models.ComplexHouse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ComplexHouse_internalInfo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InternalInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ComplexHouse_internalInfo(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ComplexHouse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ComplexHouse_isDeleted(ctx context.Context, field graphql.CollectedField, obj *crm_models.ComplexHouse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ComplexHouse_isDeleted(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeleted, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ComplexHouse_isDeleted(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ComplexHouse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ComplexHouse_createdAt(ctx context.Context, field graphql.CollectedField, obj *crm_models.ComplexHouse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ComplexHouse_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ComplexHouse_createdAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ComplexHouse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ComplexHouse_updatedAt(ctx context.Context, field graphql.CollectedField, obj *crm_models.ComplexHouse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ComplexHouse_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ComplexHouse_updatedAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ComplexHouse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ComplexHouseConnection_totalCount(ctx context.Context, field graphql.CollectedField, obj *crm_models.ComplexHouseConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ComplexHouseConnection_totalCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ComplexHouseConnection_totalCount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ComplexHouseConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ComplexHouseConnection_edges(ctx context.Context, field graphql.CollectedField, obj *crm_models.ComplexHouseConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ComplexHouseConnection_edges(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*crm_models.ComplexHouseEdge)
	fc.Result = res
	return ec.marshalNComplexHouseEdge2ᚕᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐComplexHouseEdgeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ComplexHouseConnection_edges(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ComplexHouseConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "node":
				return ec.fieldContext_ComplexHouseEdge_node(ctx, field)
			case "cursor":
				return ec.fieldContext_ComplexHouseEdge_cursor(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ComplexHouseEdge", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ComplexHouseConnection_nodes(ctx context.Context, field graphql.CollectedField, obj *crm_models.ComplexHouseConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ComplexHouseConnection_nodes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Nodes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*crm_models.ComplexHouse)
	fc.Result = res
	return ec.marshalNComplexHouse2ᚕᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐComplexHouseᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ComplexHouseConnection_nodes(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ComplexHouseConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ComplexHouse_id(ctx, field)
			case "complex":
				return ec.fieldContext_ComplexHouse_complex(ctx, field)
			case "title":
				return ec.fieldContext_ComplexHouse_title(ctx, field)
			case "description":
				return ec.fieldContext_ComplexHouse_description(ctx, field)
			case "address":
				return ec.fieldContext_ComplexHouse_address(ctx, field)
			case "lat":
				return ec.fieldContext_ComplexHouse_lat(ctx, field)
			case "lon":
				return ec.fieldContext_ComplexHouse_lon(ctx, field)
			case "cadastrNumber":
				return ec.fieldContext_ComplexHouse_cadastrNumber(ctx, field)
			case "seoText":
				return ec.fieldContext_ComplexHouse_seoText(ctx, field)
			case "youtubeLink":
				return ec.fieldContext_ComplexHouse_youtubeLink(ctx, field)
			case "tourLink":
				return ec.fieldContext_ComplexHouse_tourLink(ctx, field)
			case "isReady":
				return ec.fieldContext_ComplexHouse_isReady(ctx, field)
			case "readinessQuarter":
				return ec.fieldContext_ComplexHouse_readinessQuarter(ctx, field)
			case "readinessYear":
				return ec.fieldContext_ComplexHouse_readinessYear(ctx, field)
			case "images":
				return ec.fieldContext_ComplexHouse_images(ctx, field)
			case "documents":
				return ec.fieldContext_ComplexHouse_documents(ctx, field)
			case "projectDeclarations":
				return ec.fieldContext_ComplexHouse_projectDeclarations(ctx, field)
			case "publicationStatus":
				return ec.fieldContext_ComplexHouse_publicationStatus(ctx, field)
			case "internalInfo":
				return ec.fieldContext_ComplexHouse_internalInfo(ctx, field)
			case "isDeleted":
				return ec.fieldContext_ComplexHouse_isDeleted(ctx, field)
			case "createdAt":
				return ec.fieldContext_ComplexHouse_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_ComplexHouse_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ComplexHouse", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ComplexHouseConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *crm_models.ComplexHouseConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ComplexHouseConnection_pageInfo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*crm_models.PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ComplexHouseConnection_pageInfo(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ComplexHouseConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "startCursor":
				return ec.fieldContext_PageInfo_startCursor(ctx, field)
			case "endCursor":
				return ec.fieldContext_PageInfo_endCursor(ctx, field)
			case "hasNextPage":
				return ec.fieldContext_PageInfo_hasNextPage(ctx, field)
			case "hasPreviousPage":
				return ec.fieldContext_PageInfo_hasPreviousPage(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PageInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ComplexHouseEdge_node(ctx context.Context, field graphql.CollectedField, obj *crm_models.ComplexHouseEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ComplexHouseEdge_node(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*crm_models.ComplexHouse)
	fc.Result = res
	return ec.marshalNComplexHouse2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐComplexHouse(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ComplexHouseEdge_node(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ComplexHouseEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ComplexHouse_id(ctx, field)
			case "complex":
				return ec.fieldContext_ComplexHouse_complex(ctx, field)
			case "title":
				return ec.fieldContext_ComplexHouse_title(ctx, field)
			case "description":
				return ec.fieldContext_ComplexHouse_description(ctx, field)
			case "address":
				return ec.fieldContext_ComplexHouse_address(ctx, field)
			case "lat":
				return ec.fieldContext_ComplexHouse_lat(ctx, field)
			case "lon":
				return ec.fieldContext_ComplexHouse_lon(ctx, field)
			case "cadastrNumber":
				return ec.fieldContext_ComplexHouse_cadastrNumber(ctx, field)
			case "seoText":
				return ec.fieldContext_ComplexHouse_seoText(ctx, field)
			case "youtubeLink":
				return ec.fieldContext_ComplexHouse_youtubeLink(ctx, field)
			case "tourLink":
				return ec.fieldContext_ComplexHouse_tourLink(ctx, field)
			case "isReady":
				return ec.fieldContext_ComplexHouse_isReady(ctx, field)
			case "readinessQuarter":
				return ec.fieldContext_ComplexHouse_readinessQuarter(ctx, field)
			case "readinessYear":
				return ec.fieldContext_ComplexHouse_readinessYear(ctx, field)
			case "images":
				return ec.fieldContext_ComplexHouse_images(ctx, field)
			case "documents":
				return ec.fieldContext_ComplexHouse_documents(ctx, field)
			case "projectDeclarations":
				return ec.fieldContext_ComplexHouse_projectDeclarations(ctx, field)
			case "publicationStatus":
				return ec.fieldContext_ComplexHouse_publicationStatus(ctx, field)
			case "internalInfo":
				return ec.fieldContext_ComplexHouse_internalInfo(ctx, field)
			case "isDeleted":
				return ec.fieldContext_ComplexHouse_isDeleted(ctx, field)
			case "createdAt":
				return ec.fieldContext_ComplexHouse_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_ComplexHouse_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ComplexHouse", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ComplexHouseEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *crm_models.ComplexHouseEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ComplexHouseEdge_cursor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNCursor2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ComplexHouseEdge_cursor(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ComplexHouseEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Cursor does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Contact_id(ctx context.Context, field graphql.CollectedField, obj *crm_models.Contact) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Contact_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Contact_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Contact",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Contact_internalNumber(ctx context.Context, field graphql.CollectedField, obj *crm_models.Contact) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Contact_internalNumber(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InternalNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Contact_internalNumber(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Contact",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Contact_type(ctx context.Context, field graphql.CollectedField, obj *crm_models.Contact) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Contact_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*crm_models.CounterPartyTypeEnum)
	fc.Result = res
	return ec.marshalOCounterPartyTypeEnum2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐCounterPartyTypeEnum(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Contact_type(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Contact",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type CounterPartyTypeEnum does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Contact_source(ctx context.Context, field graphql.CollectedField, obj *crm_models.Contact) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Contact_source(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Source, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*crm_models.ContactSourceEnum)
	fc.Result = res
	return ec.marshalOContactSourceEnum2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐContactSourceEnum(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Contact_source(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Contact",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ContactSourceEnum does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Contact_name(ctx context.Context, field graphql.CollectedField, obj *crm_models.Contact) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Contact_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Contact_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Contact",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Contact_surname(ctx context.Context, field graphql.CollectedField, obj *crm_models.Contact) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Contact_surname(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Surname, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Contact_surname(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Contact",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Contact_patronymic(ctx context.Context, field graphql.CollectedField, obj *crm_models.Contact) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Contact_patronymic(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Patronymic, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Contact_patronymic(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Contact",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Contact_birthday(ctx context.Context, field graphql.CollectedField, obj *crm_models.Contact) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Contact_birthday(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Birthday, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalOTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Contact_birthday(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Contact",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Contact_phone(ctx context.Context, field graphql.CollectedField, obj *crm_models.Contact) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Contact_phone(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Phone, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Contact_phone(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Contact",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Contact_additionalPhones(ctx context.Context, field graphql.CollectedField, obj *crm_models.Contact) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Contact_additionalPhones(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AdditionalPhones, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalOString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Contact_additionalPhones(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Contact",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Contact_email(ctx context.Context, field graphql.CollectedField, obj *crm_models.Contact) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Contact_email(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Email, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Contact_email(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Contact",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Contact_company(ctx context.Context, field graphql.CollectedField, obj *crm_models.Contact) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Contact_company(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Company, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Contact_company(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Contact",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Contact_address(ctx context.Context, field graphql.CollectedField, obj *crm_models.Contact) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Contact_address(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Address, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Contact_address(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Contact",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Contact_properties(ctx context.Context, field graphql.CollectedField, obj *crm_models.Contact) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Contact_properties(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Contact().Properties(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*crm_models.Property)
	fc.Result = res
	return ec.marshalOProperty2ᚕᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐPropertyᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Contact_properties(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Contact",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Property_id(ctx, field)
			case "internalID":
				return ec.fieldContext_Property_internalID(ctx, field)
			case "deal":
				return ec.fieldContext_Property_deal(ctx, field)
			case "type":
				return ec.fieldContext_Property_type(ctx, field)
			case "subType":
				return ec.fieldContext_Property_subType(ctx, field)
			case "commercialUsage":
				return ec.fieldContext_Property_commercialUsage(ctx, field)
			case "fromDeveloper":
				return ec.fieldContext_Property_fromDeveloper(ctx, field)
			case "inComplex":
				return ec.fieldContext_Property_inComplex(ctx, field)
			case "complex":
				return ec.fieldContext_Property_complex(ctx, field)
			case "complexHouse":
				return ec.fieldContext_Property_complexHouse(ctx, field)
			case "inVillage":
				return ec.fieldContext_Property_inVillage(ctx, field)
			case "village":
				return ec.fieldContext_Property_village(ctx, field)
			case "isHot":
				return ec.fieldContext_Property_isHot(ctx, field)
			case "title":
				return ec.fieldContext_Property_title(ctx, field)
			case "description":
				return ec.fieldContext_Property_description(ctx, field)
			case "address":
				return ec.fieldContext_Property_address(ctx, field)
			case "lat":
				return ec.fieldContext_Property_lat(ctx, field)
			case "lon":
				return ec.fieldContext_Property_lon(ctx, field)
			case "cadastrNumber":
				return ec.fieldContext_Property_cadastrNumber(ctx, field)
			case "seoText":
				return ec.fieldContext_Property_seoText(ctx, field)
			case "youtubeLink":
				return ec.fieldContext_Property_youtubeLink(ctx, field)
			case "tourLink":
				return ec.fieldContext_Property_tourLink(ctx, field)
			case "documents":
				return ec.fieldContext_Property_documents(ctx, field)
			case "images":
				return ec.fieldContext_Property_images(ctx, field)
			case "isDeleted":
				return ec.fieldContext_Property_isDeleted(ctx, field)
			case "isEditable":
				return ec.fieldContext_Property_isEditable(ctx, field)
			case "refreshDate":
				return ec.fieldContext_Property_refreshDate(ctx, field)
			case "status":
				return ec.fieldContext_Property_status(ctx, field)
			case "price":
				return ec.fieldContext_Property_price(ctx, field)
			case "pricePerMeter":
				return ec.fieldContext_Property_pricePerMeter(ctx, field)
			case "pricePerAr":
				return ec.fieldContext_Property_pricePerAr(ctx, field)
			case "priceHistory":
				return ec.fieldContext_Property_priceHistory(ctx, field)
			case "isReady":
				return ec.fieldContext_Property_isReady(ctx, field)
			case "readinessYear":
				return ec.fieldContext_Property_readinessYear(ctx, field)
			case "readinessQuarter":
				return ec.fieldContext_Property_readinessQuarter(ctx, field)
			case "inCity":
				return ec.fieldContext_Property_inCity(ctx, field)
			case "cityDistance":
				return ec.fieldContext_Property_cityDistance(ctx, field)
			case "region":
				return ec.fieldContext_Property_region(ctx, field)
			case "subRegion":
				return ec.fieldContext_Property_subRegion(ctx, field)
			case "source":
				return ec.fieldContext_Property_source(ctx, field)
			case "rooms":
				return ec.fieldContext_Property_rooms(ctx, field)
			case "area":
				return ec.fieldContext_Property_area(ctx, field)
			case "landArea":
				return ec.fieldContext_Property_landArea(ctx, field)
			case "livingArea":
				return ec.fieldContext_Property_livingArea(ctx, field)
			case "kitchenArea":
				return ec.fieldContext_Property_kitchenArea(ctx, field)
			case "toiletType":
				return ec.fieldContext_Property_toiletType(ctx, field)
			case "rehabType":
				return ec.fieldContext_Property_rehabType(ctx, field)
			case "floor":
				return ec.fieldContext_Property_floor(ctx, field)
			case "floors":
				return ec.fieldContext_Property_floors(ctx, field)
			case "ceilingHeight":
				return ec.fieldContext_Property_ceilingHeight(ctx, field)
			case "internalInfo":
				return ec.fieldContext_Property_internalInfo(ctx, field)
			case "comissionPercent":
				return ec.fieldContext_Property_comissionPercent(ctx, field)
			case "comissionAmount":
				return ec.fieldContext_Property_comissionAmount(ctx, field)
			case "createdAt":
				return ec.fieldContext_Property_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Property_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Property", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Contact_passportNumber(ctx context.Context, field graphql.CollectedField, obj *crm_models.Contact) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Contact_passportNumber(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PassportNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Contact_passportNumber(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Contact",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Contact_passportIssuedBy(ctx context.Context, field graphql.CollectedField, obj *crm_models.Contact) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Contact_passportIssuedBy(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PassportIssuedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Contact_passportIssuedBy(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Contact",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Contact_passportIssueDate(ctx context.Context, field graphql.CollectedField, obj *crm_models.Contact) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Contact_passportIssueDate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PassportIssueDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalOTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Contact_passportIssueDate(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Contact",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Contact_passportIssuerCode(ctx context.Context, field graphql.CollectedField, obj *crm_models.Contact) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Contact_passportIssuerCode(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PassportIssuerCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Contact_passportIssuerCode(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Contact",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Contact_internalInfo(ctx context.Context, field graphql.CollectedField, obj *crm_models.Contact) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Contact_internalInfo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InternalInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Contact_internalInfo(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Contact",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Contact_note(ctx context.Context, field graphql.CollectedField, obj *crm_models.Contact) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Contact_note(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Note, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Contact_note(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Contact",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Contact_deals(ctx context.Context, field graphql.CollectedField, obj *crm_models.Contact) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Contact_deals(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Contact().Deals(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*crm_models.Deal)
	fc.Result = res
	return ec.marshalODeal2ᚕᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐDealᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Contact_deals(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Contact",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Deal_id(ctx, field)
			case "internalNumber":
				return ec.fieldContext_Deal_internalNumber(ctx, field)
			case "type":
				return ec.fieldContext_Deal_type(ctx, field)
			case "stage":
				return ec.fieldContext_Deal_stage(ctx, field)
			case "sellerAgent":
				return ec.fieldContext_Deal_sellerAgent(ctx, field)
			case "sellerContact":
				return ec.fieldContext_Deal_sellerContact(ctx, field)
			case "sellerPhone":
				return ec.fieldContext_Deal_sellerPhone(ctx, field)
			case "sellerDocuments":
				return ec.fieldContext_Deal_sellerDocuments(ctx, field)
			case "buyerAgent":
				return ec.fieldContext_Deal_buyerAgent(ctx, field)
			case "buyerContact":
				return ec.fieldContext_Deal_buyerContact(ctx, field)
			case "buyerPhone":
				return ec.fieldContext_Deal_buyerPhone(ctx, field)
			case "buyerDocuments":
				return ec.fieldContext_Deal_buyerDocuments(ctx, field)
			case "property":
				return ec.fieldContext_Deal_property(ctx, field)
			case "address":
				return ec.fieldContext_Deal_address(ctx, field)
			case "mortgageBroker":
				return ec.fieldContext_Deal_mortgageBroker(ctx, field)
			case "mortgageRequest":
				return ec.fieldContext_Deal_mortgageRequest(ctx, field)
			case "mortgageDocuments":
				return ec.fieldContext_Deal_mortgageDocuments(ctx, field)
			case "lawer":
				return ec.fieldContext_Deal_lawer(ctx, field)
			case "lawerDocuments":
				return ec.fieldContext_Deal_lawerDocuments(ctx, field)
			case "accountant":
				return ec.fieldContext_Deal_accountant(ctx, field)
			case "accountantDocuments":
				return ec.fieldContext_Deal_accountantDocuments(ctx, field)
			case "depositDate":
				return ec.fieldContext_Deal_depositDate(ctx, field)
			case "dealDate":
				return ec.fieldContext_Deal_dealDate(ctx, field)
			case "finishedAt":
				return ec.fieldContext_Deal_finishedAt(ctx, field)
			case "commissionAmount":
				return ec.fieldContext_Deal_commissionAmount(ctx, field)
			case "internalComment":
				return ec.fieldContext_Deal_internalComment(ctx, field)
			case "isDeleted":
				return ec.fieldContext_Deal_isDeleted(ctx, field)
			case "createdAt":
				return ec.fieldContext_Deal_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Deal_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Deal", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Contact_agents(ctx context.Context, field graphql.CollectedField, obj *crm_models.Contact) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Contact_agents(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Contact().Agents(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*crm_models.Employee)
	fc.Result = res
	return ec.marshalOEmployee2ᚕᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐEmployeeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Contact_agents(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Contact",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Employee_id(ctx, field)
			case "name":
				return ec.fieldContext_Employee_name(ctx, field)
			case "surname":
				return ec.fieldContext_Employee_surname(ctx, field)
			case "patronymic":
				return ec.fieldContext_Employee_patronymic(ctx, field)
			case "birthday":
				return ec.fieldContext_Employee_birthday(ctx, field)
			case "email":
				return ec.fieldContext_Employee_email(ctx, field)
			case "phone":
				return ec.fieldContext_Employee_phone(ctx, field)
			case "position":
				return ec.fieldContext_Employee_position(ctx, field)
			case "department":
				return ec.fieldContext_Employee_department(ctx, field)
			case "group":
				return ec.fieldContext_Employee_group(ctx, field)
			case "role":
				return ec.fieldContext_Employee_role(ctx, field)
			case "internalInfo":
				return ec.fieldContext_Employee_internalInfo(ctx, field)
			case "shortDescription":
				return ec.fieldContext_Employee_shortDescription(ctx, field)
			case "description":
				return ec.fieldContext_Employee_description(ctx, field)
			case "isPublished":
				return ec.fieldContext_Employee_isPublished(ctx, field)
			case "isDeleted":
				return ec.fieldContext_Employee_isDeleted(ctx, field)
			case "avatar":
				return ec.fieldContext_Employee_avatar(ctx, field)
			case "publicImage":
				return ec.fieldContext_Employee_publicImage(ctx, field)
			case "createdAt":
				return ec.fieldContext_Employee_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Employee_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Employee", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Contact_contracts(ctx context.Context, field graphql.CollectedField, obj *crm_models.Contact) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Contact_contracts(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Contact().Contracts(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*crm_models.Document)
	fc.Result = res
	return ec.marshalODocument2ᚕᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐDocumentᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Contact_contracts(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Contact",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Document_id(ctx, field)
			case "url":
				return ec.fieldContext_Document_url(ctx, field)
			case "path":
				return ec.fieldContext_Document_path(ctx, field)
			case "title":
				return ec.fieldContext_Document_title(ctx, field)
			case "fileName":
				return ec.fieldContext_Document_fileName(ctx, field)
			case "fileType":
				return ec.fieldContext_Document_fileType(ctx, field)
			case "createdAt":
				return ec.fieldContext_Document_createdAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Document", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Contact_documents(ctx context.Context, field graphql.CollectedField, obj *crm_models.Contact) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Contact_documents(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Contact().Documents(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*crm_models.Document)
	fc.Result = res
	return ec.marshalODocument2ᚕᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐDocumentᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Contact_documents(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Contact",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Document_id(ctx, field)
			case "url":
				return ec.fieldContext_Document_url(ctx, field)
			case "path":
				return ec.fieldContext_Document_path(ctx, field)
			case "title":
				return ec.fieldContext_Document_title(ctx, field)
			case "fileName":
				return ec.fieldContext_Document_fileName(ctx, field)
			case "fileType":
				return ec.fieldContext_Document_fileType(ctx, field)
			case "createdAt":
				return ec.fieldContext_Document_createdAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Document", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Contact_lead(ctx context.Context, field graphql.CollectedField, obj *crm_models.Contact) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Contact_lead(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Contact().Lead(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*crm_models.Lead)
	fc.Result = res
	return ec.marshalOLead2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐLead(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Contact_lead(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Contact",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Lead_id(ctx, field)
			case "internalNumber":
				return ec.fieldContext_Lead_internalNumber(ctx, field)
			case "type":
				return ec.fieldContext_Lead_type(ctx, field)
			case "source":
				return ec.fieldContext_Lead_source(ctx, field)
			case "name":
				return ec.fieldContext_Lead_name(ctx, field)
			case "surname":
				return ec.fieldContext_Lead_surname(ctx, field)
			case "patronymic":
				return ec.fieldContext_Lead_patronymic(ctx, field)
			case "birthday":
				return ec.fieldContext_Lead_birthday(ctx, field)
			case "phone":
				return ec.fieldContext_Lead_phone(ctx, field)
			case "additionalPhones":
				return ec.fieldContext_Lead_additionalPhones(ctx, field)
			case "email":
				return ec.fieldContext_Lead_email(ctx, field)
			case "company":
				return ec.fieldContext_Lead_company(ctx, field)
			case "address":
				return ec.fieldContext_Lead_address(ctx, field)
			case "request":
				return ec.fieldContext_Lead_request(ctx, field)
			case "agents":
				return ec.fieldContext_Lead_agents(ctx, field)
			case "status":
				return ec.fieldContext_Lead_status(ctx, field)
			case "comment":
				return ec.fieldContext_Lead_comment(ctx, field)
			case "isDeleted":
				return ec.fieldContext_Lead_isDeleted(ctx, field)
			case "createdAt":
				return ec.fieldContext_Lead_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Lead_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Lead", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Contact_isDeleted(ctx context.Context, field graphql.CollectedField, obj *crm_models.Contact) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Contact_isDeleted(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeleted, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Contact_isDeleted(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Contact",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Contact_createdAt(ctx context.Context, field graphql.CollectedField, obj *crm_models.Contact) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Contact_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Contact_createdAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Contact",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Contact_updatedAt(ctx context.Context, field graphql.CollectedField, obj *crm_models.Contact) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Contact_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Contact_updatedAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Contact",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ContactConnection_totalCount(ctx context.Context, field graphql.CollectedField, obj *crm_models.ContactConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ContactConnection_totalCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ContactConnection_totalCount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ContactConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ContactConnection_edges(ctx context.Context, field graphql.CollectedField, obj *crm_models.ContactConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ContactConnection_edges(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*crm_models.ContactEdge)
	fc.Result = res
	return ec.marshalNContactEdge2ᚕᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐContactEdgeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ContactConnection_edges(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ContactConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "node":
				return ec.fieldContext_ContactEdge_node(ctx, field)
			case "cursor":
				return ec.fieldContext_ContactEdge_cursor(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ContactEdge", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ContactConnection_nodes(ctx context.Context, field graphql.CollectedField, obj *crm_models.ContactConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ContactConnection_nodes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Nodes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*crm_models.Contact)
	fc.Result = res
	return ec.marshalNContact2ᚕᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐContactᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ContactConnection_nodes(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ContactConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Contact_id(ctx, field)
			case "internalNumber":
				return ec.fieldContext_Contact_internalNumber(ctx, field)
			case "type":
				return ec.fieldContext_Contact_type(ctx, field)
			case "source":
				return ec.fieldContext_Contact_source(ctx, field)
			case "name":
				return ec.fieldContext_Contact_name(ctx, field)
			case "surname":
				return ec.fieldContext_Contact_surname(ctx, field)
			case "patronymic":
				return ec.fieldContext_Contact_patronymic(ctx, field)
			case "birthday":
				return ec.fieldContext_Contact_birthday(ctx, field)
			case "phone":
				return ec.fieldContext_Contact_phone(ctx, field)
			case "additionalPhones":
				return ec.fieldContext_Contact_additionalPhones(ctx, field)
			case "email":
				return ec.fieldContext_Contact_email(ctx, field)
			case "company":
				return ec.fieldContext_Contact_company(ctx, field)
			case "address":
				return ec.fieldContext_Contact_address(ctx, field)
			case "properties":
				return ec.fieldContext_Contact_properties(ctx, field)
			case "passportNumber":
				return ec.fieldContext_Contact_passportNumber(ctx, field)
			case "passportIssuedBy":
				return ec.fieldContext_Contact_passportIssuedBy(ctx, field)
			case "passportIssueDate":
				return ec.fieldContext_Contact_passportIssueDate(ctx, field)
			case "passportIssuerCode":
				return ec.fieldContext_Contact_passportIssuerCode(ctx, field)
			case "internalInfo":
				return ec.fieldContext_Contact_internalInfo(ctx, field)
			case "note":
				return ec.fieldContext_Contact_note(ctx, field)
			case "deals":
				return ec.fieldContext_Contact_deals(ctx, field)
			case "agents":
				return ec.fieldContext_Contact_agents(ctx, field)
			case "contracts":
				return ec.fieldContext_Contact_contracts(ctx, field)
			case "documents":
				return ec.fieldContext_Contact_documents(ctx, field)
			case "lead":
				return ec.fieldContext_Contact_lead(ctx, field)
			case "isDeleted":
				return ec.fieldContext_Contact_isDeleted(ctx, field)
			case "createdAt":
				return ec.fieldContext_Contact_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Contact_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Contact", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ContactConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *crm_models.ContactConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ContactConnection_pageInfo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*crm_models.PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ContactConnection_pageInfo(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ContactConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "startCursor":
				return ec.fieldContext_PageInfo_startCursor(ctx, field)
			case "endCursor":
				return ec.fieldContext_PageInfo_endCursor(ctx, field)
			case "hasNextPage":
				return ec.fieldContext_PageInfo_hasNextPage(ctx, field)
			case "hasPreviousPage":
				return ec.fieldContext_PageInfo_hasPreviousPage(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PageInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ContactEdge_node(ctx context.Context, field graphql.CollectedField, obj *crm_models.ContactEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ContactEdge_node(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*crm_models.Contact)
	fc.Result = res
	return ec.marshalNContact2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐContact(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ContactEdge_node(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ContactEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Contact_id(ctx, field)
			case "internalNumber":
				return ec.fieldContext_Contact_internalNumber(ctx, field)
			case "type":
				return ec.fieldContext_Contact_type(ctx, field)
			case "source":
				return ec.fieldContext_Contact_source(ctx, field)
			case "name":
				return ec.fieldContext_Contact_name(ctx, field)
			case "surname":
				return ec.fieldContext_Contact_surname(ctx, field)
			case "patronymic":
				return ec.fieldContext_Contact_patronymic(ctx, field)
			case "birthday":
				return ec.fieldContext_Contact_birthday(ctx, field)
			case "phone":
				return ec.fieldContext_Contact_phone(ctx, field)
			case "additionalPhones":
				return ec.fieldContext_Contact_additionalPhones(ctx, field)
			case "email":
				return ec.fieldContext_Contact_email(ctx, field)
			case "company":
				return ec.fieldContext_Contact_company(ctx, field)
			case "address":
				return ec.fieldContext_Contact_address(ctx, field)
			case "properties":
				return ec.fieldContext_Contact_properties(ctx, field)
			case "passportNumber":
				return ec.fieldContext_Contact_passportNumber(ctx, field)
			case "passportIssuedBy":
				return ec.fieldContext_Contact_passportIssuedBy(ctx, field)
			case "passportIssueDate":
				return ec.fieldContext_Contact_passportIssueDate(ctx, field)
			case "passportIssuerCode":
				return ec.fieldContext_Contact_passportIssuerCode(ctx, field)
			case "internalInfo":
				return ec.fieldContext_Contact_internalInfo(ctx, field)
			case "note":
				return ec.fieldContext_Contact_note(ctx, field)
			case "deals":
				return ec.fieldContext_Contact_deals(ctx, field)
			case "agents":
				return ec.fieldContext_Contact_agents(ctx, field)
			case "contracts":
				return ec.fieldContext_Contact_contracts(ctx, field)
			case "documents":
				return ec.fieldContext_Contact_documents(ctx, field)
			case "lead":
				return ec.fieldContext_Contact_lead(ctx, field)
			case "isDeleted":
				return ec.fieldContext_Contact_isDeleted(ctx, field)
			case "createdAt":
				return ec.fieldContext_Contact_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Contact_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Contact", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ContactEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *crm_models.ContactEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ContactEdge_cursor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNCursor2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ContactEdge_cursor(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ContactEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Cursor does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ContentBlock_type(ctx context.Context, field graphql.CollectedField, obj *crm_models.ContentBlock) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ContentBlock_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(crm_models.ContentBlockType)
	fc.Result = res
	return ec.marshalNContentBlockType2githubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐContentBlockType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ContentBlock_type(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ContentBlock",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ContentBlockType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ContentBlock_data(ctx context.Context, field graphql.CollectedField, obj *crm_models.ContentBlock) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ContentBlock_data(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Data, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(map[string]interface{})
	fc.Result = res
	return ec.marshalNJSON2map(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ContentBlock_data(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ContentBlock",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type JSON does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ContentBlock_isVisible(ctx context.Context, field graphql.CollectedField, obj *crm_models.ContentBlock) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ContentBlock_isVisible(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsVisible, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ContentBlock_isVisible(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ContentBlock",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Deal_id(ctx context.Context, field graphql.CollectedField, obj *crm_models.Deal) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Deal_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Deal_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Deal",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Deal_internalNumber(ctx context.Context, field graphql.CollectedField, obj *crm_models.Deal) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Deal_internalNumber(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InternalNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Deal_internalNumber(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Deal",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Deal_type(ctx context.Context, field graphql.CollectedField, obj *crm_models.Deal) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Deal_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*crm_models.DealTypeEnum)
	fc.Result = res
	return ec.marshalODealTypeEnum2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐDealTypeEnum(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Deal_type(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Deal",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DealTypeEnum does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Deal_stage(ctx context.Context, field graphql.CollectedField, obj *crm_models.Deal) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Deal_stage(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Stage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*crm_models.DealStageEnum)
	fc.Result = res
	return ec.marshalODealStageEnum2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐDealStageEnum(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Deal_stage(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Deal",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DealStageEnum does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Deal_sellerAgent(ctx context.Context, field graphql.CollectedField, obj *crm_models.Deal) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Deal_sellerAgent(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Deal().SellerAgent(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*crm_models.Employee)
	fc.Result = res
	return ec.marshalOEmployee2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐEmployee(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Deal_sellerAgent(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Deal",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Employee_id(ctx, field)
			case "name":
				return ec.fieldContext_Employee_name(ctx, field)
			case "surname":
				return ec.fieldContext_Employee_surname(ctx, field)
			case "patronymic":
				return ec.fieldContext_Employee_patronymic(ctx, field)
			case "birthday":
				return ec.fieldContext_Employee_birthday(ctx, field)
			case "email":
				return ec.fieldContext_Employee_email(ctx, field)
			case "phone":
				return ec.fieldContext_Employee_phone(ctx, field)
			case "position":
				return ec.fieldContext_Employee_position(ctx, field)
			case "department":
				return ec.fieldContext_Employee_department(ctx, field)
			case "group":
				return ec.fieldContext_Employee_group(ctx, field)
			case "role":
				return ec.fieldContext_Employee_role(ctx, field)
			case "internalInfo":
				return ec.fieldContext_Employee_internalInfo(ctx, field)
			case "shortDescription":
				return ec.fieldContext_Employee_shortDescription(ctx, field)
			case "description":
				return ec.fieldContext_Employee_description(ctx, field)
			case "isPublished":
				return ec.fieldContext_Employee_isPublished(ctx, field)
			case "isDeleted":
				return ec.fieldContext_Employee_isDeleted(ctx, field)
			case "avatar":
				return ec.fieldContext_Employee_avatar(ctx, field)
			case "publicImage":
				return ec.fieldContext_Employee_publicImage(ctx, field)
			case "createdAt":
				return ec.fieldContext_Employee_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Employee_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Employee", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Deal_sellerContact(ctx context.Context, field graphql.CollectedField, obj *crm_models.Deal) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Deal_sellerContact(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Deal().SellerContact(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*crm_models.Contact)
	fc.Result = res
	return ec.marshalOContact2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐContact(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Deal_sellerContact(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Deal",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Contact_id(ctx, field)
			case "internalNumber":
				return ec.fieldContext_Contact_internalNumber(ctx, field)
			case "type":
				return ec.fieldContext_Contact_type(ctx, field)
			case "source":
				return ec.fieldContext_Contact_source(ctx, field)
			case "name":
				return ec.fieldContext_Contact_name(ctx, field)
			case "surname":
				return ec.fieldContext_Contact_surname(ctx, field)
			case "patronymic":
				return ec.fieldContext_Contact_patronymic(ctx, field)
			case "birthday":
				return ec.fieldContext_Contact_birthday(ctx, field)
			case "phone":
				return ec.fieldContext_Contact_phone(ctx, field)
			case "additionalPhones":
				return ec.fieldContext_Contact_additionalPhones(ctx, field)
			case "email":
				return ec.fieldContext_Contact_email(ctx, field)
			case "company":
				return ec.fieldContext_Contact_company(ctx, field)
			case "address":
				return ec.fieldContext_Contact_address(ctx, field)
			case "properties":
				return ec.fieldContext_Contact_properties(ctx, field)
			case "passportNumber":
				return ec.fieldContext_Contact_passportNumber(ctx, field)
			case "passportIssuedBy":
				return ec.fieldContext_Contact_passportIssuedBy(ctx, field)
			case "passportIssueDate":
				return ec.fieldContext_Contact_passportIssueDate(ctx, field)
			case "passportIssuerCode":
				return ec.fieldContext_Contact_passportIssuerCode(ctx, field)
			case "internalInfo":
				return ec.fieldContext_Contact_internalInfo(ctx, field)
			case "note":
				return ec.fieldContext_Contact_note(ctx, field)
			case "deals":
				return ec.fieldContext_Contact_deals(ctx, field)
			case "agents":
				return ec.fieldContext_Contact_agents(ctx, field)
			case "contracts":
				return ec.fieldContext_Contact_contracts(ctx, field)
			case "documents":
				return ec.fieldContext_Contact_documents(ctx, field)
			case "lead":
				return ec.fieldContext_Contact_lead(ctx, field)
			case "isDeleted":
				return ec.fieldContext_Contact_isDeleted(ctx, field)
			case "createdAt":
				return ec.fieldContext_Contact_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Contact_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Contact", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Deal_sellerPhone(ctx context.Context, field graphql.CollectedField, obj *crm_models.Deal) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Deal_sellerPhone(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SellerPhone, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Deal_sellerPhone(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Deal",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Deal_sellerDocuments(ctx context.Context, field graphql.CollectedField, obj *crm_models.Deal) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Deal_sellerDocuments(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Deal().SellerDocuments(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*crm_models.Document)
	fc.Result = res
	return ec.marshalODocument2ᚕᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐDocumentᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Deal_sellerDocuments(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Deal",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Document_id(ctx, field)
			case "url":
				return ec.fieldContext_Document_url(ctx, field)
			case "path":
				return ec.fieldContext_Document_path(ctx, field)
			case "title":
				return ec.fieldContext_Document_title(ctx, field)
			case "fileName":
				return ec.fieldContext_Document_fileName(ctx, field)
			case "fileType":
				return ec.fieldContext_Document_fileType(ctx, field)
			case "createdAt":
				return ec.fieldContext_Document_createdAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Document", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Deal_buyerAgent(ctx context.Context, field graphql.CollectedField, obj *crm_models.Deal) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Deal_buyerAgent(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Deal().BuyerAgent(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*crm_models.Employee)
	fc.Result = res
	return ec.marshalOEmployee2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐEmployee(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Deal_buyerAgent(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Deal",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Employee_id(ctx, field)
			case "name":
				return ec.fieldContext_Employee_name(ctx, field)
			case "surname":
				return ec.fieldContext_Employee_surname(ctx, field)
			case "patronymic":
				return ec.fieldContext_Employee_patronymic(ctx, field)
			case "birthday":
				return ec.fieldContext_Employee_birthday(ctx, field)
			case "email":
				return ec.fieldContext_Employee_email(ctx, field)
			case "phone":
				return ec.fieldContext_Employee_phone(ctx, field)
			case "position":
				return ec.fieldContext_Employee_position(ctx, field)
			case "department":
				return ec.fieldContext_Employee_department(ctx, field)
			case "group":
				return ec.fieldContext_Employee_group(ctx, field)
			case "role":
				return ec.fieldContext_Employee_role(ctx, field)
			case "internalInfo":
				return ec.fieldContext_Employee_internalInfo(ctx, field)
			case "shortDescription":
				return ec.fieldContext_Employee_shortDescription(ctx, field)
			case "description":
				return ec.fieldContext_Employee_description(ctx, field)
			case "isPublished":
				return ec.fieldContext_Employee_isPublished(ctx, field)
			case "isDeleted":
				return ec.fieldContext_Employee_isDeleted(ctx, field)
			case "avatar":
				return ec.fieldContext_Employee_avatar(ctx, field)
			case "publicImage":
				return ec.fieldContext_Employee_publicImage(ctx, field)
			case "createdAt":
				return ec.fieldContext_Employee_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Employee_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Employee", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Deal_buyerContact(ctx context.Context, field graphql.CollectedField, obj *crm_models.Deal) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Deal_buyerContact(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Deal().BuyerContact(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*crm_models.Contact)
	fc.Result = res
	return ec.marshalOContact2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐContact(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Deal_buyerContact(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Deal",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Contact_id(ctx, field)
			case "internalNumber":
				return ec.fieldContext_Contact_internalNumber(ctx, field)
			case "type":
				return ec.fieldContext_Contact_type(ctx, field)
			case "source":
				return ec.fieldContext_Contact_source(ctx, field)
			case "name":
				return ec.fieldContext_Contact_name(ctx, field)
			case "surname":
				return ec.fieldContext_Contact_surname(ctx, field)
			case "patronymic":
				return ec.fieldContext_Contact_patronymic(ctx, field)
			case "birthday":
				return ec.fieldContext_Contact_birthday(ctx, field)
			case "phone":
				return ec.fieldContext_Contact_phone(ctx, field)
			case "additionalPhones":
				return ec.fieldContext_Contact_additionalPhones(ctx, field)
			case "email":
				return ec.fieldContext_Contact_email(ctx, field)
			case "company":
				return ec.fieldContext_Contact_company(ctx, field)
			case "address":
				return ec.fieldContext_Contact_address(ctx, field)
			case "properties":
				return ec.fieldContext_Contact_properties(ctx, field)
			case "passportNumber":
				return ec.fieldContext_Contact_passportNumber(ctx, field)
			case "passportIssuedBy":
				return ec.fieldContext_Contact_passportIssuedBy(ctx, field)
			case "passportIssueDate":
				return ec.fieldContext_Contact_passportIssueDate(ctx, field)
			case "passportIssuerCode":
				return ec.fieldContext_Contact_passportIssuerCode(ctx, field)
			case "internalInfo":
				return ec.fieldContext_Contact_internalInfo(ctx, field)
			case "note":
				return ec.fieldContext_Contact_note(ctx, field)
			case "deals":
				return ec.fieldContext_Contact_deals(ctx, field)
			case "agents":
				return ec.fieldContext_Contact_agents(ctx, field)
			case "contracts":
				return ec.fieldContext_Contact_contracts(ctx, field)
			case "documents":
				return ec.fieldContext_Contact_documents(ctx, field)
			case "lead":
				return ec.fieldContext_Contact_lead(ctx, field)
			case "isDeleted":
				return ec.fieldContext_Contact_isDeleted(ctx, field)
			case "createdAt":
				return ec.fieldContext_Contact_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Contact_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Contact", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Deal_buyerPhone(ctx context.Context, field graphql.CollectedField, obj *crm_models.Deal) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Deal_buyerPhone(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BuyerPhone, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Deal_buyerPhone(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Deal",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Deal_buyerDocuments(ctx context.Context, field graphql.CollectedField, obj *crm_models.Deal) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Deal_buyerDocuments(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Deal().BuyerDocuments(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*crm_models.Document)
	fc.Result = res
	return ec.marshalODocument2ᚕᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐDocumentᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Deal_buyerDocuments(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Deal",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Document_id(ctx, field)
			case "url":
				return ec.fieldContext_Document_url(ctx, field)
			case "path":
				return ec.fieldContext_Document_path(ctx, field)
			case "title":
				return ec.fieldContext_Document_title(ctx, field)
			case "fileName":
				return ec.fieldContext_Document_fileName(ctx, field)
			case "fileType":
				return ec.fieldContext_Document_fileType(ctx, field)
			case "createdAt":
				return ec.fieldContext_Document_createdAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Document", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Deal_property(ctx context.Context, field graphql.CollectedField, obj *crm_models.Deal) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Deal_property(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Deal().Property(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*crm_models.Property)
	fc.Result = res
	return ec.marshalOProperty2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐProperty(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Deal_property(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Deal",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Property_id(ctx, field)
			case "internalID":
				return ec.fieldContext_Property_internalID(ctx, field)
			case "deal":
				return ec.fieldContext_Property_deal(ctx, field)
			case "type":
				return ec.fieldContext_Property_type(ctx, field)
			case "subType":
				return ec.fieldContext_Property_subType(ctx, field)
			case "commercialUsage":
				return ec.fieldContext_Property_commercialUsage(ctx, field)
			case "fromDeveloper":
				return ec.fieldContext_Property_fromDeveloper(ctx, field)
			case "inComplex":
				return ec.fieldContext_Property_inComplex(ctx, field)
			case "complex":
				return ec.fieldContext_Property_complex(ctx, field)
			case "complexHouse":
				return ec.fieldContext_Property_complexHouse(ctx, field)
			case "inVillage":
				return ec.fieldContext_Property_inVillage(ctx, field)
			case "village":
				return ec.fieldContext_Property_village(ctx, field)
			case "isHot":
				return ec.fieldContext_Property_isHot(ctx, field)
			case "title":
				return ec.fieldContext_Property_title(ctx, field)
			case "description":
				return ec.fieldContext_Property_description(ctx, field)
			case "address":
				return ec.fieldContext_Property_address(ctx, field)
			case "lat":
				return ec.fieldContext_Property_lat(ctx, field)
			case "lon":
				return ec.fieldContext_Property_lon(ctx, field)
			case "cadastrNumber":
				return ec.fieldContext_Property_cadastrNumber(ctx, field)
			case "seoText":
				return ec.fieldContext_Property_seoText(ctx, field)
			case "youtubeLink":
				return ec.fieldContext_Property_youtubeLink(ctx, field)
			case "tourLink":
				return ec.fieldContext_Property_tourLink(ctx, field)
			case "documents":
				return ec.fieldContext_Property_documents(ctx, field)
			case "images":
				return ec.fieldContext_Property_images(ctx, field)
			case "isDeleted":
				return ec.fieldContext_Property_isDeleted(ctx, field)
			case "isEditable":
				return ec.fieldContext_Property_isEditable(ctx, field)
			case "refreshDate":
				return ec.fieldContext_Property_refreshDate(ctx, field)
			case "status":
				return ec.fieldContext_Property_status(ctx, field)
			case "price":
				return ec.fieldContext_Property_price(ctx, field)
			case "pricePerMeter":
				return ec.fieldContext_Property_pricePerMeter(ctx, field)
			case "pricePerAr":
				return ec.fieldContext_Property_pricePerAr(ctx, field)
			case "priceHistory":
				return ec.fieldContext_Property_priceHistory(ctx, field)
			case "isReady":
				return ec.fieldContext_Property_isReady(ctx, field)
			case "readinessYear":
				return ec.fieldContext_Property_readinessYear(ctx, field)
			case "readinessQuarter":
				return ec.fieldContext_Property_readinessQuarter(ctx, field)
			case "inCity":
				return ec.fieldContext_Property_inCity(ctx, field)
			case "cityDistance":
				return ec.fieldContext_Property_cityDistance(ctx, field)
			case "region":
				return ec.fieldContext_Property_region(ctx, field)
			case "subRegion":
				return ec.fieldContext_Property_subRegion(ctx, field)
			case "source":
				return ec.fieldContext_Property_source(ctx, field)
			case "rooms":
				return ec.fieldContext_Property_rooms(ctx, field)
			case "area":
				return ec.fieldContext_Property_area(ctx, field)
			case "landArea":
				return ec.fieldContext_Property_landArea(ctx, field)
			case "livingArea":
				return ec.fieldContext_Property_livingArea(ctx, field)
			case "kitchenArea":
				return ec.fieldContext_Property_kitchenArea(ctx, field)
			case "toiletType":
				return ec.fieldContext_Property_toiletType(ctx, field)
			case "rehabType":
				return ec.fieldContext_Property_rehabType(ctx, field)
			case "floor":
				return ec.fieldContext_Property_floor(ctx, field)
			case "floors":
				return ec.fieldContext_Property_floors(ctx, field)
			case "ceilingHeight":
				return ec.fieldContext_Property_ceilingHeight(ctx, field)
			case "internalInfo":
				return ec.fieldContext_Property_internalInfo(ctx, field)
			case "comissionPercent":
				return ec.fieldContext_Property_comissionPercent(ctx, field)
			case "comissionAmount":
				return ec.fieldContext_Property_comissionAmount(ctx, field)
			case "createdAt":
				return ec.fieldContext_Property_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Property_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Property", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Deal_address(ctx context.Context, field graphql.CollectedField, obj *crm_models.Deal) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Deal_address(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Address, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Deal_address(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Deal",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Deal_mortgageBroker(ctx context.Context, field graphql.CollectedField, obj *crm_models.Deal) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Deal_mortgageBroker(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Deal().MortgageBroker(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*crm_models.Employee)
	fc.Result = res
	return ec.marshalOEmployee2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐEmployee(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Deal_mortgageBroker(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Deal",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Employee_id(ctx, field)
			case "name":
				return ec.fieldContext_Employee_name(ctx, field)
			case "surname":
				return ec.fieldContext_Employee_surname(ctx, field)
			case "patronymic":
				return ec.fieldContext_Employee_patronymic(ctx, field)
			case "birthday":
				return ec.fieldContext_Employee_birthday(ctx, field)
			case "email":
				return ec.fieldContext_Employee_email(ctx, field)
			case "phone":
				return ec.fieldContext_Employee_phone(ctx, field)
			case "position":
				return ec.fieldContext_Employee_position(ctx, field)
			case "department":
				return ec.fieldContext_Employee_department(ctx, field)
			case "group":
				return ec.fieldContext_Employee_group(ctx, field)
			case "role":
				return ec.fieldContext_Employee_role(ctx, field)
			case "internalInfo":
				return ec.fieldContext_Employee_internalInfo(ctx, field)
			case "shortDescription":
				return ec.fieldContext_Employee_shortDescription(ctx, field)
			case "description":
				return ec.fieldContext_Employee_description(ctx, field)
			case "isPublished":
				return ec.fieldContext_Employee_isPublished(ctx, field)
			case "isDeleted":
				return ec.fieldContext_Employee_isDeleted(ctx, field)
			case "avatar":
				return ec.fieldContext_Employee_avatar(ctx, field)
			case "publicImage":
				return ec.fieldContext_Employee_publicImage(ctx, field)
			case "createdAt":
				return ec.fieldContext_Employee_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Employee_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Employee", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Deal_mortgageRequest(ctx context.Context, field graphql.CollectedField, obj *crm_models.Deal) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Deal_mortgageRequest(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Deal().MortgageRequest(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*crm_models.MortgageRequest)
	fc.Result = res
	return ec.marshalOMortgageRequest2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐMortgageRequest(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Deal_mortgageRequest(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Deal",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_MortgageRequest_id(ctx, field)
			case "internalNumber":
				return ec.fieldContext_MortgageRequest_internalNumber(ctx, field)
			case "status":
				return ec.fieldContext_MortgageRequest_status(ctx, field)
			case "contact":
				return ec.fieldContext_MortgageRequest_contact(ctx, field)
			case "banks":
				return ec.fieldContext_MortgageRequest_banks(ctx, field)
			case "mortgageBroker":
				return ec.fieldContext_MortgageRequest_mortgageBroker(ctx, field)
			case "agent":
				return ec.fieldContext_MortgageRequest_agent(ctx, field)
			case "deal":
				return ec.fieldContext_MortgageRequest_deal(ctx, field)
			case "property":
				return ec.fieldContext_MortgageRequest_property(ctx, field)
			case "amount":
				return ec.fieldContext_MortgageRequest_amount(ctx, field)
			case "firstDeposit":
				return ec.fieldContext_MortgageRequest_firstDeposit(ctx, field)
			case "period":
				return ec.fieldContext_MortgageRequest_period(ctx, field)
			case "comment":
				return ec.fieldContext_MortgageRequest_comment(ctx, field)
			case "contracts":
				return ec.fieldContext_MortgageRequest_contracts(ctx, field)
			case "documents":
				return ec.fieldContext_MortgageRequest_documents(ctx, field)
			case "sendDate":
				return ec.fieldContext_MortgageRequest_sendDate(ctx, field)
			case "responseDate":
				return ec.fieldContext_MortgageRequest_responseDate(ctx, field)
			case "validTillDate":
				return ec.fieldContext_MortgageRequest_validTillDate(ctx, field)
			case "percentage":
				return ec.fieldContext_MortgageRequest_percentage(ctx, field)
			case "isDeleted":
				return ec.fieldContext_MortgageRequest_isDeleted(ctx, field)
			case "createdAt":
				return ec.fieldContext_MortgageRequest_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_MortgageRequest_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MortgageRequest", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Deal_mortgageDocuments(ctx context.Context, field graphql.CollectedField, obj *crm_models.Deal) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Deal_mortgageDocuments(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Deal().MortgageDocuments(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*crm_models.Document)
	fc.Result = res
	return ec.marshalODocument2ᚕᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐDocumentᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Deal_mortgageDocuments(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Deal",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Document_id(ctx, field)
			case "url":
				return ec.fieldContext_Document_url(ctx, field)
			case "path":
				return ec.fieldContext_Document_path(ctx, field)
			case "title":
				return ec.fieldContext_Document_title(ctx, field)
			case "fileName":
				return ec.fieldContext_Document_fileName(ctx, field)
			case "fileType":
				return ec.fieldContext_Document_fileType(ctx, field)
			case "createdAt":
				return ec.fieldContext_Document_createdAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Document", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Deal_lawer(ctx context.Context, field graphql.CollectedField, obj *crm_models.Deal) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Deal_lawer(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Deal().Lawer(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*crm_models.Employee)
	fc.Result = res
	return ec.marshalOEmployee2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐEmployee(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Deal_lawer(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Deal",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Employee_id(ctx, field)
			case "name":
				return ec.fieldContext_Employee_name(ctx, field)
			case "surname":
				return ec.fieldContext_Employee_surname(ctx, field)
			case "patronymic":
				return ec.fieldContext_Employee_patronymic(ctx, field)
			case "birthday":
				return ec.fieldContext_Employee_birthday(ctx, field)
			case "email":
				return ec.fieldContext_Employee_email(ctx, field)
			case "phone":
				return ec.fieldContext_Employee_phone(ctx, field)
			case "position":
				return ec.fieldContext_Employee_position(ctx, field)
			case "department":
				return ec.fieldContext_Employee_department(ctx, field)
			case "group":
				return ec.fieldContext_Employee_group(ctx, field)
			case "role":
				return ec.fieldContext_Employee_role(ctx, field)
			case "internalInfo":
				return ec.fieldContext_Employee_internalInfo(ctx, field)
			case "shortDescription":
				return ec.fieldContext_Employee_shortDescription(ctx, field)
			case "description":
				return ec.fieldContext_Employee_description(ctx, field)
			case "isPublished":
				return ec.fieldContext_Employee_isPublished(ctx, field)
			case "isDeleted":
				return ec.fieldContext_Employee_isDeleted(ctx, field)
			case "avatar":
				return ec.fieldContext_Employee_avatar(ctx, field)
			case "publicImage":
				return ec.fieldContext_Employee_publicImage(ctx, field)
			case "createdAt":
				return ec.fieldContext_Employee_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Employee_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Employee", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Deal_lawerDocuments(ctx context.Context, field graphql.CollectedField, obj *crm_models.Deal) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Deal_lawerDocuments(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Deal().LawerDocuments(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*crm_models.Document)
	fc.Result = res
	return ec.marshalODocument2ᚕᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐDocumentᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Deal_lawerDocuments(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Deal",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Document_id(ctx, field)
			case "url":
				return ec.fieldContext_Document_url(ctx, field)
			case "path":
				return ec.fieldContext_Document_path(ctx, field)
			case "title":
				return ec.fieldContext_Document_title(ctx, field)
			case "fileName":
				return ec.fieldContext_Document_fileName(ctx, field)
			case "fileType":
				return ec.fieldContext_Document_fileType(ctx, field)
			case "createdAt":
				return ec.fieldContext_Document_createdAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Document", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Deal_accountant(ctx context.Context, field graphql.CollectedField, obj *crm_models.Deal) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Deal_accountant(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Deal().Accountant(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*crm_models.Employee)
	fc.Result = res
	return ec.marshalOEmployee2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐEmployee(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Deal_accountant(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Deal",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Employee_id(ctx, field)
			case "name":
				return ec.fieldContext_Employee_name(ctx, field)
			case "surname":
				return ec.fieldContext_Employee_surname(ctx, field)
			case "patronymic":
				return ec.fieldContext_Employee_patronymic(ctx, field)
			case "birthday":
				return ec.fieldContext_Employee_birthday(ctx, field)
			case "email":
				return ec.fieldContext_Employee_email(ctx, field)
			case "phone":
				return ec.fieldContext_Employee_phone(ctx, field)
			case "position":
				return ec.fieldContext_Employee_position(ctx, field)
			case "department":
				return ec.fieldContext_Employee_department(ctx, field)
			case "group":
				return ec.fieldContext_Employee_group(ctx, field)
			case "role":
				return ec.fieldContext_Employee_role(ctx, field)
			case "internalInfo":
				return ec.fieldContext_Employee_internalInfo(ctx, field)
			case "shortDescription":
				return ec.fieldContext_Employee_shortDescription(ctx, field)
			case "description":
				return ec.fieldContext_Employee_description(ctx, field)
			case "isPublished":
				return ec.fieldContext_Employee_isPublished(ctx, field)
			case "isDeleted":
				return ec.fieldContext_Employee_isDeleted(ctx, field)
			case "avatar":
				return ec.fieldContext_Employee_avatar(ctx, field)
			case "publicImage":
				return ec.fieldContext_Employee_publicImage(ctx, field)
			case "createdAt":
				return ec.fieldContext_Employee_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Employee_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Employee", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Deal_accountantDocuments(ctx context.Context, field graphql.CollectedField, obj *crm_models.Deal) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Deal_accountantDocuments(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Deal().AccountantDocuments(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*crm_models.Document)
	fc.Result = res
	return ec.marshalODocument2ᚕᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐDocumentᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Deal_accountantDocuments(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Deal",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Document_id(ctx, field)
			case "url":
				return ec.fieldContext_Document_url(ctx, field)
			case "path":
				return ec.fieldContext_Document_path(ctx, field)
			case "title":
				return ec.fieldContext_Document_title(ctx, field)
			case "fileName":
				return ec.fieldContext_Document_fileName(ctx, field)
			case "fileType":
				return ec.fieldContext_Document_fileType(ctx, field)
			case "createdAt":
				return ec.fieldContext_Document_createdAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Document", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Deal_depositDate(ctx context.Context, field graphql.CollectedField, obj *crm_models.Deal) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Deal_depositDate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DepositDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalOTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Deal_depositDate(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Deal",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Deal_dealDate(ctx context.Context, field graphql.CollectedField, obj *crm_models.Deal) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Deal_dealDate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DealDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalOTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Deal_dealDate(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Deal",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Deal_finishedAt(ctx context.Context, field graphql.CollectedField, obj *crm_models.Deal) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Deal_finishedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FinishedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalOTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Deal_finishedAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Deal",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Deal_commissionAmount(ctx context.Context, field graphql.CollectedField, obj *crm_models.Deal) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Deal_commissionAmount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CommissionAmount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Deal_commissionAmount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Deal",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Deal_internalComment(ctx context.Context, field graphql.CollectedField, obj *crm_models.Deal) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Deal_internalComment(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InternalComment, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Deal_internalComment(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Deal",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Deal_isDeleted(ctx context.Context, field graphql.CollectedField, obj *crm_models.Deal) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Deal_isDeleted(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeleted, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Deal_isDeleted(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Deal",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Deal_createdAt(ctx context.Context, field graphql.CollectedField, obj *crm_models.Deal) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Deal_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Deal_createdAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Deal",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Deal_updatedAt(ctx context.Context, field graphql.CollectedField, obj *crm_models.Deal) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Deal_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Deal_updatedAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Deal",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DealConnection_totalCount(ctx context.Context, field graphql.CollectedField, obj *crm_models.DealConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DealConnection_totalCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DealConnection_totalCount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DealConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DealConnection_edges(ctx context.Context, field graphql.CollectedField, obj *crm_models.DealConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DealConnection_edges(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*crm_models.DealEdge)
	fc.Result = res
	return ec.marshalNDealEdge2ᚕᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐDealEdgeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DealConnection_edges(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DealConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "node":
				return ec.fieldContext_DealEdge_node(ctx, field)
			case "cursor":
				return ec.fieldContext_DealEdge_cursor(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DealEdge", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _DealConnection_nodes(ctx context.Context, field graphql.CollectedField, obj *crm_models.DealConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DealConnection_nodes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Nodes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*crm_models.Deal)
	fc.Result = res
	return ec.marshalNDeal2ᚕᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐDealᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DealConnection_nodes(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DealConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Deal_id(ctx, field)
			case "internalNumber":
				return ec.fieldContext_Deal_internalNumber(ctx, field)
			case "type":
				return ec.fieldContext_Deal_type(ctx, field)
			case "stage":
				return ec.fieldContext_Deal_stage(ctx, field)
			case "sellerAgent":
				return ec.fieldContext_Deal_sellerAgent(ctx, field)
			case "sellerContact":
				return ec.fieldContext_Deal_sellerContact(ctx, field)
			case "sellerPhone":
				return ec.fieldContext_Deal_sellerPhone(ctx, field)
			case "sellerDocuments":
				return ec.fieldContext_Deal_sellerDocuments(ctx, field)
			case "buyerAgent":
				return ec.fieldContext_Deal_buyerAgent(ctx, field)
			case "buyerContact":
				return ec.fieldContext_Deal_buyerContact(ctx, field)
			case "buyerPhone":
				return ec.fieldContext_Deal_buyerPhone(ctx, field)
			case "buyerDocuments":
				return ec.fieldContext_Deal_buyerDocuments(ctx, field)
			case "property":
				return ec.fieldContext_Deal_property(ctx, field)
			case "address":
				return ec.fieldContext_Deal_address(ctx, field)
			case "mortgageBroker":
				return ec.fieldContext_Deal_mortgageBroker(ctx, field)
			case "mortgageRequest":
				return ec.fieldContext_Deal_mortgageRequest(ctx, field)
			case "mortgageDocuments":
				return ec.fieldContext_Deal_mortgageDocuments(ctx, field)
			case "lawer":
				return ec.fieldContext_Deal_lawer(ctx, field)
			case "lawerDocuments":
				return ec.fieldContext_Deal_lawerDocuments(ctx, field)
			case "accountant":
				return ec.fieldContext_Deal_accountant(ctx, field)
			case "accountantDocuments":
				return ec.fieldContext_Deal_accountantDocuments(ctx, field)
			case "depositDate":
				return ec.fieldContext_Deal_depositDate(ctx, field)
			case "dealDate":
				return ec.fieldContext_Deal_dealDate(ctx, field)
			case "finishedAt":
				return ec.fieldContext_Deal_finishedAt(ctx, field)
			case "commissionAmount":
				return ec.fieldContext_Deal_commissionAmount(ctx, field)
			case "internalComment":
				return ec.fieldContext_Deal_internalComment(ctx, field)
			case "isDeleted":
				return ec.fieldContext_Deal_isDeleted(ctx, field)
			case "createdAt":
				return ec.fieldContext_Deal_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Deal_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Deal", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _DealConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *crm_models.DealConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DealConnection_pageInfo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*crm_models.PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DealConnection_pageInfo(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DealConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "startCursor":
				return ec.fieldContext_PageInfo_startCursor(ctx, field)
			case "endCursor":
				return ec.fieldContext_PageInfo_endCursor(ctx, field)
			case "hasNextPage":
				return ec.fieldContext_PageInfo_hasNextPage(ctx, field)
			case "hasPreviousPage":
				return ec.fieldContext_PageInfo_hasPreviousPage(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PageInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _DealEdge_node(ctx context.Context, field graphql.CollectedField, obj *crm_models.DealEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DealEdge_node(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*crm_models.Deal)
	fc.Result = res
	return ec.marshalNDeal2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐDeal(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DealEdge_node(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DealEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Deal_id(ctx, field)
			case "internalNumber":
				return ec.fieldContext_Deal_internalNumber(ctx, field)
			case "type":
				return ec.fieldContext_Deal_type(ctx, field)
			case "stage":
				return ec.fieldContext_Deal_stage(ctx, field)
			case "sellerAgent":
				return ec.fieldContext_Deal_sellerAgent(ctx, field)
			case "sellerContact":
				return ec.fieldContext_Deal_sellerContact(ctx, field)
			case "sellerPhone":
				return ec.fieldContext_Deal_sellerPhone(ctx, field)
			case "sellerDocuments":
				return ec.fieldContext_Deal_sellerDocuments(ctx, field)
			case "buyerAgent":
				return ec.fieldContext_Deal_buyerAgent(ctx, field)
			case "buyerContact":
				return ec.fieldContext_Deal_buyerContact(ctx, field)
			case "buyerPhone":
				return ec.fieldContext_Deal_buyerPhone(ctx, field)
			case "buyerDocuments":
				return ec.fieldContext_Deal_buyerDocuments(ctx, field)
			case "property":
				return ec.fieldContext_Deal_property(ctx, field)
			case "address":
				return ec.fieldContext_Deal_address(ctx, field)
			case "mortgageBroker":
				return ec.fieldContext_Deal_mortgageBroker(ctx, field)
			case "mortgageRequest":
				return ec.fieldContext_Deal_mortgageRequest(ctx, field)
			case "mortgageDocuments":
				return ec.fieldContext_Deal_mortgageDocuments(ctx, field)
			case "lawer":
				return ec.fieldContext_Deal_lawer(ctx, field)
			case "lawerDocuments":
				return ec.fieldContext_Deal_lawerDocuments(ctx, field)
			case "accountant":
				return ec.fieldContext_Deal_accountant(ctx, field)
			case "accountantDocuments":
				return ec.fieldContext_Deal_accountantDocuments(ctx, field)
			case "depositDate":
				return ec.fieldContext_Deal_depositDate(ctx, field)
			case "dealDate":
				return ec.fieldContext_Deal_dealDate(ctx, field)
			case "finishedAt":
				return ec.fieldContext_Deal_finishedAt(ctx, field)
			case "commissionAmount":
				return ec.fieldContext_Deal_commissionAmount(ctx, field)
			case "internalComment":
				return ec.fieldContext_Deal_internalComment(ctx, field)
			case "isDeleted":
				return ec.fieldContext_Deal_isDeleted(ctx, field)
			case "createdAt":
				return ec.fieldContext_Deal_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Deal_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Deal", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _DealEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *crm_models.DealEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DealEdge_cursor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNCursor2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DealEdge_cursor(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DealEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Cursor does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Department_id(ctx context.Context, field graphql.CollectedField, obj *crm_models.Department) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Department_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Department_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Department",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Department_title(ctx context.Context, field graphql.CollectedField, obj *crm_models.Department) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Department_title(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Title, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Department_title(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Department",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Department_groups(ctx context.Context, field graphql.CollectedField, obj *crm_models.Department) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Department_groups(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Groups, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]crm_models.DepartmentGroup)
	fc.Result = res
	return ec.marshalNDepartmentGroup2ᚕgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐDepartmentGroupᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Department_groups(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Department",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_DepartmentGroup_id(ctx, field)
			case "title":
				return ec.fieldContext_DepartmentGroup_title(ctx, field)
			case "createdAt":
				return ec.fieldContext_DepartmentGroup_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_DepartmentGroup_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DepartmentGroup", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Department_createdAt(ctx context.Context, field graphql.CollectedField, obj *crm_models.Department) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Department_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Department_createdAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Department",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Department_updatedAt(ctx context.Context, field graphql.CollectedField, obj *crm_models.Department) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Department_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Department_updatedAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Department",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DepartmentConnection_totalCount(ctx context.Context, field graphql.CollectedField, obj *crm_models.DepartmentConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DepartmentConnection_totalCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DepartmentConnection_totalCount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DepartmentConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DepartmentConnection_edges(ctx context.Context, field graphql.CollectedField, obj *crm_models.DepartmentConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DepartmentConnection_edges(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*crm_models.DepartmentEdge)
	fc.Result = res
	return ec.marshalNDepartmentEdge2ᚕᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐDepartmentEdgeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DepartmentConnection_edges(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DepartmentConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "node":
				return ec.fieldContext_DepartmentEdge_node(ctx, field)
			case "cursor":
				return ec.fieldContext_DepartmentEdge_cursor(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DepartmentEdge", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _DepartmentConnection_nodes(ctx context.Context, field graphql.CollectedField, obj *crm_models.DepartmentConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DepartmentConnection_nodes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Nodes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*crm_models.Department)
	fc.Result = res
	return ec.marshalNDepartment2ᚕᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐDepartmentᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DepartmentConnection_nodes(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DepartmentConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Department_id(ctx, field)
			case "title":
				return ec.fieldContext_Department_title(ctx, field)
			case "groups":
				return ec.fieldContext_Department_groups(ctx, field)
			case "createdAt":
				return ec.fieldContext_Department_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Department_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Department", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _DepartmentConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *crm_models.DepartmentConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DepartmentConnection_pageInfo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*crm_models.PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DepartmentConnection_pageInfo(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DepartmentConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "startCursor":
				return ec.fieldContext_PageInfo_startCursor(ctx, field)
			case "endCursor":
				return ec.fieldContext_PageInfo_endCursor(ctx, field)
			case "hasNextPage":
				return ec.fieldContext_PageInfo_hasNextPage(ctx, field)
			case "hasPreviousPage":
				return ec.fieldContext_PageInfo_hasPreviousPage(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PageInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _DepartmentEdge_node(ctx context.Context, field graphql.CollectedField, obj *crm_models.DepartmentEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DepartmentEdge_node(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*crm_models.Department)
	fc.Result = res
	return ec.marshalNDepartment2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐDepartment(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DepartmentEdge_node(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DepartmentEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Department_id(ctx, field)
			case "title":
				return ec.fieldContext_Department_title(ctx, field)
			case "groups":
				return ec.fieldContext_Department_groups(ctx, field)
			case "createdAt":
				return ec.fieldContext_Department_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Department_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Department", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _DepartmentEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *crm_models.DepartmentEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DepartmentEdge_cursor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNCursor2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DepartmentEdge_cursor(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DepartmentEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Cursor does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DepartmentGroup_id(ctx context.Context, field graphql.CollectedField, obj *crm_models.DepartmentGroup) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DepartmentGroup_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DepartmentGroup_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DepartmentGroup",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DepartmentGroup_title(ctx context.Context, field graphql.CollectedField, obj *crm_models.DepartmentGroup) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DepartmentGroup_title(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Title, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DepartmentGroup_title(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DepartmentGroup",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DepartmentGroup_createdAt(ctx context.Context, field graphql.CollectedField, obj *crm_models.DepartmentGroup) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DepartmentGroup_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DepartmentGroup_createdAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DepartmentGroup",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DepartmentGroup_updatedAt(ctx context.Context, field graphql.CollectedField, obj *crm_models.DepartmentGroup) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DepartmentGroup_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DepartmentGroup_updatedAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DepartmentGroup",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Developer_id(ctx context.Context, field graphql.CollectedField, obj *crm_models.Developer) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Developer_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Developer_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Developer",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Developer_title(ctx context.Context, field graphql.CollectedField, obj *crm_models.Developer) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Developer_title(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Title, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Developer_title(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Developer",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Developer_url(ctx context.Context, field graphql.CollectedField, obj *crm_models.Developer) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Developer_url(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.URL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Developer_url(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Developer",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Developer_logo(ctx context.Context, field graphql.CollectedField, obj *crm_models.Developer) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Developer_logo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Developer().Logo(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*crm_models.Image)
	fc.Result = res
	return ec.marshalOImage2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐImage(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Developer_logo(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Developer",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Image_id(ctx, field)
			case "url":
				return ec.fieldContext_Image_url(ctx, field)
			case "path":
				return ec.fieldContext_Image_path(ctx, field)
			case "title":
				return ec.fieldContext_Image_title(ctx, field)
			case "fileName":
				return ec.fieldContext_Image_fileName(ctx, field)
			case "fileType":
				return ec.fieldContext_Image_fileType(ctx, field)
			case "previewUrl":
				return ec.fieldContext_Image_previewUrl(ctx, field)
			case "previewPath":
				return ec.fieldContext_Image_previewPath(ctx, field)
			case "blurHash":
				return ec.fieldContext_Image_blurHash(ctx, field)
			case "preset":
				return ec.fieldContext_Image_preset(ctx, field)
			case "createdAt":
				return ec.fieldContext_Image_createdAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Image", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Developer_isDeleted(ctx context.Context, field graphql.CollectedField, obj *crm_models.Developer) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Developer_isDeleted(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeleted, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Developer_isDeleted(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Developer",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Developer_createdAt(ctx context.Context, field graphql.CollectedField, obj *crm_models.Developer) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Developer_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Developer_createdAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Developer",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Developer_updatedAt(ctx context.Context, field graphql.CollectedField, obj *crm_models.Developer) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Developer_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Developer_updatedAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Developer",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeveloperConnection_totalCount(ctx context.Context, field graphql.CollectedField, obj *crm_models.DeveloperConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeveloperConnection_totalCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeveloperConnection_totalCount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeveloperConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeveloperConnection_edges(ctx context.Context, field graphql.CollectedField, obj *crm_models.DeveloperConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeveloperConnection_edges(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*crm_models.DeveloperEdge)
	fc.Result = res
	return ec.marshalNDeveloperEdge2ᚕᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐDeveloperEdgeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeveloperConnection_edges(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeveloperConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "node":
				return ec.fieldContext_DeveloperEdge_node(ctx, field)
			case "cursor":
				return ec.fieldContext_DeveloperEdge_cursor(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DeveloperEdge", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeveloperConnection_nodes(ctx context.Context, field graphql.CollectedField, obj *crm_models.DeveloperConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeveloperConnection_nodes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Nodes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*crm_models.Developer)
	fc.Result = res
	return ec.marshalNDeveloper2ᚕᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐDeveloperᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeveloperConnection_nodes(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeveloperConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Developer_id(ctx, field)
			case "title":
				return ec.fieldContext_Developer_title(ctx, field)
			case "url":
				return ec.fieldContext_Developer_url(ctx, field)
			case "logo":
				return ec.fieldContext_Developer_logo(ctx, field)
			case "isDeleted":
				return ec.fieldContext_Developer_isDeleted(ctx, field)
			case "createdAt":
				return ec.fieldContext_Developer_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Developer_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Developer", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeveloperConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *crm_models.DeveloperConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeveloperConnection_pageInfo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*crm_models.PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeveloperConnection_pageInfo(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeveloperConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "startCursor":
				return ec.fieldContext_PageInfo_startCursor(ctx, field)
			case "endCursor":
				return ec.fieldContext_PageInfo_endCursor(ctx, field)
			case "hasNextPage":
				return ec.fieldContext_PageInfo_hasNextPage(ctx, field)
			case "hasPreviousPage":
				return ec.fieldContext_PageInfo_hasPreviousPage(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PageInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeveloperEdge_node(ctx context.Context, field graphql.CollectedField, obj *crm_models.DeveloperEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeveloperEdge_node(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*crm_models.Developer)
	fc.Result = res
	return ec.marshalNDeveloper2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐDeveloper(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeveloperEdge_node(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeveloperEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Developer_id(ctx, field)
			case "title":
				return ec.fieldContext_Developer_title(ctx, field)
			case "url":
				return ec.fieldContext_Developer_url(ctx, field)
			case "logo":
				return ec.fieldContext_Developer_logo(ctx, field)
			case "isDeleted":
				return ec.fieldContext_Developer_isDeleted(ctx, field)
			case "createdAt":
				return ec.fieldContext_Developer_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Developer_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Developer", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeveloperEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *crm_models.DeveloperEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeveloperEdge_cursor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNCursor2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeveloperEdge_cursor(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeveloperEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Cursor does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Document_id(ctx context.Context, field graphql.CollectedField, obj *crm_models.Document) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Document_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Document_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Document",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Document_url(ctx context.Context, field graphql.CollectedField, obj *crm_models.Document) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Document_url(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.URL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Document_url(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Document",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Document_path(ctx context.Context, field graphql.CollectedField, obj *crm_models.Document) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Document_path(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Path, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Document_path(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Document",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Document_title(ctx context.Context, field graphql.CollectedField, obj *crm_models.Document) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Document_title(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Title, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Document_title(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Document",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Document_fileName(ctx context.Context, field graphql.CollectedField, obj *crm_models.Document) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Document_fileName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FileName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Document_fileName(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Document",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Document_fileType(ctx context.Context, field graphql.CollectedField, obj *crm_models.Document) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Document_fileType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FileType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Document_fileType(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Document",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Document_createdAt(ctx context.Context, field graphql.CollectedField, obj *crm_models.Document) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Document_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Document_createdAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Document",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Employee_id(ctx context.Context, field graphql.CollectedField, obj *crm_models.Employee) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Employee_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Employee_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Employee",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Employee_name(ctx context.Context, field graphql.CollectedField, obj *crm_models.Employee) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Employee_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Employee_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Employee",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Employee_surname(ctx context.Context, field graphql.CollectedField, obj *crm_models.Employee) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Employee_surname(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Surname, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Employee_surname(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Employee",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Employee_patronymic(ctx context.Context, field graphql.CollectedField, obj *crm_models.Employee) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Employee_patronymic(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Patronymic, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Employee_patronymic(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Employee",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Employee_birthday(ctx context.Context, field graphql.CollectedField, obj *crm_models.Employee) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Employee_birthday(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Birthday, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalOTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Employee_birthday(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Employee",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Employee_email(ctx context.Context, field graphql.CollectedField, obj *crm_models.Employee) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Employee_email(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Email, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Employee_email(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Employee",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Employee_phone(ctx context.Context, field graphql.CollectedField, obj *crm_models.Employee) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Employee_phone(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Phone, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Employee_phone(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Employee",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Employee_position(ctx context.Context, field graphql.CollectedField, obj *crm_models.Employee) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Employee_position(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Employee().Position(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*crm_models.Position)
	fc.Result = res
	return ec.marshalOPosition2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐPosition(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Employee_position(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Employee",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Position_id(ctx, field)
			case "title":
				return ec.fieldContext_Position_title(ctx, field)
			case "createdAt":
				return ec.fieldContext_Position_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Position_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Position", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Employee_department(ctx context.Context, field graphql.CollectedField, obj *crm_models.Employee) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Employee_department(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Employee().Department(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*crm_models.Department)
	fc.Result = res
	return ec.marshalODepartment2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐDepartment(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Employee_department(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Employee",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Department_id(ctx, field)
			case "title":
				return ec.fieldContext_Department_title(ctx, field)
			case "groups":
				return ec.fieldContext_Department_groups(ctx, field)
			case "createdAt":
				return ec.fieldContext_Department_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Department_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Department", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Employee_group(ctx context.Context, field graphql.CollectedField, obj *crm_models.Employee) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Employee_group(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Employee().Group(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*crm_models.DepartmentGroup)
	fc.Result = res
	return ec.marshalODepartmentGroup2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐDepartmentGroup(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Employee_group(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Employee",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_DepartmentGroup_id(ctx, field)
			case "title":
				return ec.fieldContext_DepartmentGroup_title(ctx, field)
			case "createdAt":
				return ec.fieldContext_DepartmentGroup_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_DepartmentGroup_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DepartmentGroup", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Employee_role(ctx context.Context, field graphql.CollectedField, obj *crm_models.Employee) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Employee_role(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Employee().Role(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*crm_models.Role)
	fc.Result = res
	return ec.marshalORole2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐRole(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Employee_role(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Employee",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Role_id(ctx, field)
			case "title":
				return ec.fieldContext_Role_title(ctx, field)
			case "permissions":
				return ec.fieldContext_Role_permissions(ctx, field)
			case "createdAt":
				return ec.fieldContext_Role_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Role_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Role", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Employee_internalInfo(ctx context.Context, field graphql.CollectedField, obj *crm_models.Employee) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Employee_internalInfo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InternalInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Employee_internalInfo(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Employee",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Employee_shortDescription(ctx context.Context, field graphql.CollectedField, obj *crm_models.Employee) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Employee_shortDescription(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ShortDescription, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Employee_shortDescription(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Employee",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Employee_description(ctx context.Context, field graphql.CollectedField, obj *crm_models.Employee) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Employee_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Employee_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Employee",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Employee_isPublished(ctx context.Context, field graphql.CollectedField, obj *crm_models.Employee) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Employee_isPublished(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsPublished, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Employee_isPublished(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Employee",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Employee_isDeleted(ctx context.Context, field graphql.CollectedField, obj *crm_models.Employee) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Employee_isDeleted(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeleted, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Employee_isDeleted(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Employee",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Employee_avatar(ctx context.Context, field graphql.CollectedField, obj *crm_models.Employee) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Employee_avatar(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Employee().Avatar(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*crm_models.Image)
	fc.Result = res
	return ec.marshalOImage2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐImage(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Employee_avatar(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Employee",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Image_id(ctx, field)
			case "url":
				return ec.fieldContext_Image_url(ctx, field)
			case "path":
				return ec.fieldContext_Image_path(ctx, field)
			case "title":
				return ec.fieldContext_Image_title(ctx, field)
			case "fileName":
				return ec.fieldContext_Image_fileName(ctx, field)
			case "fileType":
				return ec.fieldContext_Image_fileType(ctx, field)
			case "previewUrl":
				return ec.fieldContext_Image_previewUrl(ctx, field)
			case "previewPath":
				return ec.fieldContext_Image_previewPath(ctx, field)
			case "blurHash":
				return ec.fieldContext_Image_blurHash(ctx, field)
			case "preset":
				return ec.fieldContext_Image_preset(ctx, field)
			case "createdAt":
				return ec.fieldContext_Image_createdAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Image", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Employee_publicImage(ctx context.Context, field graphql.CollectedField, obj *crm_models.Employee) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Employee_publicImage(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Employee().PublicImage(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*crm_models.Image)
	fc.Result = res
	return ec.marshalOImage2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐImage(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Employee_publicImage(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Employee",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Image_id(ctx, field)
			case "url":
				return ec.fieldContext_Image_url(ctx, field)
			case "path":
				return ec.fieldContext_Image_path(ctx, field)
			case "title":
				return ec.fieldContext_Image_title(ctx, field)
			case "fileName":
				return ec.fieldContext_Image_fileName(ctx, field)
			case "fileType":
				return ec.fieldContext_Image_fileType(ctx, field)
			case "previewUrl":
				return ec.fieldContext_Image_previewUrl(ctx, field)
			case "previewPath":
				return ec.fieldContext_Image_previewPath(ctx, field)
			case "blurHash":
				return ec.fieldContext_Image_blurHash(ctx, field)
			case "preset":
				return ec.fieldContext_Image_preset(ctx, field)
			case "createdAt":
				return ec.fieldContext_Image_createdAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Image", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Employee_createdAt(ctx context.Context, field graphql.CollectedField, obj *crm_models.Employee) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Employee_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Employee_createdAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Employee",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Employee_updatedAt(ctx context.Context, field graphql.CollectedField, obj *crm_models.Employee) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Employee_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Employee_updatedAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Employee",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _EmployeeConnection_totalCount(ctx context.Context, field graphql.CollectedField, obj *crm_models.EmployeeConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_EmployeeConnection_totalCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_EmployeeConnection_totalCount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EmployeeConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _EmployeeConnection_edges(ctx context.Context, field graphql.CollectedField, obj *crm_models.EmployeeConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_EmployeeConnection_edges(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*crm_models.EmployeeEdge)
	fc.Result = res
	return ec.marshalNEmployeeEdge2ᚕᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐEmployeeEdgeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_EmployeeConnection_edges(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EmployeeConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "node":
				return ec.fieldContext_EmployeeEdge_node(ctx, field)
			case "cursor":
				return ec.fieldContext_EmployeeEdge_cursor(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type EmployeeEdge", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _EmployeeConnection_nodes(ctx context.Context, field graphql.CollectedField, obj *crm_models.EmployeeConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_EmployeeConnection_nodes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Nodes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*crm_models.Employee)
	fc.Result = res
	return ec.marshalNEmployee2ᚕᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐEmployeeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_EmployeeConnection_nodes(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EmployeeConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Employee_id(ctx, field)
			case "name":
				return ec.fieldContext_Employee_name(ctx, field)
			case "surname":
				return ec.fieldContext_Employee_surname(ctx, field)
			case "patronymic":
				return ec.fieldContext_Employee_patronymic(ctx, field)
			case "birthday":
				return ec.fieldContext_Employee_birthday(ctx, field)
			case "email":
				return ec.fieldContext_Employee_email(ctx, field)
			case "phone":
				return ec.fieldContext_Employee_phone(ctx, field)
			case "position":
				return ec.fieldContext_Employee_position(ctx, field)
			case "department":
				return ec.fieldContext_Employee_department(ctx, field)
			case "group":
				return ec.fieldContext_Employee_group(ctx, field)
			case "role":
				return ec.fieldContext_Employee_role(ctx, field)
			case "internalInfo":
				return ec.fieldContext_Employee_internalInfo(ctx, field)
			case "shortDescription":
				return ec.fieldContext_Employee_shortDescription(ctx, field)
			case "description":
				return ec.fieldContext_Employee_description(ctx, field)
			case "isPublished":
				return ec.fieldContext_Employee_isPublished(ctx, field)
			case "isDeleted":
				return ec.fieldContext_Employee_isDeleted(ctx, field)
			case "avatar":
				return ec.fieldContext_Employee_avatar(ctx, field)
			case "publicImage":
				return ec.fieldContext_Employee_publicImage(ctx, field)
			case "createdAt":
				return ec.fieldContext_Employee_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Employee_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Employee", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _EmployeeConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *crm_models.EmployeeConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_EmployeeConnection_pageInfo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*crm_models.PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_EmployeeConnection_pageInfo(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EmployeeConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "startCursor":
				return ec.fieldContext_PageInfo_startCursor(ctx, field)
			case "endCursor":
				return ec.fieldContext_PageInfo_endCursor(ctx, field)
			case "hasNextPage":
				return ec.fieldContext_PageInfo_hasNextPage(ctx, field)
			case "hasPreviousPage":
				return ec.fieldContext_PageInfo_hasPreviousPage(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PageInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _EmployeeEdge_node(ctx context.Context, field graphql.CollectedField, obj *crm_models.EmployeeEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_EmployeeEdge_node(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*crm_models.Employee)
	fc.Result = res
	return ec.marshalNEmployee2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐEmployee(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_EmployeeEdge_node(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EmployeeEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Employee_id(ctx, field)
			case "name":
				return ec.fieldContext_Employee_name(ctx, field)
			case "surname":
				return ec.fieldContext_Employee_surname(ctx, field)
			case "patronymic":
				return ec.fieldContext_Employee_patronymic(ctx, field)
			case "birthday":
				return ec.fieldContext_Employee_birthday(ctx, field)
			case "email":
				return ec.fieldContext_Employee_email(ctx, field)
			case "phone":
				return ec.fieldContext_Employee_phone(ctx, field)
			case "position":
				return ec.fieldContext_Employee_position(ctx, field)
			case "department":
				return ec.fieldContext_Employee_department(ctx, field)
			case "group":
				return ec.fieldContext_Employee_group(ctx, field)
			case "role":
				return ec.fieldContext_Employee_role(ctx, field)
			case "internalInfo":
				return ec.fieldContext_Employee_internalInfo(ctx, field)
			case "shortDescription":
				return ec.fieldContext_Employee_shortDescription(ctx, field)
			case "description":
				return ec.fieldContext_Employee_description(ctx, field)
			case "isPublished":
				return ec.fieldContext_Employee_isPublished(ctx, field)
			case "isDeleted":
				return ec.fieldContext_Employee_isDeleted(ctx, field)
			case "avatar":
				return ec.fieldContext_Employee_avatar(ctx, field)
			case "publicImage":
				return ec.fieldContext_Employee_publicImage(ctx, field)
			case "createdAt":
				return ec.fieldContext_Employee_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Employee_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Employee", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _EmployeeEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *crm_models.EmployeeEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_EmployeeEdge_cursor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNCursor2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_EmployeeEdge_cursor(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EmployeeEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Cursor does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Image_id(ctx context.Context, field graphql.CollectedField, obj *crm_models.Image) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Image_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Image_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Image",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Image_url(ctx context.Context, field graphql.CollectedField, obj *crm_models.Image) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Image_url(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.URL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Image_url(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Image",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Image_path(ctx context.Context, field graphql.CollectedField, obj *crm_models.Image) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Image_path(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Path, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Image_path(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Image",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Image_title(ctx context.Context, field graphql.CollectedField, obj *crm_models.Image) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Image_title(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Title, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Image_title(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Image",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Image_fileName(ctx context.Context, field graphql.CollectedField, obj *crm_models.Image) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Image_fileName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FileName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Image_fileName(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Image",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Image_fileType(ctx context.Context, field graphql.CollectedField, obj *crm_models.Image) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Image_fileType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FileType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Image_fileType(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Image",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Image_previewUrl(ctx context.Context, field graphql.CollectedField, obj *crm_models.Image) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Image_previewUrl(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PreviewURL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Image_previewUrl(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Image",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Image_previewPath(ctx context.Context, field graphql.CollectedField, obj *crm_models.Image) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Image_previewPath(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PreviewPath, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Image_previewPath(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Image",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Image_blurHash(ctx context.Context, field graphql.CollectedField, obj *crm_models.Image) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Image_blurHash(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BlurHash, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Image_blurHash(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Image",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Image_preset(ctx context.Context, field graphql.CollectedField, obj *crm_models.Image) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Image_preset(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Preset, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(crm_models.ImagePreset)
	fc.Result = res
	return ec.marshalNImagePreset2githubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐImagePreset(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Image_preset(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Image",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ImagePreset does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Image_createdAt(ctx context.Context, field graphql.CollectedField, obj *crm_models.Image) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Image_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Image_createdAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Image",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Lead_id(ctx context.Context, field graphql.CollectedField, obj *crm_models.Lead) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Lead_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Lead_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Lead",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Lead_internalNumber(ctx context.Context, field graphql.CollectedField, obj *crm_models.Lead) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Lead_internalNumber(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InternalNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Lead_internalNumber(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Lead",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Lead_type(ctx context.Context, field graphql.CollectedField, obj *crm_models.Lead) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Lead_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*crm_models.LeadTypeEnum)
	fc.Result = res
	return ec.marshalOLeadTypeEnum2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐLeadTypeEnum(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Lead_type(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Lead",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type LeadTypeEnum does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Lead_source(ctx context.Context, field graphql.CollectedField, obj *crm_models.Lead) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Lead_source(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Source, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*crm_models.LeadSourceEnum)
	fc.Result = res
	return ec.marshalOLeadSourceEnum2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐLeadSourceEnum(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Lead_source(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Lead",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type LeadSourceEnum does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Lead_name(ctx context.Context, field graphql.CollectedField, obj *crm_models.Lead) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Lead_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Lead_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Lead",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Lead_surname(ctx context.Context, field graphql.CollectedField, obj *crm_models.Lead) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Lead_surname(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Surname, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Lead_surname(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Lead",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Lead_patronymic(ctx context.Context, field graphql.CollectedField, obj *crm_models.Lead) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Lead_patronymic(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Patronymic, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Lead_patronymic(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Lead",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Lead_birthday(ctx context.Context, field graphql.CollectedField, obj *crm_models.Lead) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Lead_birthday(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Birthday, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Lead_birthday(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Lead",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Lead_phone(ctx context.Context, field graphql.CollectedField, obj *crm_models.Lead) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Lead_phone(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Phone, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Lead_phone(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Lead",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Lead_additionalPhones(ctx context.Context, field graphql.CollectedField, obj *crm_models.Lead) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Lead_additionalPhones(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AdditionalPhones, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalOString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Lead_additionalPhones(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Lead",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Lead_email(ctx context.Context, field graphql.CollectedField, obj *crm_models.Lead) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Lead_email(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Email, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Lead_email(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Lead",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Lead_company(ctx context.Context, field graphql.CollectedField, obj *crm_models.Lead) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Lead_company(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Company, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Lead_company(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Lead",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Lead_address(ctx context.Context, field graphql.CollectedField, obj *crm_models.Lead) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Lead_address(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Address, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Lead_address(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Lead",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Lead_request(ctx context.Context, field graphql.CollectedField, obj *crm_models.Lead) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Lead_request(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Request, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Lead_request(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Lead",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Lead_agents(ctx context.Context, field graphql.CollectedField, obj *crm_models.Lead) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Lead_agents(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Lead().Agents(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*crm_models.Employee)
	fc.Result = res
	return ec.marshalOEmployee2ᚕᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐEmployeeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Lead_agents(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Lead",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Employee_id(ctx, field)
			case "name":
				return ec.fieldContext_Employee_name(ctx, field)
			case "surname":
				return ec.fieldContext_Employee_surname(ctx, field)
			case "patronymic":
				return ec.fieldContext_Employee_patronymic(ctx, field)
			case "birthday":
				return ec.fieldContext_Employee_birthday(ctx, field)
			case "email":
				return ec.fieldContext_Employee_email(ctx, field)
			case "phone":
				return ec.fieldContext_Employee_phone(ctx, field)
			case "position":
				return ec.fieldContext_Employee_position(ctx, field)
			case "department":
				return ec.fieldContext_Employee_department(ctx, field)
			case "group":
				return ec.fieldContext_Employee_group(ctx, field)
			case "role":
				return ec.fieldContext_Employee_role(ctx, field)
			case "internalInfo":
				return ec.fieldContext_Employee_internalInfo(ctx, field)
			case "shortDescription":
				return ec.fieldContext_Employee_shortDescription(ctx, field)
			case "description":
				return ec.fieldContext_Employee_description(ctx, field)
			case "isPublished":
				return ec.fieldContext_Employee_isPublished(ctx, field)
			case "isDeleted":
				return ec.fieldContext_Employee_isDeleted(ctx, field)
			case "avatar":
				return ec.fieldContext_Employee_avatar(ctx, field)
			case "publicImage":
				return ec.fieldContext_Employee_publicImage(ctx, field)
			case "createdAt":
				return ec.fieldContext_Employee_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Employee_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Employee", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Lead_status(ctx context.Context, field graphql.CollectedField, obj *crm_models.Lead) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Lead_status(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*crm_models.LeadStatusEnum)
	fc.Result = res
	return ec.marshalOLeadStatusEnum2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐLeadStatusEnum(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Lead_status(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Lead",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type LeadStatusEnum does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Lead_comment(ctx context.Context, field graphql.CollectedField, obj *crm_models.Lead) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Lead_comment(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Comment, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Lead_comment(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Lead",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Lead_isDeleted(ctx context.Context, field graphql.CollectedField, obj *crm_models.Lead) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Lead_isDeleted(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeleted, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalNBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Lead_isDeleted(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Lead",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Lead_createdAt(ctx context.Context, field graphql.CollectedField, obj *crm_models.Lead) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Lead_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Lead_createdAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Lead",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Lead_updatedAt(ctx context.Context, field graphql.CollectedField, obj *crm_models.Lead) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Lead_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Lead_updatedAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Lead",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _LeadConnection_totalCount(ctx context.Context, field graphql.CollectedField, obj *crm_models.LeadConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_LeadConnection_totalCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_LeadConnection_totalCount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "LeadConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _LeadConnection_edges(ctx context.Context, field graphql.CollectedField, obj *crm_models.LeadConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_LeadConnection_edges(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*crm_models.LeadEdge)
	fc.Result = res
	return ec.marshalNLeadEdge2ᚕᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐLeadEdgeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_LeadConnection_edges(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "LeadConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "node":
				return ec.fieldContext_LeadEdge_node(ctx, field)
			case "cursor":
				return ec.fieldContext_LeadEdge_cursor(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type LeadEdge", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _LeadConnection_nodes(ctx context.Context, field graphql.CollectedField, obj *crm_models.LeadConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_LeadConnection_nodes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Nodes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*crm_models.Lead)
	fc.Result = res
	return ec.marshalNLead2ᚕᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐLeadᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_LeadConnection_nodes(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "LeadConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Lead_id(ctx, field)
			case "internalNumber":
				return ec.fieldContext_Lead_internalNumber(ctx, field)
			case "type":
				return ec.fieldContext_Lead_type(ctx, field)
			case "source":
				return ec.fieldContext_Lead_source(ctx, field)
			case "name":
				return ec.fieldContext_Lead_name(ctx, field)
			case "surname":
				return ec.fieldContext_Lead_surname(ctx, field)
			case "patronymic":
				return ec.fieldContext_Lead_patronymic(ctx, field)
			case "birthday":
				return ec.fieldContext_Lead_birthday(ctx, field)
			case "phone":
				return ec.fieldContext_Lead_phone(ctx, field)
			case "additionalPhones":
				return ec.fieldContext_Lead_additionalPhones(ctx, field)
			case "email":
				return ec.fieldContext_Lead_email(ctx, field)
			case "company":
				return ec.fieldContext_Lead_company(ctx, field)
			case "address":
				return ec.fieldContext_Lead_address(ctx, field)
			case "request":
				return ec.fieldContext_Lead_request(ctx, field)
			case "agents":
				return ec.fieldContext_Lead_agents(ctx, field)
			case "status":
				return ec.fieldContext_Lead_status(ctx, field)
			case "comment":
				return ec.fieldContext_Lead_comment(ctx, field)
			case "isDeleted":
				return ec.fieldContext_Lead_isDeleted(ctx, field)
			case "createdAt":
				return ec.fieldContext_Lead_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Lead_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Lead", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _LeadConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *crm_models.LeadConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_LeadConnection_pageInfo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*crm_models.PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_LeadConnection_pageInfo(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "LeadConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "startCursor":
				return ec.fieldContext_PageInfo_startCursor(ctx, field)
			case "endCursor":
				return ec.fieldContext_PageInfo_endCursor(ctx, field)
			case "hasNextPage":
				return ec.fieldContext_PageInfo_hasNextPage(ctx, field)
			case "hasPreviousPage":
				return ec.fieldContext_PageInfo_hasPreviousPage(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PageInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _LeadEdge_node(ctx context.Context, field graphql.CollectedField, obj *crm_models.LeadEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_LeadEdge_node(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*crm_models.Lead)
	fc.Result = res
	return ec.marshalNLead2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐLead(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_LeadEdge_node(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "LeadEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Lead_id(ctx, field)
			case "internalNumber":
				return ec.fieldContext_Lead_internalNumber(ctx, field)
			case "type":
				return ec.fieldContext_Lead_type(ctx, field)
			case "source":
				return ec.fieldContext_Lead_source(ctx, field)
			case "name":
				return ec.fieldContext_Lead_name(ctx, field)
			case "surname":
				return ec.fieldContext_Lead_surname(ctx, field)
			case "patronymic":
				return ec.fieldContext_Lead_patronymic(ctx, field)
			case "birthday":
				return ec.fieldContext_Lead_birthday(ctx, field)
			case "phone":
				return ec.fieldContext_Lead_phone(ctx, field)
			case "additionalPhones":
				return ec.fieldContext_Lead_additionalPhones(ctx, field)
			case "email":
				return ec.fieldContext_Lead_email(ctx, field)
			case "company":
				return ec.fieldContext_Lead_company(ctx, field)
			case "address":
				return ec.fieldContext_Lead_address(ctx, field)
			case "request":
				return ec.fieldContext_Lead_request(ctx, field)
			case "agents":
				return ec.fieldContext_Lead_agents(ctx, field)
			case "status":
				return ec.fieldContext_Lead_status(ctx, field)
			case "comment":
				return ec.fieldContext_Lead_comment(ctx, field)
			case "isDeleted":
				return ec.fieldContext_Lead_isDeleted(ctx, field)
			case "createdAt":
				return ec.fieldContext_Lead_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Lead_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Lead", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _LeadEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *crm_models.LeadEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_LeadEdge_cursor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNCursor2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_LeadEdge_cursor(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "LeadEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Cursor does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Log_id(ctx context.Context, field graphql.CollectedField, obj *crm_models.Log) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Log_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Log_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Log",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Log_eid(ctx context.Context, field graphql.CollectedField, obj *crm_models.Log) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Log_eid(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Eid, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Log_eid(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Log",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Log_author(ctx context.Context, field graphql.CollectedField, obj *crm_models.Log) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Log_author(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Log().Author(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*crm_models.Employee)
	fc.Result = res
	return ec.marshalOEmployee2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐEmployee(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Log_author(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Log",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Employee_id(ctx, field)
			case "name":
				return ec.fieldContext_Employee_name(ctx, field)
			case "surname":
				return ec.fieldContext_Employee_surname(ctx, field)
			case "patronymic":
				return ec.fieldContext_Employee_patronymic(ctx, field)
			case "birthday":
				return ec.fieldContext_Employee_birthday(ctx, field)
			case "email":
				return ec.fieldContext_Employee_email(ctx, field)
			case "phone":
				return ec.fieldContext_Employee_phone(ctx, field)
			case "position":
				return ec.fieldContext_Employee_position(ctx, field)
			case "department":
				return ec.fieldContext_Employee_department(ctx, field)
			case "group":
				return ec.fieldContext_Employee_group(ctx, field)
			case "role":
				return ec.fieldContext_Employee_role(ctx, field)
			case "internalInfo":
				return ec.fieldContext_Employee_internalInfo(ctx, field)
			case "shortDescription":
				return ec.fieldContext_Employee_shortDescription(ctx, field)
			case "description":
				return ec.fieldContext_Employee_description(ctx, field)
			case "isPublished":
				return ec.fieldContext_Employee_isPublished(ctx, field)
			case "isDeleted":
				return ec.fieldContext_Employee_isDeleted(ctx, field)
			case "avatar":
				return ec.fieldContext_Employee_avatar(ctx, field)
			case "publicImage":
				return ec.fieldContext_Employee_publicImage(ctx, field)
			case "createdAt":
				return ec.fieldContext_Employee_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Employee_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Employee", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Log_status(ctx context.Context, field graphql.CollectedField, obj *crm_models.Log) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Log_status(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(crm_models.StatusCodeEnum)
	fc.Result = res
	return ec.marshalNStatusCodeEnum2githubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐStatusCodeEnum(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Log_status(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Log",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type StatusCodeEnum does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Log_type(ctx context.Context, field graphql.CollectedField, obj *crm_models.Log) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Log_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(crm_models.LogTypeEnum)
	fc.Result = res
	return ec.marshalNLogTypeEnum2githubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐLogTypeEnum(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Log_type(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Log",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type LogTypeEnum does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Log_level(ctx context.Context, field graphql.CollectedField, obj *crm_models.Log) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Log_level(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Level, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(crm_models.LogLevelEnum)
	fc.Result = res
	return ec.marshalNLogLevelEnum2githubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐLogLevelEnum(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Log_level(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Log",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type LogLevelEnum does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Log_createdAt(ctx context.Context, field graphql.CollectedField, obj *crm_models.Log) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Log_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Log_createdAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Log",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _LogConnection_totalCount(ctx context.Context, field graphql.CollectedField, obj *crm_models.LogConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_LogConnection_totalCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_LogConnection_totalCount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "LogConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _LogConnection_edges(ctx context.Context, field graphql.CollectedField, obj *crm_models.LogConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_LogConnection_edges(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*crm_models.LogEdge)
	fc.Result = res
	return ec.marshalNLogEdge2ᚕᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐLogEdgeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_LogConnection_edges(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "LogConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "node":
				return ec.fieldContext_LogEdge_node(ctx, field)
			case "cursor":
				return ec.fieldContext_LogEdge_cursor(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type LogEdge", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _LogConnection_nodes(ctx context.Context, field graphql.CollectedField, obj *crm_models.LogConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_LogConnection_nodes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Nodes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*crm_models.Log)
	fc.Result = res
	return ec.marshalNLog2ᚕᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐLogᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_LogConnection_nodes(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "LogConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Log_id(ctx, field)
			case "eid":
				return ec.fieldContext_Log_eid(ctx, field)
			case "author":
				return ec.fieldContext_Log_author(ctx, field)
			case "status":
				return ec.fieldContext_Log_status(ctx, field)
			case "type":
				return ec.fieldContext_Log_type(ctx, field)
			case "level":
				return ec.fieldContext_Log_level(ctx, field)
			case "createdAt":
				return ec.fieldContext_Log_createdAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Log", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _LogConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *crm_models.LogConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_LogConnection_pageInfo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*crm_models.PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_LogConnection_pageInfo(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "LogConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "startCursor":
				return ec.fieldContext_PageInfo_startCursor(ctx, field)
			case "endCursor":
				return ec.fieldContext_PageInfo_endCursor(ctx, field)
			case "hasNextPage":
				return ec.fieldContext_PageInfo_hasNextPage(ctx, field)
			case "hasPreviousPage":
				return ec.fieldContext_PageInfo_hasPreviousPage(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PageInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _LogEdge_node(ctx context.Context, field graphql.CollectedField, obj *crm_models.LogEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_LogEdge_node(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*crm_models.Log)
	fc.Result = res
	return ec.marshalNLog2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐLog(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_LogEdge_node(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "LogEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Log_id(ctx, field)
			case "eid":
				return ec.fieldContext_Log_eid(ctx, field)
			case "author":
				return ec.fieldContext_Log_author(ctx, field)
			case "status":
				return ec.fieldContext_Log_status(ctx, field)
			case "type":
				return ec.fieldContext_Log_type(ctx, field)
			case "level":
				return ec.fieldContext_Log_level(ctx, field)
			case "createdAt":
				return ec.fieldContext_Log_createdAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Log", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _LogEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *crm_models.LogEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_LogEdge_cursor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNCursor2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_LogEdge_cursor(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "LogEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Cursor does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _LoginOutput_token(ctx context.Context, field graphql.CollectedField, obj *crm_models.LoginOutput) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_LoginOutput_token(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Token, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_LoginOutput_token(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "LoginOutput",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _LoginOutput_me(ctx context.Context, field graphql.CollectedField, obj *crm_models.LoginOutput) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_LoginOutput_me(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Me, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*crm_models.Me)
	fc.Result = res
	return ec.marshalNMe2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐMe(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_LoginOutput_me(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "LoginOutput",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Me_id(ctx, field)
			case "name":
				return ec.fieldContext_Me_name(ctx, field)
			case "surname":
				return ec.fieldContext_Me_surname(ctx, field)
			case "avatar":
				return ec.fieldContext_Me_avatar(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Me", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Me_id(ctx context.Context, field graphql.CollectedField, obj *crm_models.Me) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Me_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Me_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Me",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Me_name(ctx context.Context, field graphql.CollectedField, obj *crm_models.Me) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Me_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Me_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Me",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Me_surname(ctx context.Context, field graphql.CollectedField, obj *crm_models.Me) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Me_surname(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Surname, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Me_surname(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Me",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Me_avatar(ctx context.Context, field graphql.CollectedField, obj *crm_models.Me) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Me_avatar(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Me().Avatar(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*crm_models.Image)
	fc.Result = res
	return ec.marshalOImage2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐImage(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Me_avatar(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Me",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Image_id(ctx, field)
			case "url":
				return ec.fieldContext_Image_url(ctx, field)
			case "path":
				return ec.fieldContext_Image_path(ctx, field)
			case "title":
				return ec.fieldContext_Image_title(ctx, field)
			case "fileName":
				return ec.fieldContext_Image_fileName(ctx, field)
			case "fileType":
				return ec.fieldContext_Image_fileType(ctx, field)
			case "previewUrl":
				return ec.fieldContext_Image_previewUrl(ctx, field)
			case "previewPath":
				return ec.fieldContext_Image_previewPath(ctx, field)
			case "blurHash":
				return ec.fieldContext_Image_blurHash(ctx, field)
			case "preset":
				return ec.fieldContext_Image_preset(ctx, field)
			case "createdAt":
				return ec.fieldContext_Image_createdAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Image", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Meet_id(ctx context.Context, field graphql.CollectedField, obj *crm_models.Meet) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Meet_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Meet_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Meet",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Meet_internalNumber(ctx context.Context, field graphql.CollectedField, obj *crm_models.Meet) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Meet_internalNumber(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InternalNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Meet_internalNumber(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Meet",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Meet_type(ctx context.Context, field graphql.CollectedField, obj *crm_models.Meet) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Meet_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*crm_models.MeetTypeEnum)
	fc.Result = res
	return ec.marshalOMeetTypeEnum2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐMeetTypeEnum(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Meet_type(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Meet",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type MeetTypeEnum does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Meet_dealType(ctx context.Context, field graphql.CollectedField, obj *crm_models.Meet) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Meet_dealType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DealType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*crm_models.DealTypeEnum)
	fc.Result = res
	return ec.marshalODealTypeEnum2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐDealTypeEnum(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Meet_dealType(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Meet",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DealTypeEnum does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Meet_contactType(ctx context.Context, field graphql.CollectedField, obj *crm_models.Meet) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Meet_contactType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ContactType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*crm_models.CounterPartyTypeEnum)
	fc.Result = res
	return ec.marshalOCounterPartyTypeEnum2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐCounterPartyTypeEnum(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Meet_contactType(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Meet",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type CounterPartyTypeEnum does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Meet_dateTime(ctx context.Context, field graphql.CollectedField, obj *crm_models.Meet) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Meet_dateTime(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DateTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalOTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Meet_dateTime(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Meet",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Meet_property(ctx context.Context, field graphql.CollectedField, obj *crm_models.Meet) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Meet_property(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Meet().Property(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*crm_models.Property)
	fc.Result = res
	return ec.marshalOProperty2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐProperty(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Meet_property(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Meet",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Property_id(ctx, field)
			case "internalID":
				return ec.fieldContext_Property_internalID(ctx, field)
			case "deal":
				return ec.fieldContext_Property_deal(ctx, field)
			case "type":
				return ec.fieldContext_Property_type(ctx, field)
			case "subType":
				return ec.fieldContext_Property_subType(ctx, field)
			case "commercialUsage":
				return ec.fieldContext_Property_commercialUsage(ctx, field)
			case "fromDeveloper":
				return ec.fieldContext_Property_fromDeveloper(ctx, field)
			case "inComplex":
				return ec.fieldContext_Property_inComplex(ctx, field)
			case "complex":
				return ec.fieldContext_Property_complex(ctx, field)
			case "complexHouse":
				return ec.fieldContext_Property_complexHouse(ctx, field)
			case "inVillage":
				return ec.fieldContext_Property_inVillage(ctx, field)
			case "village":
				return ec.fieldContext_Property_village(ctx, field)
			case "isHot":
				return ec.fieldContext_Property_isHot(ctx, field)
			case "title":
				return ec.fieldContext_Property_title(ctx, field)
			case "description":
				return ec.fieldContext_Property_description(ctx, field)
			case "address":
				return ec.fieldContext_Property_address(ctx, field)
			case "lat":
				return ec.fieldContext_Property_lat(ctx, field)
			case "lon":
				return ec.fieldContext_Property_lon(ctx, field)
			case "cadastrNumber":
				return ec.fieldContext_Property_cadastrNumber(ctx, field)
			case "seoText":
				return ec.fieldContext_Property_seoText(ctx, field)
			case "youtubeLink":
				return ec.fieldContext_Property_youtubeLink(ctx, field)
			case "tourLink":
				return ec.fieldContext_Property_tourLink(ctx, field)
			case "documents":
				return ec.fieldContext_Property_documents(ctx, field)
			case "images":
				return ec.fieldContext_Property_images(ctx, field)
			case "isDeleted":
				return ec.fieldContext_Property_isDeleted(ctx, field)
			case "isEditable":
				return ec.fieldContext_Property_isEditable(ctx, field)
			case "refreshDate":
				return ec.fieldContext_Property_refreshDate(ctx, field)
			case "status":
				return ec.fieldContext_Property_status(ctx, field)
			case "price":
				return ec.fieldContext_Property_price(ctx, field)
			case "pricePerMeter":
				return ec.fieldContext_Property_pricePerMeter(ctx, field)
			case "pricePerAr":
				return ec.fieldContext_Property_pricePerAr(ctx, field)
			case "priceHistory":
				return ec.fieldContext_Property_priceHistory(ctx, field)
			case "isReady":
				return ec.fieldContext_Property_isReady(ctx, field)
			case "readinessYear":
				return ec.fieldContext_Property_readinessYear(ctx, field)
			case "readinessQuarter":
				return ec.fieldContext_Property_readinessQuarter(ctx, field)
			case "inCity":
				return ec.fieldContext_Property_inCity(ctx, field)
			case "cityDistance":
				return ec.fieldContext_Property_cityDistance(ctx, field)
			case "region":
				return ec.fieldContext_Property_region(ctx, field)
			case "subRegion":
				return ec.fieldContext_Property_subRegion(ctx, field)
			case "source":
				return ec.fieldContext_Property_source(ctx, field)
			case "rooms":
				return ec.fieldContext_Property_rooms(ctx, field)
			case "area":
				return ec.fieldContext_Property_area(ctx, field)
			case "landArea":
				return ec.fieldContext_Property_landArea(ctx, field)
			case "livingArea":
				return ec.fieldContext_Property_livingArea(ctx, field)
			case "kitchenArea":
				return ec.fieldContext_Property_kitchenArea(ctx, field)
			case "toiletType":
				return ec.fieldContext_Property_toiletType(ctx, field)
			case "rehabType":
				return ec.fieldContext_Property_rehabType(ctx, field)
			case "floor":
				return ec.fieldContext_Property_floor(ctx, field)
			case "floors":
				return ec.fieldContext_Property_floors(ctx, field)
			case "ceilingHeight":
				return ec.fieldContext_Property_ceilingHeight(ctx, field)
			case "internalInfo":
				return ec.fieldContext_Property_internalInfo(ctx, field)
			case "comissionPercent":
				return ec.fieldContext_Property_comissionPercent(ctx, field)
			case "comissionAmount":
				return ec.fieldContext_Property_comissionAmount(ctx, field)
			case "createdAt":
				return ec.fieldContext_Property_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Property_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Property", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Meet_address(ctx context.Context, field graphql.CollectedField, obj *crm_models.Meet) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Meet_address(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Address, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Meet_address(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Meet",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Meet_comment(ctx context.Context, field graphql.CollectedField, obj *crm_models.Meet) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Meet_comment(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Comment, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Meet_comment(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Meet",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Meet_isOnline(ctx context.Context, field graphql.CollectedField, obj *crm_models.Meet) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Meet_isOnline(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsOnline, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Meet_isOnline(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Meet",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Meet_sellerAgent(ctx context.Context, field graphql.CollectedField, obj *crm_models.Meet) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Meet_sellerAgent(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Meet().SellerAgent(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*crm_models.Employee)
	fc.Result = res
	return ec.marshalOEmployee2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐEmployee(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Meet_sellerAgent(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Meet",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Employee_id(ctx, field)
			case "name":
				return ec.fieldContext_Employee_name(ctx, field)
			case "surname":
				return ec.fieldContext_Employee_surname(ctx, field)
			case "patronymic":
				return ec.fieldContext_Employee_patronymic(ctx, field)
			case "birthday":
				return ec.fieldContext_Employee_birthday(ctx, field)
			case "email":
				return ec.fieldContext_Employee_email(ctx, field)
			case "phone":
				return ec.fieldContext_Employee_phone(ctx, field)
			case "position":
				return ec.fieldContext_Employee_position(ctx, field)
			case "department":
				return ec.fieldContext_Employee_department(ctx, field)
			case "group":
				return ec.fieldContext_Employee_group(ctx, field)
			case "role":
				return ec.fieldContext_Employee_role(ctx, field)
			case "internalInfo":
				return ec.fieldContext_Employee_internalInfo(ctx, field)
			case "shortDescription":
				return ec.fieldContext_Employee_shortDescription(ctx, field)
			case "description":
				return ec.fieldContext_Employee_description(ctx, field)
			case "isPublished":
				return ec.fieldContext_Employee_isPublished(ctx, field)
			case "isDeleted":
				return ec.fieldContext_Employee_isDeleted(ctx, field)
			case "avatar":
				return ec.fieldContext_Employee_avatar(ctx, field)
			case "publicImage":
				return ec.fieldContext_Employee_publicImage(ctx, field)
			case "createdAt":
				return ec.fieldContext_Employee_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Employee_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Employee", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Meet_sellerContact(ctx context.Context, field graphql.CollectedField, obj *crm_models.Meet) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Meet_sellerContact(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Meet().SellerContact(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*crm_models.Contact)
	fc.Result = res
	return ec.marshalOContact2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐContact(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Meet_sellerContact(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Meet",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Contact_id(ctx, field)
			case "internalNumber":
				return ec.fieldContext_Contact_internalNumber(ctx, field)
			case "type":
				return ec.fieldContext_Contact_type(ctx, field)
			case "source":
				return ec.fieldContext_Contact_source(ctx, field)
			case "name":
				return ec.fieldContext_Contact_name(ctx, field)
			case "surname":
				return ec.fieldContext_Contact_surname(ctx, field)
			case "patronymic":
				return ec.fieldContext_Contact_patronymic(ctx, field)
			case "birthday":
				return ec.fieldContext_Contact_birthday(ctx, field)
			case "phone":
				return ec.fieldContext_Contact_phone(ctx, field)
			case "additionalPhones":
				return ec.fieldContext_Contact_additionalPhones(ctx, field)
			case "email":
				return ec.fieldContext_Contact_email(ctx, field)
			case "company":
				return ec.fieldContext_Contact_company(ctx, field)
			case "address":
				return ec.fieldContext_Contact_address(ctx, field)
			case "properties":
				return ec.fieldContext_Contact_properties(ctx, field)
			case "passportNumber":
				return ec.fieldContext_Contact_passportNumber(ctx, field)
			case "passportIssuedBy":
				return ec.fieldContext_Contact_passportIssuedBy(ctx, field)
			case "passportIssueDate":
				return ec.fieldContext_Contact_passportIssueDate(ctx, field)
			case "passportIssuerCode":
				return ec.fieldContext_Contact_passportIssuerCode(ctx, field)
			case "internalInfo":
				return ec.fieldContext_Contact_internalInfo(ctx, field)
			case "note":
				return ec.fieldContext_Contact_note(ctx, field)
			case "deals":
				return ec.fieldContext_Contact_deals(ctx, field)
			case "agents":
				return ec.fieldContext_Contact_agents(ctx, field)
			case "contracts":
				return ec.fieldContext_Contact_contracts(ctx, field)
			case "documents":
				return ec.fieldContext_Contact_documents(ctx, field)
			case "lead":
				return ec.fieldContext_Contact_lead(ctx, field)
			case "isDeleted":
				return ec.fieldContext_Contact_isDeleted(ctx, field)
			case "createdAt":
				return ec.fieldContext_Contact_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Contact_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Contact", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Meet_sellerPhone(ctx context.Context, field graphql.CollectedField, obj *crm_models.Meet) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Meet_sellerPhone(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SellerPhone, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Meet_sellerPhone(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Meet",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Meet_buyerAgent(ctx context.Context, field graphql.CollectedField, obj *crm_models.Meet) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Meet_buyerAgent(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Meet().BuyerAgent(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*crm_models.Employee)
	fc.Result = res
	return ec.marshalOEmployee2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐEmployee(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Meet_buyerAgent(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Meet",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Employee_id(ctx, field)
			case "name":
				return ec.fieldContext_Employee_name(ctx, field)
			case "surname":
				return ec.fieldContext_Employee_surname(ctx, field)
			case "patronymic":
				return ec.fieldContext_Employee_patronymic(ctx, field)
			case "birthday":
				return ec.fieldContext_Employee_birthday(ctx, field)
			case "email":
				return ec.fieldContext_Employee_email(ctx, field)
			case "phone":
				return ec.fieldContext_Employee_phone(ctx, field)
			case "position":
				return ec.fieldContext_Employee_position(ctx, field)
			case "department":
				return ec.fieldContext_Employee_department(ctx, field)
			case "group":
				return ec.fieldContext_Employee_group(ctx, field)
			case "role":
				return ec.fieldContext_Employee_role(ctx, field)
			case "internalInfo":
				return ec.fieldContext_Employee_internalInfo(ctx, field)
			case "shortDescription":
				return ec.fieldContext_Employee_shortDescription(ctx, field)
			case "description":
				return ec.fieldContext_Employee_description(ctx, field)
			case "isPublished":
				return ec.fieldContext_Employee_isPublished(ctx, field)
			case "isDeleted":
				return ec.fieldContext_Employee_isDeleted(ctx, field)
			case "avatar":
				return ec.fieldContext_Employee_avatar(ctx, field)
			case "publicImage":
				return ec.fieldContext_Employee_publicImage(ctx, field)
			case "createdAt":
				return ec.fieldContext_Employee_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Employee_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Employee", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Meet_buyerContact(ctx context.Context, field graphql.CollectedField, obj *crm_models.Meet) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Meet_buyerContact(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Meet().BuyerContact(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*crm_models.Contact)
	fc.Result = res
	return ec.marshalOContact2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐContact(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Meet_buyerContact(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Meet",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Contact_id(ctx, field)
			case "internalNumber":
				return ec.fieldContext_Contact_internalNumber(ctx, field)
			case "type":
				return ec.fieldContext_Contact_type(ctx, field)
			case "source":
				return ec.fieldContext_Contact_source(ctx, field)
			case "name":
				return ec.fieldContext_Contact_name(ctx, field)
			case "surname":
				return ec.fieldContext_Contact_surname(ctx, field)
			case "patronymic":
				return ec.fieldContext_Contact_patronymic(ctx, field)
			case "birthday":
				return ec.fieldContext_Contact_birthday(ctx, field)
			case "phone":
				return ec.fieldContext_Contact_phone(ctx, field)
			case "additionalPhones":
				return ec.fieldContext_Contact_additionalPhones(ctx, field)
			case "email":
				return ec.fieldContext_Contact_email(ctx, field)
			case "company":
				return ec.fieldContext_Contact_company(ctx, field)
			case "address":
				return ec.fieldContext_Contact_address(ctx, field)
			case "properties":
				return ec.fieldContext_Contact_properties(ctx, field)
			case "passportNumber":
				return ec.fieldContext_Contact_passportNumber(ctx, field)
			case "passportIssuedBy":
				return ec.fieldContext_Contact_passportIssuedBy(ctx, field)
			case "passportIssueDate":
				return ec.fieldContext_Contact_passportIssueDate(ctx, field)
			case "passportIssuerCode":
				return ec.fieldContext_Contact_passportIssuerCode(ctx, field)
			case "internalInfo":
				return ec.fieldContext_Contact_internalInfo(ctx, field)
			case "note":
				return ec.fieldContext_Contact_note(ctx, field)
			case "deals":
				return ec.fieldContext_Contact_deals(ctx, field)
			case "agents":
				return ec.fieldContext_Contact_agents(ctx, field)
			case "contracts":
				return ec.fieldContext_Contact_contracts(ctx, field)
			case "documents":
				return ec.fieldContext_Contact_documents(ctx, field)
			case "lead":
				return ec.fieldContext_Contact_lead(ctx, field)
			case "isDeleted":
				return ec.fieldContext_Contact_isDeleted(ctx, field)
			case "createdAt":
				return ec.fieldContext_Contact_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Contact_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Contact", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Meet_buyerPhone(ctx context.Context, field graphql.CollectedField, obj *crm_models.Meet) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Meet_buyerPhone(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BuyerPhone, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Meet_buyerPhone(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Meet",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Meet_buyerAgency(ctx context.Context, field graphql.CollectedField, obj *crm_models.Meet) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Meet_buyerAgency(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BuyerAgency, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Meet_buyerAgency(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Meet",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Meet_status(ctx context.Context, field graphql.CollectedField, obj *crm_models.Meet) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Meet_status(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*crm_models.MeetStatusEnum)
	fc.Result = res
	return ec.marshalOMeetStatusEnum2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐMeetStatusEnum(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Meet_status(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Meet",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type MeetStatusEnum does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Meet_cancelReason(ctx context.Context, field graphql.CollectedField, obj *crm_models.Meet) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Meet_cancelReason(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CancelReason, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*crm_models.MeetCancelReasonEnum)
	fc.Result = res
	return ec.marshalOMeetCancelReasonEnum2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐMeetCancelReasonEnum(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Meet_cancelReason(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Meet",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type MeetCancelReasonEnum does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Meet_cancelReasonCustom(ctx context.Context, field graphql.CollectedField, obj *crm_models.Meet) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Meet_cancelReasonCustom(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CancelReasonCustom, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Meet_cancelReasonCustom(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Meet",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Meet_useDealDeposit(ctx context.Context, field graphql.CollectedField, obj *crm_models.Meet) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Meet_useDealDeposit(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UseDealDeposit, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Meet_useDealDeposit(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Meet",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Meet_lawer(ctx context.Context, field graphql.CollectedField, obj *crm_models.Meet) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Meet_lawer(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Meet().Lawer(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*crm_models.Employee)
	fc.Result = res
	return ec.marshalOEmployee2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐEmployee(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Meet_lawer(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Meet",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Employee_id(ctx, field)
			case "name":
				return ec.fieldContext_Employee_name(ctx, field)
			case "surname":
				return ec.fieldContext_Employee_surname(ctx, field)
			case "patronymic":
				return ec.fieldContext_Employee_patronymic(ctx, field)
			case "birthday":
				return ec.fieldContext_Employee_birthday(ctx, field)
			case "email":
				return ec.fieldContext_Employee_email(ctx, field)
			case "phone":
				return ec.fieldContext_Employee_phone(ctx, field)
			case "position":
				return ec.fieldContext_Employee_position(ctx, field)
			case "department":
				return ec.fieldContext_Employee_department(ctx, field)
			case "group":
				return ec.fieldContext_Employee_group(ctx, field)
			case "role":
				return ec.fieldContext_Employee_role(ctx, field)
			case "internalInfo":
				return ec.fieldContext_Employee_internalInfo(ctx, field)
			case "shortDescription":
				return ec.fieldContext_Employee_shortDescription(ctx, field)
			case "description":
				return ec.fieldContext_Employee_description(ctx, field)
			case "isPublished":
				return ec.fieldContext_Employee_isPublished(ctx, field)
			case "isDeleted":
				return ec.fieldContext_Employee_isDeleted(ctx, field)
			case "avatar":
				return ec.fieldContext_Employee_avatar(ctx, field)
			case "publicImage":
				return ec.fieldContext_Employee_publicImage(ctx, field)
			case "createdAt":
				return ec.fieldContext_Employee_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Employee_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Employee", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Meet_accountant(ctx context.Context, field graphql.CollectedField, obj *crm_models.Meet) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Meet_accountant(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Meet().Accountant(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*crm_models.Employee)
	fc.Result = res
	return ec.marshalOEmployee2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐEmployee(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Meet_accountant(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Meet",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Employee_id(ctx, field)
			case "name":
				return ec.fieldContext_Employee_name(ctx, field)
			case "surname":
				return ec.fieldContext_Employee_surname(ctx, field)
			case "patronymic":
				return ec.fieldContext_Employee_patronymic(ctx, field)
			case "birthday":
				return ec.fieldContext_Employee_birthday(ctx, field)
			case "email":
				return ec.fieldContext_Employee_email(ctx, field)
			case "phone":
				return ec.fieldContext_Employee_phone(ctx, field)
			case "position":
				return ec.fieldContext_Employee_position(ctx, field)
			case "department":
				return ec.fieldContext_Employee_department(ctx, field)
			case "group":
				return ec.fieldContext_Employee_group(ctx, field)
			case "role":
				return ec.fieldContext_Employee_role(ctx, field)
			case "internalInfo":
				return ec.fieldContext_Employee_internalInfo(ctx, field)
			case "shortDescription":
				return ec.fieldContext_Employee_shortDescription(ctx, field)
			case "description":
				return ec.fieldContext_Employee_description(ctx, field)
			case "isPublished":
				return ec.fieldContext_Employee_isPublished(ctx, field)
			case "isDeleted":
				return ec.fieldContext_Employee_isDeleted(ctx, field)
			case "avatar":
				return ec.fieldContext_Employee_avatar(ctx, field)
			case "publicImage":
				return ec.fieldContext_Employee_publicImage(ctx, field)
			case "createdAt":
				return ec.fieldContext_Employee_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Employee_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Employee", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Meet_mortgageBroker(ctx context.Context, field graphql.CollectedField, obj *crm_models.Meet) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Meet_mortgageBroker(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Meet().MortgageBroker(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*crm_models.Employee)
	fc.Result = res
	return ec.marshalOEmployee2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐEmployee(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Meet_mortgageBroker(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Meet",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Employee_id(ctx, field)
			case "name":
				return ec.fieldContext_Employee_name(ctx, field)
			case "surname":
				return ec.fieldContext_Employee_surname(ctx, field)
			case "patronymic":
				return ec.fieldContext_Employee_patronymic(ctx, field)
			case "birthday":
				return ec.fieldContext_Employee_birthday(ctx, field)
			case "email":
				return ec.fieldContext_Employee_email(ctx, field)
			case "phone":
				return ec.fieldContext_Employee_phone(ctx, field)
			case "position":
				return ec.fieldContext_Employee_position(ctx, field)
			case "department":
				return ec.fieldContext_Employee_department(ctx, field)
			case "group":
				return ec.fieldContext_Employee_group(ctx, field)
			case "role":
				return ec.fieldContext_Employee_role(ctx, field)
			case "internalInfo":
				return ec.fieldContext_Employee_internalInfo(ctx, field)
			case "shortDescription":
				return ec.fieldContext_Employee_shortDescription(ctx, field)
			case "description":
				return ec.fieldContext_Employee_description(ctx, field)
			case "isPublished":
				return ec.fieldContext_Employee_isPublished(ctx, field)
			case "isDeleted":
				return ec.fieldContext_Employee_isDeleted(ctx, field)
			case "avatar":
				return ec.fieldContext_Employee_avatar(ctx, field)
			case "publicImage":
				return ec.fieldContext_Employee_publicImage(ctx, field)
			case "createdAt":
				return ec.fieldContext_Employee_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Employee_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Employee", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Meet_useMortgage(ctx context.Context, field graphql.CollectedField, obj *crm_models.Meet) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Meet_useMortgage(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UseMortgage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Meet_useMortgage(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Meet",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Meet_isDeleted(ctx context.Context, field graphql.CollectedField, obj *crm_models.Meet) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Meet_isDeleted(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeleted, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Meet_isDeleted(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Meet",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Meet_createdAt(ctx context.Context, field graphql.CollectedField, obj *crm_models.Meet) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Meet_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Meet_createdAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Meet",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Meet_updatedAt(ctx context.Context, field graphql.CollectedField, obj *crm_models.Meet) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Meet_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Meet_updatedAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Meet",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MeetConnection_totalCount(ctx context.Context, field graphql.CollectedField, obj *crm_models.MeetConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MeetConnection_totalCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MeetConnection_totalCount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MeetConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MeetConnection_edges(ctx context.Context, field graphql.CollectedField, obj *crm_models.MeetConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MeetConnection_edges(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*crm_models.MeetEdge)
	fc.Result = res
	return ec.marshalNMeetEdge2ᚕᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐMeetEdgeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MeetConnection_edges(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MeetConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "node":
				return ec.fieldContext_MeetEdge_node(ctx, field)
			case "cursor":
				return ec.fieldContext_MeetEdge_cursor(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MeetEdge", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _MeetConnection_nodes(ctx context.Context, field graphql.CollectedField, obj *crm_models.MeetConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MeetConnection_nodes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Nodes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*crm_models.Meet)
	fc.Result = res
	return ec.marshalNMeet2ᚕᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐMeetᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MeetConnection_nodes(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MeetConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Meet_id(ctx, field)
			case "internalNumber":
				return ec.fieldContext_Meet_internalNumber(ctx, field)
			case "type":
				return ec.fieldContext_Meet_type(ctx, field)
			case "dealType":
				return ec.fieldContext_Meet_dealType(ctx, field)
			case "contactType":
				return ec.fieldContext_Meet_contactType(ctx, field)
			case "dateTime":
				return ec.fieldContext_Meet_dateTime(ctx, field)
			case "property":
				return ec.fieldContext_Meet_property(ctx, field)
			case "address":
				return ec.fieldContext_Meet_address(ctx, field)
			case "comment":
				return ec.fieldContext_Meet_comment(ctx, field)
			case "isOnline":
				return ec.fieldContext_Meet_isOnline(ctx, field)
			case "sellerAgent":
				return ec.fieldContext_Meet_sellerAgent(ctx, field)
			case "sellerContact":
				return ec.fieldContext_Meet_sellerContact(ctx, field)
			case "sellerPhone":
				return ec.fieldContext_Meet_sellerPhone(ctx, field)
			case "buyerAgent":
				return ec.fieldContext_Meet_buyerAgent(ctx, field)
			case "buyerContact":
				return ec.fieldContext_Meet_buyerContact(ctx, field)
			case "buyerPhone":
				return ec.fieldContext_Meet_buyerPhone(ctx, field)
			case "buyerAgency":
				return ec.fieldContext_Meet_buyerAgency(ctx, field)
			case "status":
				return ec.fieldContext_Meet_status(ctx, field)
			case "cancelReason":
				return ec.fieldContext_Meet_cancelReason(ctx, field)
			case "cancelReasonCustom":
				return ec.fieldContext_Meet_cancelReasonCustom(ctx, field)
			case "useDealDeposit":
				return ec.fieldContext_Meet_useDealDeposit(ctx, field)
			case "lawer":
				return ec.fieldContext_Meet_lawer(ctx, field)
			case "accountant":
				return ec.fieldContext_Meet_accountant(ctx, field)
			case "mortgageBroker":
				return ec.fieldContext_Meet_mortgageBroker(ctx, field)
			case "useMortgage":
				return ec.fieldContext_Meet_useMortgage(ctx, field)
			case "isDeleted":
				return ec.fieldContext_Meet_isDeleted(ctx, field)
			case "createdAt":
				return ec.fieldContext_Meet_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Meet_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Meet", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _MeetConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *crm_models.MeetConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MeetConnection_pageInfo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*crm_models.PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MeetConnection_pageInfo(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MeetConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "startCursor":
				return ec.fieldContext_PageInfo_startCursor(ctx, field)
			case "endCursor":
				return ec.fieldContext_PageInfo_endCursor(ctx, field)
			case "hasNextPage":
				return ec.fieldContext_PageInfo_hasNextPage(ctx, field)
			case "hasPreviousPage":
				return ec.fieldContext_PageInfo_hasPreviousPage(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PageInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _MeetEdge_node(ctx context.Context, field graphql.CollectedField, obj *crm_models.MeetEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MeetEdge_node(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*crm_models.Meet)
	fc.Result = res
	return ec.marshalNMeet2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐMeet(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MeetEdge_node(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MeetEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Meet_id(ctx, field)
			case "internalNumber":
				return ec.fieldContext_Meet_internalNumber(ctx, field)
			case "type":
				return ec.fieldContext_Meet_type(ctx, field)
			case "dealType":
				return ec.fieldContext_Meet_dealType(ctx, field)
			case "contactType":
				return ec.fieldContext_Meet_contactType(ctx, field)
			case "dateTime":
				return ec.fieldContext_Meet_dateTime(ctx, field)
			case "property":
				return ec.fieldContext_Meet_property(ctx, field)
			case "address":
				return ec.fieldContext_Meet_address(ctx, field)
			case "comment":
				return ec.fieldContext_Meet_comment(ctx, field)
			case "isOnline":
				return ec.fieldContext_Meet_isOnline(ctx, field)
			case "sellerAgent":
				return ec.fieldContext_Meet_sellerAgent(ctx, field)
			case "sellerContact":
				return ec.fieldContext_Meet_sellerContact(ctx, field)
			case "sellerPhone":
				return ec.fieldContext_Meet_sellerPhone(ctx, field)
			case "buyerAgent":
				return ec.fieldContext_Meet_buyerAgent(ctx, field)
			case "buyerContact":
				return ec.fieldContext_Meet_buyerContact(ctx, field)
			case "buyerPhone":
				return ec.fieldContext_Meet_buyerPhone(ctx, field)
			case "buyerAgency":
				return ec.fieldContext_Meet_buyerAgency(ctx, field)
			case "status":
				return ec.fieldContext_Meet_status(ctx, field)
			case "cancelReason":
				return ec.fieldContext_Meet_cancelReason(ctx, field)
			case "cancelReasonCustom":
				return ec.fieldContext_Meet_cancelReasonCustom(ctx, field)
			case "useDealDeposit":
				return ec.fieldContext_Meet_useDealDeposit(ctx, field)
			case "lawer":
				return ec.fieldContext_Meet_lawer(ctx, field)
			case "accountant":
				return ec.fieldContext_Meet_accountant(ctx, field)
			case "mortgageBroker":
				return ec.fieldContext_Meet_mortgageBroker(ctx, field)
			case "useMortgage":
				return ec.fieldContext_Meet_useMortgage(ctx, field)
			case "isDeleted":
				return ec.fieldContext_Meet_isDeleted(ctx, field)
			case "createdAt":
				return ec.fieldContext_Meet_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Meet_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Meet", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _MeetEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *crm_models.MeetEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MeetEdge_cursor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNCursor2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MeetEdge_cursor(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MeetEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Cursor does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MortgageRequest_id(ctx context.Context, field graphql.CollectedField, obj *crm_models.MortgageRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MortgageRequest_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MortgageRequest_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MortgageRequest",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MortgageRequest_internalNumber(ctx context.Context, field graphql.CollectedField, obj *crm_models.MortgageRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MortgageRequest_internalNumber(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InternalNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MortgageRequest_internalNumber(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MortgageRequest",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MortgageRequest_status(ctx context.Context, field graphql.CollectedField, obj *crm_models.MortgageRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MortgageRequest_status(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*crm_models.MortgageRequestStatusEnum)
	fc.Result = res
	return ec.marshalOMortgageRequestStatusEnum2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐMortgageRequestStatusEnum(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MortgageRequest_status(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MortgageRequest",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type MortgageRequestStatusEnum does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MortgageRequest_contact(ctx context.Context, field graphql.CollectedField, obj *crm_models.MortgageRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MortgageRequest_contact(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.MortgageRequest().Contact(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*crm_models.Contact)
	fc.Result = res
	return ec.marshalOContact2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐContact(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MortgageRequest_contact(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MortgageRequest",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Contact_id(ctx, field)
			case "internalNumber":
				return ec.fieldContext_Contact_internalNumber(ctx, field)
			case "type":
				return ec.fieldContext_Contact_type(ctx, field)
			case "source":
				return ec.fieldContext_Contact_source(ctx, field)
			case "name":
				return ec.fieldContext_Contact_name(ctx, field)
			case "surname":
				return ec.fieldContext_Contact_surname(ctx, field)
			case "patronymic":
				return ec.fieldContext_Contact_patronymic(ctx, field)
			case "birthday":
				return ec.fieldContext_Contact_birthday(ctx, field)
			case "phone":
				return ec.fieldContext_Contact_phone(ctx, field)
			case "additionalPhones":
				return ec.fieldContext_Contact_additionalPhones(ctx, field)
			case "email":
				return ec.fieldContext_Contact_email(ctx, field)
			case "company":
				return ec.fieldContext_Contact_company(ctx, field)
			case "address":
				return ec.fieldContext_Contact_address(ctx, field)
			case "properties":
				return ec.fieldContext_Contact_properties(ctx, field)
			case "passportNumber":
				return ec.fieldContext_Contact_passportNumber(ctx, field)
			case "passportIssuedBy":
				return ec.fieldContext_Contact_passportIssuedBy(ctx, field)
			case "passportIssueDate":
				return ec.fieldContext_Contact_passportIssueDate(ctx, field)
			case "passportIssuerCode":
				return ec.fieldContext_Contact_passportIssuerCode(ctx, field)
			case "internalInfo":
				return ec.fieldContext_Contact_internalInfo(ctx, field)
			case "note":
				return ec.fieldContext_Contact_note(ctx, field)
			case "deals":
				return ec.fieldContext_Contact_deals(ctx, field)
			case "agents":
				return ec.fieldContext_Contact_agents(ctx, field)
			case "contracts":
				return ec.fieldContext_Contact_contracts(ctx, field)
			case "documents":
				return ec.fieldContext_Contact_documents(ctx, field)
			case "lead":
				return ec.fieldContext_Contact_lead(ctx, field)
			case "isDeleted":
				return ec.fieldContext_Contact_isDeleted(ctx, field)
			case "createdAt":
				return ec.fieldContext_Contact_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Contact_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Contact", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _MortgageRequest_banks(ctx context.Context, field graphql.CollectedField, obj *crm_models.MortgageRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MortgageRequest_banks(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.MortgageRequest().Banks(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*crm_models.Bank)
	fc.Result = res
	return ec.marshalOBank2ᚕᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐBankᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MortgageRequest_banks(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MortgageRequest",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Bank_id(ctx, field)
			case "title":
				return ec.fieldContext_Bank_title(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Bank", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _MortgageRequest_mortgageBroker(ctx context.Context, field graphql.CollectedField, obj *crm_models.MortgageRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MortgageRequest_mortgageBroker(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.MortgageRequest().MortgageBroker(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*crm_models.Employee)
	fc.Result = res
	return ec.marshalOEmployee2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐEmployee(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MortgageRequest_mortgageBroker(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MortgageRequest",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Employee_id(ctx, field)
			case "name":
				return ec.fieldContext_Employee_name(ctx, field)
			case "surname":
				return ec.fieldContext_Employee_surname(ctx, field)
			case "patronymic":
				return ec.fieldContext_Employee_patronymic(ctx, field)
			case "birthday":
				return ec.fieldContext_Employee_birthday(ctx, field)
			case "email":
				return ec.fieldContext_Employee_email(ctx, field)
			case "phone":
				return ec.fieldContext_Employee_phone(ctx, field)
			case "position":
				return ec.fieldContext_Employee_position(ctx, field)
			case "department":
				return ec.fieldContext_Employee_department(ctx, field)
			case "group":
				return ec.fieldContext_Employee_group(ctx, field)
			case "role":
				return ec.fieldContext_Employee_role(ctx, field)
			case "internalInfo":
				return ec.fieldContext_Employee_internalInfo(ctx, field)
			case "shortDescription":
				return ec.fieldContext_Employee_shortDescription(ctx, field)
			case "description":
				return ec.fieldContext_Employee_description(ctx, field)
			case "isPublished":
				return ec.fieldContext_Employee_isPublished(ctx, field)
			case "isDeleted":
				return ec.fieldContext_Employee_isDeleted(ctx, field)
			case "avatar":
				return ec.fieldContext_Employee_avatar(ctx, field)
			case "publicImage":
				return ec.fieldContext_Employee_publicImage(ctx, field)
			case "createdAt":
				return ec.fieldContext_Employee_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Employee_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Employee", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _MortgageRequest_agent(ctx context.Context, field graphql.CollectedField, obj *crm_models.MortgageRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MortgageRequest_agent(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.MortgageRequest().Agent(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*crm_models.Employee)
	fc.Result = res
	return ec.marshalOEmployee2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐEmployee(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MortgageRequest_agent(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MortgageRequest",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Employee_id(ctx, field)
			case "name":
				return ec.fieldContext_Employee_name(ctx, field)
			case "surname":
				return ec.fieldContext_Employee_surname(ctx, field)
			case "patronymic":
				return ec.fieldContext_Employee_patronymic(ctx, field)
			case "birthday":
				return ec.fieldContext_Employee_birthday(ctx, field)
			case "email":
				return ec.fieldContext_Employee_email(ctx, field)
			case "phone":
				return ec.fieldContext_Employee_phone(ctx, field)
			case "position":
				return ec.fieldContext_Employee_position(ctx, field)
			case "department":
				return ec.fieldContext_Employee_department(ctx, field)
			case "group":
				return ec.fieldContext_Employee_group(ctx, field)
			case "role":
				return ec.fieldContext_Employee_role(ctx, field)
			case "internalInfo":
				return ec.fieldContext_Employee_internalInfo(ctx, field)
			case "shortDescription":
				return ec.fieldContext_Employee_shortDescription(ctx, field)
			case "description":
				return ec.fieldContext_Employee_description(ctx, field)
			case "isPublished":
				return ec.fieldContext_Employee_isPublished(ctx, field)
			case "isDeleted":
				return ec.fieldContext_Employee_isDeleted(ctx, field)
			case "avatar":
				return ec.fieldContext_Employee_avatar(ctx, field)
			case "publicImage":
				return ec.fieldContext_Employee_publicImage(ctx, field)
			case "createdAt":
				return ec.fieldContext_Employee_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Employee_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Employee", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _MortgageRequest_deal(ctx context.Context, field graphql.CollectedField, obj *crm_models.MortgageRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MortgageRequest_deal(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.MortgageRequest().Deal(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*crm_models.Deal)
	fc.Result = res
	return ec.marshalODeal2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐDeal(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MortgageRequest_deal(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MortgageRequest",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Deal_id(ctx, field)
			case "internalNumber":
				return ec.fieldContext_Deal_internalNumber(ctx, field)
			case "type":
				return ec.fieldContext_Deal_type(ctx, field)
			case "stage":
				return ec.fieldContext_Deal_stage(ctx, field)
			case "sellerAgent":
				return ec.fieldContext_Deal_sellerAgent(ctx, field)
			case "sellerContact":
				return ec.fieldContext_Deal_sellerContact(ctx, field)
			case "sellerPhone":
				return ec.fieldContext_Deal_sellerPhone(ctx, field)
			case "sellerDocuments":
				return ec.fieldContext_Deal_sellerDocuments(ctx, field)
			case "buyerAgent":
				return ec.fieldContext_Deal_buyerAgent(ctx, field)
			case "buyerContact":
				return ec.fieldContext_Deal_buyerContact(ctx, field)
			case "buyerPhone":
				return ec.fieldContext_Deal_buyerPhone(ctx, field)
			case "buyerDocuments":
				return ec.fieldContext_Deal_buyerDocuments(ctx, field)
			case "property":
				return ec.fieldContext_Deal_property(ctx, field)
			case "address":
				return ec.fieldContext_Deal_address(ctx, field)
			case "mortgageBroker":
				return ec.fieldContext_Deal_mortgageBroker(ctx, field)
			case "mortgageRequest":
				return ec.fieldContext_Deal_mortgageRequest(ctx, field)
			case "mortgageDocuments":
				return ec.fieldContext_Deal_mortgageDocuments(ctx, field)
			case "lawer":
				return ec.fieldContext_Deal_lawer(ctx, field)
			case "lawerDocuments":
				return ec.fieldContext_Deal_lawerDocuments(ctx, field)
			case "accountant":
				return ec.fieldContext_Deal_accountant(ctx, field)
			case "accountantDocuments":
				return ec.fieldContext_Deal_accountantDocuments(ctx, field)
			case "depositDate":
				return ec.fieldContext_Deal_depositDate(ctx, field)
			case "dealDate":
				return ec.fieldContext_Deal_dealDate(ctx, field)
			case "finishedAt":
				return ec.fieldContext_Deal_finishedAt(ctx, field)
			case "commissionAmount":
				return ec.fieldContext_Deal_commissionAmount(ctx, field)
			case "internalComment":
				return ec.fieldContext_Deal_internalComment(ctx, field)
			case "isDeleted":
				return ec.fieldContext_Deal_isDeleted(ctx, field)
			case "createdAt":
				return ec.fieldContext_Deal_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Deal_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Deal", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _MortgageRequest_property(ctx context.Context, field graphql.CollectedField, obj *crm_models.MortgageRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MortgageRequest_property(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.MortgageRequest().Property(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*crm_models.Property)
	fc.Result = res
	return ec.marshalOProperty2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐProperty(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MortgageRequest_property(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MortgageRequest",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Property_id(ctx, field)
			case "internalID":
				return ec.fieldContext_Property_internalID(ctx, field)
			case "deal":
				return ec.fieldContext_Property_deal(ctx, field)
			case "type":
				return ec.fieldContext_Property_type(ctx, field)
			case "subType":
				return ec.fieldContext_Property_subType(ctx, field)
			case "commercialUsage":
				return ec.fieldContext_Property_commercialUsage(ctx, field)
			case "fromDeveloper":
				return ec.fieldContext_Property_fromDeveloper(ctx, field)
			case "inComplex":
				return ec.fieldContext_Property_inComplex(ctx, field)
			case "complex":
				return ec.fieldContext_Property_complex(ctx, field)
			case "complexHouse":
				return ec.fieldContext_Property_complexHouse(ctx, field)
			case "inVillage":
				return ec.fieldContext_Property_inVillage(ctx, field)
			case "village":
				return ec.fieldContext_Property_village(ctx, field)
			case "isHot":
				return ec.fieldContext_Property_isHot(ctx, field)
			case "title":
				return ec.fieldContext_Property_title(ctx, field)
			case "description":
				return ec.fieldContext_Property_description(ctx, field)
			case "address":
				return ec.fieldContext_Property_address(ctx, field)
			case "lat":
				return ec.fieldContext_Property_lat(ctx, field)
			case "lon":
				return ec.fieldContext_Property_lon(ctx, field)
			case "cadastrNumber":
				return ec.fieldContext_Property_cadastrNumber(ctx, field)
			case "seoText":
				return ec.fieldContext_Property_seoText(ctx, field)
			case "youtubeLink":
				return ec.fieldContext_Property_youtubeLink(ctx, field)
			case "tourLink":
				return ec.fieldContext_Property_tourLink(ctx, field)
			case "documents":
				return ec.fieldContext_Property_documents(ctx, field)
			case "images":
				return ec.fieldContext_Property_images(ctx, field)
			case "isDeleted":
				return ec.fieldContext_Property_isDeleted(ctx, field)
			case "isEditable":
				return ec.fieldContext_Property_isEditable(ctx, field)
			case "refreshDate":
				return ec.fieldContext_Property_refreshDate(ctx, field)
			case "status":
				return ec.fieldContext_Property_status(ctx, field)
			case "price":
				return ec.fieldContext_Property_price(ctx, field)
			case "pricePerMeter":
				return ec.fieldContext_Property_pricePerMeter(ctx, field)
			case "pricePerAr":
				return ec.fieldContext_Property_pricePerAr(ctx, field)
			case "priceHistory":
				return ec.fieldContext_Property_priceHistory(ctx, field)
			case "isReady":
				return ec.fieldContext_Property_isReady(ctx, field)
			case "readinessYear":
				return ec.fieldContext_Property_readinessYear(ctx, field)
			case "readinessQuarter":
				return ec.fieldContext_Property_readinessQuarter(ctx, field)
			case "inCity":
				return ec.fieldContext_Property_inCity(ctx, field)
			case "cityDistance":
				return ec.fieldContext_Property_cityDistance(ctx, field)
			case "region":
				return ec.fieldContext_Property_region(ctx, field)
			case "subRegion":
				return ec.fieldContext_Property_subRegion(ctx, field)
			case "source":
				return ec.fieldContext_Property_source(ctx, field)
			case "rooms":
				return ec.fieldContext_Property_rooms(ctx, field)
			case "area":
				return ec.fieldContext_Property_area(ctx, field)
			case "landArea":
				return ec.fieldContext_Property_landArea(ctx, field)
			case "livingArea":
				return ec.fieldContext_Property_livingArea(ctx, field)
			case "kitchenArea":
				return ec.fieldContext_Property_kitchenArea(ctx, field)
			case "toiletType":
				return ec.fieldContext_Property_toiletType(ctx, field)
			case "rehabType":
				return ec.fieldContext_Property_rehabType(ctx, field)
			case "floor":
				return ec.fieldContext_Property_floor(ctx, field)
			case "floors":
				return ec.fieldContext_Property_floors(ctx, field)
			case "ceilingHeight":
				return ec.fieldContext_Property_ceilingHeight(ctx, field)
			case "internalInfo":
				return ec.fieldContext_Property_internalInfo(ctx, field)
			case "comissionPercent":
				return ec.fieldContext_Property_comissionPercent(ctx, field)
			case "comissionAmount":
				return ec.fieldContext_Property_comissionAmount(ctx, field)
			case "createdAt":
				return ec.fieldContext_Property_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Property_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Property", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _MortgageRequest_amount(ctx context.Context, field graphql.CollectedField, obj *crm_models.MortgageRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MortgageRequest_amount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Amount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MortgageRequest_amount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MortgageRequest",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MortgageRequest_firstDeposit(ctx context.Context, field graphql.CollectedField, obj *crm_models.MortgageRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MortgageRequest_firstDeposit(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FirstDeposit, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MortgageRequest_firstDeposit(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MortgageRequest",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MortgageRequest_period(ctx context.Context, field graphql.CollectedField, obj *crm_models.MortgageRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MortgageRequest_period(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Period, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MortgageRequest_period(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MortgageRequest",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MortgageRequest_comment(ctx context.Context, field graphql.CollectedField, obj *crm_models.MortgageRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MortgageRequest_comment(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Comment, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MortgageRequest_comment(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MortgageRequest",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MortgageRequest_contracts(ctx context.Context, field graphql.CollectedField, obj *crm_models.MortgageRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MortgageRequest_contracts(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.MortgageRequest().Contracts(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*crm_models.Document)
	fc.Result = res
	return ec.marshalODocument2ᚕᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐDocumentᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MortgageRequest_contracts(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MortgageRequest",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Document_id(ctx, field)
			case "url":
				return ec.fieldContext_Document_url(ctx, field)
			case "path":
				return ec.fieldContext_Document_path(ctx, field)
			case "title":
				return ec.fieldContext_Document_title(ctx, field)
			case "fileName":
				return ec.fieldContext_Document_fileName(ctx, field)
			case "fileType":
				return ec.fieldContext_Document_fileType(ctx, field)
			case "createdAt":
				return ec.fieldContext_Document_createdAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Document", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _MortgageRequest_documents(ctx context.Context, field graphql.CollectedField, obj *crm_models.MortgageRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MortgageRequest_documents(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.MortgageRequest().Documents(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*crm_models.Document)
	fc.Result = res
	return ec.marshalODocument2ᚕᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐDocumentᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MortgageRequest_documents(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MortgageRequest",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Document_id(ctx, field)
			case "url":
				return ec.fieldContext_Document_url(ctx, field)
			case "path":
				return ec.fieldContext_Document_path(ctx, field)
			case "title":
				return ec.fieldContext_Document_title(ctx, field)
			case "fileName":
				return ec.fieldContext_Document_fileName(ctx, field)
			case "fileType":
				return ec.fieldContext_Document_fileType(ctx, field)
			case "createdAt":
				return ec.fieldContext_Document_createdAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Document", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _MortgageRequest_sendDate(ctx context.Context, field graphql.CollectedField, obj *crm_models.MortgageRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MortgageRequest_sendDate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SendDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalOTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MortgageRequest_sendDate(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MortgageRequest",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MortgageRequest_responseDate(ctx context.Context, field graphql.CollectedField, obj *crm_models.MortgageRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MortgageRequest_responseDate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ResponseDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalOTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MortgageRequest_responseDate(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MortgageRequest",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MortgageRequest_validTillDate(ctx context.Context, field graphql.CollectedField, obj *crm_models.MortgageRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MortgageRequest_validTillDate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ValidTillDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalOTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MortgageRequest_validTillDate(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MortgageRequest",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MortgageRequest_percentage(ctx context.Context, field graphql.CollectedField, obj *crm_models.MortgageRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MortgageRequest_percentage(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Percentage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MortgageRequest_percentage(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MortgageRequest",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MortgageRequest_isDeleted(ctx context.Context, field graphql.CollectedField, obj *crm_models.MortgageRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MortgageRequest_isDeleted(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeleted, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MortgageRequest_isDeleted(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MortgageRequest",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MortgageRequest_createdAt(ctx context.Context, field graphql.CollectedField, obj *crm_models.MortgageRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MortgageRequest_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MortgageRequest_createdAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MortgageRequest",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MortgageRequest_updatedAt(ctx context.Context, field graphql.CollectedField, obj *crm_models.MortgageRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MortgageRequest_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MortgageRequest_updatedAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MortgageRequest",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MortgageRequestConnection_totalCount(ctx context.Context, field graphql.CollectedField, obj *crm_models.MortgageRequestConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MortgageRequestConnection_totalCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MortgageRequestConnection_totalCount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MortgageRequestConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MortgageRequestConnection_edges(ctx context.Context, field graphql.CollectedField, obj *crm_models.MortgageRequestConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MortgageRequestConnection_edges(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*crm_models.MortgageRequestEdge)
	fc.Result = res
	return ec.marshalNMortgageRequestEdge2ᚕᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐMortgageRequestEdgeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MortgageRequestConnection_edges(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MortgageRequestConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "node":
				return ec.fieldContext_MortgageRequestEdge_node(ctx, field)
			case "cursor":
				return ec.fieldContext_MortgageRequestEdge_cursor(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MortgageRequestEdge", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _MortgageRequestConnection_nodes(ctx context.Context, field graphql.CollectedField, obj *crm_models.MortgageRequestConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MortgageRequestConnection_nodes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Nodes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*crm_models.MortgageRequest)
	fc.Result = res
	return ec.marshalNMortgageRequest2ᚕᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐMortgageRequestᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MortgageRequestConnection_nodes(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MortgageRequestConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_MortgageRequest_id(ctx, field)
			case "internalNumber":
				return ec.fieldContext_MortgageRequest_internalNumber(ctx, field)
			case "status":
				return ec.fieldContext_MortgageRequest_status(ctx, field)
			case "contact":
				return ec.fieldContext_MortgageRequest_contact(ctx, field)
			case "banks":
				return ec.fieldContext_MortgageRequest_banks(ctx, field)
			case "mortgageBroker":
				return ec.fieldContext_MortgageRequest_mortgageBroker(ctx, field)
			case "agent":
				return ec.fieldContext_MortgageRequest_agent(ctx, field)
			case "deal":
				return ec.fieldContext_MortgageRequest_deal(ctx, field)
			case "property":
				return ec.fieldContext_MortgageRequest_property(ctx, field)
			case "amount":
				return ec.fieldContext_MortgageRequest_amount(ctx, field)
			case "firstDeposit":
				return ec.fieldContext_MortgageRequest_firstDeposit(ctx, field)
			case "period":
				return ec.fieldContext_MortgageRequest_period(ctx, field)
			case "comment":
				return ec.fieldContext_MortgageRequest_comment(ctx, field)
			case "contracts":
				return ec.fieldContext_MortgageRequest_contracts(ctx, field)
			case "documents":
				return ec.fieldContext_MortgageRequest_documents(ctx, field)
			case "sendDate":
				return ec.fieldContext_MortgageRequest_sendDate(ctx, field)
			case "responseDate":
				return ec.fieldContext_MortgageRequest_responseDate(ctx, field)
			case "validTillDate":
				return ec.fieldContext_MortgageRequest_validTillDate(ctx, field)
			case "percentage":
				return ec.fieldContext_MortgageRequest_percentage(ctx, field)
			case "isDeleted":
				return ec.fieldContext_MortgageRequest_isDeleted(ctx, field)
			case "createdAt":
				return ec.fieldContext_MortgageRequest_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_MortgageRequest_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MortgageRequest", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _MortgageRequestConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *crm_models.MortgageRequestConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MortgageRequestConnection_pageInfo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*crm_models.PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MortgageRequestConnection_pageInfo(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MortgageRequestConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "startCursor":
				return ec.fieldContext_PageInfo_startCursor(ctx, field)
			case "endCursor":
				return ec.fieldContext_PageInfo_endCursor(ctx, field)
			case "hasNextPage":
				return ec.fieldContext_PageInfo_hasNextPage(ctx, field)
			case "hasPreviousPage":
				return ec.fieldContext_PageInfo_hasPreviousPage(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PageInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _MortgageRequestEdge_node(ctx context.Context, field graphql.CollectedField, obj *crm_models.MortgageRequestEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MortgageRequestEdge_node(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*crm_models.MortgageRequest)
	fc.Result = res
	return ec.marshalNMortgageRequest2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐMortgageRequest(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MortgageRequestEdge_node(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MortgageRequestEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_MortgageRequest_id(ctx, field)
			case "internalNumber":
				return ec.fieldContext_MortgageRequest_internalNumber(ctx, field)
			case "status":
				return ec.fieldContext_MortgageRequest_status(ctx, field)
			case "contact":
				return ec.fieldContext_MortgageRequest_contact(ctx, field)
			case "banks":
				return ec.fieldContext_MortgageRequest_banks(ctx, field)
			case "mortgageBroker":
				return ec.fieldContext_MortgageRequest_mortgageBroker(ctx, field)
			case "agent":
				return ec.fieldContext_MortgageRequest_agent(ctx, field)
			case "deal":
				return ec.fieldContext_MortgageRequest_deal(ctx, field)
			case "property":
				return ec.fieldContext_MortgageRequest_property(ctx, field)
			case "amount":
				return ec.fieldContext_MortgageRequest_amount(ctx, field)
			case "firstDeposit":
				return ec.fieldContext_MortgageRequest_firstDeposit(ctx, field)
			case "period":
				return ec.fieldContext_MortgageRequest_period(ctx, field)
			case "comment":
				return ec.fieldContext_MortgageRequest_comment(ctx, field)
			case "contracts":
				return ec.fieldContext_MortgageRequest_contracts(ctx, field)
			case "documents":
				return ec.fieldContext_MortgageRequest_documents(ctx, field)
			case "sendDate":
				return ec.fieldContext_MortgageRequest_sendDate(ctx, field)
			case "responseDate":
				return ec.fieldContext_MortgageRequest_responseDate(ctx, field)
			case "validTillDate":
				return ec.fieldContext_MortgageRequest_validTillDate(ctx, field)
			case "percentage":
				return ec.fieldContext_MortgageRequest_percentage(ctx, field)
			case "isDeleted":
				return ec.fieldContext_MortgageRequest_isDeleted(ctx, field)
			case "createdAt":
				return ec.fieldContext_MortgageRequest_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_MortgageRequest_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MortgageRequest", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _MortgageRequestEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *crm_models.MortgageRequestEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MortgageRequestEdge_cursor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNCursor2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MortgageRequestEdge_cursor(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MortgageRequestEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Cursor does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_saveArticleGroup(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_saveArticleGroup(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().SaveArticleGroup(rctx, fc.Args["input"].(crm_models.ArticleGroupInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			permission, err := ec.unmarshalNString2string(ctx, "CONTENT_SAVE_ARTICLE_GROUP")
			if err != nil {
				return nil, err
			}
			if ec.directives.HasPermission == nil {
				return nil, errors.New("directive hasPermission is not implemented")
			}
			return ec.directives.HasPermission(ctx, nil, directive0, permission)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(bool); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be bool`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_saveArticleGroup(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_saveArticleGroup_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteArticleGroup(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deleteArticleGroup(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().DeleteArticleGroup(rctx, fc.Args["id"].(string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			permission, err := ec.unmarshalNString2string(ctx, "CONTENT_DELETE_ARTICLE_GROUP")
			if err != nil {
				return nil, err
			}
			if ec.directives.HasPermission == nil {
				return nil, errors.New("directive hasPermission is not implemented")
			}
			return ec.directives.HasPermission(ctx, nil, directive0, permission)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(bool); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be bool`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deleteArticleGroup(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteArticleGroup_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_saveArticle(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_saveArticle(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().SaveArticle(rctx, fc.Args["input"].(crm_models.ArticleInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			permission, err := ec.unmarshalNString2string(ctx, "CONTENT_SAVE_ARTICLE")
			if err != nil {
				return nil, err
			}
			if ec.directives.HasPermission == nil {
				return nil, errors.New("directive hasPermission is not implemented")
			}
			return ec.directives.HasPermission(ctx, nil, directive0, permission)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(bool); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be bool`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_saveArticle(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_saveArticle_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteArticle(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deleteArticle(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().DeleteArticle(rctx, fc.Args["id"].(string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			permission, err := ec.unmarshalNString2string(ctx, "CONTENT_DELETE_ARTICLE")
			if err != nil {
				return nil, err
			}
			if ec.directives.HasPermission == nil {
				return nil, errors.New("directive hasPermission is not implemented")
			}
			return ec.directives.HasPermission(ctx, nil, directive0, permission)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(bool); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be bool`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deleteArticle(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteArticle_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_login(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_login(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().Login(rctx, fc.Args["email"].(string), fc.Args["password"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*crm_models.LoginOutput)
	fc.Result = res
	return ec.marshalNLoginOutput2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐLoginOutput(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_login(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "token":
				return ec.fieldContext_LoginOutput_token(ctx, field)
			case "me":
				return ec.fieldContext_LoginOutput_me(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type LoginOutput", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_login_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_logout(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_logout(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().Logout(rctx)
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Auth == nil {
				return nil, errors.New("directive auth is not implemented")
			}
			return ec.directives.Auth(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(bool); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be bool`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_logout(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_saveComplexHouse(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_saveComplexHouse(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().SaveComplexHouse(rctx, fc.Args["input"].(crm_models.ComplexHouseInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Auth == nil {
				return nil, errors.New("directive auth is not implemented")
			}
			return ec.directives.Auth(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(bool); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be bool`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_saveComplexHouse(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_saveComplexHouse_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteComplexHouse(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deleteComplexHouse(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().DeleteComplexHouse(rctx, fc.Args["id"].(string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Auth == nil {
				return nil, errors.New("directive auth is not implemented")
			}
			return ec.directives.Auth(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(bool); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be bool`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deleteComplexHouse(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteComplexHouse_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_bulkDeleteComplexHouses(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_bulkDeleteComplexHouses(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().BulkDeleteComplexHouses(rctx, fc.Args["ids"].([]string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Auth == nil {
				return nil, errors.New("directive auth is not implemented")
			}
			return ec.directives.Auth(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(bool); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be bool`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_bulkDeleteComplexHouses(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_bulkDeleteComplexHouses_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_saveComplex(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_saveComplex(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().SaveComplex(rctx, fc.Args["input"].(crm_models.ComplexInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Auth == nil {
				return nil, errors.New("directive auth is not implemented")
			}
			return ec.directives.Auth(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(bool); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be bool`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_saveComplex(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_saveComplex_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteComplex(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deleteComplex(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().DeleteComplex(rctx, fc.Args["id"].(string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Auth == nil {
				return nil, errors.New("directive auth is not implemented")
			}
			return ec.directives.Auth(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(bool); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be bool`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deleteComplex(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteComplex_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_bulkDeleteComplexes(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_bulkDeleteComplexes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().BulkDeleteComplexes(rctx, fc.Args["ids"].([]string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Auth == nil {
				return nil, errors.New("directive auth is not implemented")
			}
			return ec.directives.Auth(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(bool); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be bool`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_bulkDeleteComplexes(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_bulkDeleteComplexes_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_saveContact(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_saveContact(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().SaveContact(rctx, fc.Args["input"].(crm_models.ContactInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Auth == nil {
				return nil, errors.New("directive auth is not implemented")
			}
			return ec.directives.Auth(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(bool); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be bool`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_saveContact(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_saveContact_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteContact(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deleteContact(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().DeleteContact(rctx, fc.Args["id"].(string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Auth == nil {
				return nil, errors.New("directive auth is not implemented")
			}
			return ec.directives.Auth(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(bool); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be bool`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deleteContact(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteContact_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_bulkDeleteContacts(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_bulkDeleteContacts(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().BulkDeleteContacts(rctx, fc.Args["ids"].([]string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Auth == nil {
				return nil, errors.New("directive auth is not implemented")
			}
			return ec.directives.Auth(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(bool); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be bool`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_bulkDeleteContacts(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_bulkDeleteContacts_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_saveDeal(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_saveDeal(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().SaveDeal(rctx, fc.Args["input"].(crm_models.DealInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Auth == nil {
				return nil, errors.New("directive auth is not implemented")
			}
			return ec.directives.Auth(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(bool); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be bool`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_saveDeal(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_saveDeal_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteDeal(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deleteDeal(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().DeleteDeal(rctx, fc.Args["id"].(string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Auth == nil {
				return nil, errors.New("directive auth is not implemented")
			}
			return ec.directives.Auth(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(bool); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be bool`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deleteDeal(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteDeal_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_changeDealStage(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_changeDealStage(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().ChangeDealStage(rctx, fc.Args["id"].(string), fc.Args["stage"].(crm_models.DealStageEnum))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Auth == nil {
				return nil, errors.New("directive auth is not implemented")
			}
			return ec.directives.Auth(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(bool); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be bool`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_changeDealStage(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_changeDealStage_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_bulkDeleteDeals(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_bulkDeleteDeals(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().BulkDeleteDeals(rctx, fc.Args["ids"].([]string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Auth == nil {
				return nil, errors.New("directive auth is not implemented")
			}
			return ec.directives.Auth(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(bool); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be bool`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_bulkDeleteDeals(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_bulkDeleteDeals_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_bulkChangeDealsStage(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_bulkChangeDealsStage(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().BulkChangeDealsStage(rctx, fc.Args["ids"].([]string), fc.Args["stage"].(crm_models.DealStageEnum))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Auth == nil {
				return nil, errors.New("directive auth is not implemented")
			}
			return ec.directives.Auth(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(bool); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be bool`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_bulkChangeDealsStage(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_bulkChangeDealsStage_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_saveDepartment(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_saveDepartment(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().SaveDepartment(rctx, fc.Args["input"].(crm_models.DepartmentInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			permission, err := ec.unmarshalNString2string(ctx, "STAFF_SAVE_DEPARTMENT")
			if err != nil {
				return nil, err
			}
			if ec.directives.HasPermission == nil {
				return nil, errors.New("directive hasPermission is not implemented")
			}
			return ec.directives.HasPermission(ctx, nil, directive0, permission)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(bool); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be bool`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_saveDepartment(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_saveDepartment_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteDepartment(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deleteDepartment(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().DeleteDepartment(rctx, fc.Args["id"].(string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			permission, err := ec.unmarshalNString2string(ctx, "STAFF_DELETE_DEPARTMENT")
			if err != nil {
				return nil, err
			}
			if ec.directives.HasPermission == nil {
				return nil, errors.New("directive hasPermission is not implemented")
			}
			return ec.directives.HasPermission(ctx, nil, directive0, permission)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(bool); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be bool`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deleteDepartment(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteDepartment_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_saveDeveloper(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_saveDeveloper(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().SaveDeveloper(rctx, fc.Args["input"].(crm_models.DeveloperInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Auth == nil {
				return nil, errors.New("directive auth is not implemented")
			}
			return ec.directives.Auth(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(bool); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be bool`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_saveDeveloper(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_saveDeveloper_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteDeveloper(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deleteDeveloper(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().DeleteDeveloper(rctx, fc.Args["id"].(string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Auth == nil {
				return nil, errors.New("directive auth is not implemented")
			}
			return ec.directives.Auth(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(bool); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be bool`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deleteDeveloper(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteDeveloper_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_bulkDeleteDevelopers(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_bulkDeleteDevelopers(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().BulkDeleteDevelopers(rctx, fc.Args["ids"].([]string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Auth == nil {
				return nil, errors.New("directive auth is not implemented")
			}
			return ec.directives.Auth(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(bool); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be bool`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_bulkDeleteDevelopers(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_bulkDeleteDevelopers_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_saveEmployee(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_saveEmployee(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().SaveEmployee(rctx, fc.Args["input"].(crm_models.EmployeeInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			permission, err := ec.unmarshalNString2string(ctx, "STAFF_SAVE_EMPLOYEE")
			if err != nil {
				return nil, err
			}
			if ec.directives.HasPermission == nil {
				return nil, errors.New("directive hasPermission is not implemented")
			}
			return ec.directives.HasPermission(ctx, nil, directive0, permission)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(bool); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be bool`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_saveEmployee(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_saveEmployee_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteEmployee(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deleteEmployee(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().DeleteEmployee(rctx, fc.Args["id"].(string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			permission, err := ec.unmarshalNString2string(ctx, "STAFF_DELETE_EMPLOYEE")
			if err != nil {
				return nil, err
			}
			if ec.directives.HasPermission == nil {
				return nil, errors.New("directive hasPermission is not implemented")
			}
			return ec.directives.HasPermission(ctx, nil, directive0, permission)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(bool); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be bool`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deleteEmployee(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteEmployee_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteEmployees(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deleteEmployees(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().DeleteEmployees(rctx, fc.Args["ids"].([]string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			permission, err := ec.unmarshalNString2string(ctx, "STAFF_DELETE_EMPLOYEE")
			if err != nil {
				return nil, err
			}
			if ec.directives.HasPermission == nil {
				return nil, errors.New("directive hasPermission is not implemented")
			}
			return ec.directives.HasPermission(ctx, nil, directive0, permission)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(bool); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be bool`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deleteEmployees(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteEmployees_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_activateEmployees(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_activateEmployees(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().ActivateEmployees(rctx, fc.Args["ids"].([]string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			permission, err := ec.unmarshalNString2string(ctx, "STAFF_SAVE_EMPLOYEE")
			if err != nil {
				return nil, err
			}
			if ec.directives.HasPermission == nil {
				return nil, errors.New("directive hasPermission is not implemented")
			}
			return ec.directives.HasPermission(ctx, nil, directive0, permission)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(bool); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be bool`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_activateEmployees(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_activateEmployees_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deactivateEmployees(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deactivateEmployees(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().DeactivateEmployees(rctx, fc.Args["ids"].([]string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			permission, err := ec.unmarshalNString2string(ctx, "STAFF_SAVE_EMPLOYEE")
			if err != nil {
				return nil, err
			}
			if ec.directives.HasPermission == nil {
				return nil, errors.New("directive hasPermission is not implemented")
			}
			return ec.directives.HasPermission(ctx, nil, directive0, permission)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(bool); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be bool`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deactivateEmployees(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deactivateEmployees_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_publishEmployees(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_publishEmployees(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().PublishEmployees(rctx, fc.Args["ids"].([]string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			permission, err := ec.unmarshalNString2string(ctx, "STAFF_SAVE_EMPLOYEE")
			if err != nil {
				return nil, err
			}
			if ec.directives.HasPermission == nil {
				return nil, errors.New("directive hasPermission is not implemented")
			}
			return ec.directives.HasPermission(ctx, nil, directive0, permission)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(bool); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be bool`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_publishEmployees(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_publishEmployees_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_unpublishEmployees(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_unpublishEmployees(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().UnpublishEmployees(rctx, fc.Args["ids"].([]string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			permission, err := ec.unmarshalNString2string(ctx, "STAFF_SAVE_EMPLOYEE")
			if err != nil {
				return nil, err
			}
			if ec.directives.HasPermission == nil {
				return nil, errors.New("directive hasPermission is not implemented")
			}
			return ec.directives.HasPermission(ctx, nil, directive0, permission)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(bool); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be bool`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_unpublishEmployees(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_unpublishEmployees_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_assignDepartmentToEmployees(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_assignDepartmentToEmployees(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().AssignDepartmentToEmployees(rctx, fc.Args["department"].(string), fc.Args["ids"].([]string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			permission, err := ec.unmarshalNString2string(ctx, "STAFF_SAVE_EMPLOYEE")
			if err != nil {
				return nil, err
			}
			if ec.directives.HasPermission == nil {
				return nil, errors.New("directive hasPermission is not implemented")
			}
			return ec.directives.HasPermission(ctx, nil, directive0, permission)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(bool); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be bool`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_assignDepartmentToEmployees(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_assignDepartmentToEmployees_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_assignRoleToEmployees(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_assignRoleToEmployees(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().AssignRoleToEmployees(rctx, fc.Args["role"].(string), fc.Args["ids"].([]string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			permission, err := ec.unmarshalNString2string(ctx, "STAFF_SAVE_EMPLOYEE")
			if err != nil {
				return nil, err
			}
			if ec.directives.HasPermission == nil {
				return nil, errors.New("directive hasPermission is not implemented")
			}
			return ec.directives.HasPermission(ctx, nil, directive0, permission)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(bool); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be bool`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_assignRoleToEmployees(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_assignRoleToEmployees_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_uploadImage(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_uploadImage(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().UploadImage(rctx, fc.Args["input"].(crm_models.ImageInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Auth == nil {
				return nil, errors.New("directive auth is not implemented")
			}
			return ec.directives.Auth(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*crm_models.Image); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/pinks-agency/ecn/server/internal/crm-facade/models.Image`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*crm_models.Image)
	fc.Result = res
	return ec.marshalNImage2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐImage(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_uploadImage(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Image_id(ctx, field)
			case "url":
				return ec.fieldContext_Image_url(ctx, field)
			case "path":
				return ec.fieldContext_Image_path(ctx, field)
			case "title":
				return ec.fieldContext_Image_title(ctx, field)
			case "fileName":
				return ec.fieldContext_Image_fileName(ctx, field)
			case "fileType":
				return ec.fieldContext_Image_fileType(ctx, field)
			case "previewUrl":
				return ec.fieldContext_Image_previewUrl(ctx, field)
			case "previewPath":
				return ec.fieldContext_Image_previewPath(ctx, field)
			case "blurHash":
				return ec.fieldContext_Image_blurHash(ctx, field)
			case "preset":
				return ec.fieldContext_Image_preset(ctx, field)
			case "createdAt":
				return ec.fieldContext_Image_createdAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Image", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_uploadImage_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteImage(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deleteImage(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().DeleteImage(rctx, fc.Args["id"].(string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Auth == nil {
				return nil, errors.New("directive auth is not implemented")
			}
			return ec.directives.Auth(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(bool); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be bool`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deleteImage(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteImage_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_uploadDocument(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_uploadDocument(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().UploadDocument(rctx, fc.Args["input"].(crm_models.DocumentInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Auth == nil {
				return nil, errors.New("directive auth is not implemented")
			}
			return ec.directives.Auth(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*crm_models.Document); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/pinks-agency/ecn/server/internal/crm-facade/models.Document`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*crm_models.Document)
	fc.Result = res
	return ec.marshalNDocument2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐDocument(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_uploadDocument(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Document_id(ctx, field)
			case "url":
				return ec.fieldContext_Document_url(ctx, field)
			case "path":
				return ec.fieldContext_Document_path(ctx, field)
			case "title":
				return ec.fieldContext_Document_title(ctx, field)
			case "fileName":
				return ec.fieldContext_Document_fileName(ctx, field)
			case "fileType":
				return ec.fieldContext_Document_fileType(ctx, field)
			case "createdAt":
				return ec.fieldContext_Document_createdAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Document", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_uploadDocument_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteDocument(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deleteDocument(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().DeleteDocument(rctx, fc.Args["id"].(string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Auth == nil {
				return nil, errors.New("directive auth is not implemented")
			}
			return ec.directives.Auth(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(bool); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be bool`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deleteDocument(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteDocument_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_saveLead(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_saveLead(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().SaveLead(rctx, fc.Args["input"].(crm_models.LeadInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Auth == nil {
				return nil, errors.New("directive auth is not implemented")
			}
			return ec.directives.Auth(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(bool); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be bool`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_saveLead(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_saveLead_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteLead(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deleteLead(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().DeleteLead(rctx, fc.Args["id"].(string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Auth == nil {
				return nil, errors.New("directive auth is not implemented")
			}
			return ec.directives.Auth(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(bool); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be bool`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deleteLead(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteLead_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_changeLeadStatus(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_changeLeadStatus(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().ChangeLeadStatus(rctx, fc.Args["id"].(string), fc.Args["status"].(crm_models.LeadStatusEnum), fc.Args["comment"].(*string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Auth == nil {
				return nil, errors.New("directive auth is not implemented")
			}
			return ec.directives.Auth(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(bool); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be bool`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_changeLeadStatus(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_changeLeadStatus_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_bulkChangeLeadsStatus(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_bulkChangeLeadsStatus(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().BulkChangeLeadsStatus(rctx, fc.Args["ids"].([]string), fc.Args["status"].(crm_models.LeadStatusEnum), fc.Args["comment"].(*string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Auth == nil {
				return nil, errors.New("directive auth is not implemented")
			}
			return ec.directives.Auth(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(bool); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be bool`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_bulkChangeLeadsStatus(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_bulkChangeLeadsStatus_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_bulkDeleteLeads(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_bulkDeleteLeads(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().BulkDeleteLeads(rctx, fc.Args["ids"].([]string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Auth == nil {
				return nil, errors.New("directive auth is not implemented")
			}
			return ec.directives.Auth(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(bool); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be bool`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_bulkDeleteLeads(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_bulkDeleteLeads_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_saveMeet(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_saveMeet(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().SaveMeet(rctx, fc.Args["input"].(crm_models.MeetInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Auth == nil {
				return nil, errors.New("directive auth is not implemented")
			}
			return ec.directives.Auth(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(bool); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be bool`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_saveMeet(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_saveMeet_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteMeet(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deleteMeet(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().DeleteMeet(rctx, fc.Args["id"].(string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Auth == nil {
				return nil, errors.New("directive auth is not implemented")
			}
			return ec.directives.Auth(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(bool); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be bool`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deleteMeet(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteMeet_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_changeMeetStatus(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_changeMeetStatus(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().ChangeMeetStatus(rctx, fc.Args["id"].(string), fc.Args["status"].(crm_models.MeetStatusEnum))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Auth == nil {
				return nil, errors.New("directive auth is not implemented")
			}
			return ec.directives.Auth(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(bool); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be bool`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_changeMeetStatus(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_changeMeetStatus_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_bulkChangeMeetsStatus(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_bulkChangeMeetsStatus(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().BulkChangeMeetsStatus(rctx, fc.Args["ids"].([]string), fc.Args["status"].(crm_models.MeetStatusEnum))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Auth == nil {
				return nil, errors.New("directive auth is not implemented")
			}
			return ec.directives.Auth(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(bool); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be bool`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_bulkChangeMeetsStatus(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_bulkChangeMeetsStatus_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_bulkDeleteMeets(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_bulkDeleteMeets(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().BulkDeleteMeets(rctx, fc.Args["ids"].([]string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Auth == nil {
				return nil, errors.New("directive auth is not implemented")
			}
			return ec.directives.Auth(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(bool); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be bool`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_bulkDeleteMeets(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_bulkDeleteMeets_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_saveMortgageRequest(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_saveMortgageRequest(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().SaveMortgageRequest(rctx, fc.Args["input"].(crm_models.MortgageRequestInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Auth == nil {
				return nil, errors.New("directive auth is not implemented")
			}
			return ec.directives.Auth(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(bool); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be bool`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_saveMortgageRequest(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_saveMortgageRequest_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteMortgageRequest(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deleteMortgageRequest(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().DeleteMortgageRequest(rctx, fc.Args["id"].(string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Auth == nil {
				return nil, errors.New("directive auth is not implemented")
			}
			return ec.directives.Auth(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(bool); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be bool`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deleteMortgageRequest(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteMortgageRequest_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_changeMortgageRequestStatus(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_changeMortgageRequestStatus(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().ChangeMortgageRequestStatus(rctx, fc.Args["id"].(string), fc.Args["status"].(crm_models.MortgageRequestStatusEnum))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Auth == nil {
				return nil, errors.New("directive auth is not implemented")
			}
			return ec.directives.Auth(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(bool); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be bool`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_changeMortgageRequestStatus(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_changeMortgageRequestStatus_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_bulkChangeMortgageRequestsStatus(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_bulkChangeMortgageRequestsStatus(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().BulkChangeMortgageRequestsStatus(rctx, fc.Args["ids"].([]string), fc.Args["status"].(crm_models.MortgageRequestStatusEnum))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Auth == nil {
				return nil, errors.New("directive auth is not implemented")
			}
			return ec.directives.Auth(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(bool); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be bool`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_bulkChangeMortgageRequestsStatus(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_bulkChangeMortgageRequestsStatus_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_bulkDeleteMortgageRequests(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_bulkDeleteMortgageRequests(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().BulkDeleteMortgageRequests(rctx, fc.Args["ids"].([]string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Auth == nil {
				return nil, errors.New("directive auth is not implemented")
			}
			return ec.directives.Auth(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(bool); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be bool`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_bulkDeleteMortgageRequests(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_bulkDeleteMortgageRequests_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_savePage(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_savePage(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().SavePage(rctx, fc.Args["input"].(crm_models.PageInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			permission, err := ec.unmarshalNString2string(ctx, "CONTENT_SAVE_PAGE")
			if err != nil {
				return nil, err
			}
			if ec.directives.HasPermission == nil {
				return nil, errors.New("directive hasPermission is not implemented")
			}
			return ec.directives.HasPermission(ctx, nil, directive0, permission)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(bool); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be bool`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_savePage(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_savePage_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deletePage(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deletePage(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().DeletePage(rctx, fc.Args["id"].(string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			permission, err := ec.unmarshalNString2string(ctx, "CONTENT_DELETE_PAGE")
			if err != nil {
				return nil, err
			}
			if ec.directives.HasPermission == nil {
				return nil, errors.New("directive hasPermission is not implemented")
			}
			return ec.directives.HasPermission(ctx, nil, directive0, permission)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(bool); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be bool`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deletePage(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deletePage_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_savePosition(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_savePosition(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().SavePosition(rctx, fc.Args["input"].(crm_models.PositionInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			permission, err := ec.unmarshalNString2string(ctx, "STAFF_SAVE_POSITION")
			if err != nil {
				return nil, err
			}
			if ec.directives.HasPermission == nil {
				return nil, errors.New("directive hasPermission is not implemented")
			}
			return ec.directives.HasPermission(ctx, nil, directive0, permission)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(bool); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be bool`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_savePosition(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_savePosition_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deletePosition(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deletePosition(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().DeletePosition(rctx, fc.Args["id"].(string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			permission, err := ec.unmarshalNString2string(ctx, "STAFF_DELETE_POSITION")
			if err != nil {
				return nil, err
			}
			if ec.directives.HasPermission == nil {
				return nil, errors.New("directive hasPermission is not implemented")
			}
			return ec.directives.HasPermission(ctx, nil, directive0, permission)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(bool); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be bool`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deletePosition(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deletePosition_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_saveProperty(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_saveProperty(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().SaveProperty(rctx, fc.Args["input"].(crm_models.PropertyInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Auth == nil {
				return nil, errors.New("directive auth is not implemented")
			}
			return ec.directives.Auth(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(bool); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be bool`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_saveProperty(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_saveProperty_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteProperty(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deleteProperty(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().DeleteProperty(rctx, fc.Args["id"].(string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Auth == nil {
				return nil, errors.New("directive auth is not implemented")
			}
			return ec.directives.Auth(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(bool); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be bool`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deleteProperty(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteProperty_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_refreshProperty(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_refreshProperty(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().RefreshProperty(rctx, fc.Args["id"].(string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Auth == nil {
				return nil, errors.New("directive auth is not implemented")
			}
			return ec.directives.Auth(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(bool); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be bool`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_refreshProperty(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_refreshProperty_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_approveProperty(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_approveProperty(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().ApproveProperty(rctx, fc.Args["id"].(string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Auth == nil {
				return nil, errors.New("directive auth is not implemented")
			}
			return ec.directives.Auth(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(bool); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be bool`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_approveProperty(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_approveProperty_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_declineProperty(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_declineProperty(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().DeclineProperty(rctx, fc.Args["id"].(string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Auth == nil {
				return nil, errors.New("directive auth is not implemented")
			}
			return ec.directives.Auth(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(bool); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be bool`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_declineProperty(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_declineProperty_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_archiveProperty(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_archiveProperty(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().ArchiveProperty(rctx, fc.Args["id"].(string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Auth == nil {
				return nil, errors.New("directive auth is not implemented")
			}
			return ec.directives.Auth(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(bool); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be bool`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_archiveProperty(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_archiveProperty_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_bulkDeleteProperties(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_bulkDeleteProperties(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().BulkDeleteProperties(rctx, fc.Args["ids"].([]string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Auth == nil {
				return nil, errors.New("directive auth is not implemented")
			}
			return ec.directives.Auth(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(bool); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be bool`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_bulkDeleteProperties(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_bulkDeleteProperties_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_bulkRefreshProperties(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_bulkRefreshProperties(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().BulkRefreshProperties(rctx, fc.Args["ids"].([]string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Auth == nil {
				return nil, errors.New("directive auth is not implemented")
			}
			return ec.directives.Auth(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(bool); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be bool`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_bulkRefreshProperties(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_bulkRefreshProperties_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_bulkApproveProperties(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_bulkApproveProperties(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().BulkApproveProperties(rctx, fc.Args["ids"].([]string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Auth == nil {
				return nil, errors.New("directive auth is not implemented")
			}
			return ec.directives.Auth(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(bool); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be bool`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_bulkApproveProperties(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_bulkApproveProperties_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_bulkDeclineProperties(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_bulkDeclineProperties(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().BulkDeclineProperties(rctx, fc.Args["ids"].([]string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Auth == nil {
				return nil, errors.New("directive auth is not implemented")
			}
			return ec.directives.Auth(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(bool); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be bool`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_bulkDeclineProperties(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_bulkDeclineProperties_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_bulkArchiveProperties(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_bulkArchiveProperties(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().BulkArchiveProperties(rctx, fc.Args["ids"].([]string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Auth == nil {
				return nil, errors.New("directive auth is not implemented")
			}
			return ec.directives.Auth(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(bool); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be bool`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_bulkArchiveProperties(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_bulkArchiveProperties_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_saveReview(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_saveReview(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().SaveReview(rctx, fc.Args["input"].(crm_models.ReviewInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			permission, err := ec.unmarshalNString2string(ctx, "CONTENT_SAVE_REVIEW")
			if err != nil {
				return nil, err
			}
			if ec.directives.HasPermission == nil {
				return nil, errors.New("directive hasPermission is not implemented")
			}
			return ec.directives.HasPermission(ctx, nil, directive0, permission)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(bool); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be bool`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_saveReview(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_saveReview_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteReview(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deleteReview(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().DeleteReview(rctx, fc.Args["id"].(string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			permission, err := ec.unmarshalNString2string(ctx, "CONTENT_DELETE_REVIEW")
			if err != nil {
				return nil, err
			}
			if ec.directives.HasPermission == nil {
				return nil, errors.New("directive hasPermission is not implemented")
			}
			return ec.directives.HasPermission(ctx, nil, directive0, permission)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(bool); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be bool`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deleteReview(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteReview_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_bulkApproveReviews(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_bulkApproveReviews(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().BulkApproveReviews(rctx, fc.Args["ids"].([]string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			permission, err := ec.unmarshalNString2string(ctx, "CONTENT_SAVE_REVIEW")
			if err != nil {
				return nil, err
			}
			if ec.directives.HasPermission == nil {
				return nil, errors.New("directive hasPermission is not implemented")
			}
			return ec.directives.HasPermission(ctx, nil, directive0, permission)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(bool); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be bool`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_bulkApproveReviews(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_bulkApproveReviews_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_bulkDeclineReviews(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_bulkDeclineReviews(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().BulkDeclineReviews(rctx, fc.Args["ids"].([]string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			permission, err := ec.unmarshalNString2string(ctx, "CONTENT_SAVE_REVIEW")
			if err != nil {
				return nil, err
			}
			if ec.directives.HasPermission == nil {
				return nil, errors.New("directive hasPermission is not implemented")
			}
			return ec.directives.HasPermission(ctx, nil, directive0, permission)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(bool); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be bool`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_bulkDeclineReviews(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_bulkDeclineReviews_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_bulkDeleteReviews(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_bulkDeleteReviews(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().BulkDeleteReviews(rctx, fc.Args["ids"].([]string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			permission, err := ec.unmarshalNString2string(ctx, "CONTENT_DELETE_REVIEW")
			if err != nil {
				return nil, err
			}
			if ec.directives.HasPermission == nil {
				return nil, errors.New("directive hasPermission is not implemented")
			}
			return ec.directives.HasPermission(ctx, nil, directive0, permission)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(bool); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be bool`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_bulkDeleteReviews(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_bulkDeleteReviews_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_saveRole(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_saveRole(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().SaveRole(rctx, fc.Args["input"].(crm_models.RoleInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			permission, err := ec.unmarshalNString2string(ctx, "STAFF_SAVE_ROLE")
			if err != nil {
				return nil, err
			}
			if ec.directives.HasPermission == nil {
				return nil, errors.New("directive hasPermission is not implemented")
			}
			return ec.directives.HasPermission(ctx, nil, directive0, permission)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(bool); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be bool`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_saveRole(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_saveRole_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteRole(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deleteRole(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().DeleteRole(rctx, fc.Args["id"].(string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			permission, err := ec.unmarshalNString2string(ctx, "STAFF_DELETE_ROLE")
			if err != nil {
				return nil, err
			}
			if ec.directives.HasPermission == nil {
				return nil, errors.New("directive hasPermission is not implemented")
			}
			return ec.directives.HasPermission(ctx, nil, directive0, permission)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(bool); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be bool`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deleteRole(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteRole_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_saveStory(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_saveStory(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().SaveStory(rctx, fc.Args["input"].(crm_models.StoryInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			permission, err := ec.unmarshalNString2string(ctx, "CONTENT_SAVE_STORY")
			if err != nil {
				return nil, err
			}
			if ec.directives.HasPermission == nil {
				return nil, errors.New("directive hasPermission is not implemented")
			}
			return ec.directives.HasPermission(ctx, nil, directive0, permission)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(bool); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be bool`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_saveStory(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_saveStory_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteStory(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deleteStory(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().DeleteStory(rctx, fc.Args["id"].(string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			permission, err := ec.unmarshalNString2string(ctx, "CONTENT_DELETE_STORY")
			if err != nil {
				return nil, err
			}
			if ec.directives.HasPermission == nil {
				return nil, errors.New("directive hasPermission is not implemented")
			}
			return ec.directives.HasPermission(ctx, nil, directive0, permission)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(bool); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be bool`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deleteStory(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteStory_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_saveTask(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_saveTask(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().SaveTask(rctx, fc.Args["input"].(crm_models.TaskInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Auth == nil {
				return nil, errors.New("directive auth is not implemented")
			}
			return ec.directives.Auth(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(bool); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be bool`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_saveTask(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_saveTask_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteTask(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deleteTask(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().DeleteTask(rctx, fc.Args["id"].(string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Auth == nil {
				return nil, errors.New("directive auth is not implemented")
			}
			return ec.directives.Auth(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(bool); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be bool`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deleteTask(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteTask_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_completeTask(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_completeTask(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().CompleteTask(rctx, fc.Args["id"].(string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Auth == nil {
				return nil, errors.New("directive auth is not implemented")
			}
			return ec.directives.Auth(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(bool); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be bool`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_completeTask(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_completeTask_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_bulkCompleteTasks(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_bulkCompleteTasks(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().BulkCompleteTasks(rctx, fc.Args["ids"].([]string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Auth == nil {
				return nil, errors.New("directive auth is not implemented")
			}
			return ec.directives.Auth(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(bool); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be bool`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_bulkCompleteTasks(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_bulkCompleteTasks_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_bulkDeleteTasks(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_bulkDeleteTasks(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().BulkDeleteTasks(rctx, fc.Args["ids"].([]string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Auth == nil {
				return nil, errors.New("directive auth is not implemented")
			}
			return ec.directives.Auth(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(bool); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be bool`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_bulkDeleteTasks(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_bulkDeleteTasks_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_saveVacancy(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_saveVacancy(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().SaveVacancy(rctx, fc.Args["input"].(crm_models.VacancyInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			permission, err := ec.unmarshalNString2string(ctx, "CONTENT_SAVE_VACANCY")
			if err != nil {
				return nil, err
			}
			if ec.directives.HasPermission == nil {
				return nil, errors.New("directive hasPermission is not implemented")
			}
			return ec.directives.HasPermission(ctx, nil, directive0, permission)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(bool); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be bool`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_saveVacancy(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_saveVacancy_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteVacancy(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deleteVacancy(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().DeleteVacancy(rctx, fc.Args["id"].(string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			permission, err := ec.unmarshalNString2string(ctx, "CONTENT_DELETE_VACANCY")
			if err != nil {
				return nil, err
			}
			if ec.directives.HasPermission == nil {
				return nil, errors.New("directive hasPermission is not implemented")
			}
			return ec.directives.HasPermission(ctx, nil, directive0, permission)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(bool); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be bool`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deleteVacancy(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteVacancy_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_approveVacancyRequest(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_approveVacancyRequest(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().ApproveVacancyRequest(rctx, fc.Args["id"].(string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Auth == nil {
				return nil, errors.New("directive auth is not implemented")
			}
			return ec.directives.Auth(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(bool); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be bool`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_approveVacancyRequest(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_approveVacancyRequest_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_declineVacancyRequest(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_declineVacancyRequest(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().DeclineVacancyRequest(rctx, fc.Args["id"].(string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Auth == nil {
				return nil, errors.New("directive auth is not implemented")
			}
			return ec.directives.Auth(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(bool); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be bool`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_declineVacancyRequest(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_declineVacancyRequest_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_saveVillage(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_saveVillage(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().SaveVillage(rctx, fc.Args["input"].(crm_models.VillageInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Auth == nil {
				return nil, errors.New("directive auth is not implemented")
			}
			return ec.directives.Auth(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(bool); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be bool`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_saveVillage(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_saveVillage_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteVillage(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deleteVillage(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().DeleteVillage(rctx, fc.Args["id"].(string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Auth == nil {
				return nil, errors.New("directive auth is not implemented")
			}
			return ec.directives.Auth(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(bool); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be bool`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deleteVillage(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteVillage_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_bulkDeleteVillages(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_bulkDeleteVillages(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().BulkDeleteVillages(rctx, fc.Args["ids"].([]string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Auth == nil {
				return nil, errors.New("directive auth is not implemented")
			}
			return ec.directives.Auth(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(bool); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be bool`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_bulkDeleteVillages(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_bulkDeleteVillages_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Page_id(ctx context.Context, field graphql.CollectedField, obj *crm_models.Page) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Page_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Page_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Page",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Page_url(ctx context.Context, field graphql.CollectedField, obj *crm_models.Page) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Page_url(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.URL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Page_url(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Page",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Page_title(ctx context.Context, field graphql.CollectedField, obj *crm_models.Page) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Page_title(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Title, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Page_title(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Page",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Page_description(ctx context.Context, field graphql.CollectedField, obj *crm_models.Page) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Page_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Page_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Page",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Page_contentBlocks(ctx context.Context, field graphql.CollectedField, obj *crm_models.Page) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Page_contentBlocks(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ContentBlocks, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]crm_models.ContentBlock)
	fc.Result = res
	return ec.marshalNContentBlock2ᚕgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐContentBlockᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Page_contentBlocks(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Page",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "type":
				return ec.fieldContext_ContentBlock_type(ctx, field)
			case "data":
				return ec.fieldContext_ContentBlock_data(ctx, field)
			case "isVisible":
				return ec.fieldContext_ContentBlock_isVisible(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ContentBlock", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Page_status(ctx context.Context, field graphql.CollectedField, obj *crm_models.Page) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Page_status(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(crm_models.PublicationStatusEnum)
	fc.Result = res
	return ec.marshalNPublicationStatusEnum2githubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐPublicationStatusEnum(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Page_status(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Page",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type PublicationStatusEnum does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Page_createdAt(ctx context.Context, field graphql.CollectedField, obj *crm_models.Page) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Page_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Page_createdAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Page",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Page_updatedAt(ctx context.Context, field graphql.CollectedField, obj *crm_models.Page) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Page_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Page_updatedAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Page",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PageConnection_totalCount(ctx context.Context, field graphql.CollectedField, obj *crm_models.PageConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PageConnection_totalCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PageConnection_totalCount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PageConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PageConnection_edges(ctx context.Context, field graphql.CollectedField, obj *crm_models.PageConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PageConnection_edges(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*crm_models.PageEdge)
	fc.Result = res
	return ec.marshalNPageEdge2ᚕᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐPageEdgeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PageConnection_edges(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PageConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "node":
				return ec.fieldContext_PageEdge_node(ctx, field)
			case "cursor":
				return ec.fieldContext_PageEdge_cursor(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PageEdge", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _PageConnection_nodes(ctx context.Context, field graphql.CollectedField, obj *crm_models.PageConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PageConnection_nodes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Nodes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*crm_models.Page)
	fc.Result = res
	return ec.marshalNPage2ᚕᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐPageᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PageConnection_nodes(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PageConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Page_id(ctx, field)
			case "url":
				return ec.fieldContext_Page_url(ctx, field)
			case "title":
				return ec.fieldContext_Page_title(ctx, field)
			case "description":
				return ec.fieldContext_Page_description(ctx, field)
			case "contentBlocks":
				return ec.fieldContext_Page_contentBlocks(ctx, field)
			case "status":
				return ec.fieldContext_Page_status(ctx, field)
			case "createdAt":
				return ec.fieldContext_Page_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Page_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Page", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _PageConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *crm_models.PageConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PageConnection_pageInfo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*crm_models.PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PageConnection_pageInfo(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PageConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "startCursor":
				return ec.fieldContext_PageInfo_startCursor(ctx, field)
			case "endCursor":
				return ec.fieldContext_PageInfo_endCursor(ctx, field)
			case "hasNextPage":
				return ec.fieldContext_PageInfo_hasNextPage(ctx, field)
			case "hasPreviousPage":
				return ec.fieldContext_PageInfo_hasPreviousPage(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PageInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _PageEdge_node(ctx context.Context, field graphql.CollectedField, obj *crm_models.PageEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PageEdge_node(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*crm_models.Page)
	fc.Result = res
	return ec.marshalNPage2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐPage(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PageEdge_node(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PageEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Page_id(ctx, field)
			case "url":
				return ec.fieldContext_Page_url(ctx, field)
			case "title":
				return ec.fieldContext_Page_title(ctx, field)
			case "description":
				return ec.fieldContext_Page_description(ctx, field)
			case "contentBlocks":
				return ec.fieldContext_Page_contentBlocks(ctx, field)
			case "status":
				return ec.fieldContext_Page_status(ctx, field)
			case "createdAt":
				return ec.fieldContext_Page_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Page_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Page", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _PageEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *crm_models.PageEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PageEdge_cursor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNCursor2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PageEdge_cursor(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PageEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Cursor does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PageInfo_startCursor(ctx context.Context, field graphql.CollectedField, obj *crm_models.PageInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PageInfo_startCursor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StartCursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOCursor2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PageInfo_startCursor(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PageInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Cursor does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PageInfo_endCursor(ctx context.Context, field graphql.CollectedField, obj *crm_models.PageInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PageInfo_endCursor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EndCursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOCursor2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PageInfo_endCursor(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PageInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Cursor does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PageInfo_hasNextPage(ctx context.Context, field graphql.CollectedField, obj *crm_models.PageInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PageInfo_hasNextPage(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HasNextPage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PageInfo_hasNextPage(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PageInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PageInfo_hasPreviousPage(ctx context.Context, field graphql.CollectedField, obj *crm_models.PageInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PageInfo_hasPreviousPage(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HasPreviousPage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PageInfo_hasPreviousPage(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PageInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Position_id(ctx context.Context, field graphql.CollectedField, obj *crm_models.Position) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Position_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Position_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Position",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Position_title(ctx context.Context, field graphql.CollectedField, obj *crm_models.Position) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Position_title(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Title, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Position_title(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Position",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Position_createdAt(ctx context.Context, field graphql.CollectedField, obj *crm_models.Position) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Position_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Position_createdAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Position",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Position_updatedAt(ctx context.Context, field graphql.CollectedField, obj *crm_models.Position) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Position_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Position_updatedAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Position",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PositionConnection_totalCount(ctx context.Context, field graphql.CollectedField, obj *crm_models.PositionConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PositionConnection_totalCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PositionConnection_totalCount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PositionConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PositionConnection_edges(ctx context.Context, field graphql.CollectedField, obj *crm_models.PositionConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PositionConnection_edges(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*crm_models.PositionEdge)
	fc.Result = res
	return ec.marshalNPositionEdge2ᚕᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐPositionEdgeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PositionConnection_edges(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PositionConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "node":
				return ec.fieldContext_PositionEdge_node(ctx, field)
			case "cursor":
				return ec.fieldContext_PositionEdge_cursor(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PositionEdge", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _PositionConnection_nodes(ctx context.Context, field graphql.CollectedField, obj *crm_models.PositionConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PositionConnection_nodes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Nodes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*crm_models.Position)
	fc.Result = res
	return ec.marshalNPosition2ᚕᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐPositionᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PositionConnection_nodes(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PositionConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Position_id(ctx, field)
			case "title":
				return ec.fieldContext_Position_title(ctx, field)
			case "createdAt":
				return ec.fieldContext_Position_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Position_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Position", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _PositionConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *crm_models.PositionConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PositionConnection_pageInfo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*crm_models.PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PositionConnection_pageInfo(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PositionConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "startCursor":
				return ec.fieldContext_PageInfo_startCursor(ctx, field)
			case "endCursor":
				return ec.fieldContext_PageInfo_endCursor(ctx, field)
			case "hasNextPage":
				return ec.fieldContext_PageInfo_hasNextPage(ctx, field)
			case "hasPreviousPage":
				return ec.fieldContext_PageInfo_hasPreviousPage(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PageInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _PositionEdge_node(ctx context.Context, field graphql.CollectedField, obj *crm_models.PositionEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PositionEdge_node(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*crm_models.Position)
	fc.Result = res
	return ec.marshalNPosition2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐPosition(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PositionEdge_node(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PositionEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Position_id(ctx, field)
			case "title":
				return ec.fieldContext_Position_title(ctx, field)
			case "createdAt":
				return ec.fieldContext_Position_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Position_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Position", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _PositionEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *crm_models.PositionEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PositionEdge_cursor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNCursor2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PositionEdge_cursor(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PositionEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Cursor does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Property_id(ctx context.Context, field graphql.CollectedField, obj *crm_models.Property) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Property_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Property_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Property",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Property_internalID(ctx context.Context, field graphql.CollectedField, obj *crm_models.Property) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Property_internalID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InternalID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Property_internalID(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Property",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Property_deal(ctx context.Context, field graphql.CollectedField, obj *crm_models.Property) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Property_deal(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Deal, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*crm_models.DealEnum)
	fc.Result = res
	return ec.marshalODealEnum2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐDealEnum(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Property_deal(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Property",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DealEnum does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Property_type(ctx context.Context, field graphql.CollectedField, obj *crm_models.Property) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Property_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*crm_models.PropertyTypeEnum)
	fc.Result = res
	return ec.marshalOPropertyTypeEnum2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐPropertyTypeEnum(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Property_type(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Property",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type PropertyTypeEnum does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Property_subType(ctx context.Context, field graphql.CollectedField, obj *crm_models.Property) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Property_subType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*crm_models.PropertySubTypeEnum)
	fc.Result = res
	return ec.marshalOPropertySubTypeEnum2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐPropertySubTypeEnum(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Property_subType(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Property",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type PropertySubTypeEnum does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Property_commercialUsage(ctx context.Context, field graphql.CollectedField, obj *crm_models.Property) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Property_commercialUsage(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CommercialUsage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]crm_models.CommercialUsageEnum)
	fc.Result = res
	return ec.marshalOCommercialUsageEnum2ᚕgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐCommercialUsageEnum(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Property_commercialUsage(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Property",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type CommercialUsageEnum does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Property_fromDeveloper(ctx context.Context, field graphql.CollectedField, obj *crm_models.Property) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Property_fromDeveloper(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FromDeveloper, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Property_fromDeveloper(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Property",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Property_inComplex(ctx context.Context, field graphql.CollectedField, obj *crm_models.Property) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Property_inComplex(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InComplex, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Property_inComplex(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Property",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Property_complex(ctx context.Context, field graphql.CollectedField, obj *crm_models.Property) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Property_complex(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Property().Complex(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*crm_models.Complex)
	fc.Result = res
	return ec.marshalOComplex2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐComplex(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Property_complex(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Property",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Complex_id(ctx, field)
			case "title":
				return ec.fieldContext_Complex_title(ctx, field)
			case "description":
				return ec.fieldContext_Complex_description(ctx, field)
			case "address":
				return ec.fieldContext_Complex_address(ctx, field)
			case "lat":
				return ec.fieldContext_Complex_lat(ctx, field)
			case "lon":
				return ec.fieldContext_Complex_lon(ctx, field)
			case "cadastrNumber":
				return ec.fieldContext_Complex_cadastrNumber(ctx, field)
			case "seoText":
				return ec.fieldContext_Complex_seoText(ctx, field)
			case "youtubeLink":
				return ec.fieldContext_Complex_youtubeLink(ctx, field)
			case "tourLink":
				return ec.fieldContext_Complex_tourLink(ctx, field)
			case "inCity":
				return ec.fieldContext_Complex_inCity(ctx, field)
			case "cityDistance":
				return ec.fieldContext_Complex_cityDistance(ctx, field)
			case "region":
				return ec.fieldContext_Complex_region(ctx, field)
			case "subRegion":
				return ec.fieldContext_Complex_subRegion(ctx, field)
			case "developer":
				return ec.fieldContext_Complex_developer(ctx, field)
			case "isReady":
				return ec.fieldContext_Complex_isReady(ctx, field)
			case "readinessQuarter":
				return ec.fieldContext_Complex_readinessQuarter(ctx, field)
			case "readinessYear":
				return ec.fieldContext_Complex_readinessYear(ctx, field)
			case "images":
				return ec.fieldContext_Complex_images(ctx, field)
			case "documents":
				return ec.fieldContext_Complex_documents(ctx, field)
			case "projectDeclarations":
				return ec.fieldContext_Complex_projectDeclarations(ctx, field)
			case "publicationStatus":
				return ec.fieldContext_Complex_publicationStatus(ctx, field)
			case "internalInfo":
				return ec.fieldContext_Complex_internalInfo(ctx, field)
			case "isDeleted":
				return ec.fieldContext_Complex_isDeleted(ctx, field)
			case "createdAt":
				return ec.fieldContext_Complex_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Complex_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Complex", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Property_complexHouse(ctx context.Context, field graphql.CollectedField, obj *crm_models.Property) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Property_complexHouse(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Property().ComplexHouse(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*crm_models.ComplexHouse)
	fc.Result = res
	return ec.marshalOComplexHouse2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐComplexHouse(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Property_complexHouse(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Property",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ComplexHouse_id(ctx, field)
			case "complex":
				return ec.fieldContext_ComplexHouse_complex(ctx, field)
			case "title":
				return ec.fieldContext_ComplexHouse_title(ctx, field)
			case "description":
				return ec.fieldContext_ComplexHouse_description(ctx, field)
			case "address":
				return ec.fieldContext_ComplexHouse_address(ctx, field)
			case "lat":
				return ec.fieldContext_ComplexHouse_lat(ctx, field)
			case "lon":
				return ec.fieldContext_ComplexHouse_lon(ctx, field)
			case "cadastrNumber":
				return ec.fieldContext_ComplexHouse_cadastrNumber(ctx, field)
			case "seoText":
				return ec.fieldContext_ComplexHouse_seoText(ctx, field)
			case "youtubeLink":
				return ec.fieldContext_ComplexHouse_youtubeLink(ctx, field)
			case "tourLink":
				return ec.fieldContext_ComplexHouse_tourLink(ctx, field)
			case "isReady":
				return ec.fieldContext_ComplexHouse_isReady(ctx, field)
			case "readinessQuarter":
				return ec.fieldContext_ComplexHouse_readinessQuarter(ctx, field)
			case "readinessYear":
				return ec.fieldContext_ComplexHouse_readinessYear(ctx, field)
			case "images":
				return ec.fieldContext_ComplexHouse_images(ctx, field)
			case "documents":
				return ec.fieldContext_ComplexHouse_documents(ctx, field)
			case "projectDeclarations":
				return ec.fieldContext_ComplexHouse_projectDeclarations(ctx, field)
			case "publicationStatus":
				return ec.fieldContext_ComplexHouse_publicationStatus(ctx, field)
			case "internalInfo":
				return ec.fieldContext_ComplexHouse_internalInfo(ctx, field)
			case "isDeleted":
				return ec.fieldContext_ComplexHouse_isDeleted(ctx, field)
			case "createdAt":
				return ec.fieldContext_ComplexHouse_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_ComplexHouse_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ComplexHouse", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Property_inVillage(ctx context.Context, field graphql.CollectedField, obj *crm_models.Property) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Property_inVillage(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InVillage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Property_inVillage(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Property",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Property_village(ctx context.Context, field graphql.CollectedField, obj *crm_models.Property) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Property_village(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Property().Village(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*crm_models.Village)
	fc.Result = res
	return ec.marshalOVillage2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐVillage(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Property_village(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Property",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Village_id(ctx, field)
			case "title":
				return ec.fieldContext_Village_title(ctx, field)
			case "description":
				return ec.fieldContext_Village_description(ctx, field)
			case "address":
				return ec.fieldContext_Village_address(ctx, field)
			case "lat":
				return ec.fieldContext_Village_lat(ctx, field)
			case "lon":
				return ec.fieldContext_Village_lon(ctx, field)
			case "cadastrNumber":
				return ec.fieldContext_Village_cadastrNumber(ctx, field)
			case "seoText":
				return ec.fieldContext_Village_seoText(ctx, field)
			case "youtubeLink":
				return ec.fieldContext_Village_youtubeLink(ctx, field)
			case "tourLink":
				return ec.fieldContext_Village_tourLink(ctx, field)
			case "inCity":
				return ec.fieldContext_Village_inCity(ctx, field)
			case "cityDistance":
				return ec.fieldContext_Village_cityDistance(ctx, field)
			case "region":
				return ec.fieldContext_Village_region(ctx, field)
			case "subRegion":
				return ec.fieldContext_Village_subRegion(ctx, field)
			case "developer":
				return ec.fieldContext_Village_developer(ctx, field)
			case "isReady":
				return ec.fieldContext_Village_isReady(ctx, field)
			case "readinessQuarter":
				return ec.fieldContext_Village_readinessQuarter(ctx, field)
			case "readinessYear":
				return ec.fieldContext_Village_readinessYear(ctx, field)
			case "images":
				return ec.fieldContext_Village_images(ctx, field)
			case "documents":
				return ec.fieldContext_Village_documents(ctx, field)
			case "projectDeclarations":
				return ec.fieldContext_Village_projectDeclarations(ctx, field)
			case "publicationStatus":
				return ec.fieldContext_Village_publicationStatus(ctx, field)
			case "internalInfo":
				return ec.fieldContext_Village_internalInfo(ctx, field)
			case "isDeleted":
				return ec.fieldContext_Village_isDeleted(ctx, field)
			case "createdAt":
				return ec.fieldContext_Village_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Village_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Village", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Property_isHot(ctx context.Context, field graphql.CollectedField, obj *crm_models.Property) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Property_isHot(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsHot, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Property_isHot(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Property",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Property_title(ctx context.Context, field graphql.CollectedField, obj *crm_models.Property) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Property_title(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Title, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Property_title(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Property",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Property_description(ctx context.Context, field graphql.CollectedField, obj *crm_models.Property) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Property_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Property_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Property",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Property_address(ctx context.Context, field graphql.CollectedField, obj *crm_models.Property) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Property_address(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Address, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Property_address(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Property",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Property_lat(ctx context.Context, field graphql.CollectedField, obj *crm_models.Property) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Property_lat(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Lat, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Property_lat(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Property",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Property_lon(ctx context.Context, field graphql.CollectedField, obj *crm_models.Property) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Property_lon(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Lon, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Property_lon(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Property",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Property_cadastrNumber(ctx context.Context, field graphql.CollectedField, obj *crm_models.Property) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Property_cadastrNumber(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CadastrNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Property_cadastrNumber(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Property",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Property_seoText(ctx context.Context, field graphql.CollectedField, obj *crm_models.Property) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Property_seoText(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SeoText, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Property_seoText(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Property",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Property_youtubeLink(ctx context.Context, field graphql.CollectedField, obj *crm_models.Property) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Property_youtubeLink(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.YoutubeLink, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Property_youtubeLink(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Property",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Property_tourLink(ctx context.Context, field graphql.CollectedField, obj *crm_models.Property) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Property_tourLink(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TourLink, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Property_tourLink(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Property",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Property_documents(ctx context.Context, field graphql.CollectedField, obj *crm_models.Property) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Property_documents(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Property().Documents(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*crm_models.Document)
	fc.Result = res
	return ec.marshalODocument2ᚕᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐDocument(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Property_documents(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Property",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Document_id(ctx, field)
			case "url":
				return ec.fieldContext_Document_url(ctx, field)
			case "path":
				return ec.fieldContext_Document_path(ctx, field)
			case "title":
				return ec.fieldContext_Document_title(ctx, field)
			case "fileName":
				return ec.fieldContext_Document_fileName(ctx, field)
			case "fileType":
				return ec.fieldContext_Document_fileType(ctx, field)
			case "createdAt":
				return ec.fieldContext_Document_createdAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Document", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Property_images(ctx context.Context, field graphql.CollectedField, obj *crm_models.Property) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Property_images(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Property().Images(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*crm_models.Image)
	fc.Result = res
	return ec.marshalOImage2ᚕᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐImage(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Property_images(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Property",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Image_id(ctx, field)
			case "url":
				return ec.fieldContext_Image_url(ctx, field)
			case "path":
				return ec.fieldContext_Image_path(ctx, field)
			case "title":
				return ec.fieldContext_Image_title(ctx, field)
			case "fileName":
				return ec.fieldContext_Image_fileName(ctx, field)
			case "fileType":
				return ec.fieldContext_Image_fileType(ctx, field)
			case "previewUrl":
				return ec.fieldContext_Image_previewUrl(ctx, field)
			case "previewPath":
				return ec.fieldContext_Image_previewPath(ctx, field)
			case "blurHash":
				return ec.fieldContext_Image_blurHash(ctx, field)
			case "preset":
				return ec.fieldContext_Image_preset(ctx, field)
			case "createdAt":
				return ec.fieldContext_Image_createdAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Image", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Property_isDeleted(ctx context.Context, field graphql.CollectedField, obj *crm_models.Property) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Property_isDeleted(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeleted, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Property_isDeleted(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Property",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Property_isEditable(ctx context.Context, field graphql.CollectedField, obj *crm_models.Property) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Property_isEditable(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsEditable, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Property_isEditable(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Property",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Property_refreshDate(ctx context.Context, field graphql.CollectedField, obj *crm_models.Property) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Property_refreshDate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RefreshDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalOTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Property_refreshDate(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Property",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Property_status(ctx context.Context, field graphql.CollectedField, obj *crm_models.Property) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Property_status(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*crm_models.PropertyStatusEnum)
	fc.Result = res
	return ec.marshalOPropertyStatusEnum2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐPropertyStatusEnum(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Property_status(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Property",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type PropertyStatusEnum does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Property_price(ctx context.Context, field graphql.CollectedField, obj *crm_models.Property) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Property_price(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Price, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Property_price(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Property",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Property_pricePerMeter(ctx context.Context, field graphql.CollectedField, obj *crm_models.Property) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Property_pricePerMeter(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PricePerMeter, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Property_pricePerMeter(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Property",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Property_pricePerAr(ctx context.Context, field graphql.CollectedField, obj *crm_models.Property) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Property_pricePerAr(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PricePerAr, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Property_pricePerAr(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Property",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Property_priceHistory(ctx context.Context, field graphql.CollectedField, obj *crm_models.Property) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Property_priceHistory(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PriceHistory, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]float64)
	fc.Result = res
	return ec.marshalOFloat2ᚕfloat64ᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Property_priceHistory(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Property",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Property_isReady(ctx context.Context, field graphql.CollectedField, obj *crm_models.Property) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Property_isReady(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsReady, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Property_isReady(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Property",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Property_readinessYear(ctx context.Context, field graphql.CollectedField, obj *crm_models.Property) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Property_readinessYear(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ReadinessYear, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Property_readinessYear(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Property",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Property_readinessQuarter(ctx context.Context, field graphql.CollectedField, obj *crm_models.Property) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Property_readinessQuarter(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ReadinessQuarter, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*crm_models.QuarterEnum)
	fc.Result = res
	return ec.marshalOQuarterEnum2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐQuarterEnum(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Property_readinessQuarter(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Property",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type QuarterEnum does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Property_inCity(ctx context.Context, field graphql.CollectedField, obj *crm_models.Property) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Property_inCity(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InCity, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Property_inCity(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Property",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Property_cityDistance(ctx context.Context, field graphql.CollectedField, obj *crm_models.Property) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Property_cityDistance(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CityDistance, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Property_cityDistance(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Property",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Property_region(ctx context.Context, field graphql.CollectedField, obj *crm_models.Property) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Property_region(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Region, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Property_region(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Property",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Property_subRegion(ctx context.Context, field graphql.CollectedField, obj *crm_models.Property) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Property_subRegion(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubRegion, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Property_subRegion(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Property",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Property_source(ctx context.Context, field graphql.CollectedField, obj *crm_models.Property) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Property_source(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Source, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*crm_models.PropertySourceEnum)
	fc.Result = res
	return ec.marshalOPropertySourceEnum2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐPropertySourceEnum(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Property_source(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Property",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type PropertySourceEnum does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Property_rooms(ctx context.Context, field graphql.CollectedField, obj *crm_models.Property) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Property_rooms(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Rooms, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Property_rooms(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Property",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Property_area(ctx context.Context, field graphql.CollectedField, obj *crm_models.Property) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Property_area(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Area, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Property_area(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Property",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Property_landArea(ctx context.Context, field graphql.CollectedField, obj *crm_models.Property) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Property_landArea(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LandArea, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Property_landArea(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Property",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Property_livingArea(ctx context.Context, field graphql.CollectedField, obj *crm_models.Property) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Property_livingArea(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LivingArea, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Property_livingArea(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Property",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Property_kitchenArea(ctx context.Context, field graphql.CollectedField, obj *crm_models.Property) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Property_kitchenArea(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.KitchenArea, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Property_kitchenArea(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Property",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Property_toiletType(ctx context.Context, field graphql.CollectedField, obj *crm_models.Property) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Property_toiletType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ToiletType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*crm_models.ToiletTypeEnum)
	fc.Result = res
	return ec.marshalOToiletTypeEnum2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐToiletTypeEnum(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Property_toiletType(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Property",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ToiletTypeEnum does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Property_rehabType(ctx context.Context, field graphql.CollectedField, obj *crm_models.Property) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Property_rehabType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RehabType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*crm_models.RehabTypeEnum)
	fc.Result = res
	return ec.marshalORehabTypeEnum2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐRehabTypeEnum(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Property_rehabType(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Property",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type RehabTypeEnum does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Property_floor(ctx context.Context, field graphql.CollectedField, obj *crm_models.Property) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Property_floor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Floor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Property_floor(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Property",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Property_floors(ctx context.Context, field graphql.CollectedField, obj *crm_models.Property) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Property_floors(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Floors, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Property_floors(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Property",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Property_ceilingHeight(ctx context.Context, field graphql.CollectedField, obj *crm_models.Property) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Property_ceilingHeight(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CeilingHeight, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Property_ceilingHeight(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Property",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Property_internalInfo(ctx context.Context, field graphql.CollectedField, obj *crm_models.Property) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Property_internalInfo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InternalInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Property_internalInfo(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Property",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Property_comissionPercent(ctx context.Context, field graphql.CollectedField, obj *crm_models.Property) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Property_comissionPercent(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ComissionPercent, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Property_comissionPercent(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Property",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Property_comissionAmount(ctx context.Context, field graphql.CollectedField, obj *crm_models.Property) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Property_comissionAmount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ComissionAmount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Property_comissionAmount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Property",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Property_createdAt(ctx context.Context, field graphql.CollectedField, obj *crm_models.Property) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Property_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Property_createdAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Property",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Property_updatedAt(ctx context.Context, field graphql.CollectedField, obj *crm_models.Property) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Property_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Property_updatedAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Property",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PropertyConnection_totalCount(ctx context.Context, field graphql.CollectedField, obj *crm_models.PropertyConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PropertyConnection_totalCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PropertyConnection_totalCount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PropertyConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PropertyConnection_edges(ctx context.Context, field graphql.CollectedField, obj *crm_models.PropertyConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PropertyConnection_edges(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*crm_models.PropertyEdge)
	fc.Result = res
	return ec.marshalNPropertyEdge2ᚕᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐPropertyEdgeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PropertyConnection_edges(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PropertyConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "node":
				return ec.fieldContext_PropertyEdge_node(ctx, field)
			case "cursor":
				return ec.fieldContext_PropertyEdge_cursor(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PropertyEdge", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _PropertyConnection_nodes(ctx context.Context, field graphql.CollectedField, obj *crm_models.PropertyConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PropertyConnection_nodes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Nodes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*crm_models.Property)
	fc.Result = res
	return ec.marshalNProperty2ᚕᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐPropertyᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PropertyConnection_nodes(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PropertyConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Property_id(ctx, field)
			case "internalID":
				return ec.fieldContext_Property_internalID(ctx, field)
			case "deal":
				return ec.fieldContext_Property_deal(ctx, field)
			case "type":
				return ec.fieldContext_Property_type(ctx, field)
			case "subType":
				return ec.fieldContext_Property_subType(ctx, field)
			case "commercialUsage":
				return ec.fieldContext_Property_commercialUsage(ctx, field)
			case "fromDeveloper":
				return ec.fieldContext_Property_fromDeveloper(ctx, field)
			case "inComplex":
				return ec.fieldContext_Property_inComplex(ctx, field)
			case "complex":
				return ec.fieldContext_Property_complex(ctx, field)
			case "complexHouse":
				return ec.fieldContext_Property_complexHouse(ctx, field)
			case "inVillage":
				return ec.fieldContext_Property_inVillage(ctx, field)
			case "village":
				return ec.fieldContext_Property_village(ctx, field)
			case "isHot":
				return ec.fieldContext_Property_isHot(ctx, field)
			case "title":
				return ec.fieldContext_Property_title(ctx, field)
			case "description":
				return ec.fieldContext_Property_description(ctx, field)
			case "address":
				return ec.fieldContext_Property_address(ctx, field)
			case "lat":
				return ec.fieldContext_Property_lat(ctx, field)
			case "lon":
				return ec.fieldContext_Property_lon(ctx, field)
			case "cadastrNumber":
				return ec.fieldContext_Property_cadastrNumber(ctx, field)
			case "seoText":
				return ec.fieldContext_Property_seoText(ctx, field)
			case "youtubeLink":
				return ec.fieldContext_Property_youtubeLink(ctx, field)
			case "tourLink":
				return ec.fieldContext_Property_tourLink(ctx, field)
			case "documents":
				return ec.fieldContext_Property_documents(ctx, field)
			case "images":
				return ec.fieldContext_Property_images(ctx, field)
			case "isDeleted":
				return ec.fieldContext_Property_isDeleted(ctx, field)
			case "isEditable":
				return ec.fieldContext_Property_isEditable(ctx, field)
			case "refreshDate":
				return ec.fieldContext_Property_refreshDate(ctx, field)
			case "status":
				return ec.fieldContext_Property_status(ctx, field)
			case "price":
				return ec.fieldContext_Property_price(ctx, field)
			case "pricePerMeter":
				return ec.fieldContext_Property_pricePerMeter(ctx, field)
			case "pricePerAr":
				return ec.fieldContext_Property_pricePerAr(ctx, field)
			case "priceHistory":
				return ec.fieldContext_Property_priceHistory(ctx, field)
			case "isReady":
				return ec.fieldContext_Property_isReady(ctx, field)
			case "readinessYear":
				return ec.fieldContext_Property_readinessYear(ctx, field)
			case "readinessQuarter":
				return ec.fieldContext_Property_readinessQuarter(ctx, field)
			case "inCity":
				return ec.fieldContext_Property_inCity(ctx, field)
			case "cityDistance":
				return ec.fieldContext_Property_cityDistance(ctx, field)
			case "region":
				return ec.fieldContext_Property_region(ctx, field)
			case "subRegion":
				return ec.fieldContext_Property_subRegion(ctx, field)
			case "source":
				return ec.fieldContext_Property_source(ctx, field)
			case "rooms":
				return ec.fieldContext_Property_rooms(ctx, field)
			case "area":
				return ec.fieldContext_Property_area(ctx, field)
			case "landArea":
				return ec.fieldContext_Property_landArea(ctx, field)
			case "livingArea":
				return ec.fieldContext_Property_livingArea(ctx, field)
			case "kitchenArea":
				return ec.fieldContext_Property_kitchenArea(ctx, field)
			case "toiletType":
				return ec.fieldContext_Property_toiletType(ctx, field)
			case "rehabType":
				return ec.fieldContext_Property_rehabType(ctx, field)
			case "floor":
				return ec.fieldContext_Property_floor(ctx, field)
			case "floors":
				return ec.fieldContext_Property_floors(ctx, field)
			case "ceilingHeight":
				return ec.fieldContext_Property_ceilingHeight(ctx, field)
			case "internalInfo":
				return ec.fieldContext_Property_internalInfo(ctx, field)
			case "comissionPercent":
				return ec.fieldContext_Property_comissionPercent(ctx, field)
			case "comissionAmount":
				return ec.fieldContext_Property_comissionAmount(ctx, field)
			case "createdAt":
				return ec.fieldContext_Property_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Property_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Property", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _PropertyConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *crm_models.PropertyConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PropertyConnection_pageInfo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*crm_models.PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PropertyConnection_pageInfo(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PropertyConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "startCursor":
				return ec.fieldContext_PageInfo_startCursor(ctx, field)
			case "endCursor":
				return ec.fieldContext_PageInfo_endCursor(ctx, field)
			case "hasNextPage":
				return ec.fieldContext_PageInfo_hasNextPage(ctx, field)
			case "hasPreviousPage":
				return ec.fieldContext_PageInfo_hasPreviousPage(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PageInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _PropertyEdge_node(ctx context.Context, field graphql.CollectedField, obj *crm_models.PropertyEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PropertyEdge_node(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*crm_models.Property)
	fc.Result = res
	return ec.marshalNProperty2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐProperty(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PropertyEdge_node(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PropertyEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Property_id(ctx, field)
			case "internalID":
				return ec.fieldContext_Property_internalID(ctx, field)
			case "deal":
				return ec.fieldContext_Property_deal(ctx, field)
			case "type":
				return ec.fieldContext_Property_type(ctx, field)
			case "subType":
				return ec.fieldContext_Property_subType(ctx, field)
			case "commercialUsage":
				return ec.fieldContext_Property_commercialUsage(ctx, field)
			case "fromDeveloper":
				return ec.fieldContext_Property_fromDeveloper(ctx, field)
			case "inComplex":
				return ec.fieldContext_Property_inComplex(ctx, field)
			case "complex":
				return ec.fieldContext_Property_complex(ctx, field)
			case "complexHouse":
				return ec.fieldContext_Property_complexHouse(ctx, field)
			case "inVillage":
				return ec.fieldContext_Property_inVillage(ctx, field)
			case "village":
				return ec.fieldContext_Property_village(ctx, field)
			case "isHot":
				return ec.fieldContext_Property_isHot(ctx, field)
			case "title":
				return ec.fieldContext_Property_title(ctx, field)
			case "description":
				return ec.fieldContext_Property_description(ctx, field)
			case "address":
				return ec.fieldContext_Property_address(ctx, field)
			case "lat":
				return ec.fieldContext_Property_lat(ctx, field)
			case "lon":
				return ec.fieldContext_Property_lon(ctx, field)
			case "cadastrNumber":
				return ec.fieldContext_Property_cadastrNumber(ctx, field)
			case "seoText":
				return ec.fieldContext_Property_seoText(ctx, field)
			case "youtubeLink":
				return ec.fieldContext_Property_youtubeLink(ctx, field)
			case "tourLink":
				return ec.fieldContext_Property_tourLink(ctx, field)
			case "documents":
				return ec.fieldContext_Property_documents(ctx, field)
			case "images":
				return ec.fieldContext_Property_images(ctx, field)
			case "isDeleted":
				return ec.fieldContext_Property_isDeleted(ctx, field)
			case "isEditable":
				return ec.fieldContext_Property_isEditable(ctx, field)
			case "refreshDate":
				return ec.fieldContext_Property_refreshDate(ctx, field)
			case "status":
				return ec.fieldContext_Property_status(ctx, field)
			case "price":
				return ec.fieldContext_Property_price(ctx, field)
			case "pricePerMeter":
				return ec.fieldContext_Property_pricePerMeter(ctx, field)
			case "pricePerAr":
				return ec.fieldContext_Property_pricePerAr(ctx, field)
			case "priceHistory":
				return ec.fieldContext_Property_priceHistory(ctx, field)
			case "isReady":
				return ec.fieldContext_Property_isReady(ctx, field)
			case "readinessYear":
				return ec.fieldContext_Property_readinessYear(ctx, field)
			case "readinessQuarter":
				return ec.fieldContext_Property_readinessQuarter(ctx, field)
			case "inCity":
				return ec.fieldContext_Property_inCity(ctx, field)
			case "cityDistance":
				return ec.fieldContext_Property_cityDistance(ctx, field)
			case "region":
				return ec.fieldContext_Property_region(ctx, field)
			case "subRegion":
				return ec.fieldContext_Property_subRegion(ctx, field)
			case "source":
				return ec.fieldContext_Property_source(ctx, field)
			case "rooms":
				return ec.fieldContext_Property_rooms(ctx, field)
			case "area":
				return ec.fieldContext_Property_area(ctx, field)
			case "landArea":
				return ec.fieldContext_Property_landArea(ctx, field)
			case "livingArea":
				return ec.fieldContext_Property_livingArea(ctx, field)
			case "kitchenArea":
				return ec.fieldContext_Property_kitchenArea(ctx, field)
			case "toiletType":
				return ec.fieldContext_Property_toiletType(ctx, field)
			case "rehabType":
				return ec.fieldContext_Property_rehabType(ctx, field)
			case "floor":
				return ec.fieldContext_Property_floor(ctx, field)
			case "floors":
				return ec.fieldContext_Property_floors(ctx, field)
			case "ceilingHeight":
				return ec.fieldContext_Property_ceilingHeight(ctx, field)
			case "internalInfo":
				return ec.fieldContext_Property_internalInfo(ctx, field)
			case "comissionPercent":
				return ec.fieldContext_Property_comissionPercent(ctx, field)
			case "comissionAmount":
				return ec.fieldContext_Property_comissionAmount(ctx, field)
			case "createdAt":
				return ec.fieldContext_Property_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Property_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Property", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _PropertyEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *crm_models.PropertyEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PropertyEdge_cursor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNCursor2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PropertyEdge_cursor(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PropertyEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Cursor does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_articleGroups(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_articleGroups(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().ArticleGroups(rctx, fc.Args["start"].(*int), fc.Args["limit"].(*int), fc.Args["sort"].(*crm_models.Sort), fc.Args["search"].(*string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Auth == nil {
				return nil, errors.New("directive auth is not implemented")
			}
			return ec.directives.Auth(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*crm_models.ArticleGroupConnection); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/pinks-agency/ecn/server/internal/crm-facade/models.ArticleGroupConnection`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*crm_models.ArticleGroupConnection)
	fc.Result = res
	return ec.marshalNArticleGroupConnection2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐArticleGroupConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_articleGroups(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "totalCount":
				return ec.fieldContext_ArticleGroupConnection_totalCount(ctx, field)
			case "edges":
				return ec.fieldContext_ArticleGroupConnection_edges(ctx, field)
			case "nodes":
				return ec.fieldContext_ArticleGroupConnection_nodes(ctx, field)
			case "pageInfo":
				return ec.fieldContext_ArticleGroupConnection_pageInfo(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ArticleGroupConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_articleGroups_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_articleGroup(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_articleGroup(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().ArticleGroup(rctx, fc.Args["id"].(string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Auth == nil {
				return nil, errors.New("directive auth is not implemented")
			}
			return ec.directives.Auth(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*crm_models.ArticleGroup); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/pinks-agency/ecn/server/internal/crm-facade/models.ArticleGroup`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*crm_models.ArticleGroup)
	fc.Result = res
	return ec.marshalNArticleGroup2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐArticleGroup(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_articleGroup(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ArticleGroup_id(ctx, field)
			case "title":
				return ec.fieldContext_ArticleGroup_title(ctx, field)
			case "createdAt":
				return ec.fieldContext_ArticleGroup_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_ArticleGroup_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ArticleGroup", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_articleGroup_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_articles(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_articles(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().Articles(rctx, fc.Args["ids"].([]string), fc.Args["start"].(*int), fc.Args["limit"].(*int), fc.Args["sort"].(*crm_models.Sort), fc.Args["search"].(*string), fc.Args["filter"].(*crm_models.ArticlesFilterInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Auth == nil {
				return nil, errors.New("directive auth is not implemented")
			}
			return ec.directives.Auth(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*crm_models.ArticleConnection); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/pinks-agency/ecn/server/internal/crm-facade/models.ArticleConnection`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*crm_models.ArticleConnection)
	fc.Result = res
	return ec.marshalNArticleConnection2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐArticleConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_articles(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "totalCount":
				return ec.fieldContext_ArticleConnection_totalCount(ctx, field)
			case "edges":
				return ec.fieldContext_ArticleConnection_edges(ctx, field)
			case "nodes":
				return ec.fieldContext_ArticleConnection_nodes(ctx, field)
			case "pageInfo":
				return ec.fieldContext_ArticleConnection_pageInfo(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ArticleConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_articles_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_article(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_article(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().Article(rctx, fc.Args["id"].(string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Auth == nil {
				return nil, errors.New("directive auth is not implemented")
			}
			return ec.directives.Auth(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*crm_models.Article); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/pinks-agency/ecn/server/internal/crm-facade/models.Article`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*crm_models.Article)
	fc.Result = res
	return ec.marshalNArticle2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐArticle(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_article(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Article_id(ctx, field)
			case "group":
				return ec.fieldContext_Article_group(ctx, field)
			case "title":
				return ec.fieldContext_Article_title(ctx, field)
			case "contentBlocks":
				return ec.fieldContext_Article_contentBlocks(ctx, field)
			case "status":
				return ec.fieldContext_Article_status(ctx, field)
			case "cover":
				return ec.fieldContext_Article_cover(ctx, field)
			case "createdAt":
				return ec.fieldContext_Article_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Article_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Article", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_article_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_me(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_me(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().Me(rctx)
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Auth == nil {
				return nil, errors.New("directive auth is not implemented")
			}
			return ec.directives.Auth(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*crm_models.Me); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/pinks-agency/ecn/server/internal/crm-facade/models.Me`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*crm_models.Me)
	fc.Result = res
	return ec.marshalNMe2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐMe(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_me(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Me_id(ctx, field)
			case "name":
				return ec.fieldContext_Me_name(ctx, field)
			case "surname":
				return ec.fieldContext_Me_surname(ctx, field)
			case "avatar":
				return ec.fieldContext_Me_avatar(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Me", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_complexHouses(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_complexHouses(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().ComplexHouses(rctx, fc.Args["ids"].([]string), fc.Args["start"].(*int), fc.Args["limit"].(*int), fc.Args["sort"].(*crm_models.Sort), fc.Args["search"].(*string), fc.Args["filter"].(*crm_models.ComplexHouseFilter))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Auth == nil {
				return nil, errors.New("directive auth is not implemented")
			}
			return ec.directives.Auth(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*crm_models.ComplexHouseConnection); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/pinks-agency/ecn/server/internal/crm-facade/models.ComplexHouseConnection`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*crm_models.ComplexHouseConnection)
	fc.Result = res
	return ec.marshalNComplexHouseConnection2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐComplexHouseConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_complexHouses(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "totalCount":
				return ec.fieldContext_ComplexHouseConnection_totalCount(ctx, field)
			case "edges":
				return ec.fieldContext_ComplexHouseConnection_edges(ctx, field)
			case "nodes":
				return ec.fieldContext_ComplexHouseConnection_nodes(ctx, field)
			case "pageInfo":
				return ec.fieldContext_ComplexHouseConnection_pageInfo(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ComplexHouseConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_complexHouses_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_complexHouse(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_complexHouse(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().ComplexHouse(rctx, fc.Args["id"].(string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Auth == nil {
				return nil, errors.New("directive auth is not implemented")
			}
			return ec.directives.Auth(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*crm_models.ComplexHouse); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/pinks-agency/ecn/server/internal/crm-facade/models.ComplexHouse`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*crm_models.ComplexHouse)
	fc.Result = res
	return ec.marshalNComplexHouse2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐComplexHouse(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_complexHouse(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ComplexHouse_id(ctx, field)
			case "complex":
				return ec.fieldContext_ComplexHouse_complex(ctx, field)
			case "title":
				return ec.fieldContext_ComplexHouse_title(ctx, field)
			case "description":
				return ec.fieldContext_ComplexHouse_description(ctx, field)
			case "address":
				return ec.fieldContext_ComplexHouse_address(ctx, field)
			case "lat":
				return ec.fieldContext_ComplexHouse_lat(ctx, field)
			case "lon":
				return ec.fieldContext_ComplexHouse_lon(ctx, field)
			case "cadastrNumber":
				return ec.fieldContext_ComplexHouse_cadastrNumber(ctx, field)
			case "seoText":
				return ec.fieldContext_ComplexHouse_seoText(ctx, field)
			case "youtubeLink":
				return ec.fieldContext_ComplexHouse_youtubeLink(ctx, field)
			case "tourLink":
				return ec.fieldContext_ComplexHouse_tourLink(ctx, field)
			case "isReady":
				return ec.fieldContext_ComplexHouse_isReady(ctx, field)
			case "readinessQuarter":
				return ec.fieldContext_ComplexHouse_readinessQuarter(ctx, field)
			case "readinessYear":
				return ec.fieldContext_ComplexHouse_readinessYear(ctx, field)
			case "images":
				return ec.fieldContext_ComplexHouse_images(ctx, field)
			case "documents":
				return ec.fieldContext_ComplexHouse_documents(ctx, field)
			case "projectDeclarations":
				return ec.fieldContext_ComplexHouse_projectDeclarations(ctx, field)
			case "publicationStatus":
				return ec.fieldContext_ComplexHouse_publicationStatus(ctx, field)
			case "internalInfo":
				return ec.fieldContext_ComplexHouse_internalInfo(ctx, field)
			case "isDeleted":
				return ec.fieldContext_ComplexHouse_isDeleted(ctx, field)
			case "createdAt":
				return ec.fieldContext_ComplexHouse_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_ComplexHouse_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ComplexHouse", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_complexHouse_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_complexes(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_complexes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().Complexes(rctx, fc.Args["ids"].([]string), fc.Args["start"].(*int), fc.Args["limit"].(*int), fc.Args["sort"].(*crm_models.Sort), fc.Args["search"].(*string), fc.Args["filter"].(*crm_models.ComplexFilter))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Auth == nil {
				return nil, errors.New("directive auth is not implemented")
			}
			return ec.directives.Auth(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*crm_models.ComplexConnection); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/pinks-agency/ecn/server/internal/crm-facade/models.ComplexConnection`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*crm_models.ComplexConnection)
	fc.Result = res
	return ec.marshalNComplexConnection2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐComplexConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_complexes(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "totalCount":
				return ec.fieldContext_ComplexConnection_totalCount(ctx, field)
			case "edges":
				return ec.fieldContext_ComplexConnection_edges(ctx, field)
			case "nodes":
				return ec.fieldContext_ComplexConnection_nodes(ctx, field)
			case "pageInfo":
				return ec.fieldContext_ComplexConnection_pageInfo(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ComplexConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_complexes_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_complex(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_complex(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().Complex(rctx, fc.Args["id"].(string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Auth == nil {
				return nil, errors.New("directive auth is not implemented")
			}
			return ec.directives.Auth(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*crm_models.Complex); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/pinks-agency/ecn/server/internal/crm-facade/models.Complex`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*crm_models.Complex)
	fc.Result = res
	return ec.marshalNComplex2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐComplex(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_complex(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Complex_id(ctx, field)
			case "title":
				return ec.fieldContext_Complex_title(ctx, field)
			case "description":
				return ec.fieldContext_Complex_description(ctx, field)
			case "address":
				return ec.fieldContext_Complex_address(ctx, field)
			case "lat":
				return ec.fieldContext_Complex_lat(ctx, field)
			case "lon":
				return ec.fieldContext_Complex_lon(ctx, field)
			case "cadastrNumber":
				return ec.fieldContext_Complex_cadastrNumber(ctx, field)
			case "seoText":
				return ec.fieldContext_Complex_seoText(ctx, field)
			case "youtubeLink":
				return ec.fieldContext_Complex_youtubeLink(ctx, field)
			case "tourLink":
				return ec.fieldContext_Complex_tourLink(ctx, field)
			case "inCity":
				return ec.fieldContext_Complex_inCity(ctx, field)
			case "cityDistance":
				return ec.fieldContext_Complex_cityDistance(ctx, field)
			case "region":
				return ec.fieldContext_Complex_region(ctx, field)
			case "subRegion":
				return ec.fieldContext_Complex_subRegion(ctx, field)
			case "developer":
				return ec.fieldContext_Complex_developer(ctx, field)
			case "isReady":
				return ec.fieldContext_Complex_isReady(ctx, field)
			case "readinessQuarter":
				return ec.fieldContext_Complex_readinessQuarter(ctx, field)
			case "readinessYear":
				return ec.fieldContext_Complex_readinessYear(ctx, field)
			case "images":
				return ec.fieldContext_Complex_images(ctx, field)
			case "documents":
				return ec.fieldContext_Complex_documents(ctx, field)
			case "projectDeclarations":
				return ec.fieldContext_Complex_projectDeclarations(ctx, field)
			case "publicationStatus":
				return ec.fieldContext_Complex_publicationStatus(ctx, field)
			case "internalInfo":
				return ec.fieldContext_Complex_internalInfo(ctx, field)
			case "isDeleted":
				return ec.fieldContext_Complex_isDeleted(ctx, field)
			case "createdAt":
				return ec.fieldContext_Complex_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Complex_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Complex", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_complex_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_contacts(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_contacts(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().Contacts(rctx, fc.Args["ids"].([]string), fc.Args["start"].(*int), fc.Args["limit"].(*int), fc.Args["sort"].(*crm_models.Sort), fc.Args["search"].(*string), fc.Args["filter"].(*crm_models.ContactFilter))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Auth == nil {
				return nil, errors.New("directive auth is not implemented")
			}
			return ec.directives.Auth(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*crm_models.ContactConnection); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/pinks-agency/ecn/server/internal/crm-facade/models.ContactConnection`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*crm_models.ContactConnection)
	fc.Result = res
	return ec.marshalNContactConnection2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐContactConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_contacts(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "totalCount":
				return ec.fieldContext_ContactConnection_totalCount(ctx, field)
			case "edges":
				return ec.fieldContext_ContactConnection_edges(ctx, field)
			case "nodes":
				return ec.fieldContext_ContactConnection_nodes(ctx, field)
			case "pageInfo":
				return ec.fieldContext_ContactConnection_pageInfo(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ContactConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_contacts_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_contact(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_contact(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().Contact(rctx, fc.Args["id"].(string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Auth == nil {
				return nil, errors.New("directive auth is not implemented")
			}
			return ec.directives.Auth(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*crm_models.Contact); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/pinks-agency/ecn/server/internal/crm-facade/models.Contact`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*crm_models.Contact)
	fc.Result = res
	return ec.marshalNContact2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐContact(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_contact(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Contact_id(ctx, field)
			case "internalNumber":
				return ec.fieldContext_Contact_internalNumber(ctx, field)
			case "type":
				return ec.fieldContext_Contact_type(ctx, field)
			case "source":
				return ec.fieldContext_Contact_source(ctx, field)
			case "name":
				return ec.fieldContext_Contact_name(ctx, field)
			case "surname":
				return ec.fieldContext_Contact_surname(ctx, field)
			case "patronymic":
				return ec.fieldContext_Contact_patronymic(ctx, field)
			case "birthday":
				return ec.fieldContext_Contact_birthday(ctx, field)
			case "phone":
				return ec.fieldContext_Contact_phone(ctx, field)
			case "additionalPhones":
				return ec.fieldContext_Contact_additionalPhones(ctx, field)
			case "email":
				return ec.fieldContext_Contact_email(ctx, field)
			case "company":
				return ec.fieldContext_Contact_company(ctx, field)
			case "address":
				return ec.fieldContext_Contact_address(ctx, field)
			case "properties":
				return ec.fieldContext_Contact_properties(ctx, field)
			case "passportNumber":
				return ec.fieldContext_Contact_passportNumber(ctx, field)
			case "passportIssuedBy":
				return ec.fieldContext_Contact_passportIssuedBy(ctx, field)
			case "passportIssueDate":
				return ec.fieldContext_Contact_passportIssueDate(ctx, field)
			case "passportIssuerCode":
				return ec.fieldContext_Contact_passportIssuerCode(ctx, field)
			case "internalInfo":
				return ec.fieldContext_Contact_internalInfo(ctx, field)
			case "note":
				return ec.fieldContext_Contact_note(ctx, field)
			case "deals":
				return ec.fieldContext_Contact_deals(ctx, field)
			case "agents":
				return ec.fieldContext_Contact_agents(ctx, field)
			case "contracts":
				return ec.fieldContext_Contact_contracts(ctx, field)
			case "documents":
				return ec.fieldContext_Contact_documents(ctx, field)
			case "lead":
				return ec.fieldContext_Contact_lead(ctx, field)
			case "isDeleted":
				return ec.fieldContext_Contact_isDeleted(ctx, field)
			case "createdAt":
				return ec.fieldContext_Contact_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Contact_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Contact", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_contact_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_deals(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_deals(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().Deals(rctx, fc.Args["ids"].([]string), fc.Args["start"].(*int), fc.Args["limit"].(*int), fc.Args["sort"].(*crm_models.Sort), fc.Args["search"].(*string), fc.Args["filter"].(*crm_models.DealFilter))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Auth == nil {
				return nil, errors.New("directive auth is not implemented")
			}
			return ec.directives.Auth(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*crm_models.DealConnection); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/pinks-agency/ecn/server/internal/crm-facade/models.DealConnection`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*crm_models.DealConnection)
	fc.Result = res
	return ec.marshalNDealConnection2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐDealConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_deals(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "totalCount":
				return ec.fieldContext_DealConnection_totalCount(ctx, field)
			case "edges":
				return ec.fieldContext_DealConnection_edges(ctx, field)
			case "nodes":
				return ec.fieldContext_DealConnection_nodes(ctx, field)
			case "pageInfo":
				return ec.fieldContext_DealConnection_pageInfo(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DealConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_deals_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_deal(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_deal(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().Deal(rctx, fc.Args["id"].(string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Auth == nil {
				return nil, errors.New("directive auth is not implemented")
			}
			return ec.directives.Auth(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*crm_models.Deal); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/pinks-agency/ecn/server/internal/crm-facade/models.Deal`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*crm_models.Deal)
	fc.Result = res
	return ec.marshalNDeal2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐDeal(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_deal(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Deal_id(ctx, field)
			case "internalNumber":
				return ec.fieldContext_Deal_internalNumber(ctx, field)
			case "type":
				return ec.fieldContext_Deal_type(ctx, field)
			case "stage":
				return ec.fieldContext_Deal_stage(ctx, field)
			case "sellerAgent":
				return ec.fieldContext_Deal_sellerAgent(ctx, field)
			case "sellerContact":
				return ec.fieldContext_Deal_sellerContact(ctx, field)
			case "sellerPhone":
				return ec.fieldContext_Deal_sellerPhone(ctx, field)
			case "sellerDocuments":
				return ec.fieldContext_Deal_sellerDocuments(ctx, field)
			case "buyerAgent":
				return ec.fieldContext_Deal_buyerAgent(ctx, field)
			case "buyerContact":
				return ec.fieldContext_Deal_buyerContact(ctx, field)
			case "buyerPhone":
				return ec.fieldContext_Deal_buyerPhone(ctx, field)
			case "buyerDocuments":
				return ec.fieldContext_Deal_buyerDocuments(ctx, field)
			case "property":
				return ec.fieldContext_Deal_property(ctx, field)
			case "address":
				return ec.fieldContext_Deal_address(ctx, field)
			case "mortgageBroker":
				return ec.fieldContext_Deal_mortgageBroker(ctx, field)
			case "mortgageRequest":
				return ec.fieldContext_Deal_mortgageRequest(ctx, field)
			case "mortgageDocuments":
				return ec.fieldContext_Deal_mortgageDocuments(ctx, field)
			case "lawer":
				return ec.fieldContext_Deal_lawer(ctx, field)
			case "lawerDocuments":
				return ec.fieldContext_Deal_lawerDocuments(ctx, field)
			case "accountant":
				return ec.fieldContext_Deal_accountant(ctx, field)
			case "accountantDocuments":
				return ec.fieldContext_Deal_accountantDocuments(ctx, field)
			case "depositDate":
				return ec.fieldContext_Deal_depositDate(ctx, field)
			case "dealDate":
				return ec.fieldContext_Deal_dealDate(ctx, field)
			case "finishedAt":
				return ec.fieldContext_Deal_finishedAt(ctx, field)
			case "commissionAmount":
				return ec.fieldContext_Deal_commissionAmount(ctx, field)
			case "internalComment":
				return ec.fieldContext_Deal_internalComment(ctx, field)
			case "isDeleted":
				return ec.fieldContext_Deal_isDeleted(ctx, field)
			case "createdAt":
				return ec.fieldContext_Deal_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Deal_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Deal", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_deal_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_departments(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_departments(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().Departments(rctx, fc.Args["ids"].([]string), fc.Args["start"].(*int), fc.Args["limit"].(*int), fc.Args["sort"].(*crm_models.Sort), fc.Args["search"].(*string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Auth == nil {
				return nil, errors.New("directive auth is not implemented")
			}
			return ec.directives.Auth(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*crm_models.DepartmentConnection); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/pinks-agency/ecn/server/internal/crm-facade/models.DepartmentConnection`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*crm_models.DepartmentConnection)
	fc.Result = res
	return ec.marshalNDepartmentConnection2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐDepartmentConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_departments(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "totalCount":
				return ec.fieldContext_DepartmentConnection_totalCount(ctx, field)
			case "edges":
				return ec.fieldContext_DepartmentConnection_edges(ctx, field)
			case "nodes":
				return ec.fieldContext_DepartmentConnection_nodes(ctx, field)
			case "pageInfo":
				return ec.fieldContext_DepartmentConnection_pageInfo(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DepartmentConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_departments_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_department(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_department(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().Department(rctx, fc.Args["id"].(string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Auth == nil {
				return nil, errors.New("directive auth is not implemented")
			}
			return ec.directives.Auth(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*crm_models.Department); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/pinks-agency/ecn/server/internal/crm-facade/models.Department`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*crm_models.Department)
	fc.Result = res
	return ec.marshalNDepartment2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐDepartment(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_department(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Department_id(ctx, field)
			case "title":
				return ec.fieldContext_Department_title(ctx, field)
			case "groups":
				return ec.fieldContext_Department_groups(ctx, field)
			case "createdAt":
				return ec.fieldContext_Department_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Department_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Department", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_department_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_developers(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_developers(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().Developers(rctx, fc.Args["ids"].([]string), fc.Args["start"].(*int), fc.Args["limit"].(*int), fc.Args["sort"].(*crm_models.Sort), fc.Args["search"].(*string), fc.Args["filter"].(*crm_models.DeveloperFilterInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Auth == nil {
				return nil, errors.New("directive auth is not implemented")
			}
			return ec.directives.Auth(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*crm_models.DeveloperConnection); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/pinks-agency/ecn/server/internal/crm-facade/models.DeveloperConnection`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*crm_models.DeveloperConnection)
	fc.Result = res
	return ec.marshalNDeveloperConnection2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐDeveloperConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_developers(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "totalCount":
				return ec.fieldContext_DeveloperConnection_totalCount(ctx, field)
			case "edges":
				return ec.fieldContext_DeveloperConnection_edges(ctx, field)
			case "nodes":
				return ec.fieldContext_DeveloperConnection_nodes(ctx, field)
			case "pageInfo":
				return ec.fieldContext_DeveloperConnection_pageInfo(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DeveloperConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_developers_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_developer(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_developer(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().Developer(rctx, fc.Args["id"].(string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Auth == nil {
				return nil, errors.New("directive auth is not implemented")
			}
			return ec.directives.Auth(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*crm_models.Developer); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/pinks-agency/ecn/server/internal/crm-facade/models.Developer`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*crm_models.Developer)
	fc.Result = res
	return ec.marshalNDeveloper2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐDeveloper(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_developer(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Developer_id(ctx, field)
			case "title":
				return ec.fieldContext_Developer_title(ctx, field)
			case "url":
				return ec.fieldContext_Developer_url(ctx, field)
			case "logo":
				return ec.fieldContext_Developer_logo(ctx, field)
			case "isDeleted":
				return ec.fieldContext_Developer_isDeleted(ctx, field)
			case "createdAt":
				return ec.fieldContext_Developer_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Developer_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Developer", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_developer_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_employees(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_employees(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().Employees(rctx, fc.Args["ids"].([]string), fc.Args["start"].(*int), fc.Args["limit"].(*int), fc.Args["sort"].(*crm_models.Sort), fc.Args["search"].(*string), fc.Args["filter"].(*crm_models.EmployeesFilterInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Auth == nil {
				return nil, errors.New("directive auth is not implemented")
			}
			return ec.directives.Auth(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*crm_models.EmployeeConnection); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/pinks-agency/ecn/server/internal/crm-facade/models.EmployeeConnection`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*crm_models.EmployeeConnection)
	fc.Result = res
	return ec.marshalNEmployeeConnection2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐEmployeeConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_employees(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "totalCount":
				return ec.fieldContext_EmployeeConnection_totalCount(ctx, field)
			case "edges":
				return ec.fieldContext_EmployeeConnection_edges(ctx, field)
			case "nodes":
				return ec.fieldContext_EmployeeConnection_nodes(ctx, field)
			case "pageInfo":
				return ec.fieldContext_EmployeeConnection_pageInfo(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type EmployeeConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_employees_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_employee(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_employee(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().Employee(rctx, fc.Args["id"].(string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Auth == nil {
				return nil, errors.New("directive auth is not implemented")
			}
			return ec.directives.Auth(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*crm_models.Employee); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/pinks-agency/ecn/server/internal/crm-facade/models.Employee`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*crm_models.Employee)
	fc.Result = res
	return ec.marshalNEmployee2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐEmployee(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_employee(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Employee_id(ctx, field)
			case "name":
				return ec.fieldContext_Employee_name(ctx, field)
			case "surname":
				return ec.fieldContext_Employee_surname(ctx, field)
			case "patronymic":
				return ec.fieldContext_Employee_patronymic(ctx, field)
			case "birthday":
				return ec.fieldContext_Employee_birthday(ctx, field)
			case "email":
				return ec.fieldContext_Employee_email(ctx, field)
			case "phone":
				return ec.fieldContext_Employee_phone(ctx, field)
			case "position":
				return ec.fieldContext_Employee_position(ctx, field)
			case "department":
				return ec.fieldContext_Employee_department(ctx, field)
			case "group":
				return ec.fieldContext_Employee_group(ctx, field)
			case "role":
				return ec.fieldContext_Employee_role(ctx, field)
			case "internalInfo":
				return ec.fieldContext_Employee_internalInfo(ctx, field)
			case "shortDescription":
				return ec.fieldContext_Employee_shortDescription(ctx, field)
			case "description":
				return ec.fieldContext_Employee_description(ctx, field)
			case "isPublished":
				return ec.fieldContext_Employee_isPublished(ctx, field)
			case "isDeleted":
				return ec.fieldContext_Employee_isDeleted(ctx, field)
			case "avatar":
				return ec.fieldContext_Employee_avatar(ctx, field)
			case "publicImage":
				return ec.fieldContext_Employee_publicImage(ctx, field)
			case "createdAt":
				return ec.fieldContext_Employee_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Employee_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Employee", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_employee_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_generatePdf(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_generatePdf(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().GeneratePDF(rctx, fc.Args["content"].(string), fc.Args["fileName"].(string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Auth == nil {
				return nil, errors.New("directive auth is not implemented")
			}
			return ec.directives.Auth(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(string); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be string`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_generatePdf(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_generatePdf_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_leads(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_leads(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().Leads(rctx, fc.Args["ids"].([]string), fc.Args["start"].(*int), fc.Args["limit"].(*int), fc.Args["sort"].(*crm_models.Sort), fc.Args["search"].(*string), fc.Args["filter"].(*crm_models.LeadFilter))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Auth == nil {
				return nil, errors.New("directive auth is not implemented")
			}
			return ec.directives.Auth(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*crm_models.LeadConnection); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/pinks-agency/ecn/server/internal/crm-facade/models.LeadConnection`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*crm_models.LeadConnection)
	fc.Result = res
	return ec.marshalNLeadConnection2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐLeadConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_leads(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "totalCount":
				return ec.fieldContext_LeadConnection_totalCount(ctx, field)
			case "edges":
				return ec.fieldContext_LeadConnection_edges(ctx, field)
			case "nodes":
				return ec.fieldContext_LeadConnection_nodes(ctx, field)
			case "pageInfo":
				return ec.fieldContext_LeadConnection_pageInfo(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type LeadConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_leads_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_lead(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_lead(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().Lead(rctx, fc.Args["id"].(string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Auth == nil {
				return nil, errors.New("directive auth is not implemented")
			}
			return ec.directives.Auth(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*crm_models.Lead); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/pinks-agency/ecn/server/internal/crm-facade/models.Lead`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*crm_models.Lead)
	fc.Result = res
	return ec.marshalNLead2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐLead(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_lead(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Lead_id(ctx, field)
			case "internalNumber":
				return ec.fieldContext_Lead_internalNumber(ctx, field)
			case "type":
				return ec.fieldContext_Lead_type(ctx, field)
			case "source":
				return ec.fieldContext_Lead_source(ctx, field)
			case "name":
				return ec.fieldContext_Lead_name(ctx, field)
			case "surname":
				return ec.fieldContext_Lead_surname(ctx, field)
			case "patronymic":
				return ec.fieldContext_Lead_patronymic(ctx, field)
			case "birthday":
				return ec.fieldContext_Lead_birthday(ctx, field)
			case "phone":
				return ec.fieldContext_Lead_phone(ctx, field)
			case "additionalPhones":
				return ec.fieldContext_Lead_additionalPhones(ctx, field)
			case "email":
				return ec.fieldContext_Lead_email(ctx, field)
			case "company":
				return ec.fieldContext_Lead_company(ctx, field)
			case "address":
				return ec.fieldContext_Lead_address(ctx, field)
			case "request":
				return ec.fieldContext_Lead_request(ctx, field)
			case "agents":
				return ec.fieldContext_Lead_agents(ctx, field)
			case "status":
				return ec.fieldContext_Lead_status(ctx, field)
			case "comment":
				return ec.fieldContext_Lead_comment(ctx, field)
			case "isDeleted":
				return ec.fieldContext_Lead_isDeleted(ctx, field)
			case "createdAt":
				return ec.fieldContext_Lead_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Lead_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Lead", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_lead_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_logs(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_logs(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().Logs(rctx, fc.Args["ids"].([]string), fc.Args["start"].(*int), fc.Args["limit"].(*int), fc.Args["sort"].(*crm_models.Sort), fc.Args["search"].(*string), fc.Args["filter"].(*crm_models.LogsFilterInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			permission, err := ec.unmarshalNString2string(ctx, "SYSTEM_VIEW_LOG")
			if err != nil {
				return nil, err
			}
			if ec.directives.HasPermission == nil {
				return nil, errors.New("directive hasPermission is not implemented")
			}
			return ec.directives.HasPermission(ctx, nil, directive0, permission)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*crm_models.LogConnection); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/pinks-agency/ecn/server/internal/crm-facade/models.LogConnection`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*crm_models.LogConnection)
	fc.Result = res
	return ec.marshalNLogConnection2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐLogConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_logs(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "totalCount":
				return ec.fieldContext_LogConnection_totalCount(ctx, field)
			case "edges":
				return ec.fieldContext_LogConnection_edges(ctx, field)
			case "nodes":
				return ec.fieldContext_LogConnection_nodes(ctx, field)
			case "pageInfo":
				return ec.fieldContext_LogConnection_pageInfo(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type LogConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_logs_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_meets(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_meets(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().Meets(rctx, fc.Args["ids"].([]string), fc.Args["start"].(*int), fc.Args["limit"].(*int), fc.Args["sort"].(*crm_models.Sort), fc.Args["search"].(*string), fc.Args["filter"].(*crm_models.MeetFilter))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Auth == nil {
				return nil, errors.New("directive auth is not implemented")
			}
			return ec.directives.Auth(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*crm_models.MeetConnection); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/pinks-agency/ecn/server/internal/crm-facade/models.MeetConnection`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*crm_models.MeetConnection)
	fc.Result = res
	return ec.marshalNMeetConnection2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐMeetConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_meets(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "totalCount":
				return ec.fieldContext_MeetConnection_totalCount(ctx, field)
			case "edges":
				return ec.fieldContext_MeetConnection_edges(ctx, field)
			case "nodes":
				return ec.fieldContext_MeetConnection_nodes(ctx, field)
			case "pageInfo":
				return ec.fieldContext_MeetConnection_pageInfo(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MeetConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_meets_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_meet(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_meet(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().Meet(rctx, fc.Args["id"].(string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Auth == nil {
				return nil, errors.New("directive auth is not implemented")
			}
			return ec.directives.Auth(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*crm_models.Meet); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/pinks-agency/ecn/server/internal/crm-facade/models.Meet`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*crm_models.Meet)
	fc.Result = res
	return ec.marshalNMeet2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐMeet(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_meet(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Meet_id(ctx, field)
			case "internalNumber":
				return ec.fieldContext_Meet_internalNumber(ctx, field)
			case "type":
				return ec.fieldContext_Meet_type(ctx, field)
			case "dealType":
				return ec.fieldContext_Meet_dealType(ctx, field)
			case "contactType":
				return ec.fieldContext_Meet_contactType(ctx, field)
			case "dateTime":
				return ec.fieldContext_Meet_dateTime(ctx, field)
			case "property":
				return ec.fieldContext_Meet_property(ctx, field)
			case "address":
				return ec.fieldContext_Meet_address(ctx, field)
			case "comment":
				return ec.fieldContext_Meet_comment(ctx, field)
			case "isOnline":
				return ec.fieldContext_Meet_isOnline(ctx, field)
			case "sellerAgent":
				return ec.fieldContext_Meet_sellerAgent(ctx, field)
			case "sellerContact":
				return ec.fieldContext_Meet_sellerContact(ctx, field)
			case "sellerPhone":
				return ec.fieldContext_Meet_sellerPhone(ctx, field)
			case "buyerAgent":
				return ec.fieldContext_Meet_buyerAgent(ctx, field)
			case "buyerContact":
				return ec.fieldContext_Meet_buyerContact(ctx, field)
			case "buyerPhone":
				return ec.fieldContext_Meet_buyerPhone(ctx, field)
			case "buyerAgency":
				return ec.fieldContext_Meet_buyerAgency(ctx, field)
			case "status":
				return ec.fieldContext_Meet_status(ctx, field)
			case "cancelReason":
				return ec.fieldContext_Meet_cancelReason(ctx, field)
			case "cancelReasonCustom":
				return ec.fieldContext_Meet_cancelReasonCustom(ctx, field)
			case "useDealDeposit":
				return ec.fieldContext_Meet_useDealDeposit(ctx, field)
			case "lawer":
				return ec.fieldContext_Meet_lawer(ctx, field)
			case "accountant":
				return ec.fieldContext_Meet_accountant(ctx, field)
			case "mortgageBroker":
				return ec.fieldContext_Meet_mortgageBroker(ctx, field)
			case "useMortgage":
				return ec.fieldContext_Meet_useMortgage(ctx, field)
			case "isDeleted":
				return ec.fieldContext_Meet_isDeleted(ctx, field)
			case "createdAt":
				return ec.fieldContext_Meet_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Meet_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Meet", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_meet_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_mortgageRequests(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_mortgageRequests(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().MortgageRequests(rctx, fc.Args["ids"].([]string), fc.Args["start"].(*int), fc.Args["limit"].(*int), fc.Args["sort"].(*crm_models.Sort), fc.Args["search"].(*string), fc.Args["filter"].(*crm_models.MortgageRequestFilter))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Auth == nil {
				return nil, errors.New("directive auth is not implemented")
			}
			return ec.directives.Auth(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*crm_models.MortgageRequestConnection); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/pinks-agency/ecn/server/internal/crm-facade/models.MortgageRequestConnection`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*crm_models.MortgageRequestConnection)
	fc.Result = res
	return ec.marshalNMortgageRequestConnection2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐMortgageRequestConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_mortgageRequests(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "totalCount":
				return ec.fieldContext_MortgageRequestConnection_totalCount(ctx, field)
			case "edges":
				return ec.fieldContext_MortgageRequestConnection_edges(ctx, field)
			case "nodes":
				return ec.fieldContext_MortgageRequestConnection_nodes(ctx, field)
			case "pageInfo":
				return ec.fieldContext_MortgageRequestConnection_pageInfo(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MortgageRequestConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_mortgageRequests_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_mortgageRequest(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_mortgageRequest(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().MortgageRequest(rctx, fc.Args["id"].(string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Auth == nil {
				return nil, errors.New("directive auth is not implemented")
			}
			return ec.directives.Auth(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*crm_models.MortgageRequest); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/pinks-agency/ecn/server/internal/crm-facade/models.MortgageRequest`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*crm_models.MortgageRequest)
	fc.Result = res
	return ec.marshalNMortgageRequest2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐMortgageRequest(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_mortgageRequest(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_MortgageRequest_id(ctx, field)
			case "internalNumber":
				return ec.fieldContext_MortgageRequest_internalNumber(ctx, field)
			case "status":
				return ec.fieldContext_MortgageRequest_status(ctx, field)
			case "contact":
				return ec.fieldContext_MortgageRequest_contact(ctx, field)
			case "banks":
				return ec.fieldContext_MortgageRequest_banks(ctx, field)
			case "mortgageBroker":
				return ec.fieldContext_MortgageRequest_mortgageBroker(ctx, field)
			case "agent":
				return ec.fieldContext_MortgageRequest_agent(ctx, field)
			case "deal":
				return ec.fieldContext_MortgageRequest_deal(ctx, field)
			case "property":
				return ec.fieldContext_MortgageRequest_property(ctx, field)
			case "amount":
				return ec.fieldContext_MortgageRequest_amount(ctx, field)
			case "firstDeposit":
				return ec.fieldContext_MortgageRequest_firstDeposit(ctx, field)
			case "period":
				return ec.fieldContext_MortgageRequest_period(ctx, field)
			case "comment":
				return ec.fieldContext_MortgageRequest_comment(ctx, field)
			case "contracts":
				return ec.fieldContext_MortgageRequest_contracts(ctx, field)
			case "documents":
				return ec.fieldContext_MortgageRequest_documents(ctx, field)
			case "sendDate":
				return ec.fieldContext_MortgageRequest_sendDate(ctx, field)
			case "responseDate":
				return ec.fieldContext_MortgageRequest_responseDate(ctx, field)
			case "validTillDate":
				return ec.fieldContext_MortgageRequest_validTillDate(ctx, field)
			case "percentage":
				return ec.fieldContext_MortgageRequest_percentage(ctx, field)
			case "isDeleted":
				return ec.fieldContext_MortgageRequest_isDeleted(ctx, field)
			case "createdAt":
				return ec.fieldContext_MortgageRequest_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_MortgageRequest_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MortgageRequest", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_mortgageRequest_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_pages(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_pages(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().Pages(rctx, fc.Args["ids"].([]string), fc.Args["start"].(*int), fc.Args["limit"].(*int), fc.Args["sort"].(*crm_models.Sort), fc.Args["search"].(*string), fc.Args["filter"].(*crm_models.PageFilterInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Auth == nil {
				return nil, errors.New("directive auth is not implemented")
			}
			return ec.directives.Auth(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*crm_models.PageConnection); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/pinks-agency/ecn/server/internal/crm-facade/models.PageConnection`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*crm_models.PageConnection)
	fc.Result = res
	return ec.marshalNPageConnection2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐPageConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_pages(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "totalCount":
				return ec.fieldContext_PageConnection_totalCount(ctx, field)
			case "edges":
				return ec.fieldContext_PageConnection_edges(ctx, field)
			case "nodes":
				return ec.fieldContext_PageConnection_nodes(ctx, field)
			case "pageInfo":
				return ec.fieldContext_PageConnection_pageInfo(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PageConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_pages_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_page(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_page(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().Page(rctx, fc.Args["id"].(string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Auth == nil {
				return nil, errors.New("directive auth is not implemented")
			}
			return ec.directives.Auth(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*crm_models.Page); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/pinks-agency/ecn/server/internal/crm-facade/models.Page`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*crm_models.Page)
	fc.Result = res
	return ec.marshalNPage2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐPage(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_page(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Page_id(ctx, field)
			case "url":
				return ec.fieldContext_Page_url(ctx, field)
			case "title":
				return ec.fieldContext_Page_title(ctx, field)
			case "description":
				return ec.fieldContext_Page_description(ctx, field)
			case "contentBlocks":
				return ec.fieldContext_Page_contentBlocks(ctx, field)
			case "status":
				return ec.fieldContext_Page_status(ctx, field)
			case "createdAt":
				return ec.fieldContext_Page_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Page_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Page", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_page_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_positions(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_positions(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().Positions(rctx, fc.Args["ids"].([]string), fc.Args["start"].(*int), fc.Args["limit"].(*int), fc.Args["sort"].(*crm_models.Sort), fc.Args["search"].(*string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Auth == nil {
				return nil, errors.New("directive auth is not implemented")
			}
			return ec.directives.Auth(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*crm_models.PositionConnection); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/pinks-agency/ecn/server/internal/crm-facade/models.PositionConnection`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*crm_models.PositionConnection)
	fc.Result = res
	return ec.marshalNPositionConnection2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐPositionConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_positions(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "totalCount":
				return ec.fieldContext_PositionConnection_totalCount(ctx, field)
			case "edges":
				return ec.fieldContext_PositionConnection_edges(ctx, field)
			case "nodes":
				return ec.fieldContext_PositionConnection_nodes(ctx, field)
			case "pageInfo":
				return ec.fieldContext_PositionConnection_pageInfo(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PositionConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_positions_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_position(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_position(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().Position(rctx, fc.Args["id"].(string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Auth == nil {
				return nil, errors.New("directive auth is not implemented")
			}
			return ec.directives.Auth(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*crm_models.Position); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/pinks-agency/ecn/server/internal/crm-facade/models.Position`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*crm_models.Position)
	fc.Result = res
	return ec.marshalNPosition2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐPosition(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_position(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Position_id(ctx, field)
			case "title":
				return ec.fieldContext_Position_title(ctx, field)
			case "createdAt":
				return ec.fieldContext_Position_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Position_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Position", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_position_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_properties(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_properties(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().Properties(rctx, fc.Args["ids"].([]string), fc.Args["start"].(*int), fc.Args["limit"].(*int), fc.Args["sort"].(*crm_models.Sort), fc.Args["search"].(*string), fc.Args["filter"].(*crm_models.PropertyFilter))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Auth == nil {
				return nil, errors.New("directive auth is not implemented")
			}
			return ec.directives.Auth(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*crm_models.PropertyConnection); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/pinks-agency/ecn/server/internal/crm-facade/models.PropertyConnection`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*crm_models.PropertyConnection)
	fc.Result = res
	return ec.marshalNPropertyConnection2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐPropertyConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_properties(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "totalCount":
				return ec.fieldContext_PropertyConnection_totalCount(ctx, field)
			case "edges":
				return ec.fieldContext_PropertyConnection_edges(ctx, field)
			case "nodes":
				return ec.fieldContext_PropertyConnection_nodes(ctx, field)
			case "pageInfo":
				return ec.fieldContext_PropertyConnection_pageInfo(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PropertyConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_properties_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_property(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_property(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().Property(rctx, fc.Args["id"].(string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Auth == nil {
				return nil, errors.New("directive auth is not implemented")
			}
			return ec.directives.Auth(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*crm_models.Property); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/pinks-agency/ecn/server/internal/crm-facade/models.Property`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*crm_models.Property)
	fc.Result = res
	return ec.marshalNProperty2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐProperty(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_property(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Property_id(ctx, field)
			case "internalID":
				return ec.fieldContext_Property_internalID(ctx, field)
			case "deal":
				return ec.fieldContext_Property_deal(ctx, field)
			case "type":
				return ec.fieldContext_Property_type(ctx, field)
			case "subType":
				return ec.fieldContext_Property_subType(ctx, field)
			case "commercialUsage":
				return ec.fieldContext_Property_commercialUsage(ctx, field)
			case "fromDeveloper":
				return ec.fieldContext_Property_fromDeveloper(ctx, field)
			case "inComplex":
				return ec.fieldContext_Property_inComplex(ctx, field)
			case "complex":
				return ec.fieldContext_Property_complex(ctx, field)
			case "complexHouse":
				return ec.fieldContext_Property_complexHouse(ctx, field)
			case "inVillage":
				return ec.fieldContext_Property_inVillage(ctx, field)
			case "village":
				return ec.fieldContext_Property_village(ctx, field)
			case "isHot":
				return ec.fieldContext_Property_isHot(ctx, field)
			case "title":
				return ec.fieldContext_Property_title(ctx, field)
			case "description":
				return ec.fieldContext_Property_description(ctx, field)
			case "address":
				return ec.fieldContext_Property_address(ctx, field)
			case "lat":
				return ec.fieldContext_Property_lat(ctx, field)
			case "lon":
				return ec.fieldContext_Property_lon(ctx, field)
			case "cadastrNumber":
				return ec.fieldContext_Property_cadastrNumber(ctx, field)
			case "seoText":
				return ec.fieldContext_Property_seoText(ctx, field)
			case "youtubeLink":
				return ec.fieldContext_Property_youtubeLink(ctx, field)
			case "tourLink":
				return ec.fieldContext_Property_tourLink(ctx, field)
			case "documents":
				return ec.fieldContext_Property_documents(ctx, field)
			case "images":
				return ec.fieldContext_Property_images(ctx, field)
			case "isDeleted":
				return ec.fieldContext_Property_isDeleted(ctx, field)
			case "isEditable":
				return ec.fieldContext_Property_isEditable(ctx, field)
			case "refreshDate":
				return ec.fieldContext_Property_refreshDate(ctx, field)
			case "status":
				return ec.fieldContext_Property_status(ctx, field)
			case "price":
				return ec.fieldContext_Property_price(ctx, field)
			case "pricePerMeter":
				return ec.fieldContext_Property_pricePerMeter(ctx, field)
			case "pricePerAr":
				return ec.fieldContext_Property_pricePerAr(ctx, field)
			case "priceHistory":
				return ec.fieldContext_Property_priceHistory(ctx, field)
			case "isReady":
				return ec.fieldContext_Property_isReady(ctx, field)
			case "readinessYear":
				return ec.fieldContext_Property_readinessYear(ctx, field)
			case "readinessQuarter":
				return ec.fieldContext_Property_readinessQuarter(ctx, field)
			case "inCity":
				return ec.fieldContext_Property_inCity(ctx, field)
			case "cityDistance":
				return ec.fieldContext_Property_cityDistance(ctx, field)
			case "region":
				return ec.fieldContext_Property_region(ctx, field)
			case "subRegion":
				return ec.fieldContext_Property_subRegion(ctx, field)
			case "source":
				return ec.fieldContext_Property_source(ctx, field)
			case "rooms":
				return ec.fieldContext_Property_rooms(ctx, field)
			case "area":
				return ec.fieldContext_Property_area(ctx, field)
			case "landArea":
				return ec.fieldContext_Property_landArea(ctx, field)
			case "livingArea":
				return ec.fieldContext_Property_livingArea(ctx, field)
			case "kitchenArea":
				return ec.fieldContext_Property_kitchenArea(ctx, field)
			case "toiletType":
				return ec.fieldContext_Property_toiletType(ctx, field)
			case "rehabType":
				return ec.fieldContext_Property_rehabType(ctx, field)
			case "floor":
				return ec.fieldContext_Property_floor(ctx, field)
			case "floors":
				return ec.fieldContext_Property_floors(ctx, field)
			case "ceilingHeight":
				return ec.fieldContext_Property_ceilingHeight(ctx, field)
			case "internalInfo":
				return ec.fieldContext_Property_internalInfo(ctx, field)
			case "comissionPercent":
				return ec.fieldContext_Property_comissionPercent(ctx, field)
			case "comissionAmount":
				return ec.fieldContext_Property_comissionAmount(ctx, field)
			case "createdAt":
				return ec.fieldContext_Property_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Property_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Property", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_property_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_reviews(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_reviews(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().Reviews(rctx, fc.Args["ids"].([]string), fc.Args["start"].(*int), fc.Args["limit"].(*int), fc.Args["sort"].(*crm_models.Sort), fc.Args["search"].(*string), fc.Args["filter"].(*crm_models.ReviewsFilterInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Auth == nil {
				return nil, errors.New("directive auth is not implemented")
			}
			return ec.directives.Auth(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*crm_models.ReviewConnection); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/pinks-agency/ecn/server/internal/crm-facade/models.ReviewConnection`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*crm_models.ReviewConnection)
	fc.Result = res
	return ec.marshalNReviewConnection2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐReviewConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_reviews(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "totalCount":
				return ec.fieldContext_ReviewConnection_totalCount(ctx, field)
			case "edges":
				return ec.fieldContext_ReviewConnection_edges(ctx, field)
			case "nodes":
				return ec.fieldContext_ReviewConnection_nodes(ctx, field)
			case "pageInfo":
				return ec.fieldContext_ReviewConnection_pageInfo(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ReviewConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_reviews_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_review(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_review(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().Review(rctx, fc.Args["id"].(string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Auth == nil {
				return nil, errors.New("directive auth is not implemented")
			}
			return ec.directives.Auth(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*crm_models.Review); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/pinks-agency/ecn/server/internal/crm-facade/models.Review`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*crm_models.Review)
	fc.Result = res
	return ec.marshalNReview2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐReview(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_review(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Review_id(ctx, field)
			case "employee":
				return ec.fieldContext_Review_employee(ctx, field)
			case "text":
				return ec.fieldContext_Review_text(ctx, field)
			case "authorName":
				return ec.fieldContext_Review_authorName(ctx, field)
			case "authorPhone":
				return ec.fieldContext_Review_authorPhone(ctx, field)
			case "status":
				return ec.fieldContext_Review_status(ctx, field)
			case "publicationStatus":
				return ec.fieldContext_Review_publicationStatus(ctx, field)
			case "createdAt":
				return ec.fieldContext_Review_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Review_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Review", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_review_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_roles(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_roles(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().Roles(rctx, fc.Args["ids"].([]string), fc.Args["start"].(*int), fc.Args["limit"].(*int), fc.Args["sort"].(*crm_models.Sort), fc.Args["search"].(*string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Auth == nil {
				return nil, errors.New("directive auth is not implemented")
			}
			return ec.directives.Auth(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*crm_models.RoleConnection); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/pinks-agency/ecn/server/internal/crm-facade/models.RoleConnection`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*crm_models.RoleConnection)
	fc.Result = res
	return ec.marshalNRoleConnection2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐRoleConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_roles(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "totalCount":
				return ec.fieldContext_RoleConnection_totalCount(ctx, field)
			case "edges":
				return ec.fieldContext_RoleConnection_edges(ctx, field)
			case "nodes":
				return ec.fieldContext_RoleConnection_nodes(ctx, field)
			case "pageInfo":
				return ec.fieldContext_RoleConnection_pageInfo(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type RoleConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_roles_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_role(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_role(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().Role(rctx, fc.Args["id"].(string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Auth == nil {
				return nil, errors.New("directive auth is not implemented")
			}
			return ec.directives.Auth(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*crm_models.Role); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/pinks-agency/ecn/server/internal/crm-facade/models.Role`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*crm_models.Role)
	fc.Result = res
	return ec.marshalNRole2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐRole(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_role(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Role_id(ctx, field)
			case "title":
				return ec.fieldContext_Role_title(ctx, field)
			case "permissions":
				return ec.fieldContext_Role_permissions(ctx, field)
			case "createdAt":
				return ec.fieldContext_Role_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Role_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Role", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_role_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_stories(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_stories(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().Stories(rctx, fc.Args["ids"].([]string), fc.Args["start"].(*int), fc.Args["limit"].(*int), fc.Args["sort"].(*crm_models.Sort), fc.Args["search"].(*string), fc.Args["filter"].(*crm_models.StoryFilterInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Auth == nil {
				return nil, errors.New("directive auth is not implemented")
			}
			return ec.directives.Auth(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*crm_models.StoryConnection); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/pinks-agency/ecn/server/internal/crm-facade/models.StoryConnection`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*crm_models.StoryConnection)
	fc.Result = res
	return ec.marshalNStoryConnection2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐStoryConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_stories(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "totalCount":
				return ec.fieldContext_StoryConnection_totalCount(ctx, field)
			case "edges":
				return ec.fieldContext_StoryConnection_edges(ctx, field)
			case "nodes":
				return ec.fieldContext_StoryConnection_nodes(ctx, field)
			case "pageInfo":
				return ec.fieldContext_StoryConnection_pageInfo(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type StoryConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_stories_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_story(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_story(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().Story(rctx, fc.Args["id"].(string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Auth == nil {
				return nil, errors.New("directive auth is not implemented")
			}
			return ec.directives.Auth(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*crm_models.Story); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/pinks-agency/ecn/server/internal/crm-facade/models.Story`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*crm_models.Story)
	fc.Result = res
	return ec.marshalNStory2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐStory(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_story(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Story_id(ctx, field)
			case "category":
				return ec.fieldContext_Story_category(ctx, field)
			case "title":
				return ec.fieldContext_Story_title(ctx, field)
			case "teaser":
				return ec.fieldContext_Story_teaser(ctx, field)
			case "contentBlocks":
				return ec.fieldContext_Story_contentBlocks(ctx, field)
			case "cover":
				return ec.fieldContext_Story_cover(ctx, field)
			case "status":
				return ec.fieldContext_Story_status(ctx, field)
			case "createdAt":
				return ec.fieldContext_Story_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Story_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Story", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_story_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_tasks(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_tasks(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().Tasks(rctx, fc.Args["ids"].([]string), fc.Args["start"].(*int), fc.Args["limit"].(*int), fc.Args["sort"].(*crm_models.Sort), fc.Args["search"].(*string), fc.Args["filter"].(*crm_models.TaskFilter))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Auth == nil {
				return nil, errors.New("directive auth is not implemented")
			}
			return ec.directives.Auth(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*crm_models.TaskConnection); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/pinks-agency/ecn/server/internal/crm-facade/models.TaskConnection`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*crm_models.TaskConnection)
	fc.Result = res
	return ec.marshalNTaskConnection2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐTaskConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_tasks(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "totalCount":
				return ec.fieldContext_TaskConnection_totalCount(ctx, field)
			case "edges":
				return ec.fieldContext_TaskConnection_edges(ctx, field)
			case "nodes":
				return ec.fieldContext_TaskConnection_nodes(ctx, field)
			case "pageInfo":
				return ec.fieldContext_TaskConnection_pageInfo(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TaskConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_tasks_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_task(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_task(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().Task(rctx, fc.Args["id"].(string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Auth == nil {
				return nil, errors.New("directive auth is not implemented")
			}
			return ec.directives.Auth(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*crm_models.Task); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/pinks-agency/ecn/server/internal/crm-facade/models.Task`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*crm_models.Task)
	fc.Result = res
	return ec.marshalNTask2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐTask(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_task(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Task_id(ctx, field)
			case "internalNumber":
				return ec.fieldContext_Task_internalNumber(ctx, field)
			case "title":
				return ec.fieldContext_Task_title(ctx, field)
			case "label":
				return ec.fieldContext_Task_label(ctx, field)
			case "isHot":
				return ec.fieldContext_Task_isHot(ctx, field)
			case "status":
				return ec.fieldContext_Task_status(ctx, field)
			case "assignee":
				return ec.fieldContext_Task_assignee(ctx, field)
			case "reporter":
				return ec.fieldContext_Task_reporter(ctx, field)
			case "property":
				return ec.fieldContext_Task_property(ctx, field)
			case "contact":
				return ec.fieldContext_Task_contact(ctx, field)
			case "contactPhone":
				return ec.fieldContext_Task_contactPhone(ctx, field)
			case "lead":
				return ec.fieldContext_Task_lead(ctx, field)
			case "deal":
				return ec.fieldContext_Task_deal(ctx, field)
			case "startDate":
				return ec.fieldContext_Task_startDate(ctx, field)
			case "durationDays":
				return ec.fieldContext_Task_durationDays(ctx, field)
			case "durationHours":
				return ec.fieldContext_Task_durationHours(ctx, field)
			case "details":
				return ec.fieldContext_Task_details(ctx, field)
			case "isCompleted":
				return ec.fieldContext_Task_isCompleted(ctx, field)
			case "endDate":
				return ec.fieldContext_Task_endDate(ctx, field)
			case "tag":
				return ec.fieldContext_Task_tag(ctx, field)
			case "isDeleted":
				return ec.fieldContext_Task_isDeleted(ctx, field)
			case "createdAt":
				return ec.fieldContext_Task_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Task_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Task", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_task_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_vacancies(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_vacancies(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().Vacancies(rctx, fc.Args["ids"].([]string), fc.Args["start"].(*int), fc.Args["limit"].(*int), fc.Args["sort"].(*crm_models.Sort), fc.Args["search"].(*string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Auth == nil {
				return nil, errors.New("directive auth is not implemented")
			}
			return ec.directives.Auth(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*crm_models.VacancyConnection); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/pinks-agency/ecn/server/internal/crm-facade/models.VacancyConnection`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*crm_models.VacancyConnection)
	fc.Result = res
	return ec.marshalNVacancyConnection2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐVacancyConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_vacancies(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "totalCount":
				return ec.fieldContext_VacancyConnection_totalCount(ctx, field)
			case "edges":
				return ec.fieldContext_VacancyConnection_edges(ctx, field)
			case "nodes":
				return ec.fieldContext_VacancyConnection_nodes(ctx, field)
			case "pageInfo":
				return ec.fieldContext_VacancyConnection_pageInfo(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type VacancyConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_vacancies_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_vacancy(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_vacancy(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().Vacancy(rctx, fc.Args["id"].(string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Auth == nil {
				return nil, errors.New("directive auth is not implemented")
			}
			return ec.directives.Auth(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*crm_models.Vacancy); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/pinks-agency/ecn/server/internal/crm-facade/models.Vacancy`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*crm_models.Vacancy)
	fc.Result = res
	return ec.marshalNVacancy2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐVacancy(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_vacancy(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Vacancy_id(ctx, field)
			case "title":
				return ec.fieldContext_Vacancy_title(ctx, field)
			case "description":
				return ec.fieldContext_Vacancy_description(ctx, field)
			case "experience":
				return ec.fieldContext_Vacancy_experience(ctx, field)
			case "salary":
				return ec.fieldContext_Vacancy_salary(ctx, field)
			case "schedule":
				return ec.fieldContext_Vacancy_schedule(ctx, field)
			case "publicationStatus":
				return ec.fieldContext_Vacancy_publicationStatus(ctx, field)
			case "createdAt":
				return ec.fieldContext_Vacancy_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Vacancy_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Vacancy", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_vacancy_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_vacancyRequests(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_vacancyRequests(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().VacancyRequests(rctx, fc.Args["ids"].([]string), fc.Args["start"].(*int), fc.Args["limit"].(*int), fc.Args["sort"].(*crm_models.Sort), fc.Args["search"].(*string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Auth == nil {
				return nil, errors.New("directive auth is not implemented")
			}
			return ec.directives.Auth(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*crm_models.VacancyRequestConnection); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/pinks-agency/ecn/server/internal/crm-facade/models.VacancyRequestConnection`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*crm_models.VacancyRequestConnection)
	fc.Result = res
	return ec.marshalNVacancyRequestConnection2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐVacancyRequestConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_vacancyRequests(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "totalCount":
				return ec.fieldContext_VacancyRequestConnection_totalCount(ctx, field)
			case "edges":
				return ec.fieldContext_VacancyRequestConnection_edges(ctx, field)
			case "nodes":
				return ec.fieldContext_VacancyRequestConnection_nodes(ctx, field)
			case "pageInfo":
				return ec.fieldContext_VacancyRequestConnection_pageInfo(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type VacancyRequestConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_vacancyRequests_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_vacancyRequest(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_vacancyRequest(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().VacancyRequest(rctx, fc.Args["id"].(string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Auth == nil {
				return nil, errors.New("directive auth is not implemented")
			}
			return ec.directives.Auth(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*crm_models.VacancyRequest); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/pinks-agency/ecn/server/internal/crm-facade/models.VacancyRequest`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*crm_models.VacancyRequest)
	fc.Result = res
	return ec.marshalNVacancyRequest2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐVacancyRequest(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_vacancyRequest(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_VacancyRequest_id(ctx, field)
			case "vacancy":
				return ec.fieldContext_VacancyRequest_vacancy(ctx, field)
			case "name":
				return ec.fieldContext_VacancyRequest_name(ctx, field)
			case "letter":
				return ec.fieldContext_VacancyRequest_letter(ctx, field)
			case "attachments":
				return ec.fieldContext_VacancyRequest_attachments(ctx, field)
			case "internalComment":
				return ec.fieldContext_VacancyRequest_internalComment(ctx, field)
			case "status":
				return ec.fieldContext_VacancyRequest_status(ctx, field)
			case "createdAt":
				return ec.fieldContext_VacancyRequest_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_VacancyRequest_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type VacancyRequest", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_vacancyRequest_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_villages(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_villages(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().Villages(rctx, fc.Args["ids"].([]string), fc.Args["start"].(*int), fc.Args["limit"].(*int), fc.Args["sort"].(*crm_models.Sort), fc.Args["search"].(*string), fc.Args["filter"].(*crm_models.VillageFilter))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Auth == nil {
				return nil, errors.New("directive auth is not implemented")
			}
			return ec.directives.Auth(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*crm_models.VillageConnection); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/pinks-agency/ecn/server/internal/crm-facade/models.VillageConnection`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*crm_models.VillageConnection)
	fc.Result = res
	return ec.marshalNVillageConnection2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐVillageConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_villages(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "totalCount":
				return ec.fieldContext_VillageConnection_totalCount(ctx, field)
			case "edges":
				return ec.fieldContext_VillageConnection_edges(ctx, field)
			case "nodes":
				return ec.fieldContext_VillageConnection_nodes(ctx, field)
			case "pageInfo":
				return ec.fieldContext_VillageConnection_pageInfo(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type VillageConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_villages_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_village(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_village(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().Village(rctx, fc.Args["id"].(string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Auth == nil {
				return nil, errors.New("directive auth is not implemented")
			}
			return ec.directives.Auth(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*crm_models.Village); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/pinks-agency/ecn/server/internal/crm-facade/models.Village`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*crm_models.Village)
	fc.Result = res
	return ec.marshalNVillage2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐVillage(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_village(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Village_id(ctx, field)
			case "title":
				return ec.fieldContext_Village_title(ctx, field)
			case "description":
				return ec.fieldContext_Village_description(ctx, field)
			case "address":
				return ec.fieldContext_Village_address(ctx, field)
			case "lat":
				return ec.fieldContext_Village_lat(ctx, field)
			case "lon":
				return ec.fieldContext_Village_lon(ctx, field)
			case "cadastrNumber":
				return ec.fieldContext_Village_cadastrNumber(ctx, field)
			case "seoText":
				return ec.fieldContext_Village_seoText(ctx, field)
			case "youtubeLink":
				return ec.fieldContext_Village_youtubeLink(ctx, field)
			case "tourLink":
				return ec.fieldContext_Village_tourLink(ctx, field)
			case "inCity":
				return ec.fieldContext_Village_inCity(ctx, field)
			case "cityDistance":
				return ec.fieldContext_Village_cityDistance(ctx, field)
			case "region":
				return ec.fieldContext_Village_region(ctx, field)
			case "subRegion":
				return ec.fieldContext_Village_subRegion(ctx, field)
			case "developer":
				return ec.fieldContext_Village_developer(ctx, field)
			case "isReady":
				return ec.fieldContext_Village_isReady(ctx, field)
			case "readinessQuarter":
				return ec.fieldContext_Village_readinessQuarter(ctx, field)
			case "readinessYear":
				return ec.fieldContext_Village_readinessYear(ctx, field)
			case "images":
				return ec.fieldContext_Village_images(ctx, field)
			case "documents":
				return ec.fieldContext_Village_documents(ctx, field)
			case "projectDeclarations":
				return ec.fieldContext_Village_projectDeclarations(ctx, field)
			case "publicationStatus":
				return ec.fieldContext_Village_publicationStatus(ctx, field)
			case "internalInfo":
				return ec.fieldContext_Village_internalInfo(ctx, field)
			case "isDeleted":
				return ec.fieldContext_Village_isDeleted(ctx, field)
			case "createdAt":
				return ec.fieldContext_Village_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Village_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Village", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_village_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query___type(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query___type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectType(fc.Args["name"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query___type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query___type_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query___schema(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query___schema(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectSchema()
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Schema)
	fc.Result = res
	return ec.marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query___schema(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "description":
				return ec.fieldContext___Schema_description(ctx, field)
			case "types":
				return ec.fieldContext___Schema_types(ctx, field)
			case "queryType":
				return ec.fieldContext___Schema_queryType(ctx, field)
			case "mutationType":
				return ec.fieldContext___Schema_mutationType(ctx, field)
			case "subscriptionType":
				return ec.fieldContext___Schema_subscriptionType(ctx, field)
			case "directives":
				return ec.fieldContext___Schema_directives(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Schema", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Readiness_year(ctx context.Context, field graphql.CollectedField, obj *crm_models.Readiness) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Readiness_year(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Year, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Readiness_year(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Readiness",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Readiness_quarter(ctx context.Context, field graphql.CollectedField, obj *crm_models.Readiness) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Readiness_quarter(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Quarter, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Readiness_quarter(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Readiness",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Review_id(ctx context.Context, field graphql.CollectedField, obj *crm_models.Review) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Review_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Review_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Review",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Review_employee(ctx context.Context, field graphql.CollectedField, obj *crm_models.Review) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Review_employee(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Review().Employee(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*crm_models.Employee)
	fc.Result = res
	return ec.marshalOEmployee2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐEmployee(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Review_employee(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Review",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Employee_id(ctx, field)
			case "name":
				return ec.fieldContext_Employee_name(ctx, field)
			case "surname":
				return ec.fieldContext_Employee_surname(ctx, field)
			case "patronymic":
				return ec.fieldContext_Employee_patronymic(ctx, field)
			case "birthday":
				return ec.fieldContext_Employee_birthday(ctx, field)
			case "email":
				return ec.fieldContext_Employee_email(ctx, field)
			case "phone":
				return ec.fieldContext_Employee_phone(ctx, field)
			case "position":
				return ec.fieldContext_Employee_position(ctx, field)
			case "department":
				return ec.fieldContext_Employee_department(ctx, field)
			case "group":
				return ec.fieldContext_Employee_group(ctx, field)
			case "role":
				return ec.fieldContext_Employee_role(ctx, field)
			case "internalInfo":
				return ec.fieldContext_Employee_internalInfo(ctx, field)
			case "shortDescription":
				return ec.fieldContext_Employee_shortDescription(ctx, field)
			case "description":
				return ec.fieldContext_Employee_description(ctx, field)
			case "isPublished":
				return ec.fieldContext_Employee_isPublished(ctx, field)
			case "isDeleted":
				return ec.fieldContext_Employee_isDeleted(ctx, field)
			case "avatar":
				return ec.fieldContext_Employee_avatar(ctx, field)
			case "publicImage":
				return ec.fieldContext_Employee_publicImage(ctx, field)
			case "createdAt":
				return ec.fieldContext_Employee_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Employee_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Employee", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Review_text(ctx context.Context, field graphql.CollectedField, obj *crm_models.Review) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Review_text(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Text, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Review_text(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Review",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Review_authorName(ctx context.Context, field graphql.CollectedField, obj *crm_models.Review) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Review_authorName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AuthorName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Review_authorName(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Review",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Review_authorPhone(ctx context.Context, field graphql.CollectedField, obj *crm_models.Review) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Review_authorPhone(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AuthorPhone, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Review_authorPhone(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Review",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Review_status(ctx context.Context, field graphql.CollectedField, obj *crm_models.Review) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Review_status(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(crm_models.ReviewStatusEnum)
	fc.Result = res
	return ec.marshalNReviewStatusEnum2githubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐReviewStatusEnum(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Review_status(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Review",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ReviewStatusEnum does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Review_publicationStatus(ctx context.Context, field graphql.CollectedField, obj *crm_models.Review) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Review_publicationStatus(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PublicationStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(crm_models.PublicationStatusEnum)
	fc.Result = res
	return ec.marshalNPublicationStatusEnum2githubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐPublicationStatusEnum(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Review_publicationStatus(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Review",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type PublicationStatusEnum does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Review_createdAt(ctx context.Context, field graphql.CollectedField, obj *crm_models.Review) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Review_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Review_createdAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Review",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Review_updatedAt(ctx context.Context, field graphql.CollectedField, obj *crm_models.Review) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Review_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Review_updatedAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Review",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ReviewConnection_totalCount(ctx context.Context, field graphql.CollectedField, obj *crm_models.ReviewConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ReviewConnection_totalCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ReviewConnection_totalCount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ReviewConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ReviewConnection_edges(ctx context.Context, field graphql.CollectedField, obj *crm_models.ReviewConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ReviewConnection_edges(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*crm_models.ReviewEdge)
	fc.Result = res
	return ec.marshalNReviewEdge2ᚕᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐReviewEdgeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ReviewConnection_edges(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ReviewConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "node":
				return ec.fieldContext_ReviewEdge_node(ctx, field)
			case "cursor":
				return ec.fieldContext_ReviewEdge_cursor(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ReviewEdge", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ReviewConnection_nodes(ctx context.Context, field graphql.CollectedField, obj *crm_models.ReviewConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ReviewConnection_nodes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Nodes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*crm_models.Review)
	fc.Result = res
	return ec.marshalNReview2ᚕᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐReviewᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ReviewConnection_nodes(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ReviewConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Review_id(ctx, field)
			case "employee":
				return ec.fieldContext_Review_employee(ctx, field)
			case "text":
				return ec.fieldContext_Review_text(ctx, field)
			case "authorName":
				return ec.fieldContext_Review_authorName(ctx, field)
			case "authorPhone":
				return ec.fieldContext_Review_authorPhone(ctx, field)
			case "status":
				return ec.fieldContext_Review_status(ctx, field)
			case "publicationStatus":
				return ec.fieldContext_Review_publicationStatus(ctx, field)
			case "createdAt":
				return ec.fieldContext_Review_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Review_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Review", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ReviewConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *crm_models.ReviewConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ReviewConnection_pageInfo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*crm_models.PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ReviewConnection_pageInfo(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ReviewConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "startCursor":
				return ec.fieldContext_PageInfo_startCursor(ctx, field)
			case "endCursor":
				return ec.fieldContext_PageInfo_endCursor(ctx, field)
			case "hasNextPage":
				return ec.fieldContext_PageInfo_hasNextPage(ctx, field)
			case "hasPreviousPage":
				return ec.fieldContext_PageInfo_hasPreviousPage(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PageInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ReviewEdge_node(ctx context.Context, field graphql.CollectedField, obj *crm_models.ReviewEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ReviewEdge_node(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*crm_models.Review)
	fc.Result = res
	return ec.marshalNReview2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐReview(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ReviewEdge_node(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ReviewEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Review_id(ctx, field)
			case "employee":
				return ec.fieldContext_Review_employee(ctx, field)
			case "text":
				return ec.fieldContext_Review_text(ctx, field)
			case "authorName":
				return ec.fieldContext_Review_authorName(ctx, field)
			case "authorPhone":
				return ec.fieldContext_Review_authorPhone(ctx, field)
			case "status":
				return ec.fieldContext_Review_status(ctx, field)
			case "publicationStatus":
				return ec.fieldContext_Review_publicationStatus(ctx, field)
			case "createdAt":
				return ec.fieldContext_Review_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Review_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Review", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ReviewEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *crm_models.ReviewEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ReviewEdge_cursor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNCursor2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ReviewEdge_cursor(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ReviewEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Cursor does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Role_id(ctx context.Context, field graphql.CollectedField, obj *crm_models.Role) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Role_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Role_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Role",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Role_title(ctx context.Context, field graphql.CollectedField, obj *crm_models.Role) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Role_title(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Title, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Role_title(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Role",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Role_permissions(ctx context.Context, field graphql.CollectedField, obj *crm_models.Role) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Role_permissions(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Permissions, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]crm_models.RolePermissionsEnum)
	fc.Result = res
	return ec.marshalNRolePermissionsEnum2ᚕgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐRolePermissionsEnumᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Role_permissions(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Role",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type RolePermissionsEnum does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Role_createdAt(ctx context.Context, field graphql.CollectedField, obj *crm_models.Role) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Role_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Role_createdAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Role",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Role_updatedAt(ctx context.Context, field graphql.CollectedField, obj *crm_models.Role) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Role_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Role_updatedAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Role",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RoleConnection_totalCount(ctx context.Context, field graphql.CollectedField, obj *crm_models.RoleConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RoleConnection_totalCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RoleConnection_totalCount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RoleConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RoleConnection_edges(ctx context.Context, field graphql.CollectedField, obj *crm_models.RoleConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RoleConnection_edges(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*crm_models.RoleEdge)
	fc.Result = res
	return ec.marshalNRoleEdge2ᚕᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐRoleEdgeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RoleConnection_edges(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RoleConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "node":
				return ec.fieldContext_RoleEdge_node(ctx, field)
			case "cursor":
				return ec.fieldContext_RoleEdge_cursor(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type RoleEdge", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _RoleConnection_nodes(ctx context.Context, field graphql.CollectedField, obj *crm_models.RoleConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RoleConnection_nodes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Nodes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*crm_models.Role)
	fc.Result = res
	return ec.marshalNRole2ᚕᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐRoleᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RoleConnection_nodes(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RoleConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Role_id(ctx, field)
			case "title":
				return ec.fieldContext_Role_title(ctx, field)
			case "permissions":
				return ec.fieldContext_Role_permissions(ctx, field)
			case "createdAt":
				return ec.fieldContext_Role_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Role_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Role", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _RoleConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *crm_models.RoleConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RoleConnection_pageInfo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*crm_models.PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RoleConnection_pageInfo(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RoleConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "startCursor":
				return ec.fieldContext_PageInfo_startCursor(ctx, field)
			case "endCursor":
				return ec.fieldContext_PageInfo_endCursor(ctx, field)
			case "hasNextPage":
				return ec.fieldContext_PageInfo_hasNextPage(ctx, field)
			case "hasPreviousPage":
				return ec.fieldContext_PageInfo_hasPreviousPage(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PageInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _RoleEdge_node(ctx context.Context, field graphql.CollectedField, obj *crm_models.RoleEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RoleEdge_node(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*crm_models.Role)
	fc.Result = res
	return ec.marshalNRole2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐRole(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RoleEdge_node(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RoleEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Role_id(ctx, field)
			case "title":
				return ec.fieldContext_Role_title(ctx, field)
			case "permissions":
				return ec.fieldContext_Role_permissions(ctx, field)
			case "createdAt":
				return ec.fieldContext_Role_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Role_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Role", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _RoleEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *crm_models.RoleEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RoleEdge_cursor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNCursor2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RoleEdge_cursor(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RoleEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Cursor does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Story_id(ctx context.Context, field graphql.CollectedField, obj *crm_models.Story) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Story_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Story_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Story",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Story_category(ctx context.Context, field graphql.CollectedField, obj *crm_models.Story) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Story_category(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Category, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(crm_models.StoryCategoryEnum)
	fc.Result = res
	return ec.marshalNStoryCategoryEnum2githubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐStoryCategoryEnum(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Story_category(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Story",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type StoryCategoryEnum does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Story_title(ctx context.Context, field graphql.CollectedField, obj *crm_models.Story) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Story_title(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Title, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Story_title(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Story",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Story_teaser(ctx context.Context, field graphql.CollectedField, obj *crm_models.Story) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Story_teaser(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Teaser, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Story_teaser(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Story",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Story_contentBlocks(ctx context.Context, field graphql.CollectedField, obj *crm_models.Story) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Story_contentBlocks(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ContentBlocks, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]crm_models.ContentBlock)
	fc.Result = res
	return ec.marshalNContentBlock2ᚕgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐContentBlockᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Story_contentBlocks(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Story",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "type":
				return ec.fieldContext_ContentBlock_type(ctx, field)
			case "data":
				return ec.fieldContext_ContentBlock_data(ctx, field)
			case "isVisible":
				return ec.fieldContext_ContentBlock_isVisible(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ContentBlock", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Story_cover(ctx context.Context, field graphql.CollectedField, obj *crm_models.Story) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Story_cover(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Story().Cover(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*crm_models.Image)
	fc.Result = res
	return ec.marshalOImage2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐImage(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Story_cover(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Story",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Image_id(ctx, field)
			case "url":
				return ec.fieldContext_Image_url(ctx, field)
			case "path":
				return ec.fieldContext_Image_path(ctx, field)
			case "title":
				return ec.fieldContext_Image_title(ctx, field)
			case "fileName":
				return ec.fieldContext_Image_fileName(ctx, field)
			case "fileType":
				return ec.fieldContext_Image_fileType(ctx, field)
			case "previewUrl":
				return ec.fieldContext_Image_previewUrl(ctx, field)
			case "previewPath":
				return ec.fieldContext_Image_previewPath(ctx, field)
			case "blurHash":
				return ec.fieldContext_Image_blurHash(ctx, field)
			case "preset":
				return ec.fieldContext_Image_preset(ctx, field)
			case "createdAt":
				return ec.fieldContext_Image_createdAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Image", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Story_status(ctx context.Context, field graphql.CollectedField, obj *crm_models.Story) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Story_status(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(crm_models.PublicationStatusEnum)
	fc.Result = res
	return ec.marshalNPublicationStatusEnum2githubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐPublicationStatusEnum(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Story_status(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Story",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type PublicationStatusEnum does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Story_createdAt(ctx context.Context, field graphql.CollectedField, obj *crm_models.Story) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Story_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Story_createdAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Story",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Story_updatedAt(ctx context.Context, field graphql.CollectedField, obj *crm_models.Story) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Story_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Story_updatedAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Story",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _StoryConnection_totalCount(ctx context.Context, field graphql.CollectedField, obj *crm_models.StoryConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_StoryConnection_totalCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_StoryConnection_totalCount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "StoryConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _StoryConnection_edges(ctx context.Context, field graphql.CollectedField, obj *crm_models.StoryConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_StoryConnection_edges(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*crm_models.StoryEdge)
	fc.Result = res
	return ec.marshalNStoryEdge2ᚕᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐStoryEdgeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_StoryConnection_edges(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "StoryConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "node":
				return ec.fieldContext_StoryEdge_node(ctx, field)
			case "cursor":
				return ec.fieldContext_StoryEdge_cursor(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type StoryEdge", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _StoryConnection_nodes(ctx context.Context, field graphql.CollectedField, obj *crm_models.StoryConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_StoryConnection_nodes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Nodes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*crm_models.Story)
	fc.Result = res
	return ec.marshalNStory2ᚕᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐStoryᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_StoryConnection_nodes(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "StoryConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Story_id(ctx, field)
			case "category":
				return ec.fieldContext_Story_category(ctx, field)
			case "title":
				return ec.fieldContext_Story_title(ctx, field)
			case "teaser":
				return ec.fieldContext_Story_teaser(ctx, field)
			case "contentBlocks":
				return ec.fieldContext_Story_contentBlocks(ctx, field)
			case "cover":
				return ec.fieldContext_Story_cover(ctx, field)
			case "status":
				return ec.fieldContext_Story_status(ctx, field)
			case "createdAt":
				return ec.fieldContext_Story_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Story_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Story", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _StoryConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *crm_models.StoryConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_StoryConnection_pageInfo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*crm_models.PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_StoryConnection_pageInfo(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "StoryConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "startCursor":
				return ec.fieldContext_PageInfo_startCursor(ctx, field)
			case "endCursor":
				return ec.fieldContext_PageInfo_endCursor(ctx, field)
			case "hasNextPage":
				return ec.fieldContext_PageInfo_hasNextPage(ctx, field)
			case "hasPreviousPage":
				return ec.fieldContext_PageInfo_hasPreviousPage(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PageInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _StoryEdge_node(ctx context.Context, field graphql.CollectedField, obj *crm_models.StoryEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_StoryEdge_node(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*crm_models.Story)
	fc.Result = res
	return ec.marshalNStory2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐStory(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_StoryEdge_node(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "StoryEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Story_id(ctx, field)
			case "category":
				return ec.fieldContext_Story_category(ctx, field)
			case "title":
				return ec.fieldContext_Story_title(ctx, field)
			case "teaser":
				return ec.fieldContext_Story_teaser(ctx, field)
			case "contentBlocks":
				return ec.fieldContext_Story_contentBlocks(ctx, field)
			case "cover":
				return ec.fieldContext_Story_cover(ctx, field)
			case "status":
				return ec.fieldContext_Story_status(ctx, field)
			case "createdAt":
				return ec.fieldContext_Story_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Story_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Story", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _StoryEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *crm_models.StoryEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_StoryEdge_cursor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNCursor2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_StoryEdge_cursor(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "StoryEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Cursor does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Task_id(ctx context.Context, field graphql.CollectedField, obj *crm_models.Task) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Task_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Task_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Task",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Task_internalNumber(ctx context.Context, field graphql.CollectedField, obj *crm_models.Task) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Task_internalNumber(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InternalNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Task_internalNumber(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Task",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Task_title(ctx context.Context, field graphql.CollectedField, obj *crm_models.Task) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Task_title(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Title, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Task_title(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Task",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Task_label(ctx context.Context, field graphql.CollectedField, obj *crm_models.Task) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Task_label(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Label, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*crm_models.TaskLabelEnum)
	fc.Result = res
	return ec.marshalOTaskLabelEnum2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐTaskLabelEnum(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Task_label(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Task",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type TaskLabelEnum does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Task_isHot(ctx context.Context, field graphql.CollectedField, obj *crm_models.Task) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Task_isHot(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsHot, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Task_isHot(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Task",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Task_status(ctx context.Context, field graphql.CollectedField, obj *crm_models.Task) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Task_status(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*crm_models.TaskStatusEnum)
	fc.Result = res
	return ec.marshalOTaskStatusEnum2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐTaskStatusEnum(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Task_status(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Task",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type TaskStatusEnum does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Task_assignee(ctx context.Context, field graphql.CollectedField, obj *crm_models.Task) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Task_assignee(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Task().Assignee(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*crm_models.Employee)
	fc.Result = res
	return ec.marshalOEmployee2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐEmployee(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Task_assignee(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Task",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Employee_id(ctx, field)
			case "name":
				return ec.fieldContext_Employee_name(ctx, field)
			case "surname":
				return ec.fieldContext_Employee_surname(ctx, field)
			case "patronymic":
				return ec.fieldContext_Employee_patronymic(ctx, field)
			case "birthday":
				return ec.fieldContext_Employee_birthday(ctx, field)
			case "email":
				return ec.fieldContext_Employee_email(ctx, field)
			case "phone":
				return ec.fieldContext_Employee_phone(ctx, field)
			case "position":
				return ec.fieldContext_Employee_position(ctx, field)
			case "department":
				return ec.fieldContext_Employee_department(ctx, field)
			case "group":
				return ec.fieldContext_Employee_group(ctx, field)
			case "role":
				return ec.fieldContext_Employee_role(ctx, field)
			case "internalInfo":
				return ec.fieldContext_Employee_internalInfo(ctx, field)
			case "shortDescription":
				return ec.fieldContext_Employee_shortDescription(ctx, field)
			case "description":
				return ec.fieldContext_Employee_description(ctx, field)
			case "isPublished":
				return ec.fieldContext_Employee_isPublished(ctx, field)
			case "isDeleted":
				return ec.fieldContext_Employee_isDeleted(ctx, field)
			case "avatar":
				return ec.fieldContext_Employee_avatar(ctx, field)
			case "publicImage":
				return ec.fieldContext_Employee_publicImage(ctx, field)
			case "createdAt":
				return ec.fieldContext_Employee_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Employee_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Employee", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Task_reporter(ctx context.Context, field graphql.CollectedField, obj *crm_models.Task) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Task_reporter(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Task().Reporter(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*crm_models.Employee)
	fc.Result = res
	return ec.marshalOEmployee2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐEmployee(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Task_reporter(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Task",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Employee_id(ctx, field)
			case "name":
				return ec.fieldContext_Employee_name(ctx, field)
			case "surname":
				return ec.fieldContext_Employee_surname(ctx, field)
			case "patronymic":
				return ec.fieldContext_Employee_patronymic(ctx, field)
			case "birthday":
				return ec.fieldContext_Employee_birthday(ctx, field)
			case "email":
				return ec.fieldContext_Employee_email(ctx, field)
			case "phone":
				return ec.fieldContext_Employee_phone(ctx, field)
			case "position":
				return ec.fieldContext_Employee_position(ctx, field)
			case "department":
				return ec.fieldContext_Employee_department(ctx, field)
			case "group":
				return ec.fieldContext_Employee_group(ctx, field)
			case "role":
				return ec.fieldContext_Employee_role(ctx, field)
			case "internalInfo":
				return ec.fieldContext_Employee_internalInfo(ctx, field)
			case "shortDescription":
				return ec.fieldContext_Employee_shortDescription(ctx, field)
			case "description":
				return ec.fieldContext_Employee_description(ctx, field)
			case "isPublished":
				return ec.fieldContext_Employee_isPublished(ctx, field)
			case "isDeleted":
				return ec.fieldContext_Employee_isDeleted(ctx, field)
			case "avatar":
				return ec.fieldContext_Employee_avatar(ctx, field)
			case "publicImage":
				return ec.fieldContext_Employee_publicImage(ctx, field)
			case "createdAt":
				return ec.fieldContext_Employee_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Employee_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Employee", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Task_property(ctx context.Context, field graphql.CollectedField, obj *crm_models.Task) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Task_property(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Task().Property(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*crm_models.Property)
	fc.Result = res
	return ec.marshalOProperty2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐProperty(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Task_property(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Task",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Property_id(ctx, field)
			case "internalID":
				return ec.fieldContext_Property_internalID(ctx, field)
			case "deal":
				return ec.fieldContext_Property_deal(ctx, field)
			case "type":
				return ec.fieldContext_Property_type(ctx, field)
			case "subType":
				return ec.fieldContext_Property_subType(ctx, field)
			case "commercialUsage":
				return ec.fieldContext_Property_commercialUsage(ctx, field)
			case "fromDeveloper":
				return ec.fieldContext_Property_fromDeveloper(ctx, field)
			case "inComplex":
				return ec.fieldContext_Property_inComplex(ctx, field)
			case "complex":
				return ec.fieldContext_Property_complex(ctx, field)
			case "complexHouse":
				return ec.fieldContext_Property_complexHouse(ctx, field)
			case "inVillage":
				return ec.fieldContext_Property_inVillage(ctx, field)
			case "village":
				return ec.fieldContext_Property_village(ctx, field)
			case "isHot":
				return ec.fieldContext_Property_isHot(ctx, field)
			case "title":
				return ec.fieldContext_Property_title(ctx, field)
			case "description":
				return ec.fieldContext_Property_description(ctx, field)
			case "address":
				return ec.fieldContext_Property_address(ctx, field)
			case "lat":
				return ec.fieldContext_Property_lat(ctx, field)
			case "lon":
				return ec.fieldContext_Property_lon(ctx, field)
			case "cadastrNumber":
				return ec.fieldContext_Property_cadastrNumber(ctx, field)
			case "seoText":
				return ec.fieldContext_Property_seoText(ctx, field)
			case "youtubeLink":
				return ec.fieldContext_Property_youtubeLink(ctx, field)
			case "tourLink":
				return ec.fieldContext_Property_tourLink(ctx, field)
			case "documents":
				return ec.fieldContext_Property_documents(ctx, field)
			case "images":
				return ec.fieldContext_Property_images(ctx, field)
			case "isDeleted":
				return ec.fieldContext_Property_isDeleted(ctx, field)
			case "isEditable":
				return ec.fieldContext_Property_isEditable(ctx, field)
			case "refreshDate":
				return ec.fieldContext_Property_refreshDate(ctx, field)
			case "status":
				return ec.fieldContext_Property_status(ctx, field)
			case "price":
				return ec.fieldContext_Property_price(ctx, field)
			case "pricePerMeter":
				return ec.fieldContext_Property_pricePerMeter(ctx, field)
			case "pricePerAr":
				return ec.fieldContext_Property_pricePerAr(ctx, field)
			case "priceHistory":
				return ec.fieldContext_Property_priceHistory(ctx, field)
			case "isReady":
				return ec.fieldContext_Property_isReady(ctx, field)
			case "readinessYear":
				return ec.fieldContext_Property_readinessYear(ctx, field)
			case "readinessQuarter":
				return ec.fieldContext_Property_readinessQuarter(ctx, field)
			case "inCity":
				return ec.fieldContext_Property_inCity(ctx, field)
			case "cityDistance":
				return ec.fieldContext_Property_cityDistance(ctx, field)
			case "region":
				return ec.fieldContext_Property_region(ctx, field)
			case "subRegion":
				return ec.fieldContext_Property_subRegion(ctx, field)
			case "source":
				return ec.fieldContext_Property_source(ctx, field)
			case "rooms":
				return ec.fieldContext_Property_rooms(ctx, field)
			case "area":
				return ec.fieldContext_Property_area(ctx, field)
			case "landArea":
				return ec.fieldContext_Property_landArea(ctx, field)
			case "livingArea":
				return ec.fieldContext_Property_livingArea(ctx, field)
			case "kitchenArea":
				return ec.fieldContext_Property_kitchenArea(ctx, field)
			case "toiletType":
				return ec.fieldContext_Property_toiletType(ctx, field)
			case "rehabType":
				return ec.fieldContext_Property_rehabType(ctx, field)
			case "floor":
				return ec.fieldContext_Property_floor(ctx, field)
			case "floors":
				return ec.fieldContext_Property_floors(ctx, field)
			case "ceilingHeight":
				return ec.fieldContext_Property_ceilingHeight(ctx, field)
			case "internalInfo":
				return ec.fieldContext_Property_internalInfo(ctx, field)
			case "comissionPercent":
				return ec.fieldContext_Property_comissionPercent(ctx, field)
			case "comissionAmount":
				return ec.fieldContext_Property_comissionAmount(ctx, field)
			case "createdAt":
				return ec.fieldContext_Property_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Property_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Property", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Task_contact(ctx context.Context, field graphql.CollectedField, obj *crm_models.Task) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Task_contact(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Task().Contact(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*crm_models.Contact)
	fc.Result = res
	return ec.marshalOContact2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐContact(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Task_contact(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Task",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Contact_id(ctx, field)
			case "internalNumber":
				return ec.fieldContext_Contact_internalNumber(ctx, field)
			case "type":
				return ec.fieldContext_Contact_type(ctx, field)
			case "source":
				return ec.fieldContext_Contact_source(ctx, field)
			case "name":
				return ec.fieldContext_Contact_name(ctx, field)
			case "surname":
				return ec.fieldContext_Contact_surname(ctx, field)
			case "patronymic":
				return ec.fieldContext_Contact_patronymic(ctx, field)
			case "birthday":
				return ec.fieldContext_Contact_birthday(ctx, field)
			case "phone":
				return ec.fieldContext_Contact_phone(ctx, field)
			case "additionalPhones":
				return ec.fieldContext_Contact_additionalPhones(ctx, field)
			case "email":
				return ec.fieldContext_Contact_email(ctx, field)
			case "company":
				return ec.fieldContext_Contact_company(ctx, field)
			case "address":
				return ec.fieldContext_Contact_address(ctx, field)
			case "properties":
				return ec.fieldContext_Contact_properties(ctx, field)
			case "passportNumber":
				return ec.fieldContext_Contact_passportNumber(ctx, field)
			case "passportIssuedBy":
				return ec.fieldContext_Contact_passportIssuedBy(ctx, field)
			case "passportIssueDate":
				return ec.fieldContext_Contact_passportIssueDate(ctx, field)
			case "passportIssuerCode":
				return ec.fieldContext_Contact_passportIssuerCode(ctx, field)
			case "internalInfo":
				return ec.fieldContext_Contact_internalInfo(ctx, field)
			case "note":
				return ec.fieldContext_Contact_note(ctx, field)
			case "deals":
				return ec.fieldContext_Contact_deals(ctx, field)
			case "agents":
				return ec.fieldContext_Contact_agents(ctx, field)
			case "contracts":
				return ec.fieldContext_Contact_contracts(ctx, field)
			case "documents":
				return ec.fieldContext_Contact_documents(ctx, field)
			case "lead":
				return ec.fieldContext_Contact_lead(ctx, field)
			case "isDeleted":
				return ec.fieldContext_Contact_isDeleted(ctx, field)
			case "createdAt":
				return ec.fieldContext_Contact_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Contact_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Contact", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Task_contactPhone(ctx context.Context, field graphql.CollectedField, obj *crm_models.Task) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Task_contactPhone(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ContactPhone, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Task_contactPhone(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Task",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Task_lead(ctx context.Context, field graphql.CollectedField, obj *crm_models.Task) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Task_lead(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Task().Lead(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*crm_models.Lead)
	fc.Result = res
	return ec.marshalOLead2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐLead(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Task_lead(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Task",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Lead_id(ctx, field)
			case "internalNumber":
				return ec.fieldContext_Lead_internalNumber(ctx, field)
			case "type":
				return ec.fieldContext_Lead_type(ctx, field)
			case "source":
				return ec.fieldContext_Lead_source(ctx, field)
			case "name":
				return ec.fieldContext_Lead_name(ctx, field)
			case "surname":
				return ec.fieldContext_Lead_surname(ctx, field)
			case "patronymic":
				return ec.fieldContext_Lead_patronymic(ctx, field)
			case "birthday":
				return ec.fieldContext_Lead_birthday(ctx, field)
			case "phone":
				return ec.fieldContext_Lead_phone(ctx, field)
			case "additionalPhones":
				return ec.fieldContext_Lead_additionalPhones(ctx, field)
			case "email":
				return ec.fieldContext_Lead_email(ctx, field)
			case "company":
				return ec.fieldContext_Lead_company(ctx, field)
			case "address":
				return ec.fieldContext_Lead_address(ctx, field)
			case "request":
				return ec.fieldContext_Lead_request(ctx, field)
			case "agents":
				return ec.fieldContext_Lead_agents(ctx, field)
			case "status":
				return ec.fieldContext_Lead_status(ctx, field)
			case "comment":
				return ec.fieldContext_Lead_comment(ctx, field)
			case "isDeleted":
				return ec.fieldContext_Lead_isDeleted(ctx, field)
			case "createdAt":
				return ec.fieldContext_Lead_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Lead_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Lead", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Task_deal(ctx context.Context, field graphql.CollectedField, obj *crm_models.Task) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Task_deal(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Task().Deal(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*crm_models.Deal)
	fc.Result = res
	return ec.marshalODeal2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐDeal(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Task_deal(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Task",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Deal_id(ctx, field)
			case "internalNumber":
				return ec.fieldContext_Deal_internalNumber(ctx, field)
			case "type":
				return ec.fieldContext_Deal_type(ctx, field)
			case "stage":
				return ec.fieldContext_Deal_stage(ctx, field)
			case "sellerAgent":
				return ec.fieldContext_Deal_sellerAgent(ctx, field)
			case "sellerContact":
				return ec.fieldContext_Deal_sellerContact(ctx, field)
			case "sellerPhone":
				return ec.fieldContext_Deal_sellerPhone(ctx, field)
			case "sellerDocuments":
				return ec.fieldContext_Deal_sellerDocuments(ctx, field)
			case "buyerAgent":
				return ec.fieldContext_Deal_buyerAgent(ctx, field)
			case "buyerContact":
				return ec.fieldContext_Deal_buyerContact(ctx, field)
			case "buyerPhone":
				return ec.fieldContext_Deal_buyerPhone(ctx, field)
			case "buyerDocuments":
				return ec.fieldContext_Deal_buyerDocuments(ctx, field)
			case "property":
				return ec.fieldContext_Deal_property(ctx, field)
			case "address":
				return ec.fieldContext_Deal_address(ctx, field)
			case "mortgageBroker":
				return ec.fieldContext_Deal_mortgageBroker(ctx, field)
			case "mortgageRequest":
				return ec.fieldContext_Deal_mortgageRequest(ctx, field)
			case "mortgageDocuments":
				return ec.fieldContext_Deal_mortgageDocuments(ctx, field)
			case "lawer":
				return ec.fieldContext_Deal_lawer(ctx, field)
			case "lawerDocuments":
				return ec.fieldContext_Deal_lawerDocuments(ctx, field)
			case "accountant":
				return ec.fieldContext_Deal_accountant(ctx, field)
			case "accountantDocuments":
				return ec.fieldContext_Deal_accountantDocuments(ctx, field)
			case "depositDate":
				return ec.fieldContext_Deal_depositDate(ctx, field)
			case "dealDate":
				return ec.fieldContext_Deal_dealDate(ctx, field)
			case "finishedAt":
				return ec.fieldContext_Deal_finishedAt(ctx, field)
			case "commissionAmount":
				return ec.fieldContext_Deal_commissionAmount(ctx, field)
			case "internalComment":
				return ec.fieldContext_Deal_internalComment(ctx, field)
			case "isDeleted":
				return ec.fieldContext_Deal_isDeleted(ctx, field)
			case "createdAt":
				return ec.fieldContext_Deal_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Deal_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Deal", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Task_startDate(ctx context.Context, field graphql.CollectedField, obj *crm_models.Task) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Task_startDate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StartDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalOTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Task_startDate(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Task",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Task_durationDays(ctx context.Context, field graphql.CollectedField, obj *crm_models.Task) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Task_durationDays(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DurationDays, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Task_durationDays(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Task",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Task_durationHours(ctx context.Context, field graphql.CollectedField, obj *crm_models.Task) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Task_durationHours(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DurationHours, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Task_durationHours(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Task",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Task_details(ctx context.Context, field graphql.CollectedField, obj *crm_models.Task) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Task_details(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Details, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Task_details(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Task",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Task_isCompleted(ctx context.Context, field graphql.CollectedField, obj *crm_models.Task) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Task_isCompleted(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsCompleted, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Task_isCompleted(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Task",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Task_endDate(ctx context.Context, field graphql.CollectedField, obj *crm_models.Task) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Task_endDate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EndDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalOTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Task_endDate(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Task",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Task_tag(ctx context.Context, field graphql.CollectedField, obj *crm_models.Task) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Task_tag(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Tag, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Task_tag(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Task",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Task_isDeleted(ctx context.Context, field graphql.CollectedField, obj *crm_models.Task) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Task_isDeleted(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeleted, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Task_isDeleted(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Task",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Task_createdAt(ctx context.Context, field graphql.CollectedField, obj *crm_models.Task) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Task_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Task_createdAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Task",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Task_updatedAt(ctx context.Context, field graphql.CollectedField, obj *crm_models.Task) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Task_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Task_updatedAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Task",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TaskConnection_totalCount(ctx context.Context, field graphql.CollectedField, obj *crm_models.TaskConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TaskConnection_totalCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TaskConnection_totalCount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TaskConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TaskConnection_edges(ctx context.Context, field graphql.CollectedField, obj *crm_models.TaskConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TaskConnection_edges(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*crm_models.TaskEdge)
	fc.Result = res
	return ec.marshalNTaskEdge2ᚕᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐTaskEdgeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TaskConnection_edges(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TaskConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "node":
				return ec.fieldContext_TaskEdge_node(ctx, field)
			case "cursor":
				return ec.fieldContext_TaskEdge_cursor(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TaskEdge", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _TaskConnection_nodes(ctx context.Context, field graphql.CollectedField, obj *crm_models.TaskConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TaskConnection_nodes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Nodes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*crm_models.Task)
	fc.Result = res
	return ec.marshalNTask2ᚕᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐTaskᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TaskConnection_nodes(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TaskConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Task_id(ctx, field)
			case "internalNumber":
				return ec.fieldContext_Task_internalNumber(ctx, field)
			case "title":
				return ec.fieldContext_Task_title(ctx, field)
			case "label":
				return ec.fieldContext_Task_label(ctx, field)
			case "isHot":
				return ec.fieldContext_Task_isHot(ctx, field)
			case "status":
				return ec.fieldContext_Task_status(ctx, field)
			case "assignee":
				return ec.fieldContext_Task_assignee(ctx, field)
			case "reporter":
				return ec.fieldContext_Task_reporter(ctx, field)
			case "property":
				return ec.fieldContext_Task_property(ctx, field)
			case "contact":
				return ec.fieldContext_Task_contact(ctx, field)
			case "contactPhone":
				return ec.fieldContext_Task_contactPhone(ctx, field)
			case "lead":
				return ec.fieldContext_Task_lead(ctx, field)
			case "deal":
				return ec.fieldContext_Task_deal(ctx, field)
			case "startDate":
				return ec.fieldContext_Task_startDate(ctx, field)
			case "durationDays":
				return ec.fieldContext_Task_durationDays(ctx, field)
			case "durationHours":
				return ec.fieldContext_Task_durationHours(ctx, field)
			case "details":
				return ec.fieldContext_Task_details(ctx, field)
			case "isCompleted":
				return ec.fieldContext_Task_isCompleted(ctx, field)
			case "endDate":
				return ec.fieldContext_Task_endDate(ctx, field)
			case "tag":
				return ec.fieldContext_Task_tag(ctx, field)
			case "isDeleted":
				return ec.fieldContext_Task_isDeleted(ctx, field)
			case "createdAt":
				return ec.fieldContext_Task_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Task_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Task", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _TaskConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *crm_models.TaskConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TaskConnection_pageInfo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*crm_models.PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TaskConnection_pageInfo(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TaskConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "startCursor":
				return ec.fieldContext_PageInfo_startCursor(ctx, field)
			case "endCursor":
				return ec.fieldContext_PageInfo_endCursor(ctx, field)
			case "hasNextPage":
				return ec.fieldContext_PageInfo_hasNextPage(ctx, field)
			case "hasPreviousPage":
				return ec.fieldContext_PageInfo_hasPreviousPage(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PageInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _TaskEdge_node(ctx context.Context, field graphql.CollectedField, obj *crm_models.TaskEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TaskEdge_node(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*crm_models.Task)
	fc.Result = res
	return ec.marshalNTask2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐTask(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TaskEdge_node(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TaskEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Task_id(ctx, field)
			case "internalNumber":
				return ec.fieldContext_Task_internalNumber(ctx, field)
			case "title":
				return ec.fieldContext_Task_title(ctx, field)
			case "label":
				return ec.fieldContext_Task_label(ctx, field)
			case "isHot":
				return ec.fieldContext_Task_isHot(ctx, field)
			case "status":
				return ec.fieldContext_Task_status(ctx, field)
			case "assignee":
				return ec.fieldContext_Task_assignee(ctx, field)
			case "reporter":
				return ec.fieldContext_Task_reporter(ctx, field)
			case "property":
				return ec.fieldContext_Task_property(ctx, field)
			case "contact":
				return ec.fieldContext_Task_contact(ctx, field)
			case "contactPhone":
				return ec.fieldContext_Task_contactPhone(ctx, field)
			case "lead":
				return ec.fieldContext_Task_lead(ctx, field)
			case "deal":
				return ec.fieldContext_Task_deal(ctx, field)
			case "startDate":
				return ec.fieldContext_Task_startDate(ctx, field)
			case "durationDays":
				return ec.fieldContext_Task_durationDays(ctx, field)
			case "durationHours":
				return ec.fieldContext_Task_durationHours(ctx, field)
			case "details":
				return ec.fieldContext_Task_details(ctx, field)
			case "isCompleted":
				return ec.fieldContext_Task_isCompleted(ctx, field)
			case "endDate":
				return ec.fieldContext_Task_endDate(ctx, field)
			case "tag":
				return ec.fieldContext_Task_tag(ctx, field)
			case "isDeleted":
				return ec.fieldContext_Task_isDeleted(ctx, field)
			case "createdAt":
				return ec.fieldContext_Task_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Task_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Task", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _TaskEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *crm_models.TaskEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TaskEdge_cursor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNCursor2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TaskEdge_cursor(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TaskEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Cursor does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Vacancy_id(ctx context.Context, field graphql.CollectedField, obj *crm_models.Vacancy) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Vacancy_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Vacancy_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Vacancy",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Vacancy_title(ctx context.Context, field graphql.CollectedField, obj *crm_models.Vacancy) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Vacancy_title(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Title, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Vacancy_title(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Vacancy",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Vacancy_description(ctx context.Context, field graphql.CollectedField, obj *crm_models.Vacancy) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Vacancy_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Vacancy_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Vacancy",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Vacancy_experience(ctx context.Context, field graphql.CollectedField, obj *crm_models.Vacancy) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Vacancy_experience(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Experience, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Vacancy_experience(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Vacancy",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Vacancy_salary(ctx context.Context, field graphql.CollectedField, obj *crm_models.Vacancy) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Vacancy_salary(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Salary, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Vacancy_salary(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Vacancy",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Vacancy_schedule(ctx context.Context, field graphql.CollectedField, obj *crm_models.Vacancy) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Vacancy_schedule(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Schedule, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(crm_models.VacancyScheduleEnum)
	fc.Result = res
	return ec.marshalNVacancyScheduleEnum2githubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐVacancyScheduleEnum(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Vacancy_schedule(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Vacancy",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type VacancyScheduleEnum does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Vacancy_publicationStatus(ctx context.Context, field graphql.CollectedField, obj *crm_models.Vacancy) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Vacancy_publicationStatus(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PublicationStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(crm_models.PublicationStatusEnum)
	fc.Result = res
	return ec.marshalNPublicationStatusEnum2githubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐPublicationStatusEnum(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Vacancy_publicationStatus(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Vacancy",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type PublicationStatusEnum does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Vacancy_createdAt(ctx context.Context, field graphql.CollectedField, obj *crm_models.Vacancy) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Vacancy_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Vacancy_createdAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Vacancy",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Vacancy_updatedAt(ctx context.Context, field graphql.CollectedField, obj *crm_models.Vacancy) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Vacancy_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Vacancy_updatedAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Vacancy",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _VacancyConnection_totalCount(ctx context.Context, field graphql.CollectedField, obj *crm_models.VacancyConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_VacancyConnection_totalCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_VacancyConnection_totalCount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "VacancyConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _VacancyConnection_edges(ctx context.Context, field graphql.CollectedField, obj *crm_models.VacancyConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_VacancyConnection_edges(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*crm_models.VacancyEdge)
	fc.Result = res
	return ec.marshalNVacancyEdge2ᚕᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐVacancyEdgeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_VacancyConnection_edges(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "VacancyConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "node":
				return ec.fieldContext_VacancyEdge_node(ctx, field)
			case "cursor":
				return ec.fieldContext_VacancyEdge_cursor(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type VacancyEdge", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _VacancyConnection_nodes(ctx context.Context, field graphql.CollectedField, obj *crm_models.VacancyConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_VacancyConnection_nodes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Nodes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*crm_models.Vacancy)
	fc.Result = res
	return ec.marshalNVacancy2ᚕᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐVacancyᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_VacancyConnection_nodes(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "VacancyConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Vacancy_id(ctx, field)
			case "title":
				return ec.fieldContext_Vacancy_title(ctx, field)
			case "description":
				return ec.fieldContext_Vacancy_description(ctx, field)
			case "experience":
				return ec.fieldContext_Vacancy_experience(ctx, field)
			case "salary":
				return ec.fieldContext_Vacancy_salary(ctx, field)
			case "schedule":
				return ec.fieldContext_Vacancy_schedule(ctx, field)
			case "publicationStatus":
				return ec.fieldContext_Vacancy_publicationStatus(ctx, field)
			case "createdAt":
				return ec.fieldContext_Vacancy_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Vacancy_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Vacancy", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _VacancyConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *crm_models.VacancyConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_VacancyConnection_pageInfo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*crm_models.PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_VacancyConnection_pageInfo(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "VacancyConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "startCursor":
				return ec.fieldContext_PageInfo_startCursor(ctx, field)
			case "endCursor":
				return ec.fieldContext_PageInfo_endCursor(ctx, field)
			case "hasNextPage":
				return ec.fieldContext_PageInfo_hasNextPage(ctx, field)
			case "hasPreviousPage":
				return ec.fieldContext_PageInfo_hasPreviousPage(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PageInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _VacancyEdge_node(ctx context.Context, field graphql.CollectedField, obj *crm_models.VacancyEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_VacancyEdge_node(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*crm_models.Vacancy)
	fc.Result = res
	return ec.marshalNVacancy2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐVacancy(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_VacancyEdge_node(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "VacancyEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Vacancy_id(ctx, field)
			case "title":
				return ec.fieldContext_Vacancy_title(ctx, field)
			case "description":
				return ec.fieldContext_Vacancy_description(ctx, field)
			case "experience":
				return ec.fieldContext_Vacancy_experience(ctx, field)
			case "salary":
				return ec.fieldContext_Vacancy_salary(ctx, field)
			case "schedule":
				return ec.fieldContext_Vacancy_schedule(ctx, field)
			case "publicationStatus":
				return ec.fieldContext_Vacancy_publicationStatus(ctx, field)
			case "createdAt":
				return ec.fieldContext_Vacancy_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Vacancy_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Vacancy", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _VacancyEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *crm_models.VacancyEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_VacancyEdge_cursor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNCursor2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_VacancyEdge_cursor(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "VacancyEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Cursor does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _VacancyRequest_id(ctx context.Context, field graphql.CollectedField, obj *crm_models.VacancyRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_VacancyRequest_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_VacancyRequest_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "VacancyRequest",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _VacancyRequest_vacancy(ctx context.Context, field graphql.CollectedField, obj *crm_models.VacancyRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_VacancyRequest_vacancy(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Vacancy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*crm_models.Vacancy)
	fc.Result = res
	return ec.marshalNVacancy2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐVacancy(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_VacancyRequest_vacancy(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "VacancyRequest",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Vacancy_id(ctx, field)
			case "title":
				return ec.fieldContext_Vacancy_title(ctx, field)
			case "description":
				return ec.fieldContext_Vacancy_description(ctx, field)
			case "experience":
				return ec.fieldContext_Vacancy_experience(ctx, field)
			case "salary":
				return ec.fieldContext_Vacancy_salary(ctx, field)
			case "schedule":
				return ec.fieldContext_Vacancy_schedule(ctx, field)
			case "publicationStatus":
				return ec.fieldContext_Vacancy_publicationStatus(ctx, field)
			case "createdAt":
				return ec.fieldContext_Vacancy_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Vacancy_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Vacancy", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _VacancyRequest_name(ctx context.Context, field graphql.CollectedField, obj *crm_models.VacancyRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_VacancyRequest_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_VacancyRequest_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "VacancyRequest",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _VacancyRequest_letter(ctx context.Context, field graphql.CollectedField, obj *crm_models.VacancyRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_VacancyRequest_letter(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Letter, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_VacancyRequest_letter(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "VacancyRequest",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _VacancyRequest_attachments(ctx context.Context, field graphql.CollectedField, obj *crm_models.VacancyRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_VacancyRequest_attachments(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Attachments, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*crm_models.Document)
	fc.Result = res
	return ec.marshalODocument2ᚕᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐDocumentᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_VacancyRequest_attachments(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "VacancyRequest",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Document_id(ctx, field)
			case "url":
				return ec.fieldContext_Document_url(ctx, field)
			case "path":
				return ec.fieldContext_Document_path(ctx, field)
			case "title":
				return ec.fieldContext_Document_title(ctx, field)
			case "fileName":
				return ec.fieldContext_Document_fileName(ctx, field)
			case "fileType":
				return ec.fieldContext_Document_fileType(ctx, field)
			case "createdAt":
				return ec.fieldContext_Document_createdAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Document", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _VacancyRequest_internalComment(ctx context.Context, field graphql.CollectedField, obj *crm_models.VacancyRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_VacancyRequest_internalComment(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InternalComment, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_VacancyRequest_internalComment(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "VacancyRequest",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _VacancyRequest_status(ctx context.Context, field graphql.CollectedField, obj *crm_models.VacancyRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_VacancyRequest_status(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(crm_models.VacancyRequestStatusEnum)
	fc.Result = res
	return ec.marshalNVacancyRequestStatusEnum2githubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐVacancyRequestStatusEnum(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_VacancyRequest_status(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "VacancyRequest",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type VacancyRequestStatusEnum does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _VacancyRequest_createdAt(ctx context.Context, field graphql.CollectedField, obj *crm_models.VacancyRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_VacancyRequest_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_VacancyRequest_createdAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "VacancyRequest",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _VacancyRequest_updatedAt(ctx context.Context, field graphql.CollectedField, obj *crm_models.VacancyRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_VacancyRequest_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_VacancyRequest_updatedAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "VacancyRequest",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _VacancyRequestConnection_totalCount(ctx context.Context, field graphql.CollectedField, obj *crm_models.VacancyRequestConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_VacancyRequestConnection_totalCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_VacancyRequestConnection_totalCount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "VacancyRequestConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _VacancyRequestConnection_edges(ctx context.Context, field graphql.CollectedField, obj *crm_models.VacancyRequestConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_VacancyRequestConnection_edges(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*crm_models.VacancyRequestEdge)
	fc.Result = res
	return ec.marshalNVacancyRequestEdge2ᚕᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐVacancyRequestEdgeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_VacancyRequestConnection_edges(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "VacancyRequestConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "node":
				return ec.fieldContext_VacancyRequestEdge_node(ctx, field)
			case "cursor":
				return ec.fieldContext_VacancyRequestEdge_cursor(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type VacancyRequestEdge", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _VacancyRequestConnection_nodes(ctx context.Context, field graphql.CollectedField, obj *crm_models.VacancyRequestConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_VacancyRequestConnection_nodes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Nodes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*crm_models.VacancyRequest)
	fc.Result = res
	return ec.marshalNVacancyRequest2ᚕᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐVacancyRequestᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_VacancyRequestConnection_nodes(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "VacancyRequestConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_VacancyRequest_id(ctx, field)
			case "vacancy":
				return ec.fieldContext_VacancyRequest_vacancy(ctx, field)
			case "name":
				return ec.fieldContext_VacancyRequest_name(ctx, field)
			case "letter":
				return ec.fieldContext_VacancyRequest_letter(ctx, field)
			case "attachments":
				return ec.fieldContext_VacancyRequest_attachments(ctx, field)
			case "internalComment":
				return ec.fieldContext_VacancyRequest_internalComment(ctx, field)
			case "status":
				return ec.fieldContext_VacancyRequest_status(ctx, field)
			case "createdAt":
				return ec.fieldContext_VacancyRequest_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_VacancyRequest_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type VacancyRequest", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _VacancyRequestConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *crm_models.VacancyRequestConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_VacancyRequestConnection_pageInfo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*crm_models.PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_VacancyRequestConnection_pageInfo(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "VacancyRequestConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "startCursor":
				return ec.fieldContext_PageInfo_startCursor(ctx, field)
			case "endCursor":
				return ec.fieldContext_PageInfo_endCursor(ctx, field)
			case "hasNextPage":
				return ec.fieldContext_PageInfo_hasNextPage(ctx, field)
			case "hasPreviousPage":
				return ec.fieldContext_PageInfo_hasPreviousPage(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PageInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _VacancyRequestEdge_node(ctx context.Context, field graphql.CollectedField, obj *crm_models.VacancyRequestEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_VacancyRequestEdge_node(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*crm_models.VacancyRequest)
	fc.Result = res
	return ec.marshalNVacancyRequest2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐVacancyRequest(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_VacancyRequestEdge_node(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "VacancyRequestEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_VacancyRequest_id(ctx, field)
			case "vacancy":
				return ec.fieldContext_VacancyRequest_vacancy(ctx, field)
			case "name":
				return ec.fieldContext_VacancyRequest_name(ctx, field)
			case "letter":
				return ec.fieldContext_VacancyRequest_letter(ctx, field)
			case "attachments":
				return ec.fieldContext_VacancyRequest_attachments(ctx, field)
			case "internalComment":
				return ec.fieldContext_VacancyRequest_internalComment(ctx, field)
			case "status":
				return ec.fieldContext_VacancyRequest_status(ctx, field)
			case "createdAt":
				return ec.fieldContext_VacancyRequest_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_VacancyRequest_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type VacancyRequest", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _VacancyRequestEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *crm_models.VacancyRequestEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_VacancyRequestEdge_cursor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNCursor2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_VacancyRequestEdge_cursor(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "VacancyRequestEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Cursor does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Village_id(ctx context.Context, field graphql.CollectedField, obj *crm_models.Village) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Village_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Village_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Village",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Village_title(ctx context.Context, field graphql.CollectedField, obj *crm_models.Village) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Village_title(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Title, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Village_title(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Village",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Village_description(ctx context.Context, field graphql.CollectedField, obj *crm_models.Village) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Village_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Village_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Village",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Village_address(ctx context.Context, field graphql.CollectedField, obj *crm_models.Village) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Village_address(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Address, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Village_address(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Village",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Village_lat(ctx context.Context, field graphql.CollectedField, obj *crm_models.Village) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Village_lat(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Lat, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Village_lat(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Village",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Village_lon(ctx context.Context, field graphql.CollectedField, obj *crm_models.Village) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Village_lon(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Lon, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Village_lon(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Village",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Village_cadastrNumber(ctx context.Context, field graphql.CollectedField, obj *crm_models.Village) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Village_cadastrNumber(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CadastrNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Village_cadastrNumber(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Village",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Village_seoText(ctx context.Context, field graphql.CollectedField, obj *crm_models.Village) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Village_seoText(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SeoText, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Village_seoText(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Village",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Village_youtubeLink(ctx context.Context, field graphql.CollectedField, obj *crm_models.Village) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Village_youtubeLink(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.YoutubeLink, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Village_youtubeLink(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Village",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Village_tourLink(ctx context.Context, field graphql.CollectedField, obj *crm_models.Village) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Village_tourLink(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TourLink, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Village_tourLink(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Village",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Village_inCity(ctx context.Context, field graphql.CollectedField, obj *crm_models.Village) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Village_inCity(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InCity, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Village_inCity(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Village",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Village_cityDistance(ctx context.Context, field graphql.CollectedField, obj *crm_models.Village) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Village_cityDistance(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CityDistance, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Village_cityDistance(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Village",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Village_region(ctx context.Context, field graphql.CollectedField, obj *crm_models.Village) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Village_region(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Region, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Village_region(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Village",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Village_subRegion(ctx context.Context, field graphql.CollectedField, obj *crm_models.Village) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Village_subRegion(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubRegion, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Village_subRegion(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Village",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Village_developer(ctx context.Context, field graphql.CollectedField, obj *crm_models.Village) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Village_developer(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Village().Developer(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*crm_models.Developer)
	fc.Result = res
	return ec.marshalODeveloper2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐDeveloper(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Village_developer(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Village",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Developer_id(ctx, field)
			case "title":
				return ec.fieldContext_Developer_title(ctx, field)
			case "url":
				return ec.fieldContext_Developer_url(ctx, field)
			case "logo":
				return ec.fieldContext_Developer_logo(ctx, field)
			case "isDeleted":
				return ec.fieldContext_Developer_isDeleted(ctx, field)
			case "createdAt":
				return ec.fieldContext_Developer_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Developer_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Developer", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Village_isReady(ctx context.Context, field graphql.CollectedField, obj *crm_models.Village) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Village_isReady(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsReady, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Village_isReady(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Village",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Village_readinessQuarter(ctx context.Context, field graphql.CollectedField, obj *crm_models.Village) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Village_readinessQuarter(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ReadinessQuarter, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*crm_models.QuarterEnum)
	fc.Result = res
	return ec.marshalOQuarterEnum2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐQuarterEnum(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Village_readinessQuarter(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Village",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type QuarterEnum does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Village_readinessYear(ctx context.Context, field graphql.CollectedField, obj *crm_models.Village) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Village_readinessYear(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ReadinessYear, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Village_readinessYear(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Village",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Village_images(ctx context.Context, field graphql.CollectedField, obj *crm_models.Village) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Village_images(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Village().Images(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*crm_models.Image)
	fc.Result = res
	return ec.marshalOImage2ᚕᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐImageᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Village_images(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Village",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Image_id(ctx, field)
			case "url":
				return ec.fieldContext_Image_url(ctx, field)
			case "path":
				return ec.fieldContext_Image_path(ctx, field)
			case "title":
				return ec.fieldContext_Image_title(ctx, field)
			case "fileName":
				return ec.fieldContext_Image_fileName(ctx, field)
			case "fileType":
				return ec.fieldContext_Image_fileType(ctx, field)
			case "previewUrl":
				return ec.fieldContext_Image_previewUrl(ctx, field)
			case "previewPath":
				return ec.fieldContext_Image_previewPath(ctx, field)
			case "blurHash":
				return ec.fieldContext_Image_blurHash(ctx, field)
			case "preset":
				return ec.fieldContext_Image_preset(ctx, field)
			case "createdAt":
				return ec.fieldContext_Image_createdAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Image", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Village_documents(ctx context.Context, field graphql.CollectedField, obj *crm_models.Village) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Village_documents(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Village().Documents(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*crm_models.Document)
	fc.Result = res
	return ec.marshalODocument2ᚕᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐDocumentᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Village_documents(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Village",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Document_id(ctx, field)
			case "url":
				return ec.fieldContext_Document_url(ctx, field)
			case "path":
				return ec.fieldContext_Document_path(ctx, field)
			case "title":
				return ec.fieldContext_Document_title(ctx, field)
			case "fileName":
				return ec.fieldContext_Document_fileName(ctx, field)
			case "fileType":
				return ec.fieldContext_Document_fileType(ctx, field)
			case "createdAt":
				return ec.fieldContext_Document_createdAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Document", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Village_projectDeclarations(ctx context.Context, field graphql.CollectedField, obj *crm_models.Village) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Village_projectDeclarations(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Village().ProjectDeclarations(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*crm_models.Document)
	fc.Result = res
	return ec.marshalODocument2ᚕᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐDocumentᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Village_projectDeclarations(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Village",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Document_id(ctx, field)
			case "url":
				return ec.fieldContext_Document_url(ctx, field)
			case "path":
				return ec.fieldContext_Document_path(ctx, field)
			case "title":
				return ec.fieldContext_Document_title(ctx, field)
			case "fileName":
				return ec.fieldContext_Document_fileName(ctx, field)
			case "fileType":
				return ec.fieldContext_Document_fileType(ctx, field)
			case "createdAt":
				return ec.fieldContext_Document_createdAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Document", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Village_publicationStatus(ctx context.Context, field graphql.CollectedField, obj *crm_models.Village) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Village_publicationStatus(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PublicationStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*crm_models.PublicationStatusEnum)
	fc.Result = res
	return ec.marshalOPublicationStatusEnum2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐPublicationStatusEnum(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Village_publicationStatus(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Village",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type PublicationStatusEnum does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Village_internalInfo(ctx context.Context, field graphql.CollectedField, obj *crm_models.Village) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Village_internalInfo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InternalInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Village_internalInfo(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Village",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Village_isDeleted(ctx context.Context, field graphql.CollectedField, obj *crm_models.Village) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Village_isDeleted(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeleted, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Village_isDeleted(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Village",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Village_createdAt(ctx context.Context, field graphql.CollectedField, obj *crm_models.Village) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Village_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Village_createdAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Village",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Village_updatedAt(ctx context.Context, field graphql.CollectedField, obj *crm_models.Village) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Village_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Village_updatedAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Village",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _VillageConnection_totalCount(ctx context.Context, field graphql.CollectedField, obj *crm_models.VillageConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_VillageConnection_totalCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_VillageConnection_totalCount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "VillageConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _VillageConnection_edges(ctx context.Context, field graphql.CollectedField, obj *crm_models.VillageConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_VillageConnection_edges(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*crm_models.VillageEdge)
	fc.Result = res
	return ec.marshalNVillageEdge2ᚕᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐVillageEdgeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_VillageConnection_edges(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "VillageConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "node":
				return ec.fieldContext_VillageEdge_node(ctx, field)
			case "cursor":
				return ec.fieldContext_VillageEdge_cursor(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type VillageEdge", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _VillageConnection_nodes(ctx context.Context, field graphql.CollectedField, obj *crm_models.VillageConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_VillageConnection_nodes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Nodes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*crm_models.Village)
	fc.Result = res
	return ec.marshalNVillage2ᚕᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐVillageᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_VillageConnection_nodes(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "VillageConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Village_id(ctx, field)
			case "title":
				return ec.fieldContext_Village_title(ctx, field)
			case "description":
				return ec.fieldContext_Village_description(ctx, field)
			case "address":
				return ec.fieldContext_Village_address(ctx, field)
			case "lat":
				return ec.fieldContext_Village_lat(ctx, field)
			case "lon":
				return ec.fieldContext_Village_lon(ctx, field)
			case "cadastrNumber":
				return ec.fieldContext_Village_cadastrNumber(ctx, field)
			case "seoText":
				return ec.fieldContext_Village_seoText(ctx, field)
			case "youtubeLink":
				return ec.fieldContext_Village_youtubeLink(ctx, field)
			case "tourLink":
				return ec.fieldContext_Village_tourLink(ctx, field)
			case "inCity":
				return ec.fieldContext_Village_inCity(ctx, field)
			case "cityDistance":
				return ec.fieldContext_Village_cityDistance(ctx, field)
			case "region":
				return ec.fieldContext_Village_region(ctx, field)
			case "subRegion":
				return ec.fieldContext_Village_subRegion(ctx, field)
			case "developer":
				return ec.fieldContext_Village_developer(ctx, field)
			case "isReady":
				return ec.fieldContext_Village_isReady(ctx, field)
			case "readinessQuarter":
				return ec.fieldContext_Village_readinessQuarter(ctx, field)
			case "readinessYear":
				return ec.fieldContext_Village_readinessYear(ctx, field)
			case "images":
				return ec.fieldContext_Village_images(ctx, field)
			case "documents":
				return ec.fieldContext_Village_documents(ctx, field)
			case "projectDeclarations":
				return ec.fieldContext_Village_projectDeclarations(ctx, field)
			case "publicationStatus":
				return ec.fieldContext_Village_publicationStatus(ctx, field)
			case "internalInfo":
				return ec.fieldContext_Village_internalInfo(ctx, field)
			case "isDeleted":
				return ec.fieldContext_Village_isDeleted(ctx, field)
			case "createdAt":
				return ec.fieldContext_Village_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Village_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Village", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _VillageConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *crm_models.VillageConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_VillageConnection_pageInfo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*crm_models.PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_VillageConnection_pageInfo(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "VillageConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "startCursor":
				return ec.fieldContext_PageInfo_startCursor(ctx, field)
			case "endCursor":
				return ec.fieldContext_PageInfo_endCursor(ctx, field)
			case "hasNextPage":
				return ec.fieldContext_PageInfo_hasNextPage(ctx, field)
			case "hasPreviousPage":
				return ec.fieldContext_PageInfo_hasPreviousPage(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PageInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _VillageEdge_node(ctx context.Context, field graphql.CollectedField, obj *crm_models.VillageEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_VillageEdge_node(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*crm_models.Village)
	fc.Result = res
	return ec.marshalNVillage2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐVillage(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_VillageEdge_node(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "VillageEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Village_id(ctx, field)
			case "title":
				return ec.fieldContext_Village_title(ctx, field)
			case "description":
				return ec.fieldContext_Village_description(ctx, field)
			case "address":
				return ec.fieldContext_Village_address(ctx, field)
			case "lat":
				return ec.fieldContext_Village_lat(ctx, field)
			case "lon":
				return ec.fieldContext_Village_lon(ctx, field)
			case "cadastrNumber":
				return ec.fieldContext_Village_cadastrNumber(ctx, field)
			case "seoText":
				return ec.fieldContext_Village_seoText(ctx, field)
			case "youtubeLink":
				return ec.fieldContext_Village_youtubeLink(ctx, field)
			case "tourLink":
				return ec.fieldContext_Village_tourLink(ctx, field)
			case "inCity":
				return ec.fieldContext_Village_inCity(ctx, field)
			case "cityDistance":
				return ec.fieldContext_Village_cityDistance(ctx, field)
			case "region":
				return ec.fieldContext_Village_region(ctx, field)
			case "subRegion":
				return ec.fieldContext_Village_subRegion(ctx, field)
			case "developer":
				return ec.fieldContext_Village_developer(ctx, field)
			case "isReady":
				return ec.fieldContext_Village_isReady(ctx, field)
			case "readinessQuarter":
				return ec.fieldContext_Village_readinessQuarter(ctx, field)
			case "readinessYear":
				return ec.fieldContext_Village_readinessYear(ctx, field)
			case "images":
				return ec.fieldContext_Village_images(ctx, field)
			case "documents":
				return ec.fieldContext_Village_documents(ctx, field)
			case "projectDeclarations":
				return ec.fieldContext_Village_projectDeclarations(ctx, field)
			case "publicationStatus":
				return ec.fieldContext_Village_publicationStatus(ctx, field)
			case "internalInfo":
				return ec.fieldContext_Village_internalInfo(ctx, field)
			case "isDeleted":
				return ec.fieldContext_Village_isDeleted(ctx, field)
			case "createdAt":
				return ec.fieldContext_Village_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Village_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Village", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _VillageEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *crm_models.VillageEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_VillageEdge_cursor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNCursor2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_VillageEdge_cursor(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "VillageEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Cursor does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_locations(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_locations(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Locations, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalN__DirectiveLocation2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_locations(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type __DirectiveLocation does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_args(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_args(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___InputValue_name(ctx, field)
			case "description":
				return ec.fieldContext___InputValue_description(ctx, field)
			case "type":
				return ec.fieldContext___InputValue_type(ctx, field)
			case "defaultValue":
				return ec.fieldContext___InputValue_defaultValue(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __InputValue", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_isRepeatable(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_isRepeatable(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsRepeatable, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_isRepeatable(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___EnumValue_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___EnumValue_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___EnumValue_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___EnumValue_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___EnumValue_isDeprecated(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___EnumValue_isDeprecated(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___EnumValue_deprecationReason(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___EnumValue_deprecationReason(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_args(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_args(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___InputValue_name(ctx, field)
			case "description":
				return ec.fieldContext___InputValue_description(ctx, field)
			case "type":
				return ec.fieldContext___InputValue_type(ctx, field)
			case "defaultValue":
				return ec.fieldContext___InputValue_defaultValue(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __InputValue", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_type(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_type(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_isDeprecated(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_isDeprecated(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_deprecationReason(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_deprecationReason(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_type(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_type(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_defaultValue(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_defaultValue(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DefaultValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_defaultValue(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_types(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_types(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Types(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_types(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_queryType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_queryType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QueryType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_queryType(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_mutationType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_mutationType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MutationType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_mutationType(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_subscriptionType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_subscriptionType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubscriptionType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_subscriptionType(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_directives(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_directives(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Directives(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Directive)
	fc.Result = res
	return ec.marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_directives(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___Directive_name(ctx, field)
			case "description":
				return ec.fieldContext___Directive_description(ctx, field)
			case "locations":
				return ec.fieldContext___Directive_locations(ctx, field)
			case "args":
				return ec.fieldContext___Directive_args(ctx, field)
			case "isRepeatable":
				return ec.fieldContext___Directive_isRepeatable(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Directive", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_kind(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_kind(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Kind(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalN__TypeKind2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_kind(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type __TypeKind does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_fields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_fields(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Fields(fc.Args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Field)
	fc.Result = res
	return ec.marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_fields(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___Field_name(ctx, field)
			case "description":
				return ec.fieldContext___Field_description(ctx, field)
			case "args":
				return ec.fieldContext___Field_args(ctx, field)
			case "type":
				return ec.fieldContext___Field_type(ctx, field)
			case "isDeprecated":
				return ec.fieldContext___Field_isDeprecated(ctx, field)
			case "deprecationReason":
				return ec.fieldContext___Field_deprecationReason(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Field", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field___Type_fields_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) ___Type_interfaces(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_interfaces(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Interfaces(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_interfaces(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_possibleTypes(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_possibleTypes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PossibleTypes(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_possibleTypes(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_enumValues(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_enumValues(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnumValues(fc.Args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.EnumValue)
	fc.Result = res
	return ec.marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_enumValues(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___EnumValue_name(ctx, field)
			case "description":
				return ec.fieldContext___EnumValue_description(ctx, field)
			case "isDeprecated":
				return ec.fieldContext___EnumValue_isDeprecated(ctx, field)
			case "deprecationReason":
				return ec.fieldContext___EnumValue_deprecationReason(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __EnumValue", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field___Type_enumValues_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) ___Type_inputFields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_inputFields(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InputFields(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_inputFields(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___InputValue_name(ctx, field)
			case "description":
				return ec.fieldContext___InputValue_description(ctx, field)
			case "type":
				return ec.fieldContext___InputValue_type(ctx, field)
			case "defaultValue":
				return ec.fieldContext___InputValue_defaultValue(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __InputValue", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_ofType(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_ofType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OfType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_ofType(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_specifiedByURL(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_specifiedByURL(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SpecifiedByURL(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_specifiedByURL(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

// endregion **************************** field.gotpl *****************************

// region    **************************** input.gotpl *****************************

func (ec *executionContext) unmarshalInputArticleGroupInput(ctx context.Context, obj interface{}) (crm_models.ArticleGroupInput, error) {
	var it crm_models.ArticleGroupInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id", "title"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOID2string(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "mongodb")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(string); ok {
				it.ID = data
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "title":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("title"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Title = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputArticleInput(ctx context.Context, obj interface{}) (crm_models.ArticleInput, error) {
	var it crm_models.ArticleInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id", "groupID", "title", "contentBlocks", "status", "cover"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOID2string(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "mongodb")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(string); ok {
				it.ID = data
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "groupID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("groupID"))
			data, err := ec.unmarshalNID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.GroupID = data
		case "title":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("title"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Title = data
		case "contentBlocks":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contentBlocks"))
			data, err := ec.unmarshalNContentBlockInput2ᚕgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐContentBlockInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContentBlocks = data
		case "status":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status"))
			data, err := ec.unmarshalNPublicationStatusEnum2githubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐPublicationStatusEnum(ctx, v)
			if err != nil {
				return it, err
			}
			it.Status = data
		case "cover":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cover"))
			data, err := ec.unmarshalOImageInput2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐImageInput(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.ArticleInput().Cover(ctx, &it, data); err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputArticlesFilterInput(ctx context.Context, obj interface{}) (crm_models.ArticlesFilterInput, error) {
	var it crm_models.ArticlesFilterInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"groupID", "status"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "groupID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("groupID"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOID2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "mongodb")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.GroupID = data
			} else if tmp == nil {
				it.GroupID = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "status":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status"))
			data, err := ec.unmarshalOPublicationStatusEnum2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐPublicationStatusEnum(ctx, v)
			if err != nil {
				return it, err
			}
			it.Status = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputComplexFilter(ctx context.Context, obj interface{}) (crm_models.ComplexFilter, error) {
	var it crm_models.ComplexFilter
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"developerID", "isDeleted", "publicationStatus", "withPhotos"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "developerID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("developerID"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOID2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "mongodb")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.DeveloperID = data
			} else if tmp == nil {
				it.DeveloperID = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "isDeleted":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isDeleted"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOBoolean2ᚖbool(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "boolean")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*bool); ok {
				it.IsDeleted = data
			} else if tmp == nil {
				it.IsDeleted = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *bool`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "publicationStatus":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("publicationStatus"))
			data, err := ec.unmarshalOPublicationStatusEnum2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐPublicationStatusEnum(ctx, v)
			if err != nil {
				return it, err
			}
			it.PublicationStatus = data
		case "withPhotos":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("withPhotos"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOBoolean2ᚖbool(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "boolean")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*bool); ok {
				it.WithPhotos = data
			} else if tmp == nil {
				it.WithPhotos = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *bool`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputComplexHouseFilter(ctx context.Context, obj interface{}) (crm_models.ComplexHouseFilter, error) {
	var it crm_models.ComplexHouseFilter
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"complexID", "isDeleted", "publicationStatus", "withPhotos"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "complexID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("complexID"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOID2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "mongodb")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.ComplexID = data
			} else if tmp == nil {
				it.ComplexID = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "isDeleted":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isDeleted"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOBoolean2ᚖbool(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "boolean")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*bool); ok {
				it.IsDeleted = data
			} else if tmp == nil {
				it.IsDeleted = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *bool`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "publicationStatus":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("publicationStatus"))
			data, err := ec.unmarshalOPublicationStatusEnum2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐPublicationStatusEnum(ctx, v)
			if err != nil {
				return it, err
			}
			it.PublicationStatus = data
		case "withPhotos":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("withPhotos"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOBoolean2ᚖbool(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "boolean")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*bool); ok {
				it.WithPhotos = data
			} else if tmp == nil {
				it.WithPhotos = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *bool`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputComplexHouseInput(ctx context.Context, obj interface{}) (crm_models.ComplexHouseInput, error) {
	var it crm_models.ComplexHouseInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id", "complexID", "title", "description", "address", "lat", "lon", "cadastrNumber", "seoText", "youtubeLink", "tourLink", "isReady", "readinessQuarter", "readinessYear", "images", "documents", "projectDeclarations", "publicationStatus", "internalInfo"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOID2string(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "omitempty,mongodb")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(string); ok {
				it.ID = data
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "complexID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("complexID"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOID2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "omitempty,mongodb")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.ComplexID = data
			} else if tmp == nil {
				it.ComplexID = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "title":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("title"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalNString2string(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "required,min=3,max=256")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(string); ok {
				it.Title = data
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "description":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalNString2string(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "required,min=3,max=4096")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(string); ok {
				it.Description = data
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "address":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("address"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalNString2string(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "required,min=3,max=256")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(string); ok {
				it.Address = data
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "lat":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lat"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOFloat2ᚖfloat64(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "omitempty,latitude")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*float64); ok {
				it.Lat = data
			} else if tmp == nil {
				it.Lat = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *float64`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "lon":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lon"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOFloat2ᚖfloat64(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "omitempty,longitude")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*float64); ok {
				it.Lon = data
			} else if tmp == nil {
				it.Lon = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *float64`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "cadastrNumber":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cadastrNumber"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "omitempty,max=20")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.CadastrNumber = data
			} else if tmp == nil {
				it.CadastrNumber = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "seoText":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("seoText"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "omitempty,max=1024")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.SeoText = data
			} else if tmp == nil {
				it.SeoText = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "youtubeLink":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("youtubeLink"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "omitempty,url")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.YoutubeLink = data
			} else if tmp == nil {
				it.YoutubeLink = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "tourLink":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tourLink"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "omitempty,url")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.TourLink = data
			} else if tmp == nil {
				it.TourLink = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "isReady":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isReady"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOBoolean2ᚖbool(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "omitempty,boolean")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*bool); ok {
				it.IsReady = data
			} else if tmp == nil {
				it.IsReady = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *bool`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "readinessQuarter":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("readinessQuarter"))
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalOQuarterEnum2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐQuarterEnum(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "omitempty")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*crm_models.QuarterEnum); ok {
				it.ReadinessQuarter = data
			} else if tmp == nil {
				it.ReadinessQuarter = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *github.com/pinks-agency/ecn/server/internal/crm-facade/models.QuarterEnum`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "readinessYear":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("readinessYear"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOInt2ᚖint(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "omitempty,gte=1800,lte=3000")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*int); ok {
				it.ReadinessYear = data
			} else if tmp == nil {
				it.ReadinessYear = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *int`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "images":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("images"))
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalOImageInput2ᚕᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐImageInputᚄ(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "omitempty")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.([]*crm_models.ImageInput); ok {
				if err = ec.resolvers.ComplexHouseInput().Images(ctx, &it, data); err != nil {
					return it, err
				}
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be []*github.com/pinks-agency/ecn/server/internal/crm-facade/models.ImageInput`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "documents":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("documents"))
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalODocumentInput2ᚕᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐDocumentInputᚄ(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "omitempty")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.([]*crm_models.DocumentInput); ok {
				if err = ec.resolvers.ComplexHouseInput().Documents(ctx, &it, data); err != nil {
					return it, err
				}
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be []*github.com/pinks-agency/ecn/server/internal/crm-facade/models.DocumentInput`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "projectDeclarations":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("projectDeclarations"))
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalODocumentInput2ᚕᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐDocumentInputᚄ(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "omitempty")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.([]*crm_models.DocumentInput); ok {
				if err = ec.resolvers.ComplexHouseInput().ProjectDeclarations(ctx, &it, data); err != nil {
					return it, err
				}
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be []*github.com/pinks-agency/ecn/server/internal/crm-facade/models.DocumentInput`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "publicationStatus":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("publicationStatus"))
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalOPublicationStatusEnum2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐPublicationStatusEnum(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "omitempty")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*crm_models.PublicationStatusEnum); ok {
				it.PublicationStatus = data
			} else if tmp == nil {
				it.PublicationStatus = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *github.com/pinks-agency/ecn/server/internal/crm-facade/models.PublicationStatusEnum`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "internalInfo":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("internalInfo"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "omitempty,max=256")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.InternalInfo = data
			} else if tmp == nil {
				it.InternalInfo = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputComplexInput(ctx context.Context, obj interface{}) (crm_models.ComplexInput, error) {
	var it crm_models.ComplexInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id", "title", "description", "address", "lat", "lon", "cadastrNumber", "seoText", "youtubeLink", "tourLink", "inCity", "cityDistance", "region", "subRegion", "developerID", "isReady", "readinessQuarter", "readinessYear", "images", "documents", "projectDeclarations", "publicationStatus", "internalInfo"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOID2string(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "omitempty,mongodb")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(string); ok {
				it.ID = data
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "title":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("title"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalNString2string(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "required,min=3,max=256")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(string); ok {
				it.Title = data
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "description":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalNString2string(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "required,min=3,max=4096")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(string); ok {
				it.Description = data
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "address":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("address"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalNString2string(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "required,min=3,max=256")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(string); ok {
				it.Address = data
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "lat":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lat"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOFloat2ᚖfloat64(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "omitempty,latitude")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*float64); ok {
				it.Lat = data
			} else if tmp == nil {
				it.Lat = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *float64`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "lon":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lon"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOFloat2ᚖfloat64(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "omitempty,longitude")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*float64); ok {
				it.Lon = data
			} else if tmp == nil {
				it.Lon = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *float64`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "cadastrNumber":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cadastrNumber"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "omitempty,max=20")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.CadastrNumber = data
			} else if tmp == nil {
				it.CadastrNumber = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "seoText":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("seoText"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "omitempty,max=1024")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.SeoText = data
			} else if tmp == nil {
				it.SeoText = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "youtubeLink":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("youtubeLink"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "omitempty,url")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.YoutubeLink = data
			} else if tmp == nil {
				it.YoutubeLink = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "tourLink":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tourLink"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "omitempty,url")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.TourLink = data
			} else if tmp == nil {
				it.TourLink = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "inCity":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("inCity"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOBoolean2ᚖbool(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "omitempty,boolean")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*bool); ok {
				it.InCity = data
			} else if tmp == nil {
				it.InCity = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *bool`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "cityDistance":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cityDistance"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOInt2ᚖint(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "omitempty,gte=0")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*int); ok {
				it.CityDistance = data
			} else if tmp == nil {
				it.CityDistance = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *int`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "region":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("region"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "omitempty,max=256")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.Region = data
			} else if tmp == nil {
				it.Region = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "subRegion":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("subRegion"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "omitempty,max=256")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.SubRegion = data
			} else if tmp == nil {
				it.SubRegion = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "developerID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("developerID"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOID2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "omitempty,mongodb")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.DeveloperID = data
			} else if tmp == nil {
				it.DeveloperID = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "isReady":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isReady"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOBoolean2ᚖbool(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "omitempty,boolean")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*bool); ok {
				it.IsReady = data
			} else if tmp == nil {
				it.IsReady = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *bool`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "readinessQuarter":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("readinessQuarter"))
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalOQuarterEnum2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐQuarterEnum(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "omitempty")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*crm_models.QuarterEnum); ok {
				it.ReadinessQuarter = data
			} else if tmp == nil {
				it.ReadinessQuarter = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *github.com/pinks-agency/ecn/server/internal/crm-facade/models.QuarterEnum`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "readinessYear":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("readinessYear"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOInt2ᚖint(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "omitempty,gte=1800,lte=3000")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*int); ok {
				it.ReadinessYear = data
			} else if tmp == nil {
				it.ReadinessYear = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *int`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "images":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("images"))
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalOImageInput2ᚕᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐImageInputᚄ(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "omitempty")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.([]*crm_models.ImageInput); ok {
				if err = ec.resolvers.ComplexInput().Images(ctx, &it, data); err != nil {
					return it, err
				}
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be []*github.com/pinks-agency/ecn/server/internal/crm-facade/models.ImageInput`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "documents":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("documents"))
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalODocumentInput2ᚕᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐDocumentInputᚄ(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "omitempty")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.([]*crm_models.DocumentInput); ok {
				if err = ec.resolvers.ComplexInput().Documents(ctx, &it, data); err != nil {
					return it, err
				}
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be []*github.com/pinks-agency/ecn/server/internal/crm-facade/models.DocumentInput`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "projectDeclarations":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("projectDeclarations"))
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalODocumentInput2ᚕᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐDocumentInputᚄ(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "omitempty")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.([]*crm_models.DocumentInput); ok {
				if err = ec.resolvers.ComplexInput().ProjectDeclarations(ctx, &it, data); err != nil {
					return it, err
				}
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be []*github.com/pinks-agency/ecn/server/internal/crm-facade/models.DocumentInput`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "publicationStatus":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("publicationStatus"))
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalOPublicationStatusEnum2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐPublicationStatusEnum(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "omitempty")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*crm_models.PublicationStatusEnum); ok {
				it.PublicationStatus = data
			} else if tmp == nil {
				it.PublicationStatus = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *github.com/pinks-agency/ecn/server/internal/crm-facade/models.PublicationStatusEnum`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "internalInfo":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("internalInfo"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "omitempty,max=256")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.InternalInfo = data
			} else if tmp == nil {
				it.InternalInfo = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputContactFilter(ctx context.Context, obj interface{}) (crm_models.ContactFilter, error) {
	var it crm_models.ContactFilter
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"phone", "email", "type", "company", "address", "employee", "createdAtMin", "createdAtMax"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "phone":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phone"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "len=11,startswith=8,number,omitempty")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.Phone = data
			} else if tmp == nil {
				it.Phone = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "email":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "email,omitempty")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.Email = data
			} else if tmp == nil {
				it.Email = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "type":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("type"))
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalOCounterPartyTypeEnum2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐCounterPartyTypeEnum(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "omitempty")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*crm_models.CounterPartyTypeEnum); ok {
				it.Type = data
			} else if tmp == nil {
				it.Type = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *github.com/pinks-agency/ecn/server/internal/crm-facade/models.CounterPartyTypeEnum`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "company":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("company"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "max=255,omitempty")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.Company = data
			} else if tmp == nil {
				it.Company = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "address":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("address"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "omitempty")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.Address = data
			} else if tmp == nil {
				it.Address = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "employee":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("employee"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOID2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "omitempty")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.Employee = data
			} else if tmp == nil {
				it.Employee = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "createdAtMin":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMin"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "omitempty")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*time.Time); ok {
				it.CreatedAtMin = data
			} else if tmp == nil {
				it.CreatedAtMin = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *time.Time`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "createdAtMax":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMax"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "omitempty")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*time.Time); ok {
				it.CreatedAtMax = data
			} else if tmp == nil {
				it.CreatedAtMax = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *time.Time`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputContactInput(ctx context.Context, obj interface{}) (crm_models.ContactInput, error) {
	var it crm_models.ContactInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id", "type", "source", "name", "surname", "patronymic", "birthday", "phone", "additionalPhones", "email", "company", "address", "propertyIDs", "passportNumber", "passportIssuedBy", "passportIssueDate", "passportIssuerCode", "internalInfo", "note", "dealIDs", "agentIDs", "contracts", "documents", "leadID"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOID2string(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "omitempty,mongodb")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(string); ok {
				it.ID = data
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "type":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("type"))
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalOCounterPartyTypeEnum2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐCounterPartyTypeEnum(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "omitempty")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*crm_models.CounterPartyTypeEnum); ok {
				it.Type = data
			} else if tmp == nil {
				it.Type = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *github.com/pinks-agency/ecn/server/internal/crm-facade/models.CounterPartyTypeEnum`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "source":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("source"))
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalOContactSourceEnum2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐContactSourceEnum(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "omitempty")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*crm_models.ContactSourceEnum); ok {
				it.Source = data
			} else if tmp == nil {
				it.Source = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *github.com/pinks-agency/ecn/server/internal/crm-facade/models.ContactSourceEnum`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalNString2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "required,max=100")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.Name = data
			} else if tmp == nil {
				it.Name = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "surname":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("surname"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalNString2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "required,max=100")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.Surname = data
			} else if tmp == nil {
				it.Surname = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "patronymic":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("patronymic"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "max=100,omitempty")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.Patronymic = data
			} else if tmp == nil {
				it.Patronymic = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "birthday":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("birthday"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOTime2timeᚐTime(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "omitempty")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(time.Time); ok {
				it.Birthday = data
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be time.Time`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "phone":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phone"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalNString2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "required,len=11,startswith=8,number")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.Phone = data
			} else if tmp == nil {
				it.Phone = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "additionalPhones":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("additionalPhones"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚕstringᚄ(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "omitempty,dive,len=11,startswith=8,number")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.([]string); ok {
				it.AdditionalPhones = data
			} else if tmp == nil {
				it.AdditionalPhones = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be []string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "email":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalNString2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "required,email")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.Email = data
			} else if tmp == nil {
				it.Email = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "company":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("company"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "omitempty,max=255")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.Company = data
			} else if tmp == nil {
				it.Company = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "address":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("address"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "omitempty")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.Address = data
			} else if tmp == nil {
				it.Address = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "propertyIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("propertyIDs"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOID2ᚕstringᚄ(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "dive,omitempty,mongodb")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.([]string); ok {
				it.PropertyIDs = data
			} else if tmp == nil {
				it.PropertyIDs = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be []string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "passportNumber":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("passportNumber"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "omitempty,max=20")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.PassportNumber = data
			} else if tmp == nil {
				it.PassportNumber = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "passportIssuedBy":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("passportIssuedBy"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "omitempty,max=255")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.PassportIssuedBy = data
			} else if tmp == nil {
				it.PassportIssuedBy = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "passportIssueDate":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("passportIssueDate"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOTime2timeᚐTime(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "omitempty")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(time.Time); ok {
				it.PassportIssueDate = data
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be time.Time`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "passportIssuerCode":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("passportIssuerCode"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "omitempty")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.PassportIssuerCode = data
			} else if tmp == nil {
				it.PassportIssuerCode = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "internalInfo":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("internalInfo"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "omitempty")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.InternalInfo = data
			} else if tmp == nil {
				it.InternalInfo = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "note":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("note"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "max=4096,omitempty")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.Note = data
			} else if tmp == nil {
				it.Note = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "dealIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dealIDs"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOID2ᚕstringᚄ(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "dive,omitempty,mongodb")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.([]string); ok {
				it.DealIDs = data
			} else if tmp == nil {
				it.DealIDs = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be []string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "agentIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("agentIDs"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOID2ᚕstringᚄ(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "dive,omitempty,mongodb")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.([]string); ok {
				it.AgentIDs = data
			} else if tmp == nil {
				it.AgentIDs = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be []string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "contracts":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contracts"))
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalODocumentInput2ᚕᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐDocumentInputᚄ(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "omitempty")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.([]*crm_models.DocumentInput); ok {
				if err = ec.resolvers.ContactInput().Contracts(ctx, &it, data); err != nil {
					return it, err
				}
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be []*github.com/pinks-agency/ecn/server/internal/crm-facade/models.DocumentInput`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "documents":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("documents"))
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalODocumentInput2ᚕᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐDocumentInputᚄ(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "omitempty")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.([]*crm_models.DocumentInput); ok {
				if err = ec.resolvers.ContactInput().Documents(ctx, &it, data); err != nil {
					return it, err
				}
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be []*github.com/pinks-agency/ecn/server/internal/crm-facade/models.DocumentInput`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "leadID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("leadID"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOID2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "omitempty,mongodb")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.LeadID = data
			} else if tmp == nil {
				it.LeadID = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputContentBlockInput(ctx context.Context, obj interface{}) (crm_models.ContentBlockInput, error) {
	var it crm_models.ContentBlockInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"type", "data", "isVisible"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "type":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("type"))
			data, err := ec.unmarshalNContentBlockType2githubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐContentBlockType(ctx, v)
			if err != nil {
				return it, err
			}
			it.Type = data
		case "data":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("data"))
			data, err := ec.unmarshalNJSON2map(ctx, v)
			if err != nil {
				return it, err
			}
			it.Data = data
		case "isVisible":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isVisible"))
			data, err := ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.IsVisible = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDealFilter(ctx context.Context, obj interface{}) (crm_models.DealFilter, error) {
	var it crm_models.DealFilter
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"Type", "deal", "stage", "propertyType", "phone", "employee", "contact", "isDeleted", "createdAtMin", "createdAtMax", "finishedAtMin", "finishedAtMax"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "Type":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Type"))
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalODealTypeEnum2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐDealTypeEnum(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "omitempty")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*crm_models.DealTypeEnum); ok {
				it.Type = data
			} else if tmp == nil {
				it.Type = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *github.com/pinks-agency/ecn/server/internal/crm-facade/models.DealTypeEnum`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "deal":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deal"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOID2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "omitempty,mongodb")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.Deal = data
			} else if tmp == nil {
				it.Deal = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "stage":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stage"))
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalODealStageEnum2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐDealStageEnum(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "omitempty")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*crm_models.DealStageEnum); ok {
				it.Stage = data
			} else if tmp == nil {
				it.Stage = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *github.com/pinks-agency/ecn/server/internal/crm-facade/models.DealStageEnum`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "propertyType":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("propertyType"))
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalOPropertyTypeEnum2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐPropertyTypeEnum(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "omitempty")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*crm_models.PropertyTypeEnum); ok {
				it.PropertyType = data
			} else if tmp == nil {
				it.PropertyType = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *github.com/pinks-agency/ecn/server/internal/crm-facade/models.PropertyTypeEnum`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "phone":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phone"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "len=11,startswith=8,number,omitempty")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.Phone = data
			} else if tmp == nil {
				it.Phone = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "employee":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("employee"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOID2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "mongodb,omitempty")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.Employee = data
			} else if tmp == nil {
				it.Employee = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "contact":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contact"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOID2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "mongodb,omitempty")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.Contact = data
			} else if tmp == nil {
				it.Contact = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "isDeleted":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isDeleted"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOBoolean2ᚖbool(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "boolean,omitempty")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*bool); ok {
				it.IsDeleted = data
			} else if tmp == nil {
				it.IsDeleted = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *bool`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "createdAtMin":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMin"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "omitempty")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*time.Time); ok {
				it.CreatedAtMin = data
			} else if tmp == nil {
				it.CreatedAtMin = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *time.Time`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "createdAtMax":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMax"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "omitempty")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*time.Time); ok {
				it.CreatedAtMax = data
			} else if tmp == nil {
				it.CreatedAtMax = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *time.Time`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "finishedAtMin":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("finishedAtMin"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "omitempty")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*time.Time); ok {
				it.FinishedAtMin = data
			} else if tmp == nil {
				it.FinishedAtMin = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *time.Time`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "finishedAtMax":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("finishedAtMax"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "omitempty")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*time.Time); ok {
				it.FinishedAtMax = data
			} else if tmp == nil {
				it.FinishedAtMax = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *time.Time`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDealInput(ctx context.Context, obj interface{}) (crm_models.DealInput, error) {
	var it crm_models.DealInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id", "type", "stage", "sellerAgentID", "sellerContactID", "sellerPhone", "sellerDocuments", "buyerAgentID", "buyerContactID", "buyerPhone", "buyerDocuments", "propertyID", "address", "mortgageBrokerID", "mortgageRequestID", "mortgageDocuments", "lawerID", "lawerDocuments", "accountantID", "accountantDocuments", "depositDate", "dealDate", "commissionAmount", "internalComment"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOID2string(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "omitempty,mongodb")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(string); ok {
				it.ID = data
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "type":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("type"))
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalODealTypeEnum2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐDealTypeEnum(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "omitempty")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*crm_models.DealTypeEnum); ok {
				it.Type = data
			} else if tmp == nil {
				it.Type = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *github.com/pinks-agency/ecn/server/internal/crm-facade/models.DealTypeEnum`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "stage":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stage"))
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalODealStageEnum2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐDealStageEnum(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "omitempty")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*crm_models.DealStageEnum); ok {
				it.Stage = data
			} else if tmp == nil {
				it.Stage = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *github.com/pinks-agency/ecn/server/internal/crm-facade/models.DealStageEnum`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "sellerAgentID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sellerAgentID"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOID2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "omitempty,mongodb")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.SellerAgentID = data
			} else if tmp == nil {
				it.SellerAgentID = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "sellerContactID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sellerContactID"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOID2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "omitempty,mongodb")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.SellerContactID = data
			} else if tmp == nil {
				it.SellerContactID = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "sellerPhone":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sellerPhone"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "required,len=11,startswith=8,number")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.SellerPhone = data
			} else if tmp == nil {
				it.SellerPhone = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "sellerDocuments":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sellerDocuments"))
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalODocumentInput2ᚕᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐDocumentInputᚄ(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "omitempty")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.([]*crm_models.DocumentInput); ok {
				if err = ec.resolvers.DealInput().SellerDocuments(ctx, &it, data); err != nil {
					return it, err
				}
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be []*github.com/pinks-agency/ecn/server/internal/crm-facade/models.DocumentInput`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "buyerAgentID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("buyerAgentID"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOID2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "omitempty,mongodb")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.BuyerAgentID = data
			} else if tmp == nil {
				it.BuyerAgentID = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "buyerContactID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("buyerContactID"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOID2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "omitempty,mongodb")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.BuyerContactID = data
			} else if tmp == nil {
				it.BuyerContactID = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "buyerPhone":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("buyerPhone"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "required,len=11,startswith=8,number")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.BuyerPhone = data
			} else if tmp == nil {
				it.BuyerPhone = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "buyerDocuments":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("buyerDocuments"))
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalODocumentInput2ᚕᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐDocumentInputᚄ(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "omitempty")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.([]*crm_models.DocumentInput); ok {
				if err = ec.resolvers.DealInput().BuyerDocuments(ctx, &it, data); err != nil {
					return it, err
				}
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be []*github.com/pinks-agency/ecn/server/internal/crm-facade/models.DocumentInput`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "propertyID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("propertyID"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOID2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "omitempty,mongodb")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.PropertyID = data
			} else if tmp == nil {
				it.PropertyID = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "address":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("address"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "omitempty")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.Address = data
			} else if tmp == nil {
				it.Address = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "mortgageBrokerID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("mortgageBrokerID"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOID2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "omitempty,mongodb")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.MortgageBrokerID = data
			} else if tmp == nil {
				it.MortgageBrokerID = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "mortgageRequestID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("mortgageRequestID"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOID2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "omitempty,mongodb")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.MortgageRequestID = data
			} else if tmp == nil {
				it.MortgageRequestID = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "mortgageDocuments":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("mortgageDocuments"))
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalODocumentInput2ᚕᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐDocumentInputᚄ(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "omitempty")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.([]*crm_models.DocumentInput); ok {
				if err = ec.resolvers.DealInput().MortgageDocuments(ctx, &it, data); err != nil {
					return it, err
				}
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be []*github.com/pinks-agency/ecn/server/internal/crm-facade/models.DocumentInput`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "lawerID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lawerID"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOID2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "omitempty,mongodb")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.LawerID = data
			} else if tmp == nil {
				it.LawerID = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "lawerDocuments":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lawerDocuments"))
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalODocumentInput2ᚕᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐDocumentInputᚄ(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "omitempty")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.([]*crm_models.DocumentInput); ok {
				if err = ec.resolvers.DealInput().LawerDocuments(ctx, &it, data); err != nil {
					return it, err
				}
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be []*github.com/pinks-agency/ecn/server/internal/crm-facade/models.DocumentInput`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "accountantID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accountantID"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOID2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "omitempty,mongodb")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.AccountantID = data
			} else if tmp == nil {
				it.AccountantID = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "accountantDocuments":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accountantDocuments"))
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalODocumentInput2ᚕᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐDocumentInputᚄ(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "omitempty")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.([]*crm_models.DocumentInput); ok {
				if err = ec.resolvers.DealInput().AccountantDocuments(ctx, &it, data); err != nil {
					return it, err
				}
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be []*github.com/pinks-agency/ecn/server/internal/crm-facade/models.DocumentInput`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "depositDate":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("depositDate"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOTime2timeᚐTime(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "omitempty")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(time.Time); ok {
				it.DepositDate = data
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be time.Time`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "dealDate":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dealDate"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOTime2timeᚐTime(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "omitempty")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(time.Time); ok {
				it.DealDate = data
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be time.Time`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "commissionAmount":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("commissionAmount"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOFloat2ᚖfloat64(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "omitempty")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*float64); ok {
				it.CommissionAmount = data
			} else if tmp == nil {
				it.CommissionAmount = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *float64`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "internalComment":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("internalComment"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "max=4096,omitempty")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.InternalComment = data
			} else if tmp == nil {
				it.InternalComment = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDepartmentGroupInput(ctx context.Context, obj interface{}) (crm_models.DepartmentGroupInput, error) {
	var it crm_models.DepartmentGroupInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id", "title"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOID2string(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "mongodb")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(string); ok {
				it.ID = data
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "title":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("title"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalNString2string(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "required,max=100,min=3")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(string); ok {
				it.Title = data
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDepartmentInput(ctx context.Context, obj interface{}) (crm_models.DepartmentInput, error) {
	var it crm_models.DepartmentInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id", "title", "groups"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOID2string(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "mongodb")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(string); ok {
				it.ID = data
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "title":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("title"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalNString2string(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "required,max=100,min=3")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(string); ok {
				it.Title = data
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "groups":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("groups"))
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalNDepartmentGroupInput2ᚕgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐDepartmentGroupInputᚄ(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "required,dive,required")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.([]crm_models.DepartmentGroupInput); ok {
				it.Groups = data
			} else if tmp == nil {
				it.Groups = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be []github.com/pinks-agency/ecn/server/internal/crm-facade/models.DepartmentGroupInput`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDeveloperFilterInput(ctx context.Context, obj interface{}) (crm_models.DeveloperFilterInput, error) {
	var it crm_models.DeveloperFilterInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"isDeleted"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "isDeleted":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isDeleted"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOBoolean2ᚖbool(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "boolean")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*bool); ok {
				it.IsDeleted = data
			} else if tmp == nil {
				it.IsDeleted = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *bool`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDeveloperInput(ctx context.Context, obj interface{}) (crm_models.DeveloperInput, error) {
	var it crm_models.DeveloperInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id", "title", "url", "logo"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOID2string(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "mongodb")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(string); ok {
				it.ID = data
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "title":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("title"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalNString2string(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "required,min=3,max=500")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(string); ok {
				it.Title = data
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "url":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("url"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2string(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "omitempty,url")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(string); ok {
				it.URL = data
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "logo":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("logo"))
			data, err := ec.unmarshalOImageInput2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐImageInput(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.DeveloperInput().Logo(ctx, &it, data); err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDocumentInput(ctx context.Context, obj interface{}) (crm_models.DocumentInput, error) {
	var it crm_models.DocumentInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id", "file", "title"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalOID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "file":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("file"))
			data, err := ec.unmarshalOUpload2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚐUpload(ctx, v)
			if err != nil {
				return it, err
			}
			it.File = data
		case "title":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("title"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2string(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "max=100,min=3")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(string); ok {
				it.Title = data
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputEmployeeInput(ctx context.Context, obj interface{}) (crm_models.EmployeeInput, error) {
	var it crm_models.EmployeeInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id", "name", "surname", "patronymic", "birthday", "email", "phone", "password", "positionID", "departmentID", "groupID", "roleID", "internalInfo", "shortDescription", "description", "isPublished", "avatar", "publicImage"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOID2string(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "mongodb")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(string); ok {
				it.ID = data
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalNString2string(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "required,max=100,min=3")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(string); ok {
				it.Name = data
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "surname":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("surname"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalNString2string(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "required,max=100,min=3")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(string); ok {
				it.Surname = data
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "patronymic":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("patronymic"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2string(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "max=100,min=3")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(string); ok {
				it.Patronymic = data
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "birthday":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("birthday"))
			data, err := ec.unmarshalOTime2timeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.Birthday = data
		case "email":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalNString2string(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "required,email")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(string); ok {
				it.Email = data
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "phone":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phone"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalNString2string(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "required,len=11,startswith=8,number")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(string); ok {
				it.Phone = data
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "password":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("password"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2string(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "max=32,min=6,alphanum")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(string); ok {
				it.Password = data
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "positionID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("positionID"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOID2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "mongodb")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.PositionID = data
			} else if tmp == nil {
				it.PositionID = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "departmentID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("departmentID"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOID2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "mongodb")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.DepartmentID = data
			} else if tmp == nil {
				it.DepartmentID = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "groupID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("groupID"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOID2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "mongodb")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.GroupID = data
			} else if tmp == nil {
				it.GroupID = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "roleID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("roleID"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOID2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "mongodb")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.RoleID = data
			} else if tmp == nil {
				it.RoleID = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "internalInfo":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("internalInfo"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2string(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "max=1000,min=3")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(string); ok {
				it.InternalInfo = data
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "shortDescription":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("shortDescription"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2string(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "max=200,min=3")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(string); ok {
				it.ShortDescription = data
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "description":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2string(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "max=1000,min=3")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(string); ok {
				it.Description = data
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "isPublished":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isPublished"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.IsPublished = data
		case "avatar":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("avatar"))
			data, err := ec.unmarshalOImageInput2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐImageInput(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.EmployeeInput().Avatar(ctx, &it, data); err != nil {
				return it, err
			}
		case "publicImage":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("publicImage"))
			data, err := ec.unmarshalOImageInput2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐImageInput(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.EmployeeInput().PublicImage(ctx, &it, data); err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputEmployeesFilterInput(ctx context.Context, obj interface{}) (crm_models.EmployeesFilterInput, error) {
	var it crm_models.EmployeesFilterInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"position", "department", "group", "role", "isActive", "isPublished", "isDeleted"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "position":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("position"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOID2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "mongodb")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.Position = data
			} else if tmp == nil {
				it.Position = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "department":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("department"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOID2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "mongodb")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.Department = data
			} else if tmp == nil {
				it.Department = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "group":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("group"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOID2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "mongodb")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.Group = data
			} else if tmp == nil {
				it.Group = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "role":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("role"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOID2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "mongodb")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.Role = data
			} else if tmp == nil {
				it.Role = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "isActive":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isActive"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOBoolean2ᚖbool(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "boolean")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*bool); ok {
				it.IsActive = data
			} else if tmp == nil {
				it.IsActive = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *bool`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "isPublished":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isPublished"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOBoolean2ᚖbool(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "boolean")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*bool); ok {
				it.IsPublished = data
			} else if tmp == nil {
				it.IsPublished = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *bool`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "isDeleted":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isDeleted"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOBoolean2ᚖbool(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "boolean")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*bool); ok {
				it.IsDeleted = data
			} else if tmp == nil {
				it.IsDeleted = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *bool`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputImageInput(ctx context.Context, obj interface{}) (crm_models.ImageInput, error) {
	var it crm_models.ImageInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id", "file", "title", "preset"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalOID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "file":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("file"))
			data, err := ec.unmarshalOUpload2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚐUpload(ctx, v)
			if err != nil {
				return it, err
			}
			it.File = data
		case "title":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("title"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2string(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "max=100,min=3")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(string); ok {
				it.Title = data
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "preset":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("preset"))
			data, err := ec.unmarshalOImagePreset2githubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐImagePreset(ctx, v)
			if err != nil {
				return it, err
			}
			it.Preset = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputLeadFilter(ctx context.Context, obj interface{}) (crm_models.LeadFilter, error) {
	var it crm_models.LeadFilter
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"phone", "email", "type", "status", "company", "createdAtMin", "createdAtMax"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "phone":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phone"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "len=11,startswith=8,number,omitempty")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.Phone = data
			} else if tmp == nil {
				it.Phone = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "email":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "email,omitempty")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.Email = data
			} else if tmp == nil {
				it.Email = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "type":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("type"))
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalOLeadTypeEnum2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐLeadTypeEnum(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "omitempty")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*crm_models.LeadTypeEnum); ok {
				it.Type = data
			} else if tmp == nil {
				it.Type = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *github.com/pinks-agency/ecn/server/internal/crm-facade/models.LeadTypeEnum`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "status":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status"))
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalOLeadStatusEnum2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐLeadStatusEnum(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "omitempty")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*crm_models.LeadStatusEnum); ok {
				it.Status = data
			} else if tmp == nil {
				it.Status = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *github.com/pinks-agency/ecn/server/internal/crm-facade/models.LeadStatusEnum`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "company":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("company"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "max=255,omitempty")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.Company = data
			} else if tmp == nil {
				it.Company = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "createdAtMin":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMin"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "omitempty")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*time.Time); ok {
				it.CreatedAtMin = data
			} else if tmp == nil {
				it.CreatedAtMin = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *time.Time`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "createdAtMax":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMax"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "omitempty")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*time.Time); ok {
				it.CreatedAtMax = data
			} else if tmp == nil {
				it.CreatedAtMax = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *time.Time`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputLeadInput(ctx context.Context, obj interface{}) (crm_models.LeadInput, error) {
	var it crm_models.LeadInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id", "type", "source", "name", "surname", "patronymic", "birthday", "phone", "additionalPhones", "email", "company", "address", "request", "agentIDs", "status", "comment"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOID2string(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "omitempty,mongodb")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(string); ok {
				it.ID = data
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "type":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("type"))
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalOLeadTypeEnum2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐLeadTypeEnum(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "omitempty")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*crm_models.LeadTypeEnum); ok {
				it.Type = data
			} else if tmp == nil {
				it.Type = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *github.com/pinks-agency/ecn/server/internal/crm-facade/models.LeadTypeEnum`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "source":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("source"))
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalOLeadSourceEnum2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐLeadSourceEnum(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "omitempty")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*crm_models.LeadSourceEnum); ok {
				it.Source = data
			} else if tmp == nil {
				it.Source = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *github.com/pinks-agency/ecn/server/internal/crm-facade/models.LeadSourceEnum`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "required,max=100")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.Name = data
			} else if tmp == nil {
				it.Name = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "surname":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("surname"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "required,max=100")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.Surname = data
			} else if tmp == nil {
				it.Surname = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "patronymic":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("patronymic"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "omitempty,max=100")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.Patronymic = data
			} else if tmp == nil {
				it.Patronymic = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "birthday":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("birthday"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "omitempty")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*time.Time); ok {
				it.Birthday = data
			} else if tmp == nil {
				it.Birthday = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *time.Time`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "phone":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phone"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "required,len=11,startswith=8,number")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.Phone = data
			} else if tmp == nil {
				it.Phone = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "additionalPhones":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("additionalPhones"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚕstringᚄ(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "omitempty,dive,len=11,startswith=8,number")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.([]string); ok {
				it.AdditionalPhones = data
			} else if tmp == nil {
				it.AdditionalPhones = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be []string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "email":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "required,email")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.Email = data
			} else if tmp == nil {
				it.Email = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "company":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("company"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "omitempty,max=255")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.Company = data
			} else if tmp == nil {
				it.Company = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "address":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("address"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "omitempty")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.Address = data
			} else if tmp == nil {
				it.Address = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "request":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("request"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "omitempty")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.Request = data
			} else if tmp == nil {
				it.Request = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "agentIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("agentIDs"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOID2ᚕstringᚄ(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "dive,omitempty,mongodb")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.([]string); ok {
				it.AgentIDs = data
			} else if tmp == nil {
				it.AgentIDs = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be []string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "status":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status"))
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalOLeadStatusEnum2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐLeadStatusEnum(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "omitempty")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*crm_models.LeadStatusEnum); ok {
				it.Status = data
			} else if tmp == nil {
				it.Status = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *github.com/pinks-agency/ecn/server/internal/crm-facade/models.LeadStatusEnum`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "comment":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("comment"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "omitempty,max=4096")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.Comment = data
			} else if tmp == nil {
				it.Comment = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputLogsFilterInput(ctx context.Context, obj interface{}) (crm_models.LogsFilterInput, error) {
	var it crm_models.LogsFilterInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"author", "type", "level"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "author":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("author"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOID2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "mongodb")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.Author = data
			} else if tmp == nil {
				it.Author = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "type":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("type"))
			data, err := ec.unmarshalOLogTypeEnum2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐLogTypeEnum(ctx, v)
			if err != nil {
				return it, err
			}
			it.Type = data
		case "level":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("level"))
			data, err := ec.unmarshalOLogLevelEnum2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐLogLevelEnum(ctx, v)
			if err != nil {
				return it, err
			}
			it.Level = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputMeetFilter(ctx context.Context, obj interface{}) (crm_models.MeetFilter, error) {
	var it crm_models.MeetFilter
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"type", "status", "dealType", "sellerAgent", "buyerAgent", "buyerContact", "sellerContact", "property", "phone", "address", "createdAtMin", "createdAtMax"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "type":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("type"))
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalOMeetTypeEnum2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐMeetTypeEnum(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "omitempty")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*crm_models.MeetTypeEnum); ok {
				it.Type = data
			} else if tmp == nil {
				it.Type = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *github.com/pinks-agency/ecn/server/internal/crm-facade/models.MeetTypeEnum`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "status":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status"))
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalOMeetStatusEnum2ᚕgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐMeetStatusEnumᚄ(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "omitempty")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.([]crm_models.MeetStatusEnum); ok {
				it.Status = data
			} else if tmp == nil {
				it.Status = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be []github.com/pinks-agency/ecn/server/internal/crm-facade/models.MeetStatusEnum`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "dealType":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dealType"))
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalODealTypeEnum2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐDealTypeEnum(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "omitempty")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*crm_models.DealTypeEnum); ok {
				it.DealType = data
			} else if tmp == nil {
				it.DealType = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *github.com/pinks-agency/ecn/server/internal/crm-facade/models.DealTypeEnum`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "sellerAgent":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sellerAgent"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOID2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "omitempty,mongodb")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.SellerAgent = data
			} else if tmp == nil {
				it.SellerAgent = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "buyerAgent":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("buyerAgent"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOID2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "omitempty,mongodb")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.BuyerAgent = data
			} else if tmp == nil {
				it.BuyerAgent = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "buyerContact":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("buyerContact"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOID2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "omitempty,mongodb")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.BuyerContact = data
			} else if tmp == nil {
				it.BuyerContact = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "sellerContact":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sellerContact"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOID2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "omitempty,mongodb")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.SellerContact = data
			} else if tmp == nil {
				it.SellerContact = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "property":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("property"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOID2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "mongodb")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.Property = data
			} else if tmp == nil {
				it.Property = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "phone":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phone"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "len=11,startswith=8,number,omitempty")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.Phone = data
			} else if tmp == nil {
				it.Phone = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "address":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("address"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "omitempty")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.Address = data
			} else if tmp == nil {
				it.Address = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "createdAtMin":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMin"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "omitempty")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*time.Time); ok {
				it.CreatedAtMin = data
			} else if tmp == nil {
				it.CreatedAtMin = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *time.Time`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "createdAtMax":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMax"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "omitempty")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*time.Time); ok {
				it.CreatedAtMax = data
			} else if tmp == nil {
				it.CreatedAtMax = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *time.Time`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputMeetInput(ctx context.Context, obj interface{}) (crm_models.MeetInput, error) {
	var it crm_models.MeetInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id", "type", "dateTime", "dealType", "contactType", "propertyID", "address", "comment", "isOnline", "sellerAgentID", "sellerContactID", "sellerPhone", "buyerAgentID", "buyerContactID", "buyerPhone", "buyerAgency", "status", "cancelReason", "cancelReasonCustom", "useDealDeposit", "lawerID", "accountantID", "mortgageBrokerID", "useMortgage"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOID2string(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "omitempty,mongodb")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(string); ok {
				it.ID = data
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "type":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("type"))
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalOMeetTypeEnum2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐMeetTypeEnum(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "omitempty")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*crm_models.MeetTypeEnum); ok {
				it.Type = data
			} else if tmp == nil {
				it.Type = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *github.com/pinks-agency/ecn/server/internal/crm-facade/models.MeetTypeEnum`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "dateTime":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dateTime"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOTime2timeᚐTime(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "omitempty")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(time.Time); ok {
				it.DateTime = data
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be time.Time`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "dealType":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dealType"))
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalODealTypeEnum2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐDealTypeEnum(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "omitempty")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*crm_models.DealTypeEnum); ok {
				it.DealType = data
			} else if tmp == nil {
				it.DealType = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *github.com/pinks-agency/ecn/server/internal/crm-facade/models.DealTypeEnum`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "contactType":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contactType"))
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalOCounterPartyTypeEnum2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐCounterPartyTypeEnum(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "omitempty")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*crm_models.CounterPartyTypeEnum); ok {
				it.ContactType = data
			} else if tmp == nil {
				it.ContactType = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *github.com/pinks-agency/ecn/server/internal/crm-facade/models.CounterPartyTypeEnum`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "propertyID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("propertyID"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOID2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "omitempty,mongodb")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.PropertyID = data
			} else if tmp == nil {
				it.PropertyID = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "address":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("address"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "omitempty")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.Address = data
			} else if tmp == nil {
				it.Address = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "comment":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("comment"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "max=4096,omitempty")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.Comment = data
			} else if tmp == nil {
				it.Comment = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "isOnline":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isOnline"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOBoolean2ᚖbool(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "omitempty,boolean")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*bool); ok {
				it.IsOnline = data
			} else if tmp == nil {
				it.IsOnline = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *bool`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "sellerAgentID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sellerAgentID"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOID2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "omitempty,mongodb")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.SellerAgentID = data
			} else if tmp == nil {
				it.SellerAgentID = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "sellerContactID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sellerContactID"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOID2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "omitempty,mongodb")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.SellerContactID = data
			} else if tmp == nil {
				it.SellerContactID = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "sellerPhone":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sellerPhone"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "omitempty,len=11,startswith=8,number")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.SellerPhone = data
			} else if tmp == nil {
				it.SellerPhone = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "buyerAgentID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("buyerAgentID"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOID2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "omitempty,mongodb")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.BuyerAgentID = data
			} else if tmp == nil {
				it.BuyerAgentID = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "buyerContactID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("buyerContactID"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOID2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "omitempty,mongodb")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.BuyerContactID = data
			} else if tmp == nil {
				it.BuyerContactID = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "buyerPhone":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("buyerPhone"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "omitempty,len=11,startswith=8,number")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.BuyerPhone = data
			} else if tmp == nil {
				it.BuyerPhone = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "buyerAgency":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("buyerAgency"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "omitempty")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.BuyerAgency = data
			} else if tmp == nil {
				it.BuyerAgency = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "status":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status"))
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalOMeetStatusEnum2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐMeetStatusEnum(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "omitempty")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*crm_models.MeetStatusEnum); ok {
				it.Status = data
			} else if tmp == nil {
				it.Status = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *github.com/pinks-agency/ecn/server/internal/crm-facade/models.MeetStatusEnum`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "cancelReason":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cancelReason"))
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalOMeetCancelReasonEnum2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐMeetCancelReasonEnum(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "omitempty")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*crm_models.MeetCancelReasonEnum); ok {
				it.CancelReason = data
			} else if tmp == nil {
				it.CancelReason = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *github.com/pinks-agency/ecn/server/internal/crm-facade/models.MeetCancelReasonEnum`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "cancelReasonCustom":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cancelReasonCustom"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "omitempty")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.CancelReasonCustom = data
			} else if tmp == nil {
				it.CancelReasonCustom = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "useDealDeposit":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("useDealDeposit"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOBoolean2ᚖbool(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "omitempty,boolean")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*bool); ok {
				it.UseDealDeposit = data
			} else if tmp == nil {
				it.UseDealDeposit = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *bool`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "lawerID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lawerID"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOID2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "omitempty,mongodb")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.LawerID = data
			} else if tmp == nil {
				it.LawerID = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "accountantID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accountantID"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOID2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "omitempty,mongodb")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.AccountantID = data
			} else if tmp == nil {
				it.AccountantID = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "mortgageBrokerID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("mortgageBrokerID"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOID2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "omitempty,mongodb")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.MortgageBrokerID = data
			} else if tmp == nil {
				it.MortgageBrokerID = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "useMortgage":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("useMortgage"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOBoolean2ᚖbool(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "omitempty,boolean")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*bool); ok {
				it.UseMortgage = data
			} else if tmp == nil {
				it.UseMortgage = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *bool`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputMortgageRequestFilter(ctx context.Context, obj interface{}) (crm_models.MortgageRequestFilter, error) {
	var it crm_models.MortgageRequestFilter
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"status", "mortgageBroker", "agent", "contact", "property", "deal", "amount", "firstDeposit", "period", "percentage", "sendDate", "responseDate", "createdAtMin", "createdAtMax"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "status":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status"))
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalOMortgageRequestStatusEnum2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐMortgageRequestStatusEnum(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "omitempty")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*crm_models.MortgageRequestStatusEnum); ok {
				it.Status = data
			} else if tmp == nil {
				it.Status = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *github.com/pinks-agency/ecn/server/internal/crm-facade/models.MortgageRequestStatusEnum`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "mortgageBroker":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("mortgageBroker"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOID2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "omitempty,mongodb")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.MortgageBroker = data
			} else if tmp == nil {
				it.MortgageBroker = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "agent":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("agent"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOID2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "omitempty,mongodb")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.Agent = data
			} else if tmp == nil {
				it.Agent = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "contact":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contact"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOID2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "mongodb,omitempty")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.Contact = data
			} else if tmp == nil {
				it.Contact = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "property":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("property"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOID2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "mongodb,omitempty")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.Property = data
			} else if tmp == nil {
				it.Property = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "deal":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deal"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOID2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "mongodb,omitempty")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.Deal = data
			} else if tmp == nil {
				it.Deal = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "amount":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("amount"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOFloat2ᚖfloat64(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "omitempty")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*float64); ok {
				it.Amount = data
			} else if tmp == nil {
				it.Amount = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *float64`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "firstDeposit":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("firstDeposit"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOFloat2ᚖfloat64(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "omitempty")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*float64); ok {
				it.FirstDeposit = data
			} else if tmp == nil {
				it.FirstDeposit = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *float64`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "period":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("period"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOInt2ᚖint(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "omitempty")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*int); ok {
				it.Period = data
			} else if tmp == nil {
				it.Period = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *int`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "percentage":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("percentage"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOFloat2ᚖfloat64(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "omitempty")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*float64); ok {
				it.Percentage = data
			} else if tmp == nil {
				it.Percentage = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *float64`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "sendDate":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sendDate"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "omitempty")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*time.Time); ok {
				it.SendDate = data
			} else if tmp == nil {
				it.SendDate = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *time.Time`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "responseDate":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("responseDate"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "omitempty")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*time.Time); ok {
				it.ResponseDate = data
			} else if tmp == nil {
				it.ResponseDate = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *time.Time`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "createdAtMin":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMin"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "omitempty")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*time.Time); ok {
				it.CreatedAtMin = data
			} else if tmp == nil {
				it.CreatedAtMin = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *time.Time`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "createdAtMax":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMax"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "omitempty")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*time.Time); ok {
				it.CreatedAtMax = data
			} else if tmp == nil {
				it.CreatedAtMax = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *time.Time`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputMortgageRequestInput(ctx context.Context, obj interface{}) (crm_models.MortgageRequestInput, error) {
	var it crm_models.MortgageRequestInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id", "status", "contactID", "bankIDs", "mortgageBrokerID", "agentID", "dealID", "propertyID", "amount", "firstDeposit", "period", "comment", "contracts", "documents", "sendDate", "responseDate", "validTillDate", "percentage"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOID2string(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "omitempty,mongodb")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(string); ok {
				it.ID = data
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "status":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status"))
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalOMortgageRequestStatusEnum2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐMortgageRequestStatusEnum(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "omitempty")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*crm_models.MortgageRequestStatusEnum); ok {
				it.Status = data
			} else if tmp == nil {
				it.Status = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *github.com/pinks-agency/ecn/server/internal/crm-facade/models.MortgageRequestStatusEnum`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "contactID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contactID"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOID2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "mongodb,omitempty")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.ContactID = data
			} else if tmp == nil {
				it.ContactID = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "bankIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("bankIDs"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOID2ᚕstringᚄ(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "dive,omitempty,mongodb")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.([]string); ok {
				it.BankIDs = data
			} else if tmp == nil {
				it.BankIDs = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be []string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "mortgageBrokerID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("mortgageBrokerID"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOID2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "mongodb,omitempty")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.MortgageBrokerID = data
			} else if tmp == nil {
				it.MortgageBrokerID = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "agentID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("agentID"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOID2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "mongodb,omitempty")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.AgentID = data
			} else if tmp == nil {
				it.AgentID = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "dealID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dealID"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOID2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "mongodb,omitempty")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.DealID = data
			} else if tmp == nil {
				it.DealID = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "propertyID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("propertyID"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOID2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "mongodb,omitempty")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.PropertyID = data
			} else if tmp == nil {
				it.PropertyID = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "amount":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("amount"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOFloat2ᚖfloat64(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "omitempty")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*float64); ok {
				it.Amount = data
			} else if tmp == nil {
				it.Amount = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *float64`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "firstDeposit":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("firstDeposit"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOFloat2ᚖfloat64(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "omitempty")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*float64); ok {
				it.FirstDeposit = data
			} else if tmp == nil {
				it.FirstDeposit = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *float64`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "period":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("period"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOInt2ᚖint(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "omitempty")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*int); ok {
				it.Period = data
			} else if tmp == nil {
				it.Period = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *int`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "comment":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("comment"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "max=4096,omitempty")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.Comment = data
			} else if tmp == nil {
				it.Comment = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "contracts":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contracts"))
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalODocumentInput2ᚕᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐDocumentInputᚄ(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "omitempty")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.([]*crm_models.DocumentInput); ok {
				if err = ec.resolvers.MortgageRequestInput().Contracts(ctx, &it, data); err != nil {
					return it, err
				}
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be []*github.com/pinks-agency/ecn/server/internal/crm-facade/models.DocumentInput`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "documents":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("documents"))
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalODocumentInput2ᚕᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐDocumentInputᚄ(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "omitempty")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.([]*crm_models.DocumentInput); ok {
				if err = ec.resolvers.MortgageRequestInput().Documents(ctx, &it, data); err != nil {
					return it, err
				}
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be []*github.com/pinks-agency/ecn/server/internal/crm-facade/models.DocumentInput`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "sendDate":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sendDate"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOTime2timeᚐTime(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "omitempty")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(time.Time); ok {
				it.SendDate = data
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be time.Time`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "responseDate":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("responseDate"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOTime2timeᚐTime(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "omitempty")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(time.Time); ok {
				it.ResponseDate = data
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be time.Time`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "validTillDate":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("validTillDate"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOTime2timeᚐTime(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "omitempty")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(time.Time); ok {
				it.ValidTillDate = data
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be time.Time`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "percentage":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("percentage"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOFloat2ᚖfloat64(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "omitempty")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*float64); ok {
				it.Percentage = data
			} else if tmp == nil {
				it.Percentage = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *float64`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPageFilterInput(ctx context.Context, obj interface{}) (crm_models.PageFilterInput, error) {
	var it crm_models.PageFilterInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"status"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "status":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status"))
			data, err := ec.unmarshalOPublicationStatusEnum2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐPublicationStatusEnum(ctx, v)
			if err != nil {
				return it, err
			}
			it.Status = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPageInput(ctx context.Context, obj interface{}) (crm_models.PageInput, error) {
	var it crm_models.PageInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id", "url", "title", "description", "contentBlocks", "status"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOID2string(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "mongodb")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(string); ok {
				it.ID = data
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "url":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("url"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.URL = data
		case "title":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("title"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Title = data
		case "description":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Description = data
		case "contentBlocks":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contentBlocks"))
			data, err := ec.unmarshalNContentBlockInput2ᚕgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐContentBlockInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContentBlocks = data
		case "status":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status"))
			data, err := ec.unmarshalNPublicationStatusEnum2githubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐPublicationStatusEnum(ctx, v)
			if err != nil {
				return it, err
			}
			it.Status = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPaginationInput(ctx context.Context, obj interface{}) (crm_models.PaginationInput, error) {
	var it crm_models.PaginationInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"first", "last", "after", "before"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "first":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.First = data
		case "last":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.Last = data
		case "after":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("after"))
			data, err := ec.unmarshalOCursor2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.After = data
		case "before":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("before"))
			data, err := ec.unmarshalOCursor2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Before = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPositionInput(ctx context.Context, obj interface{}) (crm_models.PositionInput, error) {
	var it crm_models.PositionInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id", "title"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOID2string(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "mongodb")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(string); ok {
				it.ID = data
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "title":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("title"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalNString2string(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "required,max=100,min=3")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(string); ok {
				it.Title = data
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPropertyFilter(ctx context.Context, obj interface{}) (crm_models.PropertyFilter, error) {
	var it crm_models.PropertyFilter
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"deal", "type", "subType", "fromDeveloper", "complexID", "complexHouseID", "villageID", "isHot", "isDeleted", "statuses", "isStudio", "minRooms", "maxRooms", "minPrice", "maxPrice", "minPricePerMeter", "maxPricePerMeter", "minPricePerAr", "maxPricePerAr", "minArea", "maxArea", "minLandArea", "maxLandArea", "isReady", "inCity", "minCityDistance", "maxCityDistance", "minCreatedAt", "maxCreatedAt", "withPhotos"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "deal":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deal"))
			data, err := ec.unmarshalODealEnum2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐDealEnum(ctx, v)
			if err != nil {
				return it, err
			}
			it.Deal = data
		case "type":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("type"))
			data, err := ec.unmarshalOPropertyTypeEnum2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐPropertyTypeEnum(ctx, v)
			if err != nil {
				return it, err
			}
			it.Type = data
		case "subType":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("subType"))
			data, err := ec.unmarshalOPropertySubTypeEnum2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐPropertySubTypeEnum(ctx, v)
			if err != nil {
				return it, err
			}
			it.SubType = data
		case "fromDeveloper":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fromDeveloper"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOBoolean2ᚖbool(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "boolean")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*bool); ok {
				it.FromDeveloper = data
			} else if tmp == nil {
				it.FromDeveloper = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *bool`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "complexID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("complexID"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "mongodb")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.ComplexID = data
			} else if tmp == nil {
				it.ComplexID = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "complexHouseID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("complexHouseID"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "mongodb")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.ComplexHouseID = data
			} else if tmp == nil {
				it.ComplexHouseID = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "villageID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("villageID"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "mongodb")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.VillageID = data
			} else if tmp == nil {
				it.VillageID = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "isHot":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isHot"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOBoolean2ᚖbool(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "boolean")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*bool); ok {
				it.IsHot = data
			} else if tmp == nil {
				it.IsHot = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *bool`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "isDeleted":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isDeleted"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOBoolean2ᚖbool(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "boolean")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*bool); ok {
				it.IsDeleted = data
			} else if tmp == nil {
				it.IsDeleted = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *bool`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "statuses":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("statuses"))
			data, err := ec.unmarshalOPropertyStatusEnum2ᚕgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐPropertyStatusEnumᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Statuses = data
		case "isStudio":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isStudio"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOBoolean2ᚖbool(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "boolean")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*bool); ok {
				it.IsStudio = data
			} else if tmp == nil {
				it.IsStudio = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *bool`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "minRooms":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("minRooms"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOFloat2ᚖfloat64(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "gte=0")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*float64); ok {
				it.MinRooms = data
			} else if tmp == nil {
				it.MinRooms = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *float64`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "maxRooms":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("maxRooms"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOFloat2ᚖfloat64(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "gte=0")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*float64); ok {
				it.MaxRooms = data
			} else if tmp == nil {
				it.MaxRooms = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *float64`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "minPrice":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("minPrice"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOFloat2ᚖfloat64(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "gte=0")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*float64); ok {
				it.MinPrice = data
			} else if tmp == nil {
				it.MinPrice = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *float64`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "maxPrice":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("maxPrice"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOFloat2ᚖfloat64(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "gte=0")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*float64); ok {
				it.MaxPrice = data
			} else if tmp == nil {
				it.MaxPrice = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *float64`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "minPricePerMeter":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("minPricePerMeter"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOFloat2ᚖfloat64(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "gte=0")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*float64); ok {
				it.MinPricePerMeter = data
			} else if tmp == nil {
				it.MinPricePerMeter = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *float64`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "maxPricePerMeter":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("maxPricePerMeter"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOFloat2ᚖfloat64(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "gte=0")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*float64); ok {
				it.MaxPricePerMeter = data
			} else if tmp == nil {
				it.MaxPricePerMeter = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *float64`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "minPricePerAr":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("minPricePerAr"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOFloat2ᚖfloat64(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "gte=0")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*float64); ok {
				it.MinPricePerAr = data
			} else if tmp == nil {
				it.MinPricePerAr = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *float64`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "maxPricePerAr":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("maxPricePerAr"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOFloat2ᚖfloat64(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "gte=0")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*float64); ok {
				it.MaxPricePerAr = data
			} else if tmp == nil {
				it.MaxPricePerAr = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *float64`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "minArea":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("minArea"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOFloat2ᚖfloat64(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "gte=0")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*float64); ok {
				it.MinArea = data
			} else if tmp == nil {
				it.MinArea = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *float64`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "maxArea":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("maxArea"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOFloat2ᚖfloat64(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "gte=0")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*float64); ok {
				it.MaxArea = data
			} else if tmp == nil {
				it.MaxArea = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *float64`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "minLandArea":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("minLandArea"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOFloat2ᚖfloat64(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "gte=0")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*float64); ok {
				it.MinLandArea = data
			} else if tmp == nil {
				it.MinLandArea = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *float64`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "maxLandArea":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("maxLandArea"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOFloat2ᚖfloat64(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "gte=0")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*float64); ok {
				it.MaxLandArea = data
			} else if tmp == nil {
				it.MaxLandArea = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *float64`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "isReady":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isReady"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOBoolean2ᚖbool(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "boolean")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*bool); ok {
				it.IsReady = data
			} else if tmp == nil {
				it.IsReady = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *bool`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "inCity":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("inCity"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOBoolean2ᚖbool(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "boolean")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*bool); ok {
				it.InCity = data
			} else if tmp == nil {
				it.InCity = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *bool`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "minCityDistance":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("minCityDistance"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOInt2ᚖint(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "gte=0")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*int); ok {
				it.MinCityDistance = data
			} else if tmp == nil {
				it.MinCityDistance = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *int`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "maxCityDistance":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("maxCityDistance"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOInt2ᚖint(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "gte=0")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*int); ok {
				it.MaxCityDistance = data
			} else if tmp == nil {
				it.MaxCityDistance = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *int`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "minCreatedAt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("minCreatedAt"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.MinCreatedAt = data
		case "maxCreatedAt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("maxCreatedAt"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.MaxCreatedAt = data
		case "withPhotos":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("withPhotos"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOBoolean2ᚖbool(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "boolean")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*bool); ok {
				it.WithPhotos = data
			} else if tmp == nil {
				it.WithPhotos = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *bool`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPropertyInput(ctx context.Context, obj interface{}) (crm_models.PropertyInput, error) {
	var it crm_models.PropertyInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id", "deal", "type", "subType", "commercialUsage", "fromDeveloper", "inComplex", "complexID", "complexHouseID", "inVillage", "villageID", "isHot", "title", "description", "address", "lat", "lon", "cadastrNumber", "seoText", "youtubeLink", "tourLink", "documents", "images", "status", "price", "isReady", "readinessYear", "readinessQuarter", "inCity", "cityDistance", "region", "subRegion", "source", "rooms", "area", "landArea", "livingArea", "kitchenArea", "toiletType", "rehabType", "floor", "floors", "ceilingHeight", "internalInfo", "comissionPercent", "comissionAmount"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOID2string(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "mongodb")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(string); ok {
				it.ID = data
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "deal":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deal"))
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalODealEnum2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐDealEnum(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "omitempty")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*crm_models.DealEnum); ok {
				it.Deal = data
			} else if tmp == nil {
				it.Deal = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *github.com/pinks-agency/ecn/server/internal/crm-facade/models.DealEnum`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "type":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("type"))
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalOPropertyTypeEnum2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐPropertyTypeEnum(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "omitempty")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*crm_models.PropertyTypeEnum); ok {
				it.Type = data
			} else if tmp == nil {
				it.Type = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *github.com/pinks-agency/ecn/server/internal/crm-facade/models.PropertyTypeEnum`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "subType":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("subType"))
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalOPropertySubTypeEnum2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐPropertySubTypeEnum(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "omitempty")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*crm_models.PropertySubTypeEnum); ok {
				it.SubType = data
			} else if tmp == nil {
				it.SubType = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *github.com/pinks-agency/ecn/server/internal/crm-facade/models.PropertySubTypeEnum`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "commercialUsage":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("commercialUsage"))
			data, err := ec.unmarshalOCommercialUsageEnum2ᚕgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐCommercialUsageEnumᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CommercialUsage = data
		case "fromDeveloper":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fromDeveloper"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOBoolean2ᚖbool(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "omitempty,boolean")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*bool); ok {
				it.FromDeveloper = data
			} else if tmp == nil {
				it.FromDeveloper = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *bool`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "inComplex":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("inComplex"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOBoolean2ᚖbool(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "omitempty,boolean")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*bool); ok {
				it.InComplex = data
			} else if tmp == nil {
				it.InComplex = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *bool`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "complexID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("complexID"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOID2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "mongodb")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.ComplexID = data
			} else if tmp == nil {
				it.ComplexID = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "complexHouseID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("complexHouseID"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOID2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "mongodb")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.ComplexHouseID = data
			} else if tmp == nil {
				it.ComplexHouseID = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "inVillage":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("inVillage"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOBoolean2ᚖbool(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "omitempty,boolean")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*bool); ok {
				it.InVillage = data
			} else if tmp == nil {
				it.InVillage = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *bool`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "villageID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("villageID"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOID2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "mongodb")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.VillageID = data
			} else if tmp == nil {
				it.VillageID = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "isHot":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isHot"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOBoolean2ᚖbool(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "omitempty,boolean")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*bool); ok {
				it.IsHot = data
			} else if tmp == nil {
				it.IsHot = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *bool`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "title":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("title"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "required,min=3,max=256")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.Title = data
			} else if tmp == nil {
				it.Title = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "description":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "required,min=3,max=4096")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.Description = data
			} else if tmp == nil {
				it.Description = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "address":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("address"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "required,min=3,max=256")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.Address = data
			} else if tmp == nil {
				it.Address = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "lat":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lat"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOFloat2ᚖfloat64(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "omitempty,latitude")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*float64); ok {
				it.Lat = data
			} else if tmp == nil {
				it.Lat = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *float64`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "lon":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lon"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOFloat2ᚖfloat64(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "omitempty,longitude")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*float64); ok {
				it.Lon = data
			} else if tmp == nil {
				it.Lon = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *float64`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "cadastrNumber":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cadastrNumber"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "omitempty,max=20")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.CadastrNumber = data
			} else if tmp == nil {
				it.CadastrNumber = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "seoText":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("seoText"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "omitempty,max=1024")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.SeoText = data
			} else if tmp == nil {
				it.SeoText = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "youtubeLink":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("youtubeLink"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "omitempty,url")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.YoutubeLink = data
			} else if tmp == nil {
				it.YoutubeLink = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "tourLink":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tourLink"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "omitempty,url")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.TourLink = data
			} else if tmp == nil {
				it.TourLink = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "documents":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("documents"))
			data, err := ec.unmarshalODocumentInput2ᚕᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐDocumentInput(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.PropertyInput().Documents(ctx, &it, data); err != nil {
				return it, err
			}
		case "images":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("images"))
			data, err := ec.unmarshalOImageInput2ᚕᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐImageInput(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.PropertyInput().Images(ctx, &it, data); err != nil {
				return it, err
			}
		case "status":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status"))
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalOPropertyStatusEnum2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐPropertyStatusEnum(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "omitempty")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*crm_models.PropertyStatusEnum); ok {
				it.Status = data
			} else if tmp == nil {
				it.Status = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *github.com/pinks-agency/ecn/server/internal/crm-facade/models.PropertyStatusEnum`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "price":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("price"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOFloat2ᚖfloat64(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "omitempty,gte=0")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*float64); ok {
				it.Price = data
			} else if tmp == nil {
				it.Price = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *float64`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "isReady":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isReady"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOBoolean2ᚖbool(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "omitempty,boolean")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*bool); ok {
				it.IsReady = data
			} else if tmp == nil {
				it.IsReady = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *bool`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "readinessYear":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("readinessYear"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOInt2ᚖint(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "omitempty,gte=1800,lte=3000")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*int); ok {
				it.ReadinessYear = data
			} else if tmp == nil {
				it.ReadinessYear = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *int`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "readinessQuarter":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("readinessQuarter"))
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalOQuarterEnum2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐQuarterEnum(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "omitempty")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*crm_models.QuarterEnum); ok {
				it.ReadinessQuarter = data
			} else if tmp == nil {
				it.ReadinessQuarter = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *github.com/pinks-agency/ecn/server/internal/crm-facade/models.QuarterEnum`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "inCity":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("inCity"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOBoolean2ᚖbool(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "omitempty,boolean")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*bool); ok {
				it.InCity = data
			} else if tmp == nil {
				it.InCity = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *bool`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "cityDistance":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cityDistance"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOInt2ᚖint(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "omitempty,gte=0")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*int); ok {
				it.CityDistance = data
			} else if tmp == nil {
				it.CityDistance = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *int`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "region":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("region"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "omitempty,max=256")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.Region = data
			} else if tmp == nil {
				it.Region = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "subRegion":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("subRegion"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "omitempty,max=256")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.SubRegion = data
			} else if tmp == nil {
				it.SubRegion = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "source":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("source"))
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalOPropertySourceEnum2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐPropertySourceEnum(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "omitempty")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*crm_models.PropertySourceEnum); ok {
				it.Source = data
			} else if tmp == nil {
				it.Source = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *github.com/pinks-agency/ecn/server/internal/crm-facade/models.PropertySourceEnum`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "rooms":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("rooms"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOInt2ᚖint(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "omitempty,gte=0")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*int); ok {
				it.Rooms = data
			} else if tmp == nil {
				it.Rooms = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *int`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "area":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("area"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOFloat2ᚖfloat64(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "omitempty,gte=0")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*float64); ok {
				it.Area = data
			} else if tmp == nil {
				it.Area = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *float64`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "landArea":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("landArea"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOFloat2ᚖfloat64(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "omitempty,gte=0")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*float64); ok {
				it.LandArea = data
			} else if tmp == nil {
				it.LandArea = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *float64`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "livingArea":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("livingArea"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOFloat2ᚖfloat64(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "omitempty,gte=0")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*float64); ok {
				it.LivingArea = data
			} else if tmp == nil {
				it.LivingArea = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *float64`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "kitchenArea":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("kitchenArea"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOFloat2ᚖfloat64(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "omitempty,gte=0")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*float64); ok {
				it.KitchenArea = data
			} else if tmp == nil {
				it.KitchenArea = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *float64`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "toiletType":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("toiletType"))
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalOToiletTypeEnum2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐToiletTypeEnum(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "omitempty")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*crm_models.ToiletTypeEnum); ok {
				it.ToiletType = data
			} else if tmp == nil {
				it.ToiletType = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *github.com/pinks-agency/ecn/server/internal/crm-facade/models.ToiletTypeEnum`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "rehabType":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("rehabType"))
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalORehabTypeEnum2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐRehabTypeEnum(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "omitempty")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*crm_models.RehabTypeEnum); ok {
				it.RehabType = data
			} else if tmp == nil {
				it.RehabType = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *github.com/pinks-agency/ecn/server/internal/crm-facade/models.RehabTypeEnum`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "floor":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("floor"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOInt2ᚖint(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "omitempty")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*int); ok {
				it.Floor = data
			} else if tmp == nil {
				it.Floor = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *int`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "floors":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("floors"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOInt2ᚖint(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "omitempty,gte=0")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*int); ok {
				it.Floors = data
			} else if tmp == nil {
				it.Floors = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *int`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "ceilingHeight":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ceilingHeight"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOFloat2ᚖfloat64(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "omitempty,gte=0")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*float64); ok {
				it.CeilingHeight = data
			} else if tmp == nil {
				it.CeilingHeight = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *float64`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "internalInfo":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("internalInfo"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "omitempty,max=4096")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.InternalInfo = data
			} else if tmp == nil {
				it.InternalInfo = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "comissionPercent":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("comissionPercent"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOFloat2ᚖfloat64(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "omitempty,gte=0")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*float64); ok {
				it.ComissionPercent = data
			} else if tmp == nil {
				it.ComissionPercent = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *float64`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "comissionAmount":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("comissionAmount"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOFloat2ᚖfloat64(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "omitempty,gte=0")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*float64); ok {
				it.ComissionAmount = data
			} else if tmp == nil {
				it.ComissionAmount = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *float64`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputReadinessInput(ctx context.Context, obj interface{}) (crm_models.ReadinessInput, error) {
	var it crm_models.ReadinessInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"year", "quarter"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "year":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("year"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.Year = data
		case "quarter":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("quarter"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.Quarter = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputReviewInput(ctx context.Context, obj interface{}) (crm_models.ReviewInput, error) {
	var it crm_models.ReviewInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id", "employeeID", "text", "authorName", "authorPhone", "status"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOID2string(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "mongodb")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(string); ok {
				it.ID = data
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "employeeID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("employeeID"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalNID2string(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "required,mongodb")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(string); ok {
				it.EmployeeID = data
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "text":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("text"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalNString2string(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "required,max=100,min=3")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(string); ok {
				it.Text = data
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "authorName":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("authorName"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalNString2string(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "required,max=100,min=3")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(string); ok {
				it.AuthorName = data
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "authorPhone":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("authorPhone"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalNString2string(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "required,max=100,min=3")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(string); ok {
				it.AuthorPhone = data
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "status":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status"))
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalNReviewStatusEnum2githubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐReviewStatusEnum(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "required")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(crm_models.ReviewStatusEnum); ok {
				it.Status = data
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be github.com/pinks-agency/ecn/server/internal/crm-facade/models.ReviewStatusEnum`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputReviewsFilterInput(ctx context.Context, obj interface{}) (crm_models.ReviewsFilterInput, error) {
	var it crm_models.ReviewsFilterInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"status", "publicationStatus", "employeeID"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "status":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status"))
			data, err := ec.unmarshalOReviewStatusEnum2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐReviewStatusEnum(ctx, v)
			if err != nil {
				return it, err
			}
			it.Status = data
		case "publicationStatus":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("publicationStatus"))
			data, err := ec.unmarshalOPublicationStatusEnum2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐPublicationStatusEnum(ctx, v)
			if err != nil {
				return it, err
			}
			it.PublicationStatus = data
		case "employeeID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("employeeID"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOID2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "mongodb")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.EmployeeID = data
			} else if tmp == nil {
				it.EmployeeID = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputRoleInput(ctx context.Context, obj interface{}) (crm_models.RoleInput, error) {
	var it crm_models.RoleInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id", "title", "permissions"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOID2string(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "mongodb")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(string); ok {
				it.ID = data
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "title":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("title"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalNString2string(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "required,max=100,min=3")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(string); ok {
				it.Title = data
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "permissions":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("permissions"))
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalNRolePermissionsEnum2ᚕgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐRolePermissionsEnumᚄ(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "required,dive,required")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.([]crm_models.RolePermissionsEnum); ok {
				it.Permissions = data
			} else if tmp == nil {
				it.Permissions = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be []github.com/pinks-agency/ecn/server/internal/crm-facade/models.RolePermissionsEnum`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSort(ctx context.Context, obj interface{}) (crm_models.Sort, error) {
	var it crm_models.Sort
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	if _, present := asMap["field"]; !present {
		asMap["field"] = "id"
	}
	if _, present := asMap["direction"]; !present {
		asMap["direction"] = "ASC"
	}

	fieldsInOrder := [...]string{"field", "direction"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "field":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("field"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Field = data
		case "direction":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("direction"))
			data, err := ec.unmarshalOSortDirection2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐSortDirection(ctx, v)
			if err != nil {
				return it, err
			}
			it.Direction = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputStoryFilterInput(ctx context.Context, obj interface{}) (crm_models.StoryFilterInput, error) {
	var it crm_models.StoryFilterInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"category", "publicationStatus"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "category":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("category"))
			data, err := ec.unmarshalOStoryCategoryEnum2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐStoryCategoryEnum(ctx, v)
			if err != nil {
				return it, err
			}
			it.Category = data
		case "publicationStatus":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("publicationStatus"))
			data, err := ec.unmarshalOPublicationStatusEnum2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐPublicationStatusEnum(ctx, v)
			if err != nil {
				return it, err
			}
			it.PublicationStatus = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputStoryInput(ctx context.Context, obj interface{}) (crm_models.StoryInput, error) {
	var it crm_models.StoryInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id", "category", "title", "teaser", "contentBlocks", "cover"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOID2string(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "mongodb")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(string); ok {
				it.ID = data
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "category":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("category"))
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalNStoryCategoryEnum2githubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐStoryCategoryEnum(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "required")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(crm_models.StoryCategoryEnum); ok {
				it.Category = data
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be github.com/pinks-agency/ecn/server/internal/crm-facade/models.StoryCategoryEnum`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "title":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("title"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalNString2string(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "required,max=100,min=3")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(string); ok {
				it.Title = data
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "teaser":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("teaser"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "max=100,min=3")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.Teaser = data
			} else if tmp == nil {
				it.Teaser = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "contentBlocks":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contentBlocks"))
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalNContentBlockInput2ᚕgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐContentBlockInputᚄ(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "required")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.([]crm_models.ContentBlockInput); ok {
				it.ContentBlocks = data
			} else if tmp == nil {
				it.ContentBlocks = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be []github.com/pinks-agency/ecn/server/internal/crm-facade/models.ContentBlockInput`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "cover":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cover"))
			data, err := ec.unmarshalOImageInput2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐImageInput(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.StoryInput().Cover(ctx, &it, data); err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputTaskFilter(ctx context.Context, obj interface{}) (crm_models.TaskFilter, error) {
	var it crm_models.TaskFilter
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"status", "lead", "deal", "phone", "assignee", "reporter", "contact", "property", "isHot", "label", "createdAtMin", "createdAtMax"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "status":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status"))
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalOTaskStatusEnum2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐTaskStatusEnum(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "omitempty")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*crm_models.TaskStatusEnum); ok {
				it.Status = data
			} else if tmp == nil {
				it.Status = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *github.com/pinks-agency/ecn/server/internal/crm-facade/models.TaskStatusEnum`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "lead":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lead"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOID2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "mongodb,omitempty")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.Lead = data
			} else if tmp == nil {
				it.Lead = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "deal":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deal"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOID2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "mongodb,omitempty")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.Deal = data
			} else if tmp == nil {
				it.Deal = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "phone":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phone"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "len=11,startswith=8,number,omitempty")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.Phone = data
			} else if tmp == nil {
				it.Phone = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "assignee":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("assignee"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOID2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "mongodb,omitempty")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.Assignee = data
			} else if tmp == nil {
				it.Assignee = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "reporter":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("reporter"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOID2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "mongodb,omitempty")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.Reporter = data
			} else if tmp == nil {
				it.Reporter = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "contact":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contact"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOID2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "mongodb,omitempty")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.Contact = data
			} else if tmp == nil {
				it.Contact = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "property":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("property"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOID2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "mongodb,omitempty")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.Property = data
			} else if tmp == nil {
				it.Property = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "isHot":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isHot"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOBoolean2ᚖbool(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "omitempty,boolean")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*bool); ok {
				it.IsHot = data
			} else if tmp == nil {
				it.IsHot = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *bool`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "label":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("label"))
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalOTaskLabelEnum2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐTaskLabelEnum(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "omitempty")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*crm_models.TaskLabelEnum); ok {
				it.Label = data
			} else if tmp == nil {
				it.Label = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *github.com/pinks-agency/ecn/server/internal/crm-facade/models.TaskLabelEnum`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "createdAtMin":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMin"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "omitempty")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*time.Time); ok {
				it.CreatedAtMin = data
			} else if tmp == nil {
				it.CreatedAtMin = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *time.Time`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "createdAtMax":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMax"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "omitempty")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*time.Time); ok {
				it.CreatedAtMax = data
			} else if tmp == nil {
				it.CreatedAtMax = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *time.Time`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputTaskInput(ctx context.Context, obj interface{}) (crm_models.TaskInput, error) {
	var it crm_models.TaskInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id", "title", "status", "label", "isHot", "assigneeID", "reporterID", "propertyID", "contactID", "contactPhone", "leadID", "dealID", "startDate", "durationDays", "durationHours", "details", "tag"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOID2string(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "mongodb,omitempty")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(string); ok {
				it.ID = data
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "title":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("title"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "omitempty,min=3,max=500")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.Title = data
			} else if tmp == nil {
				it.Title = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "status":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status"))
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalOTaskStatusEnum2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐTaskStatusEnum(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "omitempty")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*crm_models.TaskStatusEnum); ok {
				it.Status = data
			} else if tmp == nil {
				it.Status = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *github.com/pinks-agency/ecn/server/internal/crm-facade/models.TaskStatusEnum`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "label":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("label"))
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalOTaskLabelEnum2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐTaskLabelEnum(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "omitempty")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*crm_models.TaskLabelEnum); ok {
				it.Label = data
			} else if tmp == nil {
				it.Label = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *github.com/pinks-agency/ecn/server/internal/crm-facade/models.TaskLabelEnum`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "isHot":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isHot"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOBoolean2ᚖbool(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "omitempty,boolean")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*bool); ok {
				it.IsHot = data
			} else if tmp == nil {
				it.IsHot = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *bool`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "assigneeID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("assigneeID"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOID2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "mongodb,omitempty")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.AssigneeID = data
			} else if tmp == nil {
				it.AssigneeID = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "reporterID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("reporterID"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOID2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "mongodb,omitempty")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.ReporterID = data
			} else if tmp == nil {
				it.ReporterID = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "propertyID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("propertyID"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOID2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "mongodb,omitempty")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.PropertyID = data
			} else if tmp == nil {
				it.PropertyID = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "contactID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contactID"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOID2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "mongodb,omitempty")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.ContactID = data
			} else if tmp == nil {
				it.ContactID = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "contactPhone":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contactPhone"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "omitempty,len=11,startswith=8,number")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.ContactPhone = data
			} else if tmp == nil {
				it.ContactPhone = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "leadID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("leadID"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOID2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "mongodb,omitempty")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.LeadID = data
			} else if tmp == nil {
				it.LeadID = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "dealID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dealID"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOID2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "mongodb,omitempty")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.DealID = data
			} else if tmp == nil {
				it.DealID = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "startDate":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("startDate"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOTime2timeᚐTime(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "omitempty")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(time.Time); ok {
				it.StartDate = data
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be time.Time`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "durationDays":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("durationDays"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOInt2ᚖint(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "omitempty")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*int); ok {
				it.DurationDays = data
			} else if tmp == nil {
				it.DurationDays = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *int`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "durationHours":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("durationHours"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOInt2ᚖint(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "omitempty")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*int); ok {
				it.DurationHours = data
			} else if tmp == nil {
				it.DurationHours = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *int`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "details":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("details"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "max=1000,omitempty")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.Details = data
			} else if tmp == nil {
				it.Details = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "tag":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tag"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "max=30,omitempty")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.Tag = data
			} else if tmp == nil {
				it.Tag = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputVacancyInput(ctx context.Context, obj interface{}) (crm_models.VacancyInput, error) {
	var it crm_models.VacancyInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id", "title", "description", "experience", "salary", "schedule", "publicationStatus"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOID2string(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "mongodb")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(string); ok {
				it.ID = data
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "title":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("title"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalNString2string(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "required,max=100,min=3")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(string); ok {
				it.Title = data
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "description":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalNString2string(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "required,max=1000,min=3")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(string); ok {
				it.Description = data
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "experience":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("experience"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2string(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "max=100,min=3")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(string); ok {
				it.Experience = data
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "salary":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("salary"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2string(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "max=100,min=3")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(string); ok {
				it.Salary = data
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "schedule":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("schedule"))
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalNVacancyScheduleEnum2githubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐVacancyScheduleEnum(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "required")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(crm_models.VacancyScheduleEnum); ok {
				it.Schedule = data
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be github.com/pinks-agency/ecn/server/internal/crm-facade/models.VacancyScheduleEnum`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "publicationStatus":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("publicationStatus"))
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalNPublicationStatusEnum2githubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐPublicationStatusEnum(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "required")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(crm_models.PublicationStatusEnum); ok {
				it.PublicationStatus = data
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be github.com/pinks-agency/ecn/server/internal/crm-facade/models.PublicationStatusEnum`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputVillageFilter(ctx context.Context, obj interface{}) (crm_models.VillageFilter, error) {
	var it crm_models.VillageFilter
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"developerID", "isDeleted", "publicationStatus", "withPhotos"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "developerID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("developerID"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOID2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "mongodb")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.DeveloperID = data
			} else if tmp == nil {
				it.DeveloperID = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "isDeleted":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isDeleted"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOBoolean2ᚖbool(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "boolean")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*bool); ok {
				it.IsDeleted = data
			} else if tmp == nil {
				it.IsDeleted = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *bool`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "publicationStatus":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("publicationStatus"))
			data, err := ec.unmarshalOPublicationStatusEnum2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐPublicationStatusEnum(ctx, v)
			if err != nil {
				return it, err
			}
			it.PublicationStatus = data
		case "withPhotos":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("withPhotos"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOBoolean2ᚖbool(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "boolean")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*bool); ok {
				it.WithPhotos = data
			} else if tmp == nil {
				it.WithPhotos = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *bool`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputVillageInput(ctx context.Context, obj interface{}) (crm_models.VillageInput, error) {
	var it crm_models.VillageInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id", "title", "description", "address", "lat", "lon", "cadastrNumber", "seoText", "youtubeLink", "tourLink", "inCity", "cityDistance", "region", "subRegion", "developerID", "isReady", "readinessQuarter", "readinessYear", "images", "documents", "projectDeclarations", "publicationStatus", "internalInfo"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOID2string(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "omitempty,mongodb")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(string); ok {
				it.ID = data
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "title":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("title"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalNString2string(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "required,min=3,max=256")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(string); ok {
				it.Title = data
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "description":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalNString2string(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "required,min=3,max=4096")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(string); ok {
				it.Description = data
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "address":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("address"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalNString2string(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "required,min=3,max=256")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(string); ok {
				it.Address = data
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "lat":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lat"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOFloat2ᚖfloat64(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "omitempty,latitude")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*float64); ok {
				it.Lat = data
			} else if tmp == nil {
				it.Lat = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *float64`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "lon":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lon"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOFloat2ᚖfloat64(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "omitempty,longitude")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*float64); ok {
				it.Lon = data
			} else if tmp == nil {
				it.Lon = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *float64`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "cadastrNumber":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cadastrNumber"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "omitempty,max=20")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.CadastrNumber = data
			} else if tmp == nil {
				it.CadastrNumber = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "seoText":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("seoText"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "omitempty,max=1024")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.SeoText = data
			} else if tmp == nil {
				it.SeoText = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "youtubeLink":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("youtubeLink"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "omitempty,url")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.YoutubeLink = data
			} else if tmp == nil {
				it.YoutubeLink = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "tourLink":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tourLink"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "omitempty,url")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.TourLink = data
			} else if tmp == nil {
				it.TourLink = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "inCity":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("inCity"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOBoolean2ᚖbool(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "omitempty,boolean")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*bool); ok {
				it.InCity = data
			} else if tmp == nil {
				it.InCity = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *bool`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "cityDistance":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cityDistance"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOInt2ᚖint(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "omitempty,gte=0")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*int); ok {
				it.CityDistance = data
			} else if tmp == nil {
				it.CityDistance = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *int`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "region":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("region"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "omitempty,max=256")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.Region = data
			} else if tmp == nil {
				it.Region = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "subRegion":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("subRegion"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "omitempty,max=256")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.SubRegion = data
			} else if tmp == nil {
				it.SubRegion = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "developerID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("developerID"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOID2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "omitempty,mongodb")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.DeveloperID = data
			} else if tmp == nil {
				it.DeveloperID = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "isReady":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isReady"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOBoolean2ᚖbool(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "omitempty,boolean")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*bool); ok {
				it.IsReady = data
			} else if tmp == nil {
				it.IsReady = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *bool`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "readinessQuarter":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("readinessQuarter"))
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalOQuarterEnum2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐQuarterEnum(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "omitempty")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*crm_models.QuarterEnum); ok {
				it.ReadinessQuarter = data
			} else if tmp == nil {
				it.ReadinessQuarter = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *github.com/pinks-agency/ecn/server/internal/crm-facade/models.QuarterEnum`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "readinessYear":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("readinessYear"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOInt2ᚖint(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "omitempty,gte=1800,lte=3000")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*int); ok {
				it.ReadinessYear = data
			} else if tmp == nil {
				it.ReadinessYear = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *int`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "images":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("images"))
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalOImageInput2ᚕᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐImageInputᚄ(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "omitempty")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.([]*crm_models.ImageInput); ok {
				if err = ec.resolvers.VillageInput().Images(ctx, &it, data); err != nil {
					return it, err
				}
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be []*github.com/pinks-agency/ecn/server/internal/crm-facade/models.ImageInput`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "documents":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("documents"))
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalODocumentInput2ᚕᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐDocumentInputᚄ(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "omitempty")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.([]*crm_models.DocumentInput); ok {
				if err = ec.resolvers.VillageInput().Documents(ctx, &it, data); err != nil {
					return it, err
				}
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be []*github.com/pinks-agency/ecn/server/internal/crm-facade/models.DocumentInput`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "projectDeclarations":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("projectDeclarations"))
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalODocumentInput2ᚕᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐDocumentInputᚄ(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "omitempty")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.([]*crm_models.DocumentInput); ok {
				if err = ec.resolvers.VillageInput().ProjectDeclarations(ctx, &it, data); err != nil {
					return it, err
				}
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be []*github.com/pinks-agency/ecn/server/internal/crm-facade/models.DocumentInput`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "publicationStatus":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("publicationStatus"))
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalOPublicationStatusEnum2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐPublicationStatusEnum(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "omitempty")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*crm_models.PublicationStatusEnum); ok {
				it.PublicationStatus = data
			} else if tmp == nil {
				it.PublicationStatus = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *github.com/pinks-agency/ecn/server/internal/crm-facade/models.PublicationStatusEnum`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "internalInfo":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("internalInfo"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "omitempty,max=256")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.InternalInfo = data
			} else if tmp == nil {
				it.InternalInfo = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		}
	}

	return it, nil
}

// endregion **************************** input.gotpl *****************************

// region    ************************** interface.gotpl ***************************

func (ec *executionContext) _Node(ctx context.Context, sel ast.SelectionSet, obj crm_models.Node) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

// endregion ************************** interface.gotpl ***************************

// region    **************************** object.gotpl ****************************

var articleImplementors = []string{"Article"}

func (ec *executionContext) _Article(ctx context.Context, sel ast.SelectionSet, obj *crm_models.Article) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, articleImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Article")
		case "id":
			out.Values[i] = ec._Article_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "group":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Article_group(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "title":
			out.Values[i] = ec._Article_title(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "contentBlocks":
			out.Values[i] = ec._Article_contentBlocks(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "status":
			out.Values[i] = ec._Article_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "cover":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Article_cover(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "createdAt":
			out.Values[i] = ec._Article_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "updatedAt":
			out.Values[i] = ec._Article_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var articleConnectionImplementors = []string{"ArticleConnection"}

func (ec *executionContext) _ArticleConnection(ctx context.Context, sel ast.SelectionSet, obj *crm_models.ArticleConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, articleConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ArticleConnection")
		case "totalCount":
			out.Values[i] = ec._ArticleConnection_totalCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "edges":
			out.Values[i] = ec._ArticleConnection_edges(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "nodes":
			out.Values[i] = ec._ArticleConnection_nodes(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "pageInfo":
			out.Values[i] = ec._ArticleConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var articleEdgeImplementors = []string{"ArticleEdge"}

func (ec *executionContext) _ArticleEdge(ctx context.Context, sel ast.SelectionSet, obj *crm_models.ArticleEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, articleEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ArticleEdge")
		case "node":
			out.Values[i] = ec._ArticleEdge_node(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "cursor":
			out.Values[i] = ec._ArticleEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var articleGroupImplementors = []string{"ArticleGroup"}

func (ec *executionContext) _ArticleGroup(ctx context.Context, sel ast.SelectionSet, obj *crm_models.ArticleGroup) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, articleGroupImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ArticleGroup")
		case "id":
			out.Values[i] = ec._ArticleGroup_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "title":
			out.Values[i] = ec._ArticleGroup_title(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createdAt":
			out.Values[i] = ec._ArticleGroup_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updatedAt":
			out.Values[i] = ec._ArticleGroup_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var articleGroupConnectionImplementors = []string{"ArticleGroupConnection"}

func (ec *executionContext) _ArticleGroupConnection(ctx context.Context, sel ast.SelectionSet, obj *crm_models.ArticleGroupConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, articleGroupConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ArticleGroupConnection")
		case "totalCount":
			out.Values[i] = ec._ArticleGroupConnection_totalCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "edges":
			out.Values[i] = ec._ArticleGroupConnection_edges(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "nodes":
			out.Values[i] = ec._ArticleGroupConnection_nodes(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "pageInfo":
			out.Values[i] = ec._ArticleGroupConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var articleGroupEdgeImplementors = []string{"ArticleGroupEdge"}

func (ec *executionContext) _ArticleGroupEdge(ctx context.Context, sel ast.SelectionSet, obj *crm_models.ArticleGroupEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, articleGroupEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ArticleGroupEdge")
		case "node":
			out.Values[i] = ec._ArticleGroupEdge_node(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "cursor":
			out.Values[i] = ec._ArticleGroupEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var bankImplementors = []string{"Bank"}

func (ec *executionContext) _Bank(ctx context.Context, sel ast.SelectionSet, obj *crm_models.Bank) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, bankImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Bank")
		case "id":
			out.Values[i] = ec._Bank_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "title":
			out.Values[i] = ec._Bank_title(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var complexImplementors = []string{"Complex"}

func (ec *executionContext) _Complex(ctx context.Context, sel ast.SelectionSet, obj *crm_models.Complex) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, complexImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Complex")
		case "id":
			out.Values[i] = ec._Complex_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "title":
			out.Values[i] = ec._Complex_title(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "description":
			out.Values[i] = ec._Complex_description(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "address":
			out.Values[i] = ec._Complex_address(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "lat":
			out.Values[i] = ec._Complex_lat(ctx, field, obj)
		case "lon":
			out.Values[i] = ec._Complex_lon(ctx, field, obj)
		case "cadastrNumber":
			out.Values[i] = ec._Complex_cadastrNumber(ctx, field, obj)
		case "seoText":
			out.Values[i] = ec._Complex_seoText(ctx, field, obj)
		case "youtubeLink":
			out.Values[i] = ec._Complex_youtubeLink(ctx, field, obj)
		case "tourLink":
			out.Values[i] = ec._Complex_tourLink(ctx, field, obj)
		case "inCity":
			out.Values[i] = ec._Complex_inCity(ctx, field, obj)
		case "cityDistance":
			out.Values[i] = ec._Complex_cityDistance(ctx, field, obj)
		case "region":
			out.Values[i] = ec._Complex_region(ctx, field, obj)
		case "subRegion":
			out.Values[i] = ec._Complex_subRegion(ctx, field, obj)
		case "developer":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Complex_developer(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "isReady":
			out.Values[i] = ec._Complex_isReady(ctx, field, obj)
		case "readinessQuarter":
			out.Values[i] = ec._Complex_readinessQuarter(ctx, field, obj)
		case "readinessYear":
			out.Values[i] = ec._Complex_readinessYear(ctx, field, obj)
		case "images":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Complex_images(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "documents":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Complex_documents(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "projectDeclarations":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Complex_projectDeclarations(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "publicationStatus":
			out.Values[i] = ec._Complex_publicationStatus(ctx, field, obj)
		case "internalInfo":
			out.Values[i] = ec._Complex_internalInfo(ctx, field, obj)
		case "isDeleted":
			out.Values[i] = ec._Complex_isDeleted(ctx, field, obj)
		case "createdAt":
			out.Values[i] = ec._Complex_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "updatedAt":
			out.Values[i] = ec._Complex_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var complexConnectionImplementors = []string{"ComplexConnection"}

func (ec *executionContext) _ComplexConnection(ctx context.Context, sel ast.SelectionSet, obj *crm_models.ComplexConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, complexConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ComplexConnection")
		case "totalCount":
			out.Values[i] = ec._ComplexConnection_totalCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "edges":
			out.Values[i] = ec._ComplexConnection_edges(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "nodes":
			out.Values[i] = ec._ComplexConnection_nodes(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "pageInfo":
			out.Values[i] = ec._ComplexConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var complexEdgeImplementors = []string{"ComplexEdge"}

func (ec *executionContext) _ComplexEdge(ctx context.Context, sel ast.SelectionSet, obj *crm_models.ComplexEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, complexEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ComplexEdge")
		case "node":
			out.Values[i] = ec._ComplexEdge_node(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "cursor":
			out.Values[i] = ec._ComplexEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var complexHouseImplementors = []string{"ComplexHouse"}

func (ec *executionContext) _ComplexHouse(ctx context.Context, sel ast.SelectionSet, obj *crm_models.ComplexHouse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, complexHouseImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ComplexHouse")
		case "id":
			out.Values[i] = ec._ComplexHouse_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "complex":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._ComplexHouse_complex(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "title":
			out.Values[i] = ec._ComplexHouse_title(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "description":
			out.Values[i] = ec._ComplexHouse_description(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "address":
			out.Values[i] = ec._ComplexHouse_address(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "lat":
			out.Values[i] = ec._ComplexHouse_lat(ctx, field, obj)
		case "lon":
			out.Values[i] = ec._ComplexHouse_lon(ctx, field, obj)
		case "cadastrNumber":
			out.Values[i] = ec._ComplexHouse_cadastrNumber(ctx, field, obj)
		case "seoText":
			out.Values[i] = ec._ComplexHouse_seoText(ctx, field, obj)
		case "youtubeLink":
			out.Values[i] = ec._ComplexHouse_youtubeLink(ctx, field, obj)
		case "tourLink":
			out.Values[i] = ec._ComplexHouse_tourLink(ctx, field, obj)
		case "isReady":
			out.Values[i] = ec._ComplexHouse_isReady(ctx, field, obj)
		case "readinessQuarter":
			out.Values[i] = ec._ComplexHouse_readinessQuarter(ctx, field, obj)
		case "readinessYear":
			out.Values[i] = ec._ComplexHouse_readinessYear(ctx, field, obj)
		case "images":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._ComplexHouse_images(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "documents":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._ComplexHouse_documents(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "projectDeclarations":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._ComplexHouse_projectDeclarations(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "publicationStatus":
			out.Values[i] = ec._ComplexHouse_publicationStatus(ctx, field, obj)
		case "internalInfo":
			out.Values[i] = ec._ComplexHouse_internalInfo(ctx, field, obj)
		case "isDeleted":
			out.Values[i] = ec._ComplexHouse_isDeleted(ctx, field, obj)
		case "createdAt":
			out.Values[i] = ec._ComplexHouse_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "updatedAt":
			out.Values[i] = ec._ComplexHouse_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var complexHouseConnectionImplementors = []string{"ComplexHouseConnection"}

func (ec *executionContext) _ComplexHouseConnection(ctx context.Context, sel ast.SelectionSet, obj *crm_models.ComplexHouseConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, complexHouseConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ComplexHouseConnection")
		case "totalCount":
			out.Values[i] = ec._ComplexHouseConnection_totalCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "edges":
			out.Values[i] = ec._ComplexHouseConnection_edges(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "nodes":
			out.Values[i] = ec._ComplexHouseConnection_nodes(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "pageInfo":
			out.Values[i] = ec._ComplexHouseConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var complexHouseEdgeImplementors = []string{"ComplexHouseEdge"}

func (ec *executionContext) _ComplexHouseEdge(ctx context.Context, sel ast.SelectionSet, obj *crm_models.ComplexHouseEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, complexHouseEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ComplexHouseEdge")
		case "node":
			out.Values[i] = ec._ComplexHouseEdge_node(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "cursor":
			out.Values[i] = ec._ComplexHouseEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var contactImplementors = []string{"Contact"}

func (ec *executionContext) _Contact(ctx context.Context, sel ast.SelectionSet, obj *crm_models.Contact) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, contactImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Contact")
		case "id":
			out.Values[i] = ec._Contact_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "internalNumber":
			out.Values[i] = ec._Contact_internalNumber(ctx, field, obj)
		case "type":
			out.Values[i] = ec._Contact_type(ctx, field, obj)
		case "source":
			out.Values[i] = ec._Contact_source(ctx, field, obj)
		case "name":
			out.Values[i] = ec._Contact_name(ctx, field, obj)
		case "surname":
			out.Values[i] = ec._Contact_surname(ctx, field, obj)
		case "patronymic":
			out.Values[i] = ec._Contact_patronymic(ctx, field, obj)
		case "birthday":
			out.Values[i] = ec._Contact_birthday(ctx, field, obj)
		case "phone":
			out.Values[i] = ec._Contact_phone(ctx, field, obj)
		case "additionalPhones":
			out.Values[i] = ec._Contact_additionalPhones(ctx, field, obj)
		case "email":
			out.Values[i] = ec._Contact_email(ctx, field, obj)
		case "company":
			out.Values[i] = ec._Contact_company(ctx, field, obj)
		case "address":
			out.Values[i] = ec._Contact_address(ctx, field, obj)
		case "properties":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Contact_properties(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "passportNumber":
			out.Values[i] = ec._Contact_passportNumber(ctx, field, obj)
		case "passportIssuedBy":
			out.Values[i] = ec._Contact_passportIssuedBy(ctx, field, obj)
		case "passportIssueDate":
			out.Values[i] = ec._Contact_passportIssueDate(ctx, field, obj)
		case "passportIssuerCode":
			out.Values[i] = ec._Contact_passportIssuerCode(ctx, field, obj)
		case "internalInfo":
			out.Values[i] = ec._Contact_internalInfo(ctx, field, obj)
		case "note":
			out.Values[i] = ec._Contact_note(ctx, field, obj)
		case "deals":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Contact_deals(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "agents":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Contact_agents(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "contracts":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Contact_contracts(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "documents":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Contact_documents(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "lead":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Contact_lead(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "isDeleted":
			out.Values[i] = ec._Contact_isDeleted(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "createdAt":
			out.Values[i] = ec._Contact_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "updatedAt":
			out.Values[i] = ec._Contact_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var contactConnectionImplementors = []string{"ContactConnection"}

func (ec *executionContext) _ContactConnection(ctx context.Context, sel ast.SelectionSet, obj *crm_models.ContactConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, contactConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ContactConnection")
		case "totalCount":
			out.Values[i] = ec._ContactConnection_totalCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "edges":
			out.Values[i] = ec._ContactConnection_edges(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "nodes":
			out.Values[i] = ec._ContactConnection_nodes(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "pageInfo":
			out.Values[i] = ec._ContactConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var contactEdgeImplementors = []string{"ContactEdge"}

func (ec *executionContext) _ContactEdge(ctx context.Context, sel ast.SelectionSet, obj *crm_models.ContactEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, contactEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ContactEdge")
		case "node":
			out.Values[i] = ec._ContactEdge_node(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "cursor":
			out.Values[i] = ec._ContactEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var contentBlockImplementors = []string{"ContentBlock"}

func (ec *executionContext) _ContentBlock(ctx context.Context, sel ast.SelectionSet, obj *crm_models.ContentBlock) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, contentBlockImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ContentBlock")
		case "type":
			out.Values[i] = ec._ContentBlock_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "data":
			out.Values[i] = ec._ContentBlock_data(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "isVisible":
			out.Values[i] = ec._ContentBlock_isVisible(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var dealImplementors = []string{"Deal"}

func (ec *executionContext) _Deal(ctx context.Context, sel ast.SelectionSet, obj *crm_models.Deal) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, dealImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Deal")
		case "id":
			out.Values[i] = ec._Deal_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "internalNumber":
			out.Values[i] = ec._Deal_internalNumber(ctx, field, obj)
		case "type":
			out.Values[i] = ec._Deal_type(ctx, field, obj)
		case "stage":
			out.Values[i] = ec._Deal_stage(ctx, field, obj)
		case "sellerAgent":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Deal_sellerAgent(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "sellerContact":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Deal_sellerContact(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "sellerPhone":
			out.Values[i] = ec._Deal_sellerPhone(ctx, field, obj)
		case "sellerDocuments":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Deal_sellerDocuments(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "buyerAgent":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Deal_buyerAgent(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "buyerContact":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Deal_buyerContact(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "buyerPhone":
			out.Values[i] = ec._Deal_buyerPhone(ctx, field, obj)
		case "buyerDocuments":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Deal_buyerDocuments(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "property":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Deal_property(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "address":
			out.Values[i] = ec._Deal_address(ctx, field, obj)
		case "mortgageBroker":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Deal_mortgageBroker(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "mortgageRequest":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Deal_mortgageRequest(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "mortgageDocuments":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Deal_mortgageDocuments(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "lawer":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Deal_lawer(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "lawerDocuments":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Deal_lawerDocuments(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "accountant":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Deal_accountant(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "accountantDocuments":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Deal_accountantDocuments(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "depositDate":
			out.Values[i] = ec._Deal_depositDate(ctx, field, obj)
		case "dealDate":
			out.Values[i] = ec._Deal_dealDate(ctx, field, obj)
		case "finishedAt":
			out.Values[i] = ec._Deal_finishedAt(ctx, field, obj)
		case "commissionAmount":
			out.Values[i] = ec._Deal_commissionAmount(ctx, field, obj)
		case "internalComment":
			out.Values[i] = ec._Deal_internalComment(ctx, field, obj)
		case "isDeleted":
			out.Values[i] = ec._Deal_isDeleted(ctx, field, obj)
		case "createdAt":
			out.Values[i] = ec._Deal_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "updatedAt":
			out.Values[i] = ec._Deal_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var dealConnectionImplementors = []string{"DealConnection"}

func (ec *executionContext) _DealConnection(ctx context.Context, sel ast.SelectionSet, obj *crm_models.DealConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, dealConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DealConnection")
		case "totalCount":
			out.Values[i] = ec._DealConnection_totalCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "edges":
			out.Values[i] = ec._DealConnection_edges(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "nodes":
			out.Values[i] = ec._DealConnection_nodes(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "pageInfo":
			out.Values[i] = ec._DealConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var dealEdgeImplementors = []string{"DealEdge"}

func (ec *executionContext) _DealEdge(ctx context.Context, sel ast.SelectionSet, obj *crm_models.DealEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, dealEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DealEdge")
		case "node":
			out.Values[i] = ec._DealEdge_node(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "cursor":
			out.Values[i] = ec._DealEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var departmentImplementors = []string{"Department"}

func (ec *executionContext) _Department(ctx context.Context, sel ast.SelectionSet, obj *crm_models.Department) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, departmentImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Department")
		case "id":
			out.Values[i] = ec._Department_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "title":
			out.Values[i] = ec._Department_title(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "groups":
			out.Values[i] = ec._Department_groups(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createdAt":
			out.Values[i] = ec._Department_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updatedAt":
			out.Values[i] = ec._Department_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var departmentConnectionImplementors = []string{"DepartmentConnection"}

func (ec *executionContext) _DepartmentConnection(ctx context.Context, sel ast.SelectionSet, obj *crm_models.DepartmentConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, departmentConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DepartmentConnection")
		case "totalCount":
			out.Values[i] = ec._DepartmentConnection_totalCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "edges":
			out.Values[i] = ec._DepartmentConnection_edges(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "nodes":
			out.Values[i] = ec._DepartmentConnection_nodes(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "pageInfo":
			out.Values[i] = ec._DepartmentConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var departmentEdgeImplementors = []string{"DepartmentEdge"}

func (ec *executionContext) _DepartmentEdge(ctx context.Context, sel ast.SelectionSet, obj *crm_models.DepartmentEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, departmentEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DepartmentEdge")
		case "node":
			out.Values[i] = ec._DepartmentEdge_node(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "cursor":
			out.Values[i] = ec._DepartmentEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var departmentGroupImplementors = []string{"DepartmentGroup"}

func (ec *executionContext) _DepartmentGroup(ctx context.Context, sel ast.SelectionSet, obj *crm_models.DepartmentGroup) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, departmentGroupImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DepartmentGroup")
		case "id":
			out.Values[i] = ec._DepartmentGroup_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "title":
			out.Values[i] = ec._DepartmentGroup_title(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createdAt":
			out.Values[i] = ec._DepartmentGroup_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updatedAt":
			out.Values[i] = ec._DepartmentGroup_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var developerImplementors = []string{"Developer"}

func (ec *executionContext) _Developer(ctx context.Context, sel ast.SelectionSet, obj *crm_models.Developer) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, developerImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Developer")
		case "id":
			out.Values[i] = ec._Developer_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "title":
			out.Values[i] = ec._Developer_title(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "url":
			out.Values[i] = ec._Developer_url(ctx, field, obj)
		case "logo":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Developer_logo(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "isDeleted":
			out.Values[i] = ec._Developer_isDeleted(ctx, field, obj)
		case "createdAt":
			out.Values[i] = ec._Developer_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "updatedAt":
			out.Values[i] = ec._Developer_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var developerConnectionImplementors = []string{"DeveloperConnection"}

func (ec *executionContext) _DeveloperConnection(ctx context.Context, sel ast.SelectionSet, obj *crm_models.DeveloperConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, developerConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DeveloperConnection")
		case "totalCount":
			out.Values[i] = ec._DeveloperConnection_totalCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "edges":
			out.Values[i] = ec._DeveloperConnection_edges(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "nodes":
			out.Values[i] = ec._DeveloperConnection_nodes(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "pageInfo":
			out.Values[i] = ec._DeveloperConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var developerEdgeImplementors = []string{"DeveloperEdge"}

func (ec *executionContext) _DeveloperEdge(ctx context.Context, sel ast.SelectionSet, obj *crm_models.DeveloperEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, developerEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DeveloperEdge")
		case "node":
			out.Values[i] = ec._DeveloperEdge_node(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "cursor":
			out.Values[i] = ec._DeveloperEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var documentImplementors = []string{"Document"}

func (ec *executionContext) _Document(ctx context.Context, sel ast.SelectionSet, obj *crm_models.Document) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, documentImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Document")
		case "id":
			out.Values[i] = ec._Document_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "url":
			out.Values[i] = ec._Document_url(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "path":
			out.Values[i] = ec._Document_path(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "title":
			out.Values[i] = ec._Document_title(ctx, field, obj)
		case "fileName":
			out.Values[i] = ec._Document_fileName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "fileType":
			out.Values[i] = ec._Document_fileType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createdAt":
			out.Values[i] = ec._Document_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var employeeImplementors = []string{"Employee"}

func (ec *executionContext) _Employee(ctx context.Context, sel ast.SelectionSet, obj *crm_models.Employee) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, employeeImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Employee")
		case "id":
			out.Values[i] = ec._Employee_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "name":
			out.Values[i] = ec._Employee_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "surname":
			out.Values[i] = ec._Employee_surname(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "patronymic":
			out.Values[i] = ec._Employee_patronymic(ctx, field, obj)
		case "birthday":
			out.Values[i] = ec._Employee_birthday(ctx, field, obj)
		case "email":
			out.Values[i] = ec._Employee_email(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "phone":
			out.Values[i] = ec._Employee_phone(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "position":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Employee_position(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "department":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Employee_department(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "group":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Employee_group(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "role":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Employee_role(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "internalInfo":
			out.Values[i] = ec._Employee_internalInfo(ctx, field, obj)
		case "shortDescription":
			out.Values[i] = ec._Employee_shortDescription(ctx, field, obj)
		case "description":
			out.Values[i] = ec._Employee_description(ctx, field, obj)
		case "isPublished":
			out.Values[i] = ec._Employee_isPublished(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "isDeleted":
			out.Values[i] = ec._Employee_isDeleted(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "avatar":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Employee_avatar(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "publicImage":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Employee_publicImage(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "createdAt":
			out.Values[i] = ec._Employee_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "updatedAt":
			out.Values[i] = ec._Employee_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var employeeConnectionImplementors = []string{"EmployeeConnection"}

func (ec *executionContext) _EmployeeConnection(ctx context.Context, sel ast.SelectionSet, obj *crm_models.EmployeeConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, employeeConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EmployeeConnection")
		case "totalCount":
			out.Values[i] = ec._EmployeeConnection_totalCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "edges":
			out.Values[i] = ec._EmployeeConnection_edges(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "nodes":
			out.Values[i] = ec._EmployeeConnection_nodes(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "pageInfo":
			out.Values[i] = ec._EmployeeConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var employeeEdgeImplementors = []string{"EmployeeEdge"}

func (ec *executionContext) _EmployeeEdge(ctx context.Context, sel ast.SelectionSet, obj *crm_models.EmployeeEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, employeeEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EmployeeEdge")
		case "node":
			out.Values[i] = ec._EmployeeEdge_node(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "cursor":
			out.Values[i] = ec._EmployeeEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var imageImplementors = []string{"Image"}

func (ec *executionContext) _Image(ctx context.Context, sel ast.SelectionSet, obj *crm_models.Image) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, imageImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Image")
		case "id":
			out.Values[i] = ec._Image_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "url":
			out.Values[i] = ec._Image_url(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "path":
			out.Values[i] = ec._Image_path(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "title":
			out.Values[i] = ec._Image_title(ctx, field, obj)
		case "fileName":
			out.Values[i] = ec._Image_fileName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "fileType":
			out.Values[i] = ec._Image_fileType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "previewUrl":
			out.Values[i] = ec._Image_previewUrl(ctx, field, obj)
		case "previewPath":
			out.Values[i] = ec._Image_previewPath(ctx, field, obj)
		case "blurHash":
			out.Values[i] = ec._Image_blurHash(ctx, field, obj)
		case "preset":
			out.Values[i] = ec._Image_preset(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createdAt":
			out.Values[i] = ec._Image_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var leadImplementors = []string{"Lead"}

func (ec *executionContext) _Lead(ctx context.Context, sel ast.SelectionSet, obj *crm_models.Lead) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, leadImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Lead")
		case "id":
			out.Values[i] = ec._Lead_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "internalNumber":
			out.Values[i] = ec._Lead_internalNumber(ctx, field, obj)
		case "type":
			out.Values[i] = ec._Lead_type(ctx, field, obj)
		case "source":
			out.Values[i] = ec._Lead_source(ctx, field, obj)
		case "name":
			out.Values[i] = ec._Lead_name(ctx, field, obj)
		case "surname":
			out.Values[i] = ec._Lead_surname(ctx, field, obj)
		case "patronymic":
			out.Values[i] = ec._Lead_patronymic(ctx, field, obj)
		case "birthday":
			out.Values[i] = ec._Lead_birthday(ctx, field, obj)
		case "phone":
			out.Values[i] = ec._Lead_phone(ctx, field, obj)
		case "additionalPhones":
			out.Values[i] = ec._Lead_additionalPhones(ctx, field, obj)
		case "email":
			out.Values[i] = ec._Lead_email(ctx, field, obj)
		case "company":
			out.Values[i] = ec._Lead_company(ctx, field, obj)
		case "address":
			out.Values[i] = ec._Lead_address(ctx, field, obj)
		case "request":
			out.Values[i] = ec._Lead_request(ctx, field, obj)
		case "agents":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Lead_agents(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "status":
			out.Values[i] = ec._Lead_status(ctx, field, obj)
		case "comment":
			out.Values[i] = ec._Lead_comment(ctx, field, obj)
		case "isDeleted":
			out.Values[i] = ec._Lead_isDeleted(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "createdAt":
			out.Values[i] = ec._Lead_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "updatedAt":
			out.Values[i] = ec._Lead_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var leadConnectionImplementors = []string{"LeadConnection"}

func (ec *executionContext) _LeadConnection(ctx context.Context, sel ast.SelectionSet, obj *crm_models.LeadConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, leadConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("LeadConnection")
		case "totalCount":
			out.Values[i] = ec._LeadConnection_totalCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "edges":
			out.Values[i] = ec._LeadConnection_edges(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "nodes":
			out.Values[i] = ec._LeadConnection_nodes(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "pageInfo":
			out.Values[i] = ec._LeadConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var leadEdgeImplementors = []string{"LeadEdge"}

func (ec *executionContext) _LeadEdge(ctx context.Context, sel ast.SelectionSet, obj *crm_models.LeadEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, leadEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("LeadEdge")
		case "node":
			out.Values[i] = ec._LeadEdge_node(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "cursor":
			out.Values[i] = ec._LeadEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var logImplementors = []string{"Log"}

func (ec *executionContext) _Log(ctx context.Context, sel ast.SelectionSet, obj *crm_models.Log) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, logImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Log")
		case "id":
			out.Values[i] = ec._Log_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "eid":
			out.Values[i] = ec._Log_eid(ctx, field, obj)
		case "author":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Log_author(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "status":
			out.Values[i] = ec._Log_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "type":
			out.Values[i] = ec._Log_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "level":
			out.Values[i] = ec._Log_level(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "createdAt":
			out.Values[i] = ec._Log_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var logConnectionImplementors = []string{"LogConnection"}

func (ec *executionContext) _LogConnection(ctx context.Context, sel ast.SelectionSet, obj *crm_models.LogConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, logConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("LogConnection")
		case "totalCount":
			out.Values[i] = ec._LogConnection_totalCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "edges":
			out.Values[i] = ec._LogConnection_edges(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "nodes":
			out.Values[i] = ec._LogConnection_nodes(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "pageInfo":
			out.Values[i] = ec._LogConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var logEdgeImplementors = []string{"LogEdge"}

func (ec *executionContext) _LogEdge(ctx context.Context, sel ast.SelectionSet, obj *crm_models.LogEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, logEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("LogEdge")
		case "node":
			out.Values[i] = ec._LogEdge_node(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "cursor":
			out.Values[i] = ec._LogEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var loginOutputImplementors = []string{"LoginOutput"}

func (ec *executionContext) _LoginOutput(ctx context.Context, sel ast.SelectionSet, obj *crm_models.LoginOutput) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, loginOutputImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("LoginOutput")
		case "token":
			out.Values[i] = ec._LoginOutput_token(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "me":
			out.Values[i] = ec._LoginOutput_me(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var meImplementors = []string{"Me"}

func (ec *executionContext) _Me(ctx context.Context, sel ast.SelectionSet, obj *crm_models.Me) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, meImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Me")
		case "id":
			out.Values[i] = ec._Me_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "name":
			out.Values[i] = ec._Me_name(ctx, field, obj)
		case "surname":
			out.Values[i] = ec._Me_surname(ctx, field, obj)
		case "avatar":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Me_avatar(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var meetImplementors = []string{"Meet"}

func (ec *executionContext) _Meet(ctx context.Context, sel ast.SelectionSet, obj *crm_models.Meet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, meetImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Meet")
		case "id":
			out.Values[i] = ec._Meet_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "internalNumber":
			out.Values[i] = ec._Meet_internalNumber(ctx, field, obj)
		case "type":
			out.Values[i] = ec._Meet_type(ctx, field, obj)
		case "dealType":
			out.Values[i] = ec._Meet_dealType(ctx, field, obj)
		case "contactType":
			out.Values[i] = ec._Meet_contactType(ctx, field, obj)
		case "dateTime":
			out.Values[i] = ec._Meet_dateTime(ctx, field, obj)
		case "property":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Meet_property(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "address":
			out.Values[i] = ec._Meet_address(ctx, field, obj)
		case "comment":
			out.Values[i] = ec._Meet_comment(ctx, field, obj)
		case "isOnline":
			out.Values[i] = ec._Meet_isOnline(ctx, field, obj)
		case "sellerAgent":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Meet_sellerAgent(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "sellerContact":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Meet_sellerContact(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "sellerPhone":
			out.Values[i] = ec._Meet_sellerPhone(ctx, field, obj)
		case "buyerAgent":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Meet_buyerAgent(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "buyerContact":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Meet_buyerContact(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "buyerPhone":
			out.Values[i] = ec._Meet_buyerPhone(ctx, field, obj)
		case "buyerAgency":
			out.Values[i] = ec._Meet_buyerAgency(ctx, field, obj)
		case "status":
			out.Values[i] = ec._Meet_status(ctx, field, obj)
		case "cancelReason":
			out.Values[i] = ec._Meet_cancelReason(ctx, field, obj)
		case "cancelReasonCustom":
			out.Values[i] = ec._Meet_cancelReasonCustom(ctx, field, obj)
		case "useDealDeposit":
			out.Values[i] = ec._Meet_useDealDeposit(ctx, field, obj)
		case "lawer":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Meet_lawer(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "accountant":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Meet_accountant(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "mortgageBroker":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Meet_mortgageBroker(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "useMortgage":
			out.Values[i] = ec._Meet_useMortgage(ctx, field, obj)
		case "isDeleted":
			out.Values[i] = ec._Meet_isDeleted(ctx, field, obj)
		case "createdAt":
			out.Values[i] = ec._Meet_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "updatedAt":
			out.Values[i] = ec._Meet_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var meetConnectionImplementors = []string{"MeetConnection"}

func (ec *executionContext) _MeetConnection(ctx context.Context, sel ast.SelectionSet, obj *crm_models.MeetConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, meetConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MeetConnection")
		case "totalCount":
			out.Values[i] = ec._MeetConnection_totalCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "edges":
			out.Values[i] = ec._MeetConnection_edges(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "nodes":
			out.Values[i] = ec._MeetConnection_nodes(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "pageInfo":
			out.Values[i] = ec._MeetConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var meetEdgeImplementors = []string{"MeetEdge"}

func (ec *executionContext) _MeetEdge(ctx context.Context, sel ast.SelectionSet, obj *crm_models.MeetEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, meetEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MeetEdge")
		case "node":
			out.Values[i] = ec._MeetEdge_node(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "cursor":
			out.Values[i] = ec._MeetEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var mortgageRequestImplementors = []string{"MortgageRequest"}

func (ec *executionContext) _MortgageRequest(ctx context.Context, sel ast.SelectionSet, obj *crm_models.MortgageRequest) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, mortgageRequestImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MortgageRequest")
		case "id":
			out.Values[i] = ec._MortgageRequest_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "internalNumber":
			out.Values[i] = ec._MortgageRequest_internalNumber(ctx, field, obj)
		case "status":
			out.Values[i] = ec._MortgageRequest_status(ctx, field, obj)
		case "contact":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._MortgageRequest_contact(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "banks":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._MortgageRequest_banks(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "mortgageBroker":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._MortgageRequest_mortgageBroker(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "agent":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._MortgageRequest_agent(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "deal":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._MortgageRequest_deal(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "property":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._MortgageRequest_property(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "amount":
			out.Values[i] = ec._MortgageRequest_amount(ctx, field, obj)
		case "firstDeposit":
			out.Values[i] = ec._MortgageRequest_firstDeposit(ctx, field, obj)
		case "period":
			out.Values[i] = ec._MortgageRequest_period(ctx, field, obj)
		case "comment":
			out.Values[i] = ec._MortgageRequest_comment(ctx, field, obj)
		case "contracts":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._MortgageRequest_contracts(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "documents":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._MortgageRequest_documents(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "sendDate":
			out.Values[i] = ec._MortgageRequest_sendDate(ctx, field, obj)
		case "responseDate":
			out.Values[i] = ec._MortgageRequest_responseDate(ctx, field, obj)
		case "validTillDate":
			out.Values[i] = ec._MortgageRequest_validTillDate(ctx, field, obj)
		case "percentage":
			out.Values[i] = ec._MortgageRequest_percentage(ctx, field, obj)
		case "isDeleted":
			out.Values[i] = ec._MortgageRequest_isDeleted(ctx, field, obj)
		case "createdAt":
			out.Values[i] = ec._MortgageRequest_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "updatedAt":
			out.Values[i] = ec._MortgageRequest_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var mortgageRequestConnectionImplementors = []string{"MortgageRequestConnection"}

func (ec *executionContext) _MortgageRequestConnection(ctx context.Context, sel ast.SelectionSet, obj *crm_models.MortgageRequestConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, mortgageRequestConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MortgageRequestConnection")
		case "totalCount":
			out.Values[i] = ec._MortgageRequestConnection_totalCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "edges":
			out.Values[i] = ec._MortgageRequestConnection_edges(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "nodes":
			out.Values[i] = ec._MortgageRequestConnection_nodes(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "pageInfo":
			out.Values[i] = ec._MortgageRequestConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var mortgageRequestEdgeImplementors = []string{"MortgageRequestEdge"}

func (ec *executionContext) _MortgageRequestEdge(ctx context.Context, sel ast.SelectionSet, obj *crm_models.MortgageRequestEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, mortgageRequestEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MortgageRequestEdge")
		case "node":
			out.Values[i] = ec._MortgageRequestEdge_node(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "cursor":
			out.Values[i] = ec._MortgageRequestEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var mutationImplementors = []string{"Mutation"}

func (ec *executionContext) _Mutation(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, mutationImplementors)
	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Mutation",
	})

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		innerCtx := graphql.WithRootFieldContext(ctx, &graphql.RootFieldContext{
			Object: field.Name,
			Field:  field,
		})

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Mutation")
		case "saveArticleGroup":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_saveArticleGroup(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deleteArticleGroup":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteArticleGroup(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "saveArticle":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_saveArticle(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deleteArticle":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteArticle(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "login":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_login(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "logout":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_logout(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "saveComplexHouse":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_saveComplexHouse(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deleteComplexHouse":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteComplexHouse(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "bulkDeleteComplexHouses":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_bulkDeleteComplexHouses(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "saveComplex":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_saveComplex(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deleteComplex":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteComplex(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "bulkDeleteComplexes":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_bulkDeleteComplexes(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "saveContact":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_saveContact(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deleteContact":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteContact(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "bulkDeleteContacts":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_bulkDeleteContacts(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "saveDeal":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_saveDeal(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deleteDeal":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteDeal(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "changeDealStage":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_changeDealStage(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "bulkDeleteDeals":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_bulkDeleteDeals(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "bulkChangeDealsStage":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_bulkChangeDealsStage(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "saveDepartment":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_saveDepartment(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deleteDepartment":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteDepartment(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "saveDeveloper":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_saveDeveloper(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deleteDeveloper":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteDeveloper(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "bulkDeleteDevelopers":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_bulkDeleteDevelopers(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "saveEmployee":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_saveEmployee(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deleteEmployee":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteEmployee(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deleteEmployees":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteEmployees(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "activateEmployees":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_activateEmployees(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deactivateEmployees":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deactivateEmployees(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "publishEmployees":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_publishEmployees(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "unpublishEmployees":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_unpublishEmployees(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "assignDepartmentToEmployees":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_assignDepartmentToEmployees(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "assignRoleToEmployees":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_assignRoleToEmployees(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "uploadImage":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_uploadImage(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deleteImage":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteImage(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "uploadDocument":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_uploadDocument(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deleteDocument":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteDocument(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "saveLead":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_saveLead(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deleteLead":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteLead(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "changeLeadStatus":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_changeLeadStatus(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "bulkChangeLeadsStatus":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_bulkChangeLeadsStatus(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "bulkDeleteLeads":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_bulkDeleteLeads(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "saveMeet":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_saveMeet(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deleteMeet":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteMeet(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "changeMeetStatus":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_changeMeetStatus(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "bulkChangeMeetsStatus":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_bulkChangeMeetsStatus(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "bulkDeleteMeets":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_bulkDeleteMeets(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "saveMortgageRequest":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_saveMortgageRequest(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deleteMortgageRequest":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteMortgageRequest(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "changeMortgageRequestStatus":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_changeMortgageRequestStatus(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "bulkChangeMortgageRequestsStatus":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_bulkChangeMortgageRequestsStatus(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "bulkDeleteMortgageRequests":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_bulkDeleteMortgageRequests(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "savePage":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_savePage(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deletePage":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deletePage(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "savePosition":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_savePosition(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deletePosition":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deletePosition(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "saveProperty":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_saveProperty(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deleteProperty":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteProperty(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "refreshProperty":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_refreshProperty(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "approveProperty":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_approveProperty(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "declineProperty":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_declineProperty(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "archiveProperty":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_archiveProperty(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "bulkDeleteProperties":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_bulkDeleteProperties(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "bulkRefreshProperties":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_bulkRefreshProperties(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "bulkApproveProperties":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_bulkApproveProperties(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "bulkDeclineProperties":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_bulkDeclineProperties(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "bulkArchiveProperties":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_bulkArchiveProperties(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "saveReview":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_saveReview(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deleteReview":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteReview(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "bulkApproveReviews":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_bulkApproveReviews(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "bulkDeclineReviews":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_bulkDeclineReviews(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "bulkDeleteReviews":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_bulkDeleteReviews(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "saveRole":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_saveRole(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deleteRole":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteRole(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "saveStory":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_saveStory(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deleteStory":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteStory(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "saveTask":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_saveTask(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deleteTask":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteTask(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "completeTask":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_completeTask(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "bulkCompleteTasks":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_bulkCompleteTasks(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "bulkDeleteTasks":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_bulkDeleteTasks(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "saveVacancy":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_saveVacancy(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deleteVacancy":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteVacancy(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "approveVacancyRequest":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_approveVacancyRequest(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "declineVacancyRequest":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_declineVacancyRequest(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "saveVillage":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_saveVillage(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deleteVillage":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteVillage(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "bulkDeleteVillages":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_bulkDeleteVillages(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var pageImplementors = []string{"Page"}

func (ec *executionContext) _Page(ctx context.Context, sel ast.SelectionSet, obj *crm_models.Page) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, pageImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Page")
		case "id":
			out.Values[i] = ec._Page_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "url":
			out.Values[i] = ec._Page_url(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "title":
			out.Values[i] = ec._Page_title(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "description":
			out.Values[i] = ec._Page_description(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "contentBlocks":
			out.Values[i] = ec._Page_contentBlocks(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "status":
			out.Values[i] = ec._Page_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createdAt":
			out.Values[i] = ec._Page_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updatedAt":
			out.Values[i] = ec._Page_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var pageConnectionImplementors = []string{"PageConnection"}

func (ec *executionContext) _PageConnection(ctx context.Context, sel ast.SelectionSet, obj *crm_models.PageConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, pageConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PageConnection")
		case "totalCount":
			out.Values[i] = ec._PageConnection_totalCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "edges":
			out.Values[i] = ec._PageConnection_edges(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "nodes":
			out.Values[i] = ec._PageConnection_nodes(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "pageInfo":
			out.Values[i] = ec._PageConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var pageEdgeImplementors = []string{"PageEdge"}

func (ec *executionContext) _PageEdge(ctx context.Context, sel ast.SelectionSet, obj *crm_models.PageEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, pageEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PageEdge")
		case "node":
			out.Values[i] = ec._PageEdge_node(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "cursor":
			out.Values[i] = ec._PageEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var pageInfoImplementors = []string{"PageInfo"}

func (ec *executionContext) _PageInfo(ctx context.Context, sel ast.SelectionSet, obj *crm_models.PageInfo) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, pageInfoImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PageInfo")
		case "startCursor":
			out.Values[i] = ec._PageInfo_startCursor(ctx, field, obj)
		case "endCursor":
			out.Values[i] = ec._PageInfo_endCursor(ctx, field, obj)
		case "hasNextPage":
			out.Values[i] = ec._PageInfo_hasNextPage(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "hasPreviousPage":
			out.Values[i] = ec._PageInfo_hasPreviousPage(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var positionImplementors = []string{"Position"}

func (ec *executionContext) _Position(ctx context.Context, sel ast.SelectionSet, obj *crm_models.Position) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, positionImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Position")
		case "id":
			out.Values[i] = ec._Position_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "title":
			out.Values[i] = ec._Position_title(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createdAt":
			out.Values[i] = ec._Position_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updatedAt":
			out.Values[i] = ec._Position_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var positionConnectionImplementors = []string{"PositionConnection"}

func (ec *executionContext) _PositionConnection(ctx context.Context, sel ast.SelectionSet, obj *crm_models.PositionConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, positionConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PositionConnection")
		case "totalCount":
			out.Values[i] = ec._PositionConnection_totalCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "edges":
			out.Values[i] = ec._PositionConnection_edges(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "nodes":
			out.Values[i] = ec._PositionConnection_nodes(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "pageInfo":
			out.Values[i] = ec._PositionConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var positionEdgeImplementors = []string{"PositionEdge"}

func (ec *executionContext) _PositionEdge(ctx context.Context, sel ast.SelectionSet, obj *crm_models.PositionEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, positionEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PositionEdge")
		case "node":
			out.Values[i] = ec._PositionEdge_node(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "cursor":
			out.Values[i] = ec._PositionEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var propertyImplementors = []string{"Property"}

func (ec *executionContext) _Property(ctx context.Context, sel ast.SelectionSet, obj *crm_models.Property) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, propertyImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Property")
		case "id":
			out.Values[i] = ec._Property_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "internalID":
			out.Values[i] = ec._Property_internalID(ctx, field, obj)
		case "deal":
			out.Values[i] = ec._Property_deal(ctx, field, obj)
		case "type":
			out.Values[i] = ec._Property_type(ctx, field, obj)
		case "subType":
			out.Values[i] = ec._Property_subType(ctx, field, obj)
		case "commercialUsage":
			out.Values[i] = ec._Property_commercialUsage(ctx, field, obj)
		case "fromDeveloper":
			out.Values[i] = ec._Property_fromDeveloper(ctx, field, obj)
		case "inComplex":
			out.Values[i] = ec._Property_inComplex(ctx, field, obj)
		case "complex":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Property_complex(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "complexHouse":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Property_complexHouse(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "inVillage":
			out.Values[i] = ec._Property_inVillage(ctx, field, obj)
		case "village":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Property_village(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "isHot":
			out.Values[i] = ec._Property_isHot(ctx, field, obj)
		case "title":
			out.Values[i] = ec._Property_title(ctx, field, obj)
		case "description":
			out.Values[i] = ec._Property_description(ctx, field, obj)
		case "address":
			out.Values[i] = ec._Property_address(ctx, field, obj)
		case "lat":
			out.Values[i] = ec._Property_lat(ctx, field, obj)
		case "lon":
			out.Values[i] = ec._Property_lon(ctx, field, obj)
		case "cadastrNumber":
			out.Values[i] = ec._Property_cadastrNumber(ctx, field, obj)
		case "seoText":
			out.Values[i] = ec._Property_seoText(ctx, field, obj)
		case "youtubeLink":
			out.Values[i] = ec._Property_youtubeLink(ctx, field, obj)
		case "tourLink":
			out.Values[i] = ec._Property_tourLink(ctx, field, obj)
		case "documents":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Property_documents(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "images":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Property_images(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "isDeleted":
			out.Values[i] = ec._Property_isDeleted(ctx, field, obj)
		case "isEditable":
			out.Values[i] = ec._Property_isEditable(ctx, field, obj)
		case "refreshDate":
			out.Values[i] = ec._Property_refreshDate(ctx, field, obj)
		case "status":
			out.Values[i] = ec._Property_status(ctx, field, obj)
		case "price":
			out.Values[i] = ec._Property_price(ctx, field, obj)
		case "pricePerMeter":
			out.Values[i] = ec._Property_pricePerMeter(ctx, field, obj)
		case "pricePerAr":
			out.Values[i] = ec._Property_pricePerAr(ctx, field, obj)
		case "priceHistory":
			out.Values[i] = ec._Property_priceHistory(ctx, field, obj)
		case "isReady":
			out.Values[i] = ec._Property_isReady(ctx, field, obj)
		case "readinessYear":
			out.Values[i] = ec._Property_readinessYear(ctx, field, obj)
		case "readinessQuarter":
			out.Values[i] = ec._Property_readinessQuarter(ctx, field, obj)
		case "inCity":
			out.Values[i] = ec._Property_inCity(ctx, field, obj)
		case "cityDistance":
			out.Values[i] = ec._Property_cityDistance(ctx, field, obj)
		case "region":
			out.Values[i] = ec._Property_region(ctx, field, obj)
		case "subRegion":
			out.Values[i] = ec._Property_subRegion(ctx, field, obj)
		case "source":
			out.Values[i] = ec._Property_source(ctx, field, obj)
		case "rooms":
			out.Values[i] = ec._Property_rooms(ctx, field, obj)
		case "area":
			out.Values[i] = ec._Property_area(ctx, field, obj)
		case "landArea":
			out.Values[i] = ec._Property_landArea(ctx, field, obj)
		case "livingArea":
			out.Values[i] = ec._Property_livingArea(ctx, field, obj)
		case "kitchenArea":
			out.Values[i] = ec._Property_kitchenArea(ctx, field, obj)
		case "toiletType":
			out.Values[i] = ec._Property_toiletType(ctx, field, obj)
		case "rehabType":
			out.Values[i] = ec._Property_rehabType(ctx, field, obj)
		case "floor":
			out.Values[i] = ec._Property_floor(ctx, field, obj)
		case "floors":
			out.Values[i] = ec._Property_floors(ctx, field, obj)
		case "ceilingHeight":
			out.Values[i] = ec._Property_ceilingHeight(ctx, field, obj)
		case "internalInfo":
			out.Values[i] = ec._Property_internalInfo(ctx, field, obj)
		case "comissionPercent":
			out.Values[i] = ec._Property_comissionPercent(ctx, field, obj)
		case "comissionAmount":
			out.Values[i] = ec._Property_comissionAmount(ctx, field, obj)
		case "createdAt":
			out.Values[i] = ec._Property_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "updatedAt":
			out.Values[i] = ec._Property_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var propertyConnectionImplementors = []string{"PropertyConnection"}

func (ec *executionContext) _PropertyConnection(ctx context.Context, sel ast.SelectionSet, obj *crm_models.PropertyConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, propertyConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PropertyConnection")
		case "totalCount":
			out.Values[i] = ec._PropertyConnection_totalCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "edges":
			out.Values[i] = ec._PropertyConnection_edges(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "nodes":
			out.Values[i] = ec._PropertyConnection_nodes(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "pageInfo":
			out.Values[i] = ec._PropertyConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var propertyEdgeImplementors = []string{"PropertyEdge"}

func (ec *executionContext) _PropertyEdge(ctx context.Context, sel ast.SelectionSet, obj *crm_models.PropertyEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, propertyEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PropertyEdge")
		case "node":
			out.Values[i] = ec._PropertyEdge_node(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "cursor":
			out.Values[i] = ec._PropertyEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var queryImplementors = []string{"Query"}

func (ec *executionContext) _Query(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, queryImplementors)
	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Query",
	})

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		innerCtx := graphql.WithRootFieldContext(ctx, &graphql.RootFieldContext{
			Object: field.Name,
			Field:  field,
		})

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Query")
		case "articleGroups":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_articleGroups(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "articleGroup":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_articleGroup(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "articles":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_articles(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "article":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_article(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "me":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_me(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "complexHouses":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_complexHouses(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "complexHouse":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_complexHouse(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "complexes":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_complexes(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "complex":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_complex(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "contacts":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_contacts(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "contact":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_contact(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "deals":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_deals(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "deal":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_deal(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "departments":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_departments(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "department":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_department(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "developers":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_developers(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "developer":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_developer(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "employees":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_employees(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "employee":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_employee(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "generatePdf":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_generatePdf(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "leads":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_leads(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "lead":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_lead(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "logs":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_logs(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "meets":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_meets(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "meet":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_meet(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "mortgageRequests":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_mortgageRequests(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "mortgageRequest":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_mortgageRequest(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "pages":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_pages(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "page":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_page(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "positions":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_positions(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "position":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_position(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "properties":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_properties(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "property":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_property(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "reviews":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_reviews(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "review":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_review(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "roles":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_roles(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "role":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_role(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "stories":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_stories(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "story":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_story(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "tasks":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_tasks(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "task":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_task(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "vacancies":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_vacancies(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "vacancy":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_vacancy(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "vacancyRequests":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_vacancyRequests(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "vacancyRequest":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_vacancyRequest(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "villages":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_villages(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "village":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_village(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "__type":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Query___type(ctx, field)
			})
		case "__schema":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Query___schema(ctx, field)
			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var readinessImplementors = []string{"Readiness"}

func (ec *executionContext) _Readiness(ctx context.Context, sel ast.SelectionSet, obj *crm_models.Readiness) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, readinessImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Readiness")
		case "year":
			out.Values[i] = ec._Readiness_year(ctx, field, obj)
		case "quarter":
			out.Values[i] = ec._Readiness_quarter(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var reviewImplementors = []string{"Review"}

func (ec *executionContext) _Review(ctx context.Context, sel ast.SelectionSet, obj *crm_models.Review) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, reviewImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Review")
		case "id":
			out.Values[i] = ec._Review_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "employee":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Review_employee(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "text":
			out.Values[i] = ec._Review_text(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "authorName":
			out.Values[i] = ec._Review_authorName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "authorPhone":
			out.Values[i] = ec._Review_authorPhone(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "status":
			out.Values[i] = ec._Review_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "publicationStatus":
			out.Values[i] = ec._Review_publicationStatus(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "createdAt":
			out.Values[i] = ec._Review_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "updatedAt":
			out.Values[i] = ec._Review_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var reviewConnectionImplementors = []string{"ReviewConnection"}

func (ec *executionContext) _ReviewConnection(ctx context.Context, sel ast.SelectionSet, obj *crm_models.ReviewConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, reviewConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ReviewConnection")
		case "totalCount":
			out.Values[i] = ec._ReviewConnection_totalCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "edges":
			out.Values[i] = ec._ReviewConnection_edges(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "nodes":
			out.Values[i] = ec._ReviewConnection_nodes(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "pageInfo":
			out.Values[i] = ec._ReviewConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var reviewEdgeImplementors = []string{"ReviewEdge"}

func (ec *executionContext) _ReviewEdge(ctx context.Context, sel ast.SelectionSet, obj *crm_models.ReviewEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, reviewEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ReviewEdge")
		case "node":
			out.Values[i] = ec._ReviewEdge_node(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "cursor":
			out.Values[i] = ec._ReviewEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var roleImplementors = []string{"Role"}

func (ec *executionContext) _Role(ctx context.Context, sel ast.SelectionSet, obj *crm_models.Role) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, roleImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Role")
		case "id":
			out.Values[i] = ec._Role_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "title":
			out.Values[i] = ec._Role_title(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "permissions":
			out.Values[i] = ec._Role_permissions(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createdAt":
			out.Values[i] = ec._Role_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updatedAt":
			out.Values[i] = ec._Role_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var roleConnectionImplementors = []string{"RoleConnection"}

func (ec *executionContext) _RoleConnection(ctx context.Context, sel ast.SelectionSet, obj *crm_models.RoleConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, roleConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RoleConnection")
		case "totalCount":
			out.Values[i] = ec._RoleConnection_totalCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "edges":
			out.Values[i] = ec._RoleConnection_edges(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "nodes":
			out.Values[i] = ec._RoleConnection_nodes(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "pageInfo":
			out.Values[i] = ec._RoleConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var roleEdgeImplementors = []string{"RoleEdge"}

func (ec *executionContext) _RoleEdge(ctx context.Context, sel ast.SelectionSet, obj *crm_models.RoleEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, roleEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RoleEdge")
		case "node":
			out.Values[i] = ec._RoleEdge_node(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "cursor":
			out.Values[i] = ec._RoleEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var storyImplementors = []string{"Story"}

func (ec *executionContext) _Story(ctx context.Context, sel ast.SelectionSet, obj *crm_models.Story) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, storyImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Story")
		case "id":
			out.Values[i] = ec._Story_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "category":
			out.Values[i] = ec._Story_category(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "title":
			out.Values[i] = ec._Story_title(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "teaser":
			out.Values[i] = ec._Story_teaser(ctx, field, obj)
		case "contentBlocks":
			out.Values[i] = ec._Story_contentBlocks(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "cover":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Story_cover(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "status":
			out.Values[i] = ec._Story_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "createdAt":
			out.Values[i] = ec._Story_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "updatedAt":
			out.Values[i] = ec._Story_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var storyConnectionImplementors = []string{"StoryConnection"}

func (ec *executionContext) _StoryConnection(ctx context.Context, sel ast.SelectionSet, obj *crm_models.StoryConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, storyConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("StoryConnection")
		case "totalCount":
			out.Values[i] = ec._StoryConnection_totalCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "edges":
			out.Values[i] = ec._StoryConnection_edges(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "nodes":
			out.Values[i] = ec._StoryConnection_nodes(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "pageInfo":
			out.Values[i] = ec._StoryConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var storyEdgeImplementors = []string{"StoryEdge"}

func (ec *executionContext) _StoryEdge(ctx context.Context, sel ast.SelectionSet, obj *crm_models.StoryEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, storyEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("StoryEdge")
		case "node":
			out.Values[i] = ec._StoryEdge_node(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "cursor":
			out.Values[i] = ec._StoryEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var taskImplementors = []string{"Task"}

func (ec *executionContext) _Task(ctx context.Context, sel ast.SelectionSet, obj *crm_models.Task) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, taskImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Task")
		case "id":
			out.Values[i] = ec._Task_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "internalNumber":
			out.Values[i] = ec._Task_internalNumber(ctx, field, obj)
		case "title":
			out.Values[i] = ec._Task_title(ctx, field, obj)
		case "label":
			out.Values[i] = ec._Task_label(ctx, field, obj)
		case "isHot":
			out.Values[i] = ec._Task_isHot(ctx, field, obj)
		case "status":
			out.Values[i] = ec._Task_status(ctx, field, obj)
		case "assignee":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Task_assignee(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "reporter":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Task_reporter(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "property":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Task_property(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "contact":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Task_contact(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "contactPhone":
			out.Values[i] = ec._Task_contactPhone(ctx, field, obj)
		case "lead":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Task_lead(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "deal":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Task_deal(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "startDate":
			out.Values[i] = ec._Task_startDate(ctx, field, obj)
		case "durationDays":
			out.Values[i] = ec._Task_durationDays(ctx, field, obj)
		case "durationHours":
			out.Values[i] = ec._Task_durationHours(ctx, field, obj)
		case "details":
			out.Values[i] = ec._Task_details(ctx, field, obj)
		case "isCompleted":
			out.Values[i] = ec._Task_isCompleted(ctx, field, obj)
		case "endDate":
			out.Values[i] = ec._Task_endDate(ctx, field, obj)
		case "tag":
			out.Values[i] = ec._Task_tag(ctx, field, obj)
		case "isDeleted":
			out.Values[i] = ec._Task_isDeleted(ctx, field, obj)
		case "createdAt":
			out.Values[i] = ec._Task_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "updatedAt":
			out.Values[i] = ec._Task_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var taskConnectionImplementors = []string{"TaskConnection"}

func (ec *executionContext) _TaskConnection(ctx context.Context, sel ast.SelectionSet, obj *crm_models.TaskConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, taskConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TaskConnection")
		case "totalCount":
			out.Values[i] = ec._TaskConnection_totalCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "edges":
			out.Values[i] = ec._TaskConnection_edges(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "nodes":
			out.Values[i] = ec._TaskConnection_nodes(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "pageInfo":
			out.Values[i] = ec._TaskConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var taskEdgeImplementors = []string{"TaskEdge"}

func (ec *executionContext) _TaskEdge(ctx context.Context, sel ast.SelectionSet, obj *crm_models.TaskEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, taskEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TaskEdge")
		case "node":
			out.Values[i] = ec._TaskEdge_node(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "cursor":
			out.Values[i] = ec._TaskEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var vacancyImplementors = []string{"Vacancy"}

func (ec *executionContext) _Vacancy(ctx context.Context, sel ast.SelectionSet, obj *crm_models.Vacancy) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vacancyImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Vacancy")
		case "id":
			out.Values[i] = ec._Vacancy_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "title":
			out.Values[i] = ec._Vacancy_title(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "description":
			out.Values[i] = ec._Vacancy_description(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "experience":
			out.Values[i] = ec._Vacancy_experience(ctx, field, obj)
		case "salary":
			out.Values[i] = ec._Vacancy_salary(ctx, field, obj)
		case "schedule":
			out.Values[i] = ec._Vacancy_schedule(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "publicationStatus":
			out.Values[i] = ec._Vacancy_publicationStatus(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createdAt":
			out.Values[i] = ec._Vacancy_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updatedAt":
			out.Values[i] = ec._Vacancy_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var vacancyConnectionImplementors = []string{"VacancyConnection"}

func (ec *executionContext) _VacancyConnection(ctx context.Context, sel ast.SelectionSet, obj *crm_models.VacancyConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vacancyConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VacancyConnection")
		case "totalCount":
			out.Values[i] = ec._VacancyConnection_totalCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "edges":
			out.Values[i] = ec._VacancyConnection_edges(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "nodes":
			out.Values[i] = ec._VacancyConnection_nodes(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "pageInfo":
			out.Values[i] = ec._VacancyConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var vacancyEdgeImplementors = []string{"VacancyEdge"}

func (ec *executionContext) _VacancyEdge(ctx context.Context, sel ast.SelectionSet, obj *crm_models.VacancyEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vacancyEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VacancyEdge")
		case "node":
			out.Values[i] = ec._VacancyEdge_node(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "cursor":
			out.Values[i] = ec._VacancyEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var vacancyRequestImplementors = []string{"VacancyRequest"}

func (ec *executionContext) _VacancyRequest(ctx context.Context, sel ast.SelectionSet, obj *crm_models.VacancyRequest) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vacancyRequestImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VacancyRequest")
		case "id":
			out.Values[i] = ec._VacancyRequest_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "vacancy":
			out.Values[i] = ec._VacancyRequest_vacancy(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "name":
			out.Values[i] = ec._VacancyRequest_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "letter":
			out.Values[i] = ec._VacancyRequest_letter(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "attachments":
			out.Values[i] = ec._VacancyRequest_attachments(ctx, field, obj)
		case "internalComment":
			out.Values[i] = ec._VacancyRequest_internalComment(ctx, field, obj)
		case "status":
			out.Values[i] = ec._VacancyRequest_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createdAt":
			out.Values[i] = ec._VacancyRequest_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updatedAt":
			out.Values[i] = ec._VacancyRequest_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var vacancyRequestConnectionImplementors = []string{"VacancyRequestConnection"}

func (ec *executionContext) _VacancyRequestConnection(ctx context.Context, sel ast.SelectionSet, obj *crm_models.VacancyRequestConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vacancyRequestConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VacancyRequestConnection")
		case "totalCount":
			out.Values[i] = ec._VacancyRequestConnection_totalCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "edges":
			out.Values[i] = ec._VacancyRequestConnection_edges(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "nodes":
			out.Values[i] = ec._VacancyRequestConnection_nodes(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "pageInfo":
			out.Values[i] = ec._VacancyRequestConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var vacancyRequestEdgeImplementors = []string{"VacancyRequestEdge"}

func (ec *executionContext) _VacancyRequestEdge(ctx context.Context, sel ast.SelectionSet, obj *crm_models.VacancyRequestEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vacancyRequestEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VacancyRequestEdge")
		case "node":
			out.Values[i] = ec._VacancyRequestEdge_node(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "cursor":
			out.Values[i] = ec._VacancyRequestEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var villageImplementors = []string{"Village"}

func (ec *executionContext) _Village(ctx context.Context, sel ast.SelectionSet, obj *crm_models.Village) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, villageImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Village")
		case "id":
			out.Values[i] = ec._Village_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "title":
			out.Values[i] = ec._Village_title(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "description":
			out.Values[i] = ec._Village_description(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "address":
			out.Values[i] = ec._Village_address(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "lat":
			out.Values[i] = ec._Village_lat(ctx, field, obj)
		case "lon":
			out.Values[i] = ec._Village_lon(ctx, field, obj)
		case "cadastrNumber":
			out.Values[i] = ec._Village_cadastrNumber(ctx, field, obj)
		case "seoText":
			out.Values[i] = ec._Village_seoText(ctx, field, obj)
		case "youtubeLink":
			out.Values[i] = ec._Village_youtubeLink(ctx, field, obj)
		case "tourLink":
			out.Values[i] = ec._Village_tourLink(ctx, field, obj)
		case "inCity":
			out.Values[i] = ec._Village_inCity(ctx, field, obj)
		case "cityDistance":
			out.Values[i] = ec._Village_cityDistance(ctx, field, obj)
		case "region":
			out.Values[i] = ec._Village_region(ctx, field, obj)
		case "subRegion":
			out.Values[i] = ec._Village_subRegion(ctx, field, obj)
		case "developer":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Village_developer(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "isReady":
			out.Values[i] = ec._Village_isReady(ctx, field, obj)
		case "readinessQuarter":
			out.Values[i] = ec._Village_readinessQuarter(ctx, field, obj)
		case "readinessYear":
			out.Values[i] = ec._Village_readinessYear(ctx, field, obj)
		case "images":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Village_images(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "documents":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Village_documents(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "projectDeclarations":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Village_projectDeclarations(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "publicationStatus":
			out.Values[i] = ec._Village_publicationStatus(ctx, field, obj)
		case "internalInfo":
			out.Values[i] = ec._Village_internalInfo(ctx, field, obj)
		case "isDeleted":
			out.Values[i] = ec._Village_isDeleted(ctx, field, obj)
		case "createdAt":
			out.Values[i] = ec._Village_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "updatedAt":
			out.Values[i] = ec._Village_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var villageConnectionImplementors = []string{"VillageConnection"}

func (ec *executionContext) _VillageConnection(ctx context.Context, sel ast.SelectionSet, obj *crm_models.VillageConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, villageConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VillageConnection")
		case "totalCount":
			out.Values[i] = ec._VillageConnection_totalCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "edges":
			out.Values[i] = ec._VillageConnection_edges(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "nodes":
			out.Values[i] = ec._VillageConnection_nodes(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "pageInfo":
			out.Values[i] = ec._VillageConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var villageEdgeImplementors = []string{"VillageEdge"}

func (ec *executionContext) _VillageEdge(ctx context.Context, sel ast.SelectionSet, obj *crm_models.VillageEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, villageEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VillageEdge")
		case "node":
			out.Values[i] = ec._VillageEdge_node(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "cursor":
			out.Values[i] = ec._VillageEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __DirectiveImplementors = []string{"__Directive"}

func (ec *executionContext) ___Directive(ctx context.Context, sel ast.SelectionSet, obj *introspection.Directive) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __DirectiveImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Directive")
		case "name":
			out.Values[i] = ec.___Directive_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "description":
			out.Values[i] = ec.___Directive_description(ctx, field, obj)
		case "locations":
			out.Values[i] = ec.___Directive_locations(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "args":
			out.Values[i] = ec.___Directive_args(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "isRepeatable":
			out.Values[i] = ec.___Directive_isRepeatable(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __EnumValueImplementors = []string{"__EnumValue"}

func (ec *executionContext) ___EnumValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.EnumValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __EnumValueImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__EnumValue")
		case "name":
			out.Values[i] = ec.___EnumValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "description":
			out.Values[i] = ec.___EnumValue_description(ctx, field, obj)
		case "isDeprecated":
			out.Values[i] = ec.___EnumValue_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___EnumValue_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __FieldImplementors = []string{"__Field"}

func (ec *executionContext) ___Field(ctx context.Context, sel ast.SelectionSet, obj *introspection.Field) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __FieldImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Field")
		case "name":
			out.Values[i] = ec.___Field_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "description":
			out.Values[i] = ec.___Field_description(ctx, field, obj)
		case "args":
			out.Values[i] = ec.___Field_args(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "type":
			out.Values[i] = ec.___Field_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "isDeprecated":
			out.Values[i] = ec.___Field_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___Field_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __InputValueImplementors = []string{"__InputValue"}

func (ec *executionContext) ___InputValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.InputValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __InputValueImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__InputValue")
		case "name":
			out.Values[i] = ec.___InputValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "description":
			out.Values[i] = ec.___InputValue_description(ctx, field, obj)
		case "type":
			out.Values[i] = ec.___InputValue_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "defaultValue":
			out.Values[i] = ec.___InputValue_defaultValue(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __SchemaImplementors = []string{"__Schema"}

func (ec *executionContext) ___Schema(ctx context.Context, sel ast.SelectionSet, obj *introspection.Schema) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __SchemaImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Schema")
		case "description":
			out.Values[i] = ec.___Schema_description(ctx, field, obj)
		case "types":
			out.Values[i] = ec.___Schema_types(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "queryType":
			out.Values[i] = ec.___Schema_queryType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "mutationType":
			out.Values[i] = ec.___Schema_mutationType(ctx, field, obj)
		case "subscriptionType":
			out.Values[i] = ec.___Schema_subscriptionType(ctx, field, obj)
		case "directives":
			out.Values[i] = ec.___Schema_directives(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __TypeImplementors = []string{"__Type"}

func (ec *executionContext) ___Type(ctx context.Context, sel ast.SelectionSet, obj *introspection.Type) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __TypeImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Type")
		case "kind":
			out.Values[i] = ec.___Type_kind(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "name":
			out.Values[i] = ec.___Type_name(ctx, field, obj)
		case "description":
			out.Values[i] = ec.___Type_description(ctx, field, obj)
		case "fields":
			out.Values[i] = ec.___Type_fields(ctx, field, obj)
		case "interfaces":
			out.Values[i] = ec.___Type_interfaces(ctx, field, obj)
		case "possibleTypes":
			out.Values[i] = ec.___Type_possibleTypes(ctx, field, obj)
		case "enumValues":
			out.Values[i] = ec.___Type_enumValues(ctx, field, obj)
		case "inputFields":
			out.Values[i] = ec.___Type_inputFields(ctx, field, obj)
		case "ofType":
			out.Values[i] = ec.___Type_ofType(ctx, field, obj)
		case "specifiedByURL":
			out.Values[i] = ec.___Type_specifiedByURL(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

// endregion **************************** object.gotpl ****************************

// region    ***************************** type.gotpl *****************************

func (ec *executionContext) marshalNArticle2githubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐArticle(ctx context.Context, sel ast.SelectionSet, v crm_models.Article) graphql.Marshaler {
	return ec._Article(ctx, sel, &v)
}

func (ec *executionContext) marshalNArticle2ᚕᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐArticleᚄ(ctx context.Context, sel ast.SelectionSet, v []*crm_models.Article) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNArticle2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐArticle(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNArticle2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐArticle(ctx context.Context, sel ast.SelectionSet, v *crm_models.Article) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Article(ctx, sel, v)
}

func (ec *executionContext) marshalNArticleConnection2githubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐArticleConnection(ctx context.Context, sel ast.SelectionSet, v crm_models.ArticleConnection) graphql.Marshaler {
	return ec._ArticleConnection(ctx, sel, &v)
}

func (ec *executionContext) marshalNArticleConnection2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐArticleConnection(ctx context.Context, sel ast.SelectionSet, v *crm_models.ArticleConnection) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ArticleConnection(ctx, sel, v)
}

func (ec *executionContext) marshalNArticleEdge2ᚕᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐArticleEdgeᚄ(ctx context.Context, sel ast.SelectionSet, v []*crm_models.ArticleEdge) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNArticleEdge2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐArticleEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNArticleEdge2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐArticleEdge(ctx context.Context, sel ast.SelectionSet, v *crm_models.ArticleEdge) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ArticleEdge(ctx, sel, v)
}

func (ec *executionContext) marshalNArticleGroup2githubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐArticleGroup(ctx context.Context, sel ast.SelectionSet, v crm_models.ArticleGroup) graphql.Marshaler {
	return ec._ArticleGroup(ctx, sel, &v)
}

func (ec *executionContext) marshalNArticleGroup2ᚕᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐArticleGroupᚄ(ctx context.Context, sel ast.SelectionSet, v []*crm_models.ArticleGroup) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNArticleGroup2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐArticleGroup(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNArticleGroup2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐArticleGroup(ctx context.Context, sel ast.SelectionSet, v *crm_models.ArticleGroup) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ArticleGroup(ctx, sel, v)
}

func (ec *executionContext) marshalNArticleGroupConnection2githubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐArticleGroupConnection(ctx context.Context, sel ast.SelectionSet, v crm_models.ArticleGroupConnection) graphql.Marshaler {
	return ec._ArticleGroupConnection(ctx, sel, &v)
}

func (ec *executionContext) marshalNArticleGroupConnection2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐArticleGroupConnection(ctx context.Context, sel ast.SelectionSet, v *crm_models.ArticleGroupConnection) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ArticleGroupConnection(ctx, sel, v)
}

func (ec *executionContext) marshalNArticleGroupEdge2ᚕᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐArticleGroupEdgeᚄ(ctx context.Context, sel ast.SelectionSet, v []*crm_models.ArticleGroupEdge) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNArticleGroupEdge2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐArticleGroupEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNArticleGroupEdge2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐArticleGroupEdge(ctx context.Context, sel ast.SelectionSet, v *crm_models.ArticleGroupEdge) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ArticleGroupEdge(ctx, sel, v)
}

func (ec *executionContext) unmarshalNArticleGroupInput2githubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐArticleGroupInput(ctx context.Context, v interface{}) (crm_models.ArticleGroupInput, error) {
	res, err := ec.unmarshalInputArticleGroupInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNArticleInput2githubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐArticleInput(ctx context.Context, v interface{}) (crm_models.ArticleInput, error) {
	res, err := ec.unmarshalInputArticleInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNBank2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐBank(ctx context.Context, sel ast.SelectionSet, v *crm_models.Bank) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Bank(ctx, sel, v)
}

func (ec *executionContext) unmarshalNBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	res := graphql.MarshalBoolean(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNBoolean2ᚖbool(ctx context.Context, v interface{}) (*bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNBoolean2ᚖbool(ctx context.Context, sel ast.SelectionSet, v *bool) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	res := graphql.MarshalBoolean(*v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNCommercialUsageEnum2githubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐCommercialUsageEnum(ctx context.Context, v interface{}) (crm_models.CommercialUsageEnum, error) {
	var res crm_models.CommercialUsageEnum
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNCommercialUsageEnum2githubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐCommercialUsageEnum(ctx context.Context, sel ast.SelectionSet, v crm_models.CommercialUsageEnum) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNComplex2githubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐComplex(ctx context.Context, sel ast.SelectionSet, v crm_models.Complex) graphql.Marshaler {
	return ec._Complex(ctx, sel, &v)
}

func (ec *executionContext) marshalNComplex2ᚕᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐComplexᚄ(ctx context.Context, sel ast.SelectionSet, v []*crm_models.Complex) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNComplex2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐComplex(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNComplex2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐComplex(ctx context.Context, sel ast.SelectionSet, v *crm_models.Complex) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Complex(ctx, sel, v)
}

func (ec *executionContext) marshalNComplexConnection2githubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐComplexConnection(ctx context.Context, sel ast.SelectionSet, v crm_models.ComplexConnection) graphql.Marshaler {
	return ec._ComplexConnection(ctx, sel, &v)
}

func (ec *executionContext) marshalNComplexConnection2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐComplexConnection(ctx context.Context, sel ast.SelectionSet, v *crm_models.ComplexConnection) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ComplexConnection(ctx, sel, v)
}

func (ec *executionContext) marshalNComplexEdge2ᚕᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐComplexEdgeᚄ(ctx context.Context, sel ast.SelectionSet, v []*crm_models.ComplexEdge) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNComplexEdge2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐComplexEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNComplexEdge2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐComplexEdge(ctx context.Context, sel ast.SelectionSet, v *crm_models.ComplexEdge) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ComplexEdge(ctx, sel, v)
}

func (ec *executionContext) marshalNComplexHouse2githubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐComplexHouse(ctx context.Context, sel ast.SelectionSet, v crm_models.ComplexHouse) graphql.Marshaler {
	return ec._ComplexHouse(ctx, sel, &v)
}

func (ec *executionContext) marshalNComplexHouse2ᚕᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐComplexHouseᚄ(ctx context.Context, sel ast.SelectionSet, v []*crm_models.ComplexHouse) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNComplexHouse2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐComplexHouse(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNComplexHouse2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐComplexHouse(ctx context.Context, sel ast.SelectionSet, v *crm_models.ComplexHouse) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ComplexHouse(ctx, sel, v)
}

func (ec *executionContext) marshalNComplexHouseConnection2githubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐComplexHouseConnection(ctx context.Context, sel ast.SelectionSet, v crm_models.ComplexHouseConnection) graphql.Marshaler {
	return ec._ComplexHouseConnection(ctx, sel, &v)
}

func (ec *executionContext) marshalNComplexHouseConnection2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐComplexHouseConnection(ctx context.Context, sel ast.SelectionSet, v *crm_models.ComplexHouseConnection) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ComplexHouseConnection(ctx, sel, v)
}

func (ec *executionContext) marshalNComplexHouseEdge2ᚕᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐComplexHouseEdgeᚄ(ctx context.Context, sel ast.SelectionSet, v []*crm_models.ComplexHouseEdge) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNComplexHouseEdge2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐComplexHouseEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNComplexHouseEdge2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐComplexHouseEdge(ctx context.Context, sel ast.SelectionSet, v *crm_models.ComplexHouseEdge) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ComplexHouseEdge(ctx, sel, v)
}

func (ec *executionContext) unmarshalNComplexHouseInput2githubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐComplexHouseInput(ctx context.Context, v interface{}) (crm_models.ComplexHouseInput, error) {
	res, err := ec.unmarshalInputComplexHouseInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNComplexInput2githubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐComplexInput(ctx context.Context, v interface{}) (crm_models.ComplexInput, error) {
	res, err := ec.unmarshalInputComplexInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNContact2githubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐContact(ctx context.Context, sel ast.SelectionSet, v crm_models.Contact) graphql.Marshaler {
	return ec._Contact(ctx, sel, &v)
}

func (ec *executionContext) marshalNContact2ᚕᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐContactᚄ(ctx context.Context, sel ast.SelectionSet, v []*crm_models.Contact) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNContact2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐContact(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNContact2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐContact(ctx context.Context, sel ast.SelectionSet, v *crm_models.Contact) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Contact(ctx, sel, v)
}

func (ec *executionContext) marshalNContactConnection2githubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐContactConnection(ctx context.Context, sel ast.SelectionSet, v crm_models.ContactConnection) graphql.Marshaler {
	return ec._ContactConnection(ctx, sel, &v)
}

func (ec *executionContext) marshalNContactConnection2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐContactConnection(ctx context.Context, sel ast.SelectionSet, v *crm_models.ContactConnection) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ContactConnection(ctx, sel, v)
}

func (ec *executionContext) marshalNContactEdge2ᚕᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐContactEdgeᚄ(ctx context.Context, sel ast.SelectionSet, v []*crm_models.ContactEdge) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNContactEdge2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐContactEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNContactEdge2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐContactEdge(ctx context.Context, sel ast.SelectionSet, v *crm_models.ContactEdge) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ContactEdge(ctx, sel, v)
}

func (ec *executionContext) unmarshalNContactInput2githubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐContactInput(ctx context.Context, v interface{}) (crm_models.ContactInput, error) {
	res, err := ec.unmarshalInputContactInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNContentBlock2githubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐContentBlock(ctx context.Context, sel ast.SelectionSet, v crm_models.ContentBlock) graphql.Marshaler {
	return ec._ContentBlock(ctx, sel, &v)
}

func (ec *executionContext) marshalNContentBlock2ᚕgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐContentBlockᚄ(ctx context.Context, sel ast.SelectionSet, v []crm_models.ContentBlock) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNContentBlock2githubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐContentBlock(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalNContentBlockInput2githubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐContentBlockInput(ctx context.Context, v interface{}) (crm_models.ContentBlockInput, error) {
	res, err := ec.unmarshalInputContentBlockInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNContentBlockInput2ᚕgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐContentBlockInputᚄ(ctx context.Context, v interface{}) ([]crm_models.ContentBlockInput, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]crm_models.ContentBlockInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNContentBlockInput2githubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐContentBlockInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNContentBlockType2githubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐContentBlockType(ctx context.Context, v interface{}) (crm_models.ContentBlockType, error) {
	var res crm_models.ContentBlockType
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNContentBlockType2githubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐContentBlockType(ctx context.Context, sel ast.SelectionSet, v crm_models.ContentBlockType) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNCursor2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNCursor2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) marshalNDeal2githubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐDeal(ctx context.Context, sel ast.SelectionSet, v crm_models.Deal) graphql.Marshaler {
	return ec._Deal(ctx, sel, &v)
}

func (ec *executionContext) marshalNDeal2ᚕᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐDealᚄ(ctx context.Context, sel ast.SelectionSet, v []*crm_models.Deal) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNDeal2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐDeal(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNDeal2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐDeal(ctx context.Context, sel ast.SelectionSet, v *crm_models.Deal) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Deal(ctx, sel, v)
}

func (ec *executionContext) marshalNDealConnection2githubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐDealConnection(ctx context.Context, sel ast.SelectionSet, v crm_models.DealConnection) graphql.Marshaler {
	return ec._DealConnection(ctx, sel, &v)
}

func (ec *executionContext) marshalNDealConnection2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐDealConnection(ctx context.Context, sel ast.SelectionSet, v *crm_models.DealConnection) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._DealConnection(ctx, sel, v)
}

func (ec *executionContext) marshalNDealEdge2ᚕᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐDealEdgeᚄ(ctx context.Context, sel ast.SelectionSet, v []*crm_models.DealEdge) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNDealEdge2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐDealEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNDealEdge2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐDealEdge(ctx context.Context, sel ast.SelectionSet, v *crm_models.DealEdge) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._DealEdge(ctx, sel, v)
}

func (ec *executionContext) unmarshalNDealInput2githubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐDealInput(ctx context.Context, v interface{}) (crm_models.DealInput, error) {
	res, err := ec.unmarshalInputDealInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNDealStageEnum2githubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐDealStageEnum(ctx context.Context, v interface{}) (crm_models.DealStageEnum, error) {
	var res crm_models.DealStageEnum
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNDealStageEnum2githubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐDealStageEnum(ctx context.Context, sel ast.SelectionSet, v crm_models.DealStageEnum) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNDepartment2githubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐDepartment(ctx context.Context, sel ast.SelectionSet, v crm_models.Department) graphql.Marshaler {
	return ec._Department(ctx, sel, &v)
}

func (ec *executionContext) marshalNDepartment2ᚕᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐDepartmentᚄ(ctx context.Context, sel ast.SelectionSet, v []*crm_models.Department) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNDepartment2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐDepartment(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNDepartment2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐDepartment(ctx context.Context, sel ast.SelectionSet, v *crm_models.Department) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Department(ctx, sel, v)
}

func (ec *executionContext) marshalNDepartmentConnection2githubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐDepartmentConnection(ctx context.Context, sel ast.SelectionSet, v crm_models.DepartmentConnection) graphql.Marshaler {
	return ec._DepartmentConnection(ctx, sel, &v)
}

func (ec *executionContext) marshalNDepartmentConnection2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐDepartmentConnection(ctx context.Context, sel ast.SelectionSet, v *crm_models.DepartmentConnection) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._DepartmentConnection(ctx, sel, v)
}

func (ec *executionContext) marshalNDepartmentEdge2ᚕᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐDepartmentEdgeᚄ(ctx context.Context, sel ast.SelectionSet, v []*crm_models.DepartmentEdge) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNDepartmentEdge2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐDepartmentEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNDepartmentEdge2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐDepartmentEdge(ctx context.Context, sel ast.SelectionSet, v *crm_models.DepartmentEdge) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._DepartmentEdge(ctx, sel, v)
}

func (ec *executionContext) marshalNDepartmentGroup2githubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐDepartmentGroup(ctx context.Context, sel ast.SelectionSet, v crm_models.DepartmentGroup) graphql.Marshaler {
	return ec._DepartmentGroup(ctx, sel, &v)
}

func (ec *executionContext) marshalNDepartmentGroup2ᚕgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐDepartmentGroupᚄ(ctx context.Context, sel ast.SelectionSet, v []crm_models.DepartmentGroup) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNDepartmentGroup2githubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐDepartmentGroup(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalNDepartmentGroupInput2githubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐDepartmentGroupInput(ctx context.Context, v interface{}) (crm_models.DepartmentGroupInput, error) {
	res, err := ec.unmarshalInputDepartmentGroupInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNDepartmentGroupInput2ᚕgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐDepartmentGroupInputᚄ(ctx context.Context, v interface{}) ([]crm_models.DepartmentGroupInput, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]crm_models.DepartmentGroupInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNDepartmentGroupInput2githubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐDepartmentGroupInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNDepartmentInput2githubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐDepartmentInput(ctx context.Context, v interface{}) (crm_models.DepartmentInput, error) {
	res, err := ec.unmarshalInputDepartmentInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNDeveloper2githubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐDeveloper(ctx context.Context, sel ast.SelectionSet, v crm_models.Developer) graphql.Marshaler {
	return ec._Developer(ctx, sel, &v)
}

func (ec *executionContext) marshalNDeveloper2ᚕᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐDeveloperᚄ(ctx context.Context, sel ast.SelectionSet, v []*crm_models.Developer) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNDeveloper2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐDeveloper(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNDeveloper2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐDeveloper(ctx context.Context, sel ast.SelectionSet, v *crm_models.Developer) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Developer(ctx, sel, v)
}

func (ec *executionContext) marshalNDeveloperConnection2githubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐDeveloperConnection(ctx context.Context, sel ast.SelectionSet, v crm_models.DeveloperConnection) graphql.Marshaler {
	return ec._DeveloperConnection(ctx, sel, &v)
}

func (ec *executionContext) marshalNDeveloperConnection2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐDeveloperConnection(ctx context.Context, sel ast.SelectionSet, v *crm_models.DeveloperConnection) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._DeveloperConnection(ctx, sel, v)
}

func (ec *executionContext) marshalNDeveloperEdge2ᚕᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐDeveloperEdgeᚄ(ctx context.Context, sel ast.SelectionSet, v []*crm_models.DeveloperEdge) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNDeveloperEdge2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐDeveloperEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNDeveloperEdge2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐDeveloperEdge(ctx context.Context, sel ast.SelectionSet, v *crm_models.DeveloperEdge) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._DeveloperEdge(ctx, sel, v)
}

func (ec *executionContext) unmarshalNDeveloperInput2githubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐDeveloperInput(ctx context.Context, v interface{}) (crm_models.DeveloperInput, error) {
	res, err := ec.unmarshalInputDeveloperInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNDocument2githubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐDocument(ctx context.Context, sel ast.SelectionSet, v crm_models.Document) graphql.Marshaler {
	return ec._Document(ctx, sel, &v)
}

func (ec *executionContext) marshalNDocument2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐDocument(ctx context.Context, sel ast.SelectionSet, v *crm_models.Document) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Document(ctx, sel, v)
}

func (ec *executionContext) unmarshalNDocumentInput2githubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐDocumentInput(ctx context.Context, v interface{}) (crm_models.DocumentInput, error) {
	res, err := ec.unmarshalInputDocumentInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNDocumentInput2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐDocumentInput(ctx context.Context, v interface{}) (*crm_models.DocumentInput, error) {
	res, err := ec.unmarshalInputDocumentInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNEmployee2githubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐEmployee(ctx context.Context, sel ast.SelectionSet, v crm_models.Employee) graphql.Marshaler {
	return ec._Employee(ctx, sel, &v)
}

func (ec *executionContext) marshalNEmployee2ᚕᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐEmployeeᚄ(ctx context.Context, sel ast.SelectionSet, v []*crm_models.Employee) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNEmployee2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐEmployee(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNEmployee2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐEmployee(ctx context.Context, sel ast.SelectionSet, v *crm_models.Employee) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Employee(ctx, sel, v)
}

func (ec *executionContext) marshalNEmployeeConnection2githubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐEmployeeConnection(ctx context.Context, sel ast.SelectionSet, v crm_models.EmployeeConnection) graphql.Marshaler {
	return ec._EmployeeConnection(ctx, sel, &v)
}

func (ec *executionContext) marshalNEmployeeConnection2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐEmployeeConnection(ctx context.Context, sel ast.SelectionSet, v *crm_models.EmployeeConnection) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._EmployeeConnection(ctx, sel, v)
}

func (ec *executionContext) marshalNEmployeeEdge2ᚕᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐEmployeeEdgeᚄ(ctx context.Context, sel ast.SelectionSet, v []*crm_models.EmployeeEdge) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNEmployeeEdge2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐEmployeeEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNEmployeeEdge2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐEmployeeEdge(ctx context.Context, sel ast.SelectionSet, v *crm_models.EmployeeEdge) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._EmployeeEdge(ctx, sel, v)
}

func (ec *executionContext) unmarshalNEmployeeInput2githubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐEmployeeInput(ctx context.Context, v interface{}) (crm_models.EmployeeInput, error) {
	res, err := ec.unmarshalInputEmployeeInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNFloat2float64(ctx context.Context, v interface{}) (float64, error) {
	res, err := graphql.UnmarshalFloatContext(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNFloat2float64(ctx context.Context, sel ast.SelectionSet, v float64) graphql.Marshaler {
	res := graphql.MarshalFloatContext(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return graphql.WrapContextMarshaler(ctx, res)
}

func (ec *executionContext) unmarshalNID2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNID2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNID2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNID2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNID2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNID2string(ctx, sel, v[i])
	}

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalNID2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	res, err := graphql.UnmarshalString(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNID2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	res := graphql.MarshalString(*v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) marshalNImage2githubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐImage(ctx context.Context, sel ast.SelectionSet, v crm_models.Image) graphql.Marshaler {
	return ec._Image(ctx, sel, &v)
}

func (ec *executionContext) marshalNImage2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐImage(ctx context.Context, sel ast.SelectionSet, v *crm_models.Image) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Image(ctx, sel, v)
}

func (ec *executionContext) unmarshalNImageInput2githubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐImageInput(ctx context.Context, v interface{}) (crm_models.ImageInput, error) {
	res, err := ec.unmarshalInputImageInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNImageInput2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐImageInput(ctx context.Context, v interface{}) (*crm_models.ImageInput, error) {
	res, err := ec.unmarshalInputImageInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNImagePreset2githubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐImagePreset(ctx context.Context, v interface{}) (crm_models.ImagePreset, error) {
	var res crm_models.ImagePreset
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNImagePreset2githubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐImagePreset(ctx context.Context, sel ast.SelectionSet, v crm_models.ImagePreset) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNInt2int(ctx context.Context, v interface{}) (int, error) {
	res, err := graphql.UnmarshalInt(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNInt2int(ctx context.Context, sel ast.SelectionSet, v int) graphql.Marshaler {
	res := graphql.MarshalInt(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNJSON2map(ctx context.Context, v interface{}) (map[string]interface{}, error) {
	res, err := graphql.UnmarshalMap(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNJSON2map(ctx context.Context, sel ast.SelectionSet, v map[string]interface{}) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	res := graphql.MarshalMap(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) marshalNLead2githubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐLead(ctx context.Context, sel ast.SelectionSet, v crm_models.Lead) graphql.Marshaler {
	return ec._Lead(ctx, sel, &v)
}

func (ec *executionContext) marshalNLead2ᚕᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐLeadᚄ(ctx context.Context, sel ast.SelectionSet, v []*crm_models.Lead) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNLead2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐLead(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNLead2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐLead(ctx context.Context, sel ast.SelectionSet, v *crm_models.Lead) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Lead(ctx, sel, v)
}

func (ec *executionContext) marshalNLeadConnection2githubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐLeadConnection(ctx context.Context, sel ast.SelectionSet, v crm_models.LeadConnection) graphql.Marshaler {
	return ec._LeadConnection(ctx, sel, &v)
}

func (ec *executionContext) marshalNLeadConnection2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐLeadConnection(ctx context.Context, sel ast.SelectionSet, v *crm_models.LeadConnection) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._LeadConnection(ctx, sel, v)
}

func (ec *executionContext) marshalNLeadEdge2ᚕᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐLeadEdgeᚄ(ctx context.Context, sel ast.SelectionSet, v []*crm_models.LeadEdge) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNLeadEdge2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐLeadEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNLeadEdge2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐLeadEdge(ctx context.Context, sel ast.SelectionSet, v *crm_models.LeadEdge) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._LeadEdge(ctx, sel, v)
}

func (ec *executionContext) unmarshalNLeadInput2githubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐLeadInput(ctx context.Context, v interface{}) (crm_models.LeadInput, error) {
	res, err := ec.unmarshalInputLeadInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNLeadStatusEnum2githubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐLeadStatusEnum(ctx context.Context, v interface{}) (crm_models.LeadStatusEnum, error) {
	var res crm_models.LeadStatusEnum
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNLeadStatusEnum2githubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐLeadStatusEnum(ctx context.Context, sel ast.SelectionSet, v crm_models.LeadStatusEnum) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNLog2ᚕᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐLogᚄ(ctx context.Context, sel ast.SelectionSet, v []*crm_models.Log) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNLog2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐLog(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNLog2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐLog(ctx context.Context, sel ast.SelectionSet, v *crm_models.Log) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Log(ctx, sel, v)
}

func (ec *executionContext) marshalNLogConnection2githubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐLogConnection(ctx context.Context, sel ast.SelectionSet, v crm_models.LogConnection) graphql.Marshaler {
	return ec._LogConnection(ctx, sel, &v)
}

func (ec *executionContext) marshalNLogConnection2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐLogConnection(ctx context.Context, sel ast.SelectionSet, v *crm_models.LogConnection) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._LogConnection(ctx, sel, v)
}

func (ec *executionContext) marshalNLogEdge2ᚕᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐLogEdgeᚄ(ctx context.Context, sel ast.SelectionSet, v []*crm_models.LogEdge) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNLogEdge2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐLogEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNLogEdge2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐLogEdge(ctx context.Context, sel ast.SelectionSet, v *crm_models.LogEdge) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._LogEdge(ctx, sel, v)
}

func (ec *executionContext) unmarshalNLogLevelEnum2githubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐLogLevelEnum(ctx context.Context, v interface{}) (crm_models.LogLevelEnum, error) {
	var res crm_models.LogLevelEnum
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNLogLevelEnum2githubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐLogLevelEnum(ctx context.Context, sel ast.SelectionSet, v crm_models.LogLevelEnum) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNLogTypeEnum2githubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐLogTypeEnum(ctx context.Context, v interface{}) (crm_models.LogTypeEnum, error) {
	var res crm_models.LogTypeEnum
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNLogTypeEnum2githubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐLogTypeEnum(ctx context.Context, sel ast.SelectionSet, v crm_models.LogTypeEnum) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNLoginOutput2githubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐLoginOutput(ctx context.Context, sel ast.SelectionSet, v crm_models.LoginOutput) graphql.Marshaler {
	return ec._LoginOutput(ctx, sel, &v)
}

func (ec *executionContext) marshalNLoginOutput2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐLoginOutput(ctx context.Context, sel ast.SelectionSet, v *crm_models.LoginOutput) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._LoginOutput(ctx, sel, v)
}

func (ec *executionContext) marshalNMe2githubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐMe(ctx context.Context, sel ast.SelectionSet, v crm_models.Me) graphql.Marshaler {
	return ec._Me(ctx, sel, &v)
}

func (ec *executionContext) marshalNMe2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐMe(ctx context.Context, sel ast.SelectionSet, v *crm_models.Me) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Me(ctx, sel, v)
}

func (ec *executionContext) marshalNMeet2githubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐMeet(ctx context.Context, sel ast.SelectionSet, v crm_models.Meet) graphql.Marshaler {
	return ec._Meet(ctx, sel, &v)
}

func (ec *executionContext) marshalNMeet2ᚕᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐMeetᚄ(ctx context.Context, sel ast.SelectionSet, v []*crm_models.Meet) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNMeet2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐMeet(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNMeet2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐMeet(ctx context.Context, sel ast.SelectionSet, v *crm_models.Meet) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Meet(ctx, sel, v)
}

func (ec *executionContext) marshalNMeetConnection2githubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐMeetConnection(ctx context.Context, sel ast.SelectionSet, v crm_models.MeetConnection) graphql.Marshaler {
	return ec._MeetConnection(ctx, sel, &v)
}

func (ec *executionContext) marshalNMeetConnection2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐMeetConnection(ctx context.Context, sel ast.SelectionSet, v *crm_models.MeetConnection) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._MeetConnection(ctx, sel, v)
}

func (ec *executionContext) marshalNMeetEdge2ᚕᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐMeetEdgeᚄ(ctx context.Context, sel ast.SelectionSet, v []*crm_models.MeetEdge) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNMeetEdge2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐMeetEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNMeetEdge2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐMeetEdge(ctx context.Context, sel ast.SelectionSet, v *crm_models.MeetEdge) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._MeetEdge(ctx, sel, v)
}

func (ec *executionContext) unmarshalNMeetInput2githubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐMeetInput(ctx context.Context, v interface{}) (crm_models.MeetInput, error) {
	res, err := ec.unmarshalInputMeetInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNMeetStatusEnum2githubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐMeetStatusEnum(ctx context.Context, v interface{}) (crm_models.MeetStatusEnum, error) {
	var res crm_models.MeetStatusEnum
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNMeetStatusEnum2githubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐMeetStatusEnum(ctx context.Context, sel ast.SelectionSet, v crm_models.MeetStatusEnum) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNMortgageRequest2githubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐMortgageRequest(ctx context.Context, sel ast.SelectionSet, v crm_models.MortgageRequest) graphql.Marshaler {
	return ec._MortgageRequest(ctx, sel, &v)
}

func (ec *executionContext) marshalNMortgageRequest2ᚕᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐMortgageRequestᚄ(ctx context.Context, sel ast.SelectionSet, v []*crm_models.MortgageRequest) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNMortgageRequest2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐMortgageRequest(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNMortgageRequest2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐMortgageRequest(ctx context.Context, sel ast.SelectionSet, v *crm_models.MortgageRequest) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._MortgageRequest(ctx, sel, v)
}

func (ec *executionContext) marshalNMortgageRequestConnection2githubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐMortgageRequestConnection(ctx context.Context, sel ast.SelectionSet, v crm_models.MortgageRequestConnection) graphql.Marshaler {
	return ec._MortgageRequestConnection(ctx, sel, &v)
}

func (ec *executionContext) marshalNMortgageRequestConnection2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐMortgageRequestConnection(ctx context.Context, sel ast.SelectionSet, v *crm_models.MortgageRequestConnection) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._MortgageRequestConnection(ctx, sel, v)
}

func (ec *executionContext) marshalNMortgageRequestEdge2ᚕᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐMortgageRequestEdgeᚄ(ctx context.Context, sel ast.SelectionSet, v []*crm_models.MortgageRequestEdge) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNMortgageRequestEdge2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐMortgageRequestEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNMortgageRequestEdge2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐMortgageRequestEdge(ctx context.Context, sel ast.SelectionSet, v *crm_models.MortgageRequestEdge) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._MortgageRequestEdge(ctx, sel, v)
}

func (ec *executionContext) unmarshalNMortgageRequestInput2githubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐMortgageRequestInput(ctx context.Context, v interface{}) (crm_models.MortgageRequestInput, error) {
	res, err := ec.unmarshalInputMortgageRequestInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNMortgageRequestStatusEnum2githubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐMortgageRequestStatusEnum(ctx context.Context, v interface{}) (crm_models.MortgageRequestStatusEnum, error) {
	var res crm_models.MortgageRequestStatusEnum
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNMortgageRequestStatusEnum2githubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐMortgageRequestStatusEnum(ctx context.Context, sel ast.SelectionSet, v crm_models.MortgageRequestStatusEnum) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNPage2githubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐPage(ctx context.Context, sel ast.SelectionSet, v crm_models.Page) graphql.Marshaler {
	return ec._Page(ctx, sel, &v)
}

func (ec *executionContext) marshalNPage2ᚕᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐPageᚄ(ctx context.Context, sel ast.SelectionSet, v []*crm_models.Page) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNPage2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐPage(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNPage2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐPage(ctx context.Context, sel ast.SelectionSet, v *crm_models.Page) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Page(ctx, sel, v)
}

func (ec *executionContext) marshalNPageConnection2githubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐPageConnection(ctx context.Context, sel ast.SelectionSet, v crm_models.PageConnection) graphql.Marshaler {
	return ec._PageConnection(ctx, sel, &v)
}

func (ec *executionContext) marshalNPageConnection2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐPageConnection(ctx context.Context, sel ast.SelectionSet, v *crm_models.PageConnection) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._PageConnection(ctx, sel, v)
}

func (ec *executionContext) marshalNPageEdge2ᚕᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐPageEdgeᚄ(ctx context.Context, sel ast.SelectionSet, v []*crm_models.PageEdge) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNPageEdge2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐPageEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNPageEdge2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐPageEdge(ctx context.Context, sel ast.SelectionSet, v *crm_models.PageEdge) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._PageEdge(ctx, sel, v)
}

func (ec *executionContext) marshalNPageInfo2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐPageInfo(ctx context.Context, sel ast.SelectionSet, v *crm_models.PageInfo) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._PageInfo(ctx, sel, v)
}

func (ec *executionContext) unmarshalNPageInput2githubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐPageInput(ctx context.Context, v interface{}) (crm_models.PageInput, error) {
	res, err := ec.unmarshalInputPageInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNPosition2githubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐPosition(ctx context.Context, sel ast.SelectionSet, v crm_models.Position) graphql.Marshaler {
	return ec._Position(ctx, sel, &v)
}

func (ec *executionContext) marshalNPosition2ᚕᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐPositionᚄ(ctx context.Context, sel ast.SelectionSet, v []*crm_models.Position) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNPosition2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐPosition(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNPosition2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐPosition(ctx context.Context, sel ast.SelectionSet, v *crm_models.Position) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Position(ctx, sel, v)
}

func (ec *executionContext) marshalNPositionConnection2githubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐPositionConnection(ctx context.Context, sel ast.SelectionSet, v crm_models.PositionConnection) graphql.Marshaler {
	return ec._PositionConnection(ctx, sel, &v)
}

func (ec *executionContext) marshalNPositionConnection2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐPositionConnection(ctx context.Context, sel ast.SelectionSet, v *crm_models.PositionConnection) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._PositionConnection(ctx, sel, v)
}

func (ec *executionContext) marshalNPositionEdge2ᚕᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐPositionEdgeᚄ(ctx context.Context, sel ast.SelectionSet, v []*crm_models.PositionEdge) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNPositionEdge2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐPositionEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNPositionEdge2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐPositionEdge(ctx context.Context, sel ast.SelectionSet, v *crm_models.PositionEdge) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._PositionEdge(ctx, sel, v)
}

func (ec *executionContext) unmarshalNPositionInput2githubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐPositionInput(ctx context.Context, v interface{}) (crm_models.PositionInput, error) {
	res, err := ec.unmarshalInputPositionInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNProperty2githubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐProperty(ctx context.Context, sel ast.SelectionSet, v crm_models.Property) graphql.Marshaler {
	return ec._Property(ctx, sel, &v)
}

func (ec *executionContext) marshalNProperty2ᚕᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐPropertyᚄ(ctx context.Context, sel ast.SelectionSet, v []*crm_models.Property) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNProperty2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐProperty(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNProperty2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐProperty(ctx context.Context, sel ast.SelectionSet, v *crm_models.Property) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Property(ctx, sel, v)
}

func (ec *executionContext) marshalNPropertyConnection2githubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐPropertyConnection(ctx context.Context, sel ast.SelectionSet, v crm_models.PropertyConnection) graphql.Marshaler {
	return ec._PropertyConnection(ctx, sel, &v)
}

func (ec *executionContext) marshalNPropertyConnection2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐPropertyConnection(ctx context.Context, sel ast.SelectionSet, v *crm_models.PropertyConnection) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._PropertyConnection(ctx, sel, v)
}

func (ec *executionContext) marshalNPropertyEdge2ᚕᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐPropertyEdgeᚄ(ctx context.Context, sel ast.SelectionSet, v []*crm_models.PropertyEdge) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNPropertyEdge2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐPropertyEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNPropertyEdge2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐPropertyEdge(ctx context.Context, sel ast.SelectionSet, v *crm_models.PropertyEdge) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._PropertyEdge(ctx, sel, v)
}

func (ec *executionContext) unmarshalNPropertyInput2githubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐPropertyInput(ctx context.Context, v interface{}) (crm_models.PropertyInput, error) {
	res, err := ec.unmarshalInputPropertyInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNPropertyStatusEnum2githubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐPropertyStatusEnum(ctx context.Context, v interface{}) (crm_models.PropertyStatusEnum, error) {
	var res crm_models.PropertyStatusEnum
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNPropertyStatusEnum2githubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐPropertyStatusEnum(ctx context.Context, sel ast.SelectionSet, v crm_models.PropertyStatusEnum) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNPublicationStatusEnum2githubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐPublicationStatusEnum(ctx context.Context, v interface{}) (crm_models.PublicationStatusEnum, error) {
	var res crm_models.PublicationStatusEnum
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNPublicationStatusEnum2githubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐPublicationStatusEnum(ctx context.Context, sel ast.SelectionSet, v crm_models.PublicationStatusEnum) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNReview2githubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐReview(ctx context.Context, sel ast.SelectionSet, v crm_models.Review) graphql.Marshaler {
	return ec._Review(ctx, sel, &v)
}

func (ec *executionContext) marshalNReview2ᚕᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐReviewᚄ(ctx context.Context, sel ast.SelectionSet, v []*crm_models.Review) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNReview2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐReview(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNReview2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐReview(ctx context.Context, sel ast.SelectionSet, v *crm_models.Review) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Review(ctx, sel, v)
}

func (ec *executionContext) marshalNReviewConnection2githubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐReviewConnection(ctx context.Context, sel ast.SelectionSet, v crm_models.ReviewConnection) graphql.Marshaler {
	return ec._ReviewConnection(ctx, sel, &v)
}

func (ec *executionContext) marshalNReviewConnection2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐReviewConnection(ctx context.Context, sel ast.SelectionSet, v *crm_models.ReviewConnection) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ReviewConnection(ctx, sel, v)
}

func (ec *executionContext) marshalNReviewEdge2ᚕᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐReviewEdgeᚄ(ctx context.Context, sel ast.SelectionSet, v []*crm_models.ReviewEdge) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNReviewEdge2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐReviewEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNReviewEdge2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐReviewEdge(ctx context.Context, sel ast.SelectionSet, v *crm_models.ReviewEdge) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ReviewEdge(ctx, sel, v)
}

func (ec *executionContext) unmarshalNReviewInput2githubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐReviewInput(ctx context.Context, v interface{}) (crm_models.ReviewInput, error) {
	res, err := ec.unmarshalInputReviewInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNReviewStatusEnum2githubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐReviewStatusEnum(ctx context.Context, v interface{}) (crm_models.ReviewStatusEnum, error) {
	var res crm_models.ReviewStatusEnum
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNReviewStatusEnum2githubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐReviewStatusEnum(ctx context.Context, sel ast.SelectionSet, v crm_models.ReviewStatusEnum) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNRole2githubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐRole(ctx context.Context, sel ast.SelectionSet, v crm_models.Role) graphql.Marshaler {
	return ec._Role(ctx, sel, &v)
}

func (ec *executionContext) marshalNRole2ᚕᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐRoleᚄ(ctx context.Context, sel ast.SelectionSet, v []*crm_models.Role) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNRole2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐRole(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNRole2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐRole(ctx context.Context, sel ast.SelectionSet, v *crm_models.Role) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Role(ctx, sel, v)
}

func (ec *executionContext) marshalNRoleConnection2githubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐRoleConnection(ctx context.Context, sel ast.SelectionSet, v crm_models.RoleConnection) graphql.Marshaler {
	return ec._RoleConnection(ctx, sel, &v)
}

func (ec *executionContext) marshalNRoleConnection2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐRoleConnection(ctx context.Context, sel ast.SelectionSet, v *crm_models.RoleConnection) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._RoleConnection(ctx, sel, v)
}

func (ec *executionContext) marshalNRoleEdge2ᚕᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐRoleEdgeᚄ(ctx context.Context, sel ast.SelectionSet, v []*crm_models.RoleEdge) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNRoleEdge2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐRoleEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNRoleEdge2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐRoleEdge(ctx context.Context, sel ast.SelectionSet, v *crm_models.RoleEdge) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._RoleEdge(ctx, sel, v)
}

func (ec *executionContext) unmarshalNRoleInput2githubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐRoleInput(ctx context.Context, v interface{}) (crm_models.RoleInput, error) {
	res, err := ec.unmarshalInputRoleInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNRolePermissionsEnum2githubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐRolePermissionsEnum(ctx context.Context, v interface{}) (crm_models.RolePermissionsEnum, error) {
	var res crm_models.RolePermissionsEnum
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNRolePermissionsEnum2githubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐRolePermissionsEnum(ctx context.Context, sel ast.SelectionSet, v crm_models.RolePermissionsEnum) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNRolePermissionsEnum2ᚕgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐRolePermissionsEnumᚄ(ctx context.Context, v interface{}) ([]crm_models.RolePermissionsEnum, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]crm_models.RolePermissionsEnum, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNRolePermissionsEnum2githubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐRolePermissionsEnum(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNRolePermissionsEnum2ᚕgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐRolePermissionsEnumᚄ(ctx context.Context, sel ast.SelectionSet, v []crm_models.RolePermissionsEnum) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNRolePermissionsEnum2githubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐRolePermissionsEnum(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalNStatusCodeEnum2githubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐStatusCodeEnum(ctx context.Context, v interface{}) (crm_models.StatusCodeEnum, error) {
	var res crm_models.StatusCodeEnum
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNStatusCodeEnum2githubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐStatusCodeEnum(ctx context.Context, sel ast.SelectionSet, v crm_models.StatusCodeEnum) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNStory2githubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐStory(ctx context.Context, sel ast.SelectionSet, v crm_models.Story) graphql.Marshaler {
	return ec._Story(ctx, sel, &v)
}

func (ec *executionContext) marshalNStory2ᚕᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐStoryᚄ(ctx context.Context, sel ast.SelectionSet, v []*crm_models.Story) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNStory2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐStory(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNStory2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐStory(ctx context.Context, sel ast.SelectionSet, v *crm_models.Story) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Story(ctx, sel, v)
}

func (ec *executionContext) unmarshalNStoryCategoryEnum2githubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐStoryCategoryEnum(ctx context.Context, v interface{}) (crm_models.StoryCategoryEnum, error) {
	var res crm_models.StoryCategoryEnum
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNStoryCategoryEnum2githubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐStoryCategoryEnum(ctx context.Context, sel ast.SelectionSet, v crm_models.StoryCategoryEnum) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNStoryConnection2githubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐStoryConnection(ctx context.Context, sel ast.SelectionSet, v crm_models.StoryConnection) graphql.Marshaler {
	return ec._StoryConnection(ctx, sel, &v)
}

func (ec *executionContext) marshalNStoryConnection2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐStoryConnection(ctx context.Context, sel ast.SelectionSet, v *crm_models.StoryConnection) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._StoryConnection(ctx, sel, v)
}

func (ec *executionContext) marshalNStoryEdge2ᚕᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐStoryEdgeᚄ(ctx context.Context, sel ast.SelectionSet, v []*crm_models.StoryEdge) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNStoryEdge2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐStoryEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNStoryEdge2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐStoryEdge(ctx context.Context, sel ast.SelectionSet, v *crm_models.StoryEdge) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._StoryEdge(ctx, sel, v)
}

func (ec *executionContext) unmarshalNStoryInput2githubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐStoryInput(ctx context.Context, v interface{}) (crm_models.StoryInput, error) {
	res, err := ec.unmarshalInputStoryInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNString2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNString2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	res, err := graphql.UnmarshalString(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNString2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	res := graphql.MarshalString(*v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) marshalNTask2githubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐTask(ctx context.Context, sel ast.SelectionSet, v crm_models.Task) graphql.Marshaler {
	return ec._Task(ctx, sel, &v)
}

func (ec *executionContext) marshalNTask2ᚕᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐTaskᚄ(ctx context.Context, sel ast.SelectionSet, v []*crm_models.Task) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNTask2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐTask(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNTask2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐTask(ctx context.Context, sel ast.SelectionSet, v *crm_models.Task) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Task(ctx, sel, v)
}

func (ec *executionContext) marshalNTaskConnection2githubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐTaskConnection(ctx context.Context, sel ast.SelectionSet, v crm_models.TaskConnection) graphql.Marshaler {
	return ec._TaskConnection(ctx, sel, &v)
}

func (ec *executionContext) marshalNTaskConnection2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐTaskConnection(ctx context.Context, sel ast.SelectionSet, v *crm_models.TaskConnection) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._TaskConnection(ctx, sel, v)
}

func (ec *executionContext) marshalNTaskEdge2ᚕᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐTaskEdgeᚄ(ctx context.Context, sel ast.SelectionSet, v []*crm_models.TaskEdge) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNTaskEdge2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐTaskEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNTaskEdge2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐTaskEdge(ctx context.Context, sel ast.SelectionSet, v *crm_models.TaskEdge) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._TaskEdge(ctx, sel, v)
}

func (ec *executionContext) unmarshalNTaskInput2githubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐTaskInput(ctx context.Context, v interface{}) (crm_models.TaskInput, error) {
	res, err := ec.unmarshalInputTaskInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNTime2timeᚐTime(ctx context.Context, v interface{}) (time.Time, error) {
	res, err := graphql.UnmarshalTime(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNTime2timeᚐTime(ctx context.Context, sel ast.SelectionSet, v time.Time) graphql.Marshaler {
	res := graphql.MarshalTime(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) marshalNVacancy2githubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐVacancy(ctx context.Context, sel ast.SelectionSet, v crm_models.Vacancy) graphql.Marshaler {
	return ec._Vacancy(ctx, sel, &v)
}

func (ec *executionContext) marshalNVacancy2ᚕᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐVacancyᚄ(ctx context.Context, sel ast.SelectionSet, v []*crm_models.Vacancy) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNVacancy2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐVacancy(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNVacancy2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐVacancy(ctx context.Context, sel ast.SelectionSet, v *crm_models.Vacancy) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Vacancy(ctx, sel, v)
}

func (ec *executionContext) marshalNVacancyConnection2githubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐVacancyConnection(ctx context.Context, sel ast.SelectionSet, v crm_models.VacancyConnection) graphql.Marshaler {
	return ec._VacancyConnection(ctx, sel, &v)
}

func (ec *executionContext) marshalNVacancyConnection2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐVacancyConnection(ctx context.Context, sel ast.SelectionSet, v *crm_models.VacancyConnection) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._VacancyConnection(ctx, sel, v)
}

func (ec *executionContext) marshalNVacancyEdge2ᚕᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐVacancyEdgeᚄ(ctx context.Context, sel ast.SelectionSet, v []*crm_models.VacancyEdge) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNVacancyEdge2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐVacancyEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNVacancyEdge2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐVacancyEdge(ctx context.Context, sel ast.SelectionSet, v *crm_models.VacancyEdge) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._VacancyEdge(ctx, sel, v)
}

func (ec *executionContext) unmarshalNVacancyInput2githubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐVacancyInput(ctx context.Context, v interface{}) (crm_models.VacancyInput, error) {
	res, err := ec.unmarshalInputVacancyInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNVacancyRequest2githubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐVacancyRequest(ctx context.Context, sel ast.SelectionSet, v crm_models.VacancyRequest) graphql.Marshaler {
	return ec._VacancyRequest(ctx, sel, &v)
}

func (ec *executionContext) marshalNVacancyRequest2ᚕᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐVacancyRequestᚄ(ctx context.Context, sel ast.SelectionSet, v []*crm_models.VacancyRequest) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNVacancyRequest2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐVacancyRequest(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNVacancyRequest2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐVacancyRequest(ctx context.Context, sel ast.SelectionSet, v *crm_models.VacancyRequest) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._VacancyRequest(ctx, sel, v)
}

func (ec *executionContext) marshalNVacancyRequestConnection2githubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐVacancyRequestConnection(ctx context.Context, sel ast.SelectionSet, v crm_models.VacancyRequestConnection) graphql.Marshaler {
	return ec._VacancyRequestConnection(ctx, sel, &v)
}

func (ec *executionContext) marshalNVacancyRequestConnection2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐVacancyRequestConnection(ctx context.Context, sel ast.SelectionSet, v *crm_models.VacancyRequestConnection) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._VacancyRequestConnection(ctx, sel, v)
}

func (ec *executionContext) marshalNVacancyRequestEdge2ᚕᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐVacancyRequestEdgeᚄ(ctx context.Context, sel ast.SelectionSet, v []*crm_models.VacancyRequestEdge) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNVacancyRequestEdge2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐVacancyRequestEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNVacancyRequestEdge2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐVacancyRequestEdge(ctx context.Context, sel ast.SelectionSet, v *crm_models.VacancyRequestEdge) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._VacancyRequestEdge(ctx, sel, v)
}

func (ec *executionContext) unmarshalNVacancyRequestStatusEnum2githubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐVacancyRequestStatusEnum(ctx context.Context, v interface{}) (crm_models.VacancyRequestStatusEnum, error) {
	var res crm_models.VacancyRequestStatusEnum
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNVacancyRequestStatusEnum2githubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐVacancyRequestStatusEnum(ctx context.Context, sel ast.SelectionSet, v crm_models.VacancyRequestStatusEnum) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNVacancyScheduleEnum2githubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐVacancyScheduleEnum(ctx context.Context, v interface{}) (crm_models.VacancyScheduleEnum, error) {
	var res crm_models.VacancyScheduleEnum
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNVacancyScheduleEnum2githubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐVacancyScheduleEnum(ctx context.Context, sel ast.SelectionSet, v crm_models.VacancyScheduleEnum) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNVillage2githubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐVillage(ctx context.Context, sel ast.SelectionSet, v crm_models.Village) graphql.Marshaler {
	return ec._Village(ctx, sel, &v)
}

func (ec *executionContext) marshalNVillage2ᚕᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐVillageᚄ(ctx context.Context, sel ast.SelectionSet, v []*crm_models.Village) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNVillage2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐVillage(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNVillage2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐVillage(ctx context.Context, sel ast.SelectionSet, v *crm_models.Village) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Village(ctx, sel, v)
}

func (ec *executionContext) marshalNVillageConnection2githubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐVillageConnection(ctx context.Context, sel ast.SelectionSet, v crm_models.VillageConnection) graphql.Marshaler {
	return ec._VillageConnection(ctx, sel, &v)
}

func (ec *executionContext) marshalNVillageConnection2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐVillageConnection(ctx context.Context, sel ast.SelectionSet, v *crm_models.VillageConnection) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._VillageConnection(ctx, sel, v)
}

func (ec *executionContext) marshalNVillageEdge2ᚕᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐVillageEdgeᚄ(ctx context.Context, sel ast.SelectionSet, v []*crm_models.VillageEdge) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNVillageEdge2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐVillageEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNVillageEdge2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐVillageEdge(ctx context.Context, sel ast.SelectionSet, v *crm_models.VillageEdge) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._VillageEdge(ctx, sel, v)
}

func (ec *executionContext) unmarshalNVillageInput2githubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐVillageInput(ctx context.Context, v interface{}) (crm_models.VillageInput, error) {
	res, err := ec.unmarshalInputVillageInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx context.Context, sel ast.SelectionSet, v introspection.Directive) graphql.Marshaler {
	return ec.___Directive(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Directive) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalN__DirectiveLocation2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__DirectiveLocation2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalN__DirectiveLocation2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__DirectiveLocation2string(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx context.Context, sel ast.SelectionSet, v introspection.EnumValue) graphql.Marshaler {
	return ec.___EnumValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx context.Context, sel ast.SelectionSet, v introspection.Field) graphql.Marshaler {
	return ec.___Field(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx context.Context, sel ast.SelectionSet, v introspection.InputValue) graphql.Marshaler {
	return ec.___InputValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v introspection.Type) graphql.Marshaler {
	return ec.___Type(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

func (ec *executionContext) unmarshalN__TypeKind2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__TypeKind2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) marshalOArticleGroup2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐArticleGroup(ctx context.Context, sel ast.SelectionSet, v *crm_models.ArticleGroup) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ArticleGroup(ctx, sel, v)
}

func (ec *executionContext) unmarshalOArticlesFilterInput2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐArticlesFilterInput(ctx context.Context, v interface{}) (*crm_models.ArticlesFilterInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputArticlesFilterInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBank2ᚕᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐBankᚄ(ctx context.Context, sel ast.SelectionSet, v []*crm_models.Bank) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNBank2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐBank(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	res := graphql.MarshalBoolean(v)
	return res
}

func (ec *executionContext) unmarshalOBoolean2ᚖbool(ctx context.Context, v interface{}) (*bool, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalBoolean(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2ᚖbool(ctx context.Context, sel ast.SelectionSet, v *bool) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalBoolean(*v)
	return res
}

func (ec *executionContext) unmarshalOCommercialUsageEnum2githubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐCommercialUsageEnum(ctx context.Context, v interface{}) (crm_models.CommercialUsageEnum, error) {
	var res crm_models.CommercialUsageEnum
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOCommercialUsageEnum2githubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐCommercialUsageEnum(ctx context.Context, sel ast.SelectionSet, v crm_models.CommercialUsageEnum) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalOCommercialUsageEnum2ᚕgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐCommercialUsageEnum(ctx context.Context, v interface{}) ([]crm_models.CommercialUsageEnum, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]crm_models.CommercialUsageEnum, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOCommercialUsageEnum2githubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐCommercialUsageEnum(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOCommercialUsageEnum2ᚕgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐCommercialUsageEnum(ctx context.Context, sel ast.SelectionSet, v []crm_models.CommercialUsageEnum) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOCommercialUsageEnum2githubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐCommercialUsageEnum(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) unmarshalOCommercialUsageEnum2ᚕgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐCommercialUsageEnumᚄ(ctx context.Context, v interface{}) ([]crm_models.CommercialUsageEnum, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]crm_models.CommercialUsageEnum, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNCommercialUsageEnum2githubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐCommercialUsageEnum(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOCommercialUsageEnum2ᚕgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐCommercialUsageEnumᚄ(ctx context.Context, sel ast.SelectionSet, v []crm_models.CommercialUsageEnum) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCommercialUsageEnum2githubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐCommercialUsageEnum(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOComplex2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐComplex(ctx context.Context, sel ast.SelectionSet, v *crm_models.Complex) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Complex(ctx, sel, v)
}

func (ec *executionContext) unmarshalOComplexFilter2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐComplexFilter(ctx context.Context, v interface{}) (*crm_models.ComplexFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputComplexFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOComplexHouse2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐComplexHouse(ctx context.Context, sel ast.SelectionSet, v *crm_models.ComplexHouse) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ComplexHouse(ctx, sel, v)
}

func (ec *executionContext) unmarshalOComplexHouseFilter2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐComplexHouseFilter(ctx context.Context, v interface{}) (*crm_models.ComplexHouseFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputComplexHouseFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOContact2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐContact(ctx context.Context, sel ast.SelectionSet, v *crm_models.Contact) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Contact(ctx, sel, v)
}

func (ec *executionContext) unmarshalOContactFilter2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐContactFilter(ctx context.Context, v interface{}) (*crm_models.ContactFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputContactFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOContactSourceEnum2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐContactSourceEnum(ctx context.Context, v interface{}) (*crm_models.ContactSourceEnum, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(crm_models.ContactSourceEnum)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOContactSourceEnum2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐContactSourceEnum(ctx context.Context, sel ast.SelectionSet, v *crm_models.ContactSourceEnum) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOCounterPartyTypeEnum2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐCounterPartyTypeEnum(ctx context.Context, v interface{}) (*crm_models.CounterPartyTypeEnum, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(crm_models.CounterPartyTypeEnum)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOCounterPartyTypeEnum2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐCounterPartyTypeEnum(ctx context.Context, sel ast.SelectionSet, v *crm_models.CounterPartyTypeEnum) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOCursor2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalString(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOCursor2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalString(*v)
	return res
}

func (ec *executionContext) marshalODeal2ᚕᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐDealᚄ(ctx context.Context, sel ast.SelectionSet, v []*crm_models.Deal) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNDeal2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐDeal(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalODeal2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐDeal(ctx context.Context, sel ast.SelectionSet, v *crm_models.Deal) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Deal(ctx, sel, v)
}

func (ec *executionContext) unmarshalODealEnum2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐDealEnum(ctx context.Context, v interface{}) (*crm_models.DealEnum, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(crm_models.DealEnum)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalODealEnum2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐDealEnum(ctx context.Context, sel ast.SelectionSet, v *crm_models.DealEnum) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalODealFilter2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐDealFilter(ctx context.Context, v interface{}) (*crm_models.DealFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputDealFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalODealStageEnum2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐDealStageEnum(ctx context.Context, v interface{}) (*crm_models.DealStageEnum, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(crm_models.DealStageEnum)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalODealStageEnum2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐDealStageEnum(ctx context.Context, sel ast.SelectionSet, v *crm_models.DealStageEnum) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalODealTypeEnum2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐDealTypeEnum(ctx context.Context, v interface{}) (*crm_models.DealTypeEnum, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(crm_models.DealTypeEnum)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalODealTypeEnum2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐDealTypeEnum(ctx context.Context, sel ast.SelectionSet, v *crm_models.DealTypeEnum) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) marshalODepartment2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐDepartment(ctx context.Context, sel ast.SelectionSet, v *crm_models.Department) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Department(ctx, sel, v)
}

func (ec *executionContext) marshalODepartmentGroup2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐDepartmentGroup(ctx context.Context, sel ast.SelectionSet, v *crm_models.DepartmentGroup) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DepartmentGroup(ctx, sel, v)
}

func (ec *executionContext) marshalODeveloper2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐDeveloper(ctx context.Context, sel ast.SelectionSet, v *crm_models.Developer) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Developer(ctx, sel, v)
}

func (ec *executionContext) unmarshalODeveloperFilterInput2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐDeveloperFilterInput(ctx context.Context, v interface{}) (*crm_models.DeveloperFilterInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputDeveloperFilterInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalODocument2ᚕᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐDocument(ctx context.Context, sel ast.SelectionSet, v []*crm_models.Document) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalODocument2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐDocument(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalODocument2ᚕᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐDocumentᚄ(ctx context.Context, sel ast.SelectionSet, v []*crm_models.Document) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNDocument2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐDocument(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalODocument2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐDocument(ctx context.Context, sel ast.SelectionSet, v *crm_models.Document) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Document(ctx, sel, v)
}

func (ec *executionContext) unmarshalODocumentInput2ᚕᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐDocumentInput(ctx context.Context, v interface{}) ([]*crm_models.DocumentInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*crm_models.DocumentInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalODocumentInput2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐDocumentInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalODocumentInput2ᚕᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐDocumentInputᚄ(ctx context.Context, v interface{}) ([]*crm_models.DocumentInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*crm_models.DocumentInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNDocumentInput2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐDocumentInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalODocumentInput2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐDocumentInput(ctx context.Context, v interface{}) (*crm_models.DocumentInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputDocumentInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOEmployee2ᚕᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐEmployeeᚄ(ctx context.Context, sel ast.SelectionSet, v []*crm_models.Employee) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNEmployee2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐEmployee(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOEmployee2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐEmployee(ctx context.Context, sel ast.SelectionSet, v *crm_models.Employee) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Employee(ctx, sel, v)
}

func (ec *executionContext) unmarshalOEmployeesFilterInput2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐEmployeesFilterInput(ctx context.Context, v interface{}) (*crm_models.EmployeesFilterInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputEmployeesFilterInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOFloat2ᚕfloat64ᚄ(ctx context.Context, v interface{}) ([]float64, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]float64, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNFloat2float64(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOFloat2ᚕfloat64ᚄ(ctx context.Context, sel ast.SelectionSet, v []float64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNFloat2float64(ctx, sel, v[i])
	}

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOFloat2ᚖfloat64(ctx context.Context, v interface{}) (*float64, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalFloatContext(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOFloat2ᚖfloat64(ctx context.Context, sel ast.SelectionSet, v *float64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalFloatContext(*v)
	return graphql.WrapContextMarshaler(ctx, res)
}

func (ec *executionContext) unmarshalOID2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOID2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	return res
}

func (ec *executionContext) unmarshalOID2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNID2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOID2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNID2string(ctx, sel, v[i])
	}

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOID2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalString(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOID2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalString(*v)
	return res
}

func (ec *executionContext) marshalOImage2ᚕᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐImage(ctx context.Context, sel ast.SelectionSet, v []*crm_models.Image) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOImage2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐImage(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOImage2ᚕᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐImageᚄ(ctx context.Context, sel ast.SelectionSet, v []*crm_models.Image) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNImage2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐImage(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOImage2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐImage(ctx context.Context, sel ast.SelectionSet, v *crm_models.Image) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Image(ctx, sel, v)
}

func (ec *executionContext) unmarshalOImageInput2ᚕᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐImageInput(ctx context.Context, v interface{}) ([]*crm_models.ImageInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*crm_models.ImageInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOImageInput2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐImageInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOImageInput2ᚕᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐImageInputᚄ(ctx context.Context, v interface{}) ([]*crm_models.ImageInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*crm_models.ImageInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNImageInput2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐImageInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOImageInput2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐImageInput(ctx context.Context, v interface{}) (*crm_models.ImageInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputImageInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOImagePreset2githubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐImagePreset(ctx context.Context, v interface{}) (crm_models.ImagePreset, error) {
	var res crm_models.ImagePreset
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOImagePreset2githubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐImagePreset(ctx context.Context, sel ast.SelectionSet, v crm_models.ImagePreset) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalOInt2ᚖint(ctx context.Context, v interface{}) (*int, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalInt(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOInt2ᚖint(ctx context.Context, sel ast.SelectionSet, v *int) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalInt(*v)
	return res
}

func (ec *executionContext) marshalOLead2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐLead(ctx context.Context, sel ast.SelectionSet, v *crm_models.Lead) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Lead(ctx, sel, v)
}

func (ec *executionContext) unmarshalOLeadFilter2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐLeadFilter(ctx context.Context, v interface{}) (*crm_models.LeadFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputLeadFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOLeadSourceEnum2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐLeadSourceEnum(ctx context.Context, v interface{}) (*crm_models.LeadSourceEnum, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(crm_models.LeadSourceEnum)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOLeadSourceEnum2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐLeadSourceEnum(ctx context.Context, sel ast.SelectionSet, v *crm_models.LeadSourceEnum) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOLeadStatusEnum2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐLeadStatusEnum(ctx context.Context, v interface{}) (*crm_models.LeadStatusEnum, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(crm_models.LeadStatusEnum)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOLeadStatusEnum2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐLeadStatusEnum(ctx context.Context, sel ast.SelectionSet, v *crm_models.LeadStatusEnum) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOLeadTypeEnum2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐLeadTypeEnum(ctx context.Context, v interface{}) (*crm_models.LeadTypeEnum, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(crm_models.LeadTypeEnum)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOLeadTypeEnum2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐLeadTypeEnum(ctx context.Context, sel ast.SelectionSet, v *crm_models.LeadTypeEnum) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOLogLevelEnum2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐLogLevelEnum(ctx context.Context, v interface{}) (*crm_models.LogLevelEnum, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(crm_models.LogLevelEnum)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOLogLevelEnum2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐLogLevelEnum(ctx context.Context, sel ast.SelectionSet, v *crm_models.LogLevelEnum) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOLogTypeEnum2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐLogTypeEnum(ctx context.Context, v interface{}) (*crm_models.LogTypeEnum, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(crm_models.LogTypeEnum)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOLogTypeEnum2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐLogTypeEnum(ctx context.Context, sel ast.SelectionSet, v *crm_models.LogTypeEnum) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOLogsFilterInput2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐLogsFilterInput(ctx context.Context, v interface{}) (*crm_models.LogsFilterInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputLogsFilterInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOMeetCancelReasonEnum2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐMeetCancelReasonEnum(ctx context.Context, v interface{}) (*crm_models.MeetCancelReasonEnum, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(crm_models.MeetCancelReasonEnum)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOMeetCancelReasonEnum2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐMeetCancelReasonEnum(ctx context.Context, sel ast.SelectionSet, v *crm_models.MeetCancelReasonEnum) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOMeetFilter2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐMeetFilter(ctx context.Context, v interface{}) (*crm_models.MeetFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputMeetFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOMeetStatusEnum2ᚕgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐMeetStatusEnumᚄ(ctx context.Context, v interface{}) ([]crm_models.MeetStatusEnum, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]crm_models.MeetStatusEnum, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNMeetStatusEnum2githubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐMeetStatusEnum(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOMeetStatusEnum2ᚕgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐMeetStatusEnumᚄ(ctx context.Context, sel ast.SelectionSet, v []crm_models.MeetStatusEnum) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNMeetStatusEnum2githubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐMeetStatusEnum(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOMeetStatusEnum2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐMeetStatusEnum(ctx context.Context, v interface{}) (*crm_models.MeetStatusEnum, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(crm_models.MeetStatusEnum)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOMeetStatusEnum2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐMeetStatusEnum(ctx context.Context, sel ast.SelectionSet, v *crm_models.MeetStatusEnum) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOMeetTypeEnum2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐMeetTypeEnum(ctx context.Context, v interface{}) (*crm_models.MeetTypeEnum, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(crm_models.MeetTypeEnum)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOMeetTypeEnum2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐMeetTypeEnum(ctx context.Context, sel ast.SelectionSet, v *crm_models.MeetTypeEnum) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) marshalOMortgageRequest2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐMortgageRequest(ctx context.Context, sel ast.SelectionSet, v *crm_models.MortgageRequest) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._MortgageRequest(ctx, sel, v)
}

func (ec *executionContext) unmarshalOMortgageRequestFilter2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐMortgageRequestFilter(ctx context.Context, v interface{}) (*crm_models.MortgageRequestFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputMortgageRequestFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOMortgageRequestStatusEnum2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐMortgageRequestStatusEnum(ctx context.Context, v interface{}) (*crm_models.MortgageRequestStatusEnum, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(crm_models.MortgageRequestStatusEnum)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOMortgageRequestStatusEnum2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐMortgageRequestStatusEnum(ctx context.Context, sel ast.SelectionSet, v *crm_models.MortgageRequestStatusEnum) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOPageFilterInput2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐPageFilterInput(ctx context.Context, v interface{}) (*crm_models.PageFilterInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputPageFilterInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOPosition2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐPosition(ctx context.Context, sel ast.SelectionSet, v *crm_models.Position) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Position(ctx, sel, v)
}

func (ec *executionContext) marshalOProperty2ᚕᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐPropertyᚄ(ctx context.Context, sel ast.SelectionSet, v []*crm_models.Property) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNProperty2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐProperty(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOProperty2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐProperty(ctx context.Context, sel ast.SelectionSet, v *crm_models.Property) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Property(ctx, sel, v)
}

func (ec *executionContext) unmarshalOPropertyFilter2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐPropertyFilter(ctx context.Context, v interface{}) (*crm_models.PropertyFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputPropertyFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOPropertySourceEnum2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐPropertySourceEnum(ctx context.Context, v interface{}) (*crm_models.PropertySourceEnum, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(crm_models.PropertySourceEnum)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOPropertySourceEnum2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐPropertySourceEnum(ctx context.Context, sel ast.SelectionSet, v *crm_models.PropertySourceEnum) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOPropertyStatusEnum2ᚕgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐPropertyStatusEnumᚄ(ctx context.Context, v interface{}) ([]crm_models.PropertyStatusEnum, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]crm_models.PropertyStatusEnum, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNPropertyStatusEnum2githubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐPropertyStatusEnum(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOPropertyStatusEnum2ᚕgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐPropertyStatusEnumᚄ(ctx context.Context, sel ast.SelectionSet, v []crm_models.PropertyStatusEnum) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNPropertyStatusEnum2githubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐPropertyStatusEnum(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOPropertyStatusEnum2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐPropertyStatusEnum(ctx context.Context, v interface{}) (*crm_models.PropertyStatusEnum, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(crm_models.PropertyStatusEnum)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOPropertyStatusEnum2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐPropertyStatusEnum(ctx context.Context, sel ast.SelectionSet, v *crm_models.PropertyStatusEnum) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOPropertySubTypeEnum2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐPropertySubTypeEnum(ctx context.Context, v interface{}) (*crm_models.PropertySubTypeEnum, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(crm_models.PropertySubTypeEnum)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOPropertySubTypeEnum2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐPropertySubTypeEnum(ctx context.Context, sel ast.SelectionSet, v *crm_models.PropertySubTypeEnum) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOPropertyTypeEnum2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐPropertyTypeEnum(ctx context.Context, v interface{}) (*crm_models.PropertyTypeEnum, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(crm_models.PropertyTypeEnum)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOPropertyTypeEnum2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐPropertyTypeEnum(ctx context.Context, sel ast.SelectionSet, v *crm_models.PropertyTypeEnum) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOPublicationStatusEnum2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐPublicationStatusEnum(ctx context.Context, v interface{}) (*crm_models.PublicationStatusEnum, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(crm_models.PublicationStatusEnum)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOPublicationStatusEnum2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐPublicationStatusEnum(ctx context.Context, sel ast.SelectionSet, v *crm_models.PublicationStatusEnum) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOQuarterEnum2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐQuarterEnum(ctx context.Context, v interface{}) (*crm_models.QuarterEnum, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(crm_models.QuarterEnum)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOQuarterEnum2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐQuarterEnum(ctx context.Context, sel ast.SelectionSet, v *crm_models.QuarterEnum) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalORehabTypeEnum2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐRehabTypeEnum(ctx context.Context, v interface{}) (*crm_models.RehabTypeEnum, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(crm_models.RehabTypeEnum)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalORehabTypeEnum2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐRehabTypeEnum(ctx context.Context, sel ast.SelectionSet, v *crm_models.RehabTypeEnum) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOReviewStatusEnum2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐReviewStatusEnum(ctx context.Context, v interface{}) (*crm_models.ReviewStatusEnum, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(crm_models.ReviewStatusEnum)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOReviewStatusEnum2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐReviewStatusEnum(ctx context.Context, sel ast.SelectionSet, v *crm_models.ReviewStatusEnum) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOReviewsFilterInput2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐReviewsFilterInput(ctx context.Context, v interface{}) (*crm_models.ReviewsFilterInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputReviewsFilterInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalORole2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐRole(ctx context.Context, sel ast.SelectionSet, v *crm_models.Role) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Role(ctx, sel, v)
}

func (ec *executionContext) unmarshalOSort2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐSort(ctx context.Context, v interface{}) (*crm_models.Sort, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputSort(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOSortDirection2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐSortDirection(ctx context.Context, v interface{}) (*crm_models.SortDirection, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(crm_models.SortDirection)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOSortDirection2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐSortDirection(ctx context.Context, sel ast.SelectionSet, v *crm_models.SortDirection) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOStoryCategoryEnum2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐStoryCategoryEnum(ctx context.Context, v interface{}) (*crm_models.StoryCategoryEnum, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(crm_models.StoryCategoryEnum)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOStoryCategoryEnum2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐStoryCategoryEnum(ctx context.Context, sel ast.SelectionSet, v *crm_models.StoryCategoryEnum) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOStoryFilterInput2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐStoryFilterInput(ctx context.Context, v interface{}) (*crm_models.StoryFilterInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputStoryFilterInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOString2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	return res
}

func (ec *executionContext) unmarshalOString2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNString2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOString2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNString2string(ctx, sel, v[i])
	}

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOString2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalString(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOString2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalString(*v)
	return res
}

func (ec *executionContext) unmarshalOTaskFilter2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐTaskFilter(ctx context.Context, v interface{}) (*crm_models.TaskFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputTaskFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOTaskLabelEnum2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐTaskLabelEnum(ctx context.Context, v interface{}) (*crm_models.TaskLabelEnum, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(crm_models.TaskLabelEnum)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOTaskLabelEnum2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐTaskLabelEnum(ctx context.Context, sel ast.SelectionSet, v *crm_models.TaskLabelEnum) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOTaskStatusEnum2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐTaskStatusEnum(ctx context.Context, v interface{}) (*crm_models.TaskStatusEnum, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(crm_models.TaskStatusEnum)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOTaskStatusEnum2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐTaskStatusEnum(ctx context.Context, sel ast.SelectionSet, v *crm_models.TaskStatusEnum) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOTime2timeᚐTime(ctx context.Context, v interface{}) (time.Time, error) {
	res, err := graphql.UnmarshalTime(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOTime2timeᚐTime(ctx context.Context, sel ast.SelectionSet, v time.Time) graphql.Marshaler {
	res := graphql.MarshalTime(v)
	return res
}

func (ec *executionContext) unmarshalOTime2ᚖtimeᚐTime(ctx context.Context, v interface{}) (*time.Time, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalTime(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOTime2ᚖtimeᚐTime(ctx context.Context, sel ast.SelectionSet, v *time.Time) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalTime(*v)
	return res
}

func (ec *executionContext) unmarshalOToiletTypeEnum2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐToiletTypeEnum(ctx context.Context, v interface{}) (*crm_models.ToiletTypeEnum, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(crm_models.ToiletTypeEnum)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOToiletTypeEnum2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐToiletTypeEnum(ctx context.Context, sel ast.SelectionSet, v *crm_models.ToiletTypeEnum) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOUpload2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚐUpload(ctx context.Context, v interface{}) (*graphql.Upload, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalUpload(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOUpload2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚐUpload(ctx context.Context, sel ast.SelectionSet, v *graphql.Upload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalUpload(*v)
	return res
}

func (ec *executionContext) marshalOVillage2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐVillage(ctx context.Context, sel ast.SelectionSet, v *crm_models.Village) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Village(ctx, sel, v)
}

func (ec *executionContext) unmarshalOVillageFilter2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋcrmᚑfacadeᚋmodelsᚐVillageFilter(ctx context.Context, v interface{}) (*crm_models.VillageFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputVillageFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.EnumValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Field) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx context.Context, sel ast.SelectionSet, v *introspection.Schema) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Schema(ctx, sel, v)
}

func (ec *executionContext) marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

// endregion ***************************** type.gotpl *****************************
