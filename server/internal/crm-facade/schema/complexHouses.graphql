type ComplexHouse {
  id: ID!

  complex: Complex @goField(forceResolver: true)

  title: String!
  description: String!
  address: String!
  lat: Float
  lon: Float
  cadastrNumber: String
  seoText: String
  youtubeLink: String
  tourLink: String

  isReady: Boolean
  readinessQuarter: QuarterEnum
  readinessYear: Int

  images: [Image!] @goField(forceResolver: true)
  documents: [Document!] @goField(forceResolver: true)
  projectDeclarations: [Document!] @goField(forceResolver: true)

  publicationStatus: PublicationStatusEnum

  internalInfo: String

  isDeleted: Boolean

  createdAt: Time!
  updatedAt: Time!
}

type ComplexHouseConnection {
  totalCount: Int!
  edges: [ComplexHouseEdge!]!
  nodes: [ComplexHouse!]!
  pageInfo: PageInfo!
}

type ComplexHouseEdge {
  node: ComplexHouse!
  cursor: Cursor!
}

input ComplexHouseInput {
  id: ID @validate(constraint: "omitempty,mongodb")

  complexID: ID @validate(constraint: "omitempty,mongodb")

  title: String! @validate(constraint: "required,min=3,max=256")
  description: String! @validate(constraint: "required,min=3,max=4096")
  address: String! @validate(constraint: "required,min=3,max=256")
  lat: Float @validate(constraint: "omitempty,latitude")
  lon: Float @validate(constraint: "omitempty,longitude")
  cadastrNumber: String @validate(constraint: "omitempty,max=20")
  seoText: String @validate(constraint: "omitempty,max=1024")
  youtubeLink: String @validate(constraint: "omitempty,url")
  tourLink: String @validate(constraint: "omitempty,url")

  isReady: Boolean @validate(constraint: "omitempty,boolean")
  readinessQuarter: QuarterEnum @validate(constraint: "omitempty")
  readinessYear: Int @validate(constraint: "omitempty,gte=1800,lte=3000")

  images: [ImageInput!] @validate(constraint: "omitempty")
  documents: [DocumentInput!] @validate(constraint: "omitempty")
  projectDeclarations: [DocumentInput!] @validate(constraint: "omitempty")

  publicationStatus: PublicationStatusEnum @validate(constraint: "omitempty")

  internalInfo: String @validate(constraint: "omitempty,max=256")
}

input ComplexHouseFilter {
  complexID: ID @validate(constraint: "mongodb")
  isDeleted: Boolean @validate(constraint: "boolean")
  publicationStatus: PublicationStatusEnum
  withPhotos: Boolean @validate(constraint: "boolean")
}

extend type Query {
  """
  Запрос списка ЖК
  """
  complexHouses(
    """
    Перечень идентификаторов для ограничения выборки
    """
    ids: [ID!] @validate(constraint: "dive,required,mongodb")
    """
    Начало для постраничной навигации
    """
    start: Int @validate(constraint: "number,gte=0")
    """
    Количество элементов для постраничной навигации
    """
    limit: Int @validate(constraint: "number,gte=1")
    """
    Режим сортировки
    """
    sort: Sort
    """
    Ключевые слова для полнотекстового поиска
    """
    search: String @validate(constraint: "max=32")
    """
    Дополнительные параметры фильтрации
    """
    filter: ComplexHouseFilter
  ): ComplexHouseConnection! @auth

  """
  Запрос ЖК по идентификатору
  """
  complexHouse(
    id: ID! @validate(constraint: "required,mongodb")
  ): ComplexHouse! @auth
}

extend type Mutation {
  """
  Создание/Редактирование новостройки
  """
  saveComplexHouse(input: ComplexHouseInput!): Boolean! @auth

  """
  Удаление новостройки по идентификатору
  """
  deleteComplexHouse(id: ID!): Boolean! @auth

  """
  Массовое удаление новостройки по идентификаторам
  """
  bulkDeleteComplexHouses(ids: [ID!]!): Boolean! @auth
}
