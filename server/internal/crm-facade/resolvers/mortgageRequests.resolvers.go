package crm_resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.47

import (
	"context"

	crm_gateway "github.com/pinks-agency/ecn/server/internal/crm-facade/gateway"
	crm_models "github.com/pinks-agency/ecn/server/internal/crm-facade/models"
	sales_entity "github.com/pinks-agency/ecn/server/pkg/sales/entity"
	"github.com/pinks-agency/ecn/server/utils"
)

// Contact is the resolver for the contact field.
func (r *mortgageRequestResolver) Contact(ctx context.Context, obj *crm_models.MortgageRequest) (*crm_models.Contact, error) {
	if obj.ContactID != nil {
		data, err := r.SalesService.GetContactByID(ctx, *obj.ContactID)
		if err != nil {
			return nil, nil
		}
		return new(crm_models.Contact).FromEntity(data), nil
	}

	return nil, nil
}

// Banks is the resolver for the banks field.
func (r *mortgageRequestResolver) Banks(ctx context.Context, obj *crm_models.MortgageRequest) ([]*crm_models.Bank, error) {
	result := make([]*crm_models.Bank, 0, len(obj.BankIDs))

	for _, bankId := range obj.BankIDs {
		result = append(result, &crm_models.Bank{ID: bankId, Title: utils.Pointer("Title")})
	}

	return result, nil
}

// MortgageBroker is the resolver for the mortgageBroker field.
func (r *mortgageRequestResolver) MortgageBroker(ctx context.Context, obj *crm_models.MortgageRequest) (*crm_models.Employee, error) {
	if obj.MortgageBrokerID != nil {
		data, err := r.StaffService.GetEmployeeByID(ctx, *obj.MortgageBrokerID)
		if err != nil {
			return nil, nil
		}
		return new(crm_models.Employee).FromEntity(data), nil
	}

	return nil, nil
}

// Agent is the resolver for the agent field.
func (r *mortgageRequestResolver) Agent(ctx context.Context, obj *crm_models.MortgageRequest) (*crm_models.Employee, error) {
	if obj.AgentID != nil {
		data, err := r.StaffService.GetEmployeeByID(ctx, *obj.AgentID)
		if err != nil {
			return nil, nil
		}
		return new(crm_models.Employee).FromEntity(data), nil
	}

	return nil, nil
}

// Deal is the resolver for the deal field.
func (r *mortgageRequestResolver) Deal(ctx context.Context, obj *crm_models.MortgageRequest) (*crm_models.Deal, error) {
	if obj.DealID != nil {
		data, err := r.SalesService.GetDealByID(ctx, *obj.DealID)
		if err != nil {
			return nil, nil
		}
		return new(crm_models.Deal).FromEntity(data), nil
	}

	return nil, nil
}

// Property is the resolver for the property field.
func (r *mortgageRequestResolver) Property(ctx context.Context, obj *crm_models.MortgageRequest) (*crm_models.Property, error) {
	if obj.PropertyID != nil {
		data, err := r.EstateService.GetPropertyByID(ctx, *obj.PropertyID)
		if err != nil {
			return nil, nil
		}
		return new(crm_models.Property).FromEntity(data), nil
	}

	return nil, nil
}

// Contracts is the resolver for the contracts field.
func (r *mortgageRequestResolver) Contracts(ctx context.Context, obj *crm_models.MortgageRequest) ([]*crm_models.Document, error) {
	result := make([]*crm_models.Document, 0, len(obj.DocumentIDs))

	for _, docId := range obj.DocumentIDs {
		data, err := r.ExchangeService.GetDocumentByID(ctx, docId)
		if err != nil {
			return nil, nil
		}
		result = append(result, new(crm_models.Document).FromEntity(data))
	}

	return result, nil
}

// Documents is the resolver for the documents field.
func (r *mortgageRequestResolver) Documents(ctx context.Context, obj *crm_models.MortgageRequest) ([]*crm_models.Document, error) {
	result := make([]*crm_models.Document, 0, len(obj.DocumentIDs))

	for _, docId := range obj.DocumentIDs {
		data, err := r.ExchangeService.GetDocumentByID(ctx, docId)
		if err != nil {
			return nil, nil
		}
		result = append(result, new(crm_models.Document).FromEntity(data))
	}

	return result, nil
}

// SaveMortgageRequest is the resolver for the saveMortgageRequest field.
func (r *mutationResolver) SaveMortgageRequest(ctx context.Context, input crm_models.MortgageRequestInput) (bool, error) {
	if _, err := r.SalesService.SaveMortgageRequest(ctx, *input.ToEntity()); err != nil {
		return false, err
	}
	return true, nil
}

// DeleteMortgageRequest is the resolver for the deleteMortgageRequest field.
func (r *mutationResolver) DeleteMortgageRequest(ctx context.Context, id string) (bool, error) {
	if err := r.SalesService.DeleteMortgageRequest(ctx, id); err != nil {
		return false, err
	}
	return true, nil
}

// ChangeMortgageRequestStatus is the resolver for the changeMortgageRequestStatus field.
func (r *mutationResolver) ChangeMortgageRequestStatus(ctx context.Context, id string, status crm_models.MortgageRequestStatusEnum) (bool, error) {
	if err := r.SalesService.ChangeMortgageRequestStatus(ctx, id, status.String()); err != nil {
		return false, err
	}
	return true, nil
}

// BulkChangeMortgageRequestsStatus is the resolver for the bulkChangeMortgageRequestsStatus field.
func (r *mutationResolver) BulkChangeMortgageRequestsStatus(ctx context.Context, ids []string, status crm_models.MortgageRequestStatusEnum) (bool, error) {
	if err := r.SalesService.BulkChangeMortgageRequestsStatus(ctx, ids, status.String()); err != nil {
		return false, err
	}
	return true, nil
}

// BulkDeleteMortgageRequests is the resolver for the bulkDeleteMortgageRequests field.
func (r *mutationResolver) BulkDeleteMortgageRequests(ctx context.Context, ids []string) (bool, error) {
	if err := r.SalesService.BulkDeleteMortgageRequests(ctx, ids); err != nil {
		return false, err
	}
	return true, nil
}

// MortgageRequests is the resolver for the mortgageRequests field.
func (r *queryResolver) MortgageRequests(ctx context.Context, ids []string, start *int, limit *int, sort *crm_models.Sort, search *string, filter *crm_models.MortgageRequestFilter) (*crm_models.MortgageRequestConnection, error) {
	mortgageRequestFilter := &sales_entity.MortgageRequestFilter{
		Keyword: search,
	}

	if filter != nil {
		mortgageRequestFilter.Status = (*sales_entity.MortgageRequestStatus)(filter.Status)
		mortgageRequestFilter.Contact = filter.Contact
		mortgageRequestFilter.MortgageBroker = filter.MortgageBroker
		mortgageRequestFilter.Agent = filter.Agent
		mortgageRequestFilter.Property = filter.Property
		mortgageRequestFilter.Deal = filter.Deal
		mortgageRequestFilter.Amount = filter.Amount
		mortgageRequestFilter.Period = filter.Period
		mortgageRequestFilter.FirstDeposit = filter.FirstDeposit
		mortgageRequestFilter.Percentage = filter.Percentage

		if filter.SendDate != nil {
			mortgageRequestFilter.SendDate = *filter.SendDate
		}

		if filter.ResponseDate != nil {
			mortgageRequestFilter.ResponseDate = *filter.ResponseDate
		}

		if filter.CreatedAtMin != nil {
			mortgageRequestFilter.CreatedAtMin = *filter.CreatedAtMin
		}

		if filter.CreatedAtMax != nil {
			mortgageRequestFilter.CreatedAtMax = *filter.CreatedAtMax
		}
	}

	data, total, err := r.SalesService.SearchMortgageRequests(ctx, start, limit, sales_entity.MortgageRequestSortDefault, mortgageRequestFilter)
	if err != nil {
		return nil, err
	}

	var nodes []*crm_models.MortgageRequest
	for _, v := range data {
		nodes = append(nodes, new(crm_models.MortgageRequest).FromEntity(v))
	}

	return &crm_models.MortgageRequestConnection{
		TotalCount: total,
		Nodes:      nodes,
		PageInfo:   &crm_models.PageInfo{},
	}, nil
}

// MortgageRequest is the resolver for the mortgageRequest field.
func (r *queryResolver) MortgageRequest(ctx context.Context, id string) (*crm_models.MortgageRequest, error) {
	mortgageRequest, err := r.SalesService.GetMortgageRequestByID(ctx, id)
	if err != nil {
		return nil, err
	}
	return new(crm_models.MortgageRequest).FromEntity(mortgageRequest), nil
}

// Contracts is the resolver for the contracts field.
func (r *mortgageRequestInputResolver) Contracts(ctx context.Context, obj *crm_models.MortgageRequestInput, data []*crm_models.DocumentInput) error {
	for _, v := range data {
		if v.File != nil {
			result, err := r.ExchangeService.UploadDocument(ctx, *v.ToEntity())
			if err != nil {
				return err
			}

			obj.ContractIDs = append(obj.ContractIDs, result.ID)
		} else if v.ID != "" {
			obj.ContractIDs = append(obj.ContractIDs, v.ID)
		}
	}

	return nil
}

// Documents is the resolver for the documents field.
func (r *mortgageRequestInputResolver) Documents(ctx context.Context, obj *crm_models.MortgageRequestInput, data []*crm_models.DocumentInput) error {
	for _, v := range data {
		if v.File != nil {
			result, err := r.ExchangeService.UploadDocument(ctx, *v.ToEntity())
			if err != nil {
				return err
			}

			obj.DocumentIDs = append(obj.DocumentIDs, result.ID)
		} else if v.ID != "" {
			obj.DocumentIDs = append(obj.DocumentIDs, v.ID)
		}
	}
	return nil
}

// MortgageRequest returns crm_gateway.MortgageRequestResolver implementation.
func (r *Resolver) MortgageRequest() crm_gateway.MortgageRequestResolver {
	return &mortgageRequestResolver{r}
}

// MortgageRequestInput returns crm_gateway.MortgageRequestInputResolver implementation.
func (r *Resolver) MortgageRequestInput() crm_gateway.MortgageRequestInputResolver {
	return &mortgageRequestInputResolver{r}
}

type mortgageRequestResolver struct{ *Resolver }
type mortgageRequestInputResolver struct{ *Resolver }
