package crm_resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.47

import (
	"context"
	"fmt"

	crm_gateway "github.com/pinks-agency/ecn/server/internal/crm-facade/gateway"
	crm_models "github.com/pinks-agency/ecn/server/internal/crm-facade/models"
	estate_entity "github.com/pinks-agency/ecn/server/pkg/estate/entity"
)

// Logo is the resolver for the logo field.
func (r *developerResolver) Logo(ctx context.Context, obj *crm_models.Developer) (*crm_models.Image, error) {
	if obj != nil && obj.LogoID != nil {
		data, err := r.ExchangeService.GetImageByID(ctx, *obj.LogoID)
		if err != nil {
			return nil, nil
		}

		return new(crm_models.Image).FromEntity(data), nil
	}

	return nil, nil
}

// SaveDeveloper is the resolver for the saveDeveloper field.
func (r *mutationResolver) SaveDeveloper(ctx context.Context, input crm_models.DeveloperInput) (bool, error) {
	_, err := r.EstateService.SaveDeveloper(ctx, *input.ToEntity())
	if err != nil {
		return false, err
	}

	return true, nil
}

// DeleteDeveloper is the resolver for the deleteDeveloper field.
func (r *mutationResolver) DeleteDeveloper(ctx context.Context, id string) (bool, error) {
	if err := r.EstateService.DeleteDeveloper(ctx, id); err != nil {
		return false, err
	}

	return true, nil
}

// BulkDeleteDevelopers is the resolver for the bulkDeleteDevelopers field.
func (r *mutationResolver) BulkDeleteDevelopers(ctx context.Context, ids []string) (bool, error) {
	if err := r.EstateService.BulkDeleteDevelopers(ctx, ids); err != nil {
		return false, err
	}

	return true, nil
}

// Developers is the resolver for the developers field.
func (r *queryResolver) Developers(ctx context.Context, ids []string, start *int, limit *int, sort *crm_models.Sort, search *string, filter *crm_models.DeveloperFilterInput) (*crm_models.DeveloperConnection, error) {
	developerFilter := &estate_entity.DeveloperFilter{
		Keyword: search,
	}
	if filter != nil {
		developerFilter.IsDeleted = filter.IsDeleted
	}

	data, total, err := r.EstateService.SearchDevelopers(ctx, start, limit, estate_entity.DeveloperSortDefault, developerFilter)
	if err != nil {
		return nil, err
	}

	var nodes []*crm_models.Developer
	for _, v := range data {
		nodes = append(nodes, new(crm_models.Developer).FromEntity(v))
	}

	return &crm_models.DeveloperConnection{
		TotalCount: total,
		Nodes:      nodes,
		PageInfo:   &crm_models.PageInfo{},
	}, nil
}

// Developer is the resolver for the developer field.
func (r *queryResolver) Developer(ctx context.Context, id string) (*crm_models.Developer, error) {
	data, err := r.EstateService.GetDeveloperByID(ctx, id)
	if err != nil {
		return nil, err
	}

	return new(crm_models.Developer).FromEntity(data), nil
}

// Logo is the resolver for the logo field.
func (r *developerInputResolver) Logo(ctx context.Context, obj *crm_models.DeveloperInput, data *crm_models.ImageInput) error {
	if data != nil {
		if data.File != nil {
			result, err := r.ExchangeService.UploadImage(ctx, *data.ToEntity())
			if err != nil {
				return err
			}
			obj.LogoID = &result.ID
		} else if data.ID != "" {
			obj.LogoID = &data.ID
		}
	}
	return nil
}

// Developer returns crm_gateway.DeveloperResolver implementation.
func (r *Resolver) Developer() crm_gateway.DeveloperResolver { return &developerResolver{r} }

// DeveloperInput returns crm_gateway.DeveloperInputResolver implementation.
func (r *Resolver) DeveloperInput() crm_gateway.DeveloperInputResolver {
	return &developerInputResolver{r}
}

type developerResolver struct{ *Resolver }
type developerInputResolver struct{ *Resolver }

// !!! WARNING !!!
// The code below was going to be deleted when updating resolvers. It has been copied here so you have
// one last chance to move it out of harms way if you want. There are two reasons this happens:
//   - When renaming or deleting a resolver the old code will be put in here. You can safely delete
//     it when you're done.
//   - You have helper methods in this file. Move them out to keep these resolver files clean.
func (r *developerResolver) IsDeleted(ctx context.Context, obj *crm_models.Developer) (*bool, error) {
	panic(fmt.Errorf("not implemented: IsDeleted - isDeleted"))
}
