package crm_resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.47

import (
	"context"

	crm_models "github.com/pinks-agency/ecn/server/internal/crm-facade/models"
	staff_entity "github.com/pinks-agency/ecn/server/pkg/staff/entity"
)

// SavePosition is the resolver for the savePosition field.
func (r *mutationResolver) SavePosition(ctx context.Context, input crm_models.PositionInput) (bool, error) {
	_, err := r.StaffService.SavePosition(ctx, *input.ToEntity())
	if err != nil {
		return false, err
	}

	return true, nil
}

// DeletePosition is the resolver for the deletePosition field.
func (r *mutationResolver) DeletePosition(ctx context.Context, id string) (bool, error) {
	if err := r.StaffService.DeletePosition(ctx, id); err != nil {
		return false, err
	}

	return true, nil
}

// Positions is the resolver for the positions field.
func (r *queryResolver) Positions(ctx context.Context, ids []string, start *int, limit *int, sort *crm_models.Sort, search *string) (*crm_models.PositionConnection, error) {
	data, total, err := r.StaffService.SearchPositions(ctx, start, limit, staff_entity.PositionSortDefault, &staff_entity.PositionFilter{
		Keyword: search,
	})
	if err != nil {
		return nil, err
	}

	var nodes []*crm_models.Position
	for _, v := range data {
		nodes = append(nodes, new(crm_models.Position).FromEntity(v))
	}

	return &crm_models.PositionConnection{
		TotalCount: total,
		Nodes:      nodes,
		PageInfo:   &crm_models.PageInfo{},
	}, nil
}

// Position is the resolver for the position field.
func (r *queryResolver) Position(ctx context.Context, id string) (*crm_models.Position, error) {
	data, err := r.StaffService.GetPositionByID(ctx, id)
	if err != nil {
		return nil, err
	}

	return new(crm_models.Position).FromEntity(data), nil
}
