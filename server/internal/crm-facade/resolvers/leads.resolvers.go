package crm_resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.47

import (
	"context"

	crm_gateway "github.com/pinks-agency/ecn/server/internal/crm-facade/gateway"
	crm_models "github.com/pinks-agency/ecn/server/internal/crm-facade/models"
	sales_entity "github.com/pinks-agency/ecn/server/pkg/sales/entity"
)

// Agents is the resolver for the agents field.
func (r *leadResolver) Agents(ctx context.Context, obj *crm_models.Lead) ([]*crm_models.Employee, error) {
	result := make([]*crm_models.Employee, 0, len(obj.AgentIDs))

	for _, agentId := range obj.AgentIDs {
		data, err := r.StaffService.GetEmployeeByID(ctx, agentId)
		if err != nil {
			return nil, nil
		}
		result = append(result, new(crm_models.Employee).FromEntity(data))
	}

	return result, nil
}

// SaveLead is the resolver for the saveLead field.
func (r *mutationResolver) SaveLead(ctx context.Context, input crm_models.LeadInput) (bool, error) {
	if _, err := r.SalesService.SaveLead(ctx, *input.ToEntity()); err != nil {
		return false, err
	}
	return true, nil
}

// DeleteLead is the resolver for the deleteLead field.
func (r *mutationResolver) DeleteLead(ctx context.Context, id string) (bool, error) {
	if err := r.SalesService.DeleteLead(ctx, id); err != nil {
		return false, err
	}

	return true, nil
}

// ChangeLeadStatus is the resolver for the changeLeadStatus field.
func (r *mutationResolver) ChangeLeadStatus(ctx context.Context, id string, status crm_models.LeadStatusEnum, comment *string) (bool, error) {
	if err := r.SalesService.ChangeLeadStatus(ctx, id, status.String(), comment); err != nil {
		return false, err
	}
	return true, nil
}

// BulkChangeLeadsStatus is the resolver for the bulkChangeLeadsStatus field.
func (r *mutationResolver) BulkChangeLeadsStatus(ctx context.Context, ids []string, status crm_models.LeadStatusEnum, comment *string) (bool, error) {
	if err := r.SalesService.BulkChangeLeadsStatus(ctx, ids, status.String(), comment); err != nil {
		return false, err
	}
	return true, nil
}

// BulkDeleteLeads is the resolver for the bulkDeleteLeads field.
func (r *mutationResolver) BulkDeleteLeads(ctx context.Context, ids []string) (bool, error) {
	if err := r.SalesService.BulkDeleteLeads(ctx, ids); err != nil {
		return false, err
	}
	return true, nil
}

// Leads is the resolver for the leads field.
func (r *queryResolver) Leads(ctx context.Context, ids []string, start *int, limit *int, sort *crm_models.Sort, search *string, filter *crm_models.LeadFilter) (*crm_models.LeadConnection, error) {
	leadFilter := &sales_entity.LeadFilter{
		Keyword: search,
	}

	if filter != nil {
		leadFilter.Phone = filter.Phone
		leadFilter.Email = filter.Email
		leadFilter.Company = filter.Company
		leadFilter.Status = (*sales_entity.LeadStatus)(filter.Status)
		leadFilter.Type = (*sales_entity.LeadType)(filter.Type)

		if filter.CreatedAtMin != nil {
			leadFilter.CreatedAtMin = *filter.CreatedAtMin
		}

		if filter.CreatedAtMax != nil {
			leadFilter.CreatedAtMax = *filter.CreatedAtMax
		}
	}

	data, total, err := r.SalesService.SearchLeads(ctx, start, limit, sales_entity.LeadSortDefault, leadFilter)
	if err != nil {
		return nil, err
	}

	var nodes []*crm_models.Lead
	for _, v := range data {
		nodes = append(nodes, new(crm_models.Lead).FromEntity(v))
	}

	return &crm_models.LeadConnection{
		TotalCount: total,
		Nodes:      nodes,
		PageInfo:   &crm_models.PageInfo{},
	}, nil
}

// Lead is the resolver for the lead field.
func (r *queryResolver) Lead(ctx context.Context, id string) (*crm_models.Lead, error) {
	lead, err := r.SalesService.GetLeadByID(ctx, id)
	if err != nil {
		return nil, err
	}
	return new(crm_models.Lead).FromEntity(lead), nil
}

// Lead returns crm_gateway.LeadResolver implementation.
func (r *Resolver) Lead() crm_gateway.LeadResolver { return &leadResolver{r} }

type leadResolver struct{ *Resolver }
