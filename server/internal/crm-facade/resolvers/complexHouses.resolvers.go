package crm_resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.47

import (
	"context"

	crm_gateway "github.com/pinks-agency/ecn/server/internal/crm-facade/gateway"
	crm_models "github.com/pinks-agency/ecn/server/internal/crm-facade/models"
	estate_entity "github.com/pinks-agency/ecn/server/pkg/estate/entity"
	shared_entity "github.com/pinks-agency/ecn/server/pkg/shared/entity"
)

// Complex is the resolver for the complex field.
func (r *complexHouseResolver) Complex(ctx context.Context, obj *crm_models.ComplexHouse) (*crm_models.Complex, error) {
	if obj.ComplexID != nil {
		data, err := r.EstateService.GetComplexByID(ctx, *obj.ComplexID)
		if err != nil {
			return nil, err
		}

		return new(crm_models.Complex).FromEntity(data), nil
	}

	return nil, nil
}

// Images is the resolver for the images field.
func (r *complexHouseResolver) Images(ctx context.Context, obj *crm_models.ComplexHouse) ([]*crm_models.Image, error) {
	result := make([]*crm_models.Image, 0, len(obj.ImageIDs))

	for _, v := range obj.ImageIDs {
		data, err := r.ExchangeService.GetImageByID(ctx, v)
		if err != nil {
			return nil, nil
		}

		result = append(result, new(crm_models.Image).FromEntity(data))
	}

	return result, nil
}

// Documents is the resolver for the documents field.
func (r *complexHouseResolver) Documents(ctx context.Context, obj *crm_models.ComplexHouse) ([]*crm_models.Document, error) {
	result := make([]*crm_models.Document, 0, len(obj.DocumentIDs))

	for _, v := range obj.DocumentIDs {
		data, err := r.ExchangeService.GetDocumentByID(ctx, v)
		if err != nil {
			return nil, nil
		}

		result = append(result, new(crm_models.Document).FromEntity(data))
	}

	return result, nil
}

// ProjectDeclarations is the resolver for the projectDeclarations field.
func (r *complexHouseResolver) ProjectDeclarations(ctx context.Context, obj *crm_models.ComplexHouse) ([]*crm_models.Document, error) {
	result := make([]*crm_models.Document, 0, len(obj.ProjectDeclarationIDs))

	for _, v := range obj.ProjectDeclarationIDs {
		data, err := r.ExchangeService.GetDocumentByID(ctx, v)
		if err != nil {
			return nil, nil
		}

		result = append(result, new(crm_models.Document).FromEntity(data))
	}

	return result, nil
}

// SaveComplexHouse is the resolver for the saveComplexHouse field.
func (r *mutationResolver) SaveComplexHouse(ctx context.Context, input crm_models.ComplexHouseInput) (bool, error) {
	_, err := r.EstateService.SaveComplexHouse(ctx, *input.ToEntity())
	if err != nil {
		return false, err
	}

	return true, nil
}

// DeleteComplexHouse is the resolver for the deleteComplexHouse field.
func (r *mutationResolver) DeleteComplexHouse(ctx context.Context, id string) (bool, error) {
	if err := r.EstateService.DeleteComplexHouse(ctx, id); err != nil {
		return false, err
	}

	return true, nil
}

// BulkDeleteComplexHouses is the resolver for the bulkDeleteComplexHouses field.
func (r *mutationResolver) BulkDeleteComplexHouses(ctx context.Context, ids []string) (bool, error) {
	if err := r.EstateService.BulkDeleteComplexHouses(ctx, ids); err != nil {
		return false, err
	}

	return true, nil
}

// ComplexHouses is the resolver for the complexHouses field.
func (r *queryResolver) ComplexHouses(ctx context.Context, ids []string, start *int, limit *int, sort *crm_models.Sort, search *string, filter *crm_models.ComplexHouseFilter) (*crm_models.ComplexHouseConnection, error) {
	complexHouseFilter := &estate_entity.ComplexHouseFilter{
		Keyword: search,
	}
	if filter != nil {
		complexHouseFilter.ComplexID = filter.ComplexID
		complexHouseFilter.IsDeleted = filter.IsDeleted
		complexHouseFilter.WithPhotos = filter.WithPhotos

		if filter.PublicationStatus != nil {
			complexHouseFilter.PublicationStatus = (*shared_entity.PublicationStatus)(filter.PublicationStatus)
		}
	}

	data, total, err := r.EstateService.SearchComplexHouses(ctx, start, limit, estate_entity.ComplexHouseSortDefault, complexHouseFilter)
	if err != nil {
		return nil, err
	}

	var nodes []*crm_models.ComplexHouse
	for _, v := range data {
		nodes = append(nodes, new(crm_models.ComplexHouse).FromEntity(v))
	}

	return &crm_models.ComplexHouseConnection{
		TotalCount: total,
		Nodes:      nodes,
		PageInfo:   &crm_models.PageInfo{},
	}, nil
}

// ComplexHouse is the resolver for the complexHouse field.
func (r *queryResolver) ComplexHouse(ctx context.Context, id string) (*crm_models.ComplexHouse, error) {
	data, err := r.EstateService.GetComplexHouseByID(ctx, id)
	if err != nil {
		return nil, err
	}

	return new(crm_models.ComplexHouse).FromEntity(data), nil
}

// Images is the resolver for the images field.
func (r *complexHouseInputResolver) Images(ctx context.Context, obj *crm_models.ComplexHouseInput, data []*crm_models.ImageInput) error {
	for _, v := range data {
		if v.File != nil {
			result, err := r.ExchangeService.UploadImage(ctx, *v.ToEntity())
			if err != nil {
				return err
			}

			obj.ImageIDs = append(obj.ImageIDs, result.ID)
		} else if v.ID != "" {
			obj.ImageIDs = append(obj.ImageIDs, v.ID)
		}
	}

	return nil
}

// Documents is the resolver for the documents field.
func (r *complexHouseInputResolver) Documents(ctx context.Context, obj *crm_models.ComplexHouseInput, data []*crm_models.DocumentInput) error {
	for _, v := range data {
		if v.File != nil {
			result, err := r.ExchangeService.UploadDocument(ctx, *v.ToEntity())
			if err != nil {
				return err
			}

			obj.DocumentIDs = append(obj.DocumentIDs, result.ID)
		} else if v.ID != "" {
			obj.DocumentIDs = append(obj.DocumentIDs, v.ID)
		}
	}

	return nil
}

// ProjectDeclarations is the resolver for the projectDeclarations field.
func (r *complexHouseInputResolver) ProjectDeclarations(ctx context.Context, obj *crm_models.ComplexHouseInput, data []*crm_models.DocumentInput) error {
	for _, v := range data {
		if v.File != nil {
			result, err := r.ExchangeService.UploadDocument(ctx, *v.ToEntity())
			if err != nil {
				return err
			}

			obj.ProjectDeclarationIDs = append(obj.ProjectDeclarationIDs, result.ID)
		} else if v.ID != "" {
			obj.ProjectDeclarationIDs = append(obj.ProjectDeclarationIDs, v.ID)
		}
	}

	return nil
}

// ComplexHouse returns crm_gateway.ComplexHouseResolver implementation.
func (r *Resolver) ComplexHouse() crm_gateway.ComplexHouseResolver { return &complexHouseResolver{r} }

// ComplexHouseInput returns crm_gateway.ComplexHouseInputResolver implementation.
func (r *Resolver) ComplexHouseInput() crm_gateway.ComplexHouseInputResolver {
	return &complexHouseInputResolver{r}
}

type complexHouseResolver struct{ *Resolver }
type complexHouseInputResolver struct{ *Resolver }
