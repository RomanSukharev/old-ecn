package crm_resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.47

import (
	"context"

	crm_gateway "github.com/pinks-agency/ecn/server/internal/crm-facade/gateway"
	crm_models "github.com/pinks-agency/ecn/server/internal/crm-facade/models"
	sales_entity "github.com/pinks-agency/ecn/server/pkg/sales/entity"
)

// SaveTask is the resolver for the saveTask field.
func (r *mutationResolver) SaveTask(ctx context.Context, input crm_models.TaskInput) (bool, error) {
	if _, err := r.SalesService.SaveTask(ctx, *input.ToEntity()); err != nil {
		return false, err
	}

	return true, nil
}

// DeleteTask is the resolver for the deleteTask field.
func (r *mutationResolver) DeleteTask(ctx context.Context, id string) (bool, error) {
	if err := r.SalesService.DeleteTask(ctx, id); err != nil {
		return false, err
	}
	return true, nil
}

// CompleteTask is the resolver for the completeTask field.
func (r *mutationResolver) CompleteTask(ctx context.Context, id string) (bool, error) {
	if err := r.SalesService.CompleteTask(ctx, id); err != nil {
		return false, err
	}
	return true, nil
}

// BulkCompleteTasks is the resolver for the bulkCompleteTasks field.
func (r *mutationResolver) BulkCompleteTasks(ctx context.Context, ids []string) (bool, error) {
	if err := r.SalesService.BulkCompleteTasks(ctx, ids); err != nil {
		return false, err
	}
	return true, nil
}

// BulkDeleteTasks is the resolver for the bulkDeleteTasks field.
func (r *mutationResolver) BulkDeleteTasks(ctx context.Context, ids []string) (bool, error) {
	if err := r.SalesService.BulkDeleteTasks(ctx, ids); err != nil {
		return false, err
	}
	return true, nil
}

// Tasks is the resolver for the tasks field.
func (r *queryResolver) Tasks(ctx context.Context, ids []string, start *int, limit *int, sort *crm_models.Sort, search *string, filter *crm_models.TaskFilter) (*crm_models.TaskConnection, error) {
	taskFilter := &sales_entity.TaskFilter{
		Keyword: search,
	}

	if filter != nil {
		taskFilter.Assignee = filter.Assignee
		taskFilter.Reporter = filter.Reporter
		taskFilter.Lead = filter.Lead
		taskFilter.Deal = filter.Deal
		taskFilter.Contact = filter.Contact
		taskFilter.Phone = filter.Phone
		taskFilter.Property = filter.Property
		taskFilter.IsHot = filter.IsHot
		taskFilter.Label = (*sales_entity.TaskLabel)(filter.Label)
		taskFilter.Status = (*sales_entity.TaskStatus)(filter.Status)

		if filter.CreatedAtMin != nil {
			taskFilter.CreatedAtMin = *filter.CreatedAtMin
		}

		if filter.CreatedAtMax != nil {
			taskFilter.CreatedAtMax = *filter.CreatedAtMax
		}
	}

	data, total, err := r.SalesService.SearchTasks(ctx, start, limit, sales_entity.TaskSortDefault, taskFilter)
	if err != nil {
		return nil, err
	}

	var nodes []*crm_models.Task
	for _, v := range data {
		nodes = append(nodes, new(crm_models.Task).FromEntity(v))
	}

	return &crm_models.TaskConnection{
		TotalCount: total,
		Nodes:      nodes,
		PageInfo:   &crm_models.PageInfo{},
	}, nil
}

// Task is the resolver for the task field.
func (r *queryResolver) Task(ctx context.Context, id string) (*crm_models.Task, error) {
	data, err := r.SalesService.GetTaskByID(ctx, id)
	if err != nil {
		return nil, err
	}
	return new(crm_models.Task).FromEntity(data), nil
}

// Assignee is the resolver for the assignee field.
func (r *taskResolver) Assignee(ctx context.Context, obj *crm_models.Task) (*crm_models.Employee, error) {
	if obj.AssigneeID != nil {
		data, err := r.StaffService.GetEmployeeByID(ctx, *obj.AssigneeID)
		if err != nil {
			return nil, nil
		}
		return new(crm_models.Employee).FromEntity(data), nil
	}

	return nil, nil
}

// Reporter is the resolver for the reporter field.
func (r *taskResolver) Reporter(ctx context.Context, obj *crm_models.Task) (*crm_models.Employee, error) {
	if obj.ReporterID != nil {
		data, err := r.StaffService.GetEmployeeByID(ctx, *obj.ReporterID)
		if err != nil {
			return nil, nil
		}
		return new(crm_models.Employee).FromEntity(data), nil
	}

	return nil, nil
}

// Property is the resolver for the property field.
func (r *taskResolver) Property(ctx context.Context, obj *crm_models.Task) (*crm_models.Property, error) {
	if obj.PropertyID != nil {
		data, err := r.EstateService.GetPropertyByID(ctx, *obj.PropertyID)
		if err != nil {
			return nil, nil
		}
		return new(crm_models.Property).FromEntity(data), nil
	}

	return nil, nil
}

// Contact is the resolver for the contact field.
func (r *taskResolver) Contact(ctx context.Context, obj *crm_models.Task) (*crm_models.Contact, error) {
	if obj.ContactID != nil {
		data, err := r.SalesService.GetContactByID(ctx, *obj.ContactID)
		if err != nil {
			return nil, nil
		}
		return new(crm_models.Contact).FromEntity(data), nil
	}

	return nil, nil
}

// Lead is the resolver for the lead field.
func (r *taskResolver) Lead(ctx context.Context, obj *crm_models.Task) (*crm_models.Lead, error) {
	if obj.LeadID != nil {
		data, err := r.SalesService.GetLeadByID(ctx, *obj.LeadID)
		if err != nil {
			return nil, nil
		}
		return new(crm_models.Lead).FromEntity(data), nil
	}

	return nil, nil
}

// Deal is the resolver for the deal field.
func (r *taskResolver) Deal(ctx context.Context, obj *crm_models.Task) (*crm_models.Deal, error) {
	if obj.DealID != nil {
		data, err := r.SalesService.GetDealByID(ctx, *obj.DealID)
		if err != nil {
			return nil, nil
		}
		return new(crm_models.Deal).FromEntity(data), nil
	}

	return nil, nil
}

// Task returns crm_gateway.TaskResolver implementation.
func (r *Resolver) Task() crm_gateway.TaskResolver { return &taskResolver{r} }

type taskResolver struct{ *Resolver }
