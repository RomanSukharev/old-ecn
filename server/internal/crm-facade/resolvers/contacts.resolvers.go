package crm_resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.47

import (
	"context"

	crm_gateway "github.com/pinks-agency/ecn/server/internal/crm-facade/gateway"
	crm_models "github.com/pinks-agency/ecn/server/internal/crm-facade/models"
	sales_entity "github.com/pinks-agency/ecn/server/pkg/sales/entity"
)

// Properties is the resolver for the properties field.
func (r *contactResolver) Properties(ctx context.Context, obj *crm_models.Contact) ([]*crm_models.Property, error) {
	result := make([]*crm_models.Property, 0, len(obj.PropertyIDs))

	for _, propertyId := range obj.PropertyIDs {
		data, err := r.EstateService.GetPropertyByID(ctx, propertyId)
		if err != nil {
			return nil, nil
		}
		result = append(result, new(crm_models.Property).FromEntity(data))
	}
	return result, nil
}

// Deals is the resolver for the deals field.
func (r *contactResolver) Deals(ctx context.Context, obj *crm_models.Contact) ([]*crm_models.Deal, error) {
	result := make([]*crm_models.Deal, 0, len(obj.DealIDs))

	for _, dealId := range obj.DealIDs {
		data, err := r.SalesService.GetDealByID(ctx, dealId)
		if err != nil {
			return nil, nil
		}
		result = append(result, new(crm_models.Deal).FromEntity(data))
	}
	return result, nil
}

// Agents is the resolver for the agents field.
func (r *contactResolver) Agents(ctx context.Context, obj *crm_models.Contact) ([]*crm_models.Employee, error) {
	result := make([]*crm_models.Employee, 0, len(obj.AgentIDs))

	for _, agentId := range obj.AgentIDs {
		data, err := r.StaffService.GetEmployeeByID(ctx, agentId)
		if err != nil {
			return nil, nil
		}
		result = append(result, new(crm_models.Employee).FromEntity(data))
	}

	return result, nil
}

// Contracts is the resolver for the contracts field.
func (r *contactResolver) Contracts(ctx context.Context, obj *crm_models.Contact) ([]*crm_models.Document, error) {
	result := make([]*crm_models.Document, 0, len(obj.ContractIDs))

	for _, contractId := range obj.ContractIDs {
		data, err := r.ExchangeService.GetDocumentByID(ctx, contractId)
		if err != nil {
			return nil, nil
		}
		result = append(result, new(crm_models.Document).FromEntity(data))
	}

	return result, nil
}

// Documents is the resolver for the documents field.
func (r *contactResolver) Documents(ctx context.Context, obj *crm_models.Contact) ([]*crm_models.Document, error) {
	result := make([]*crm_models.Document, 0, len(obj.DocumentIDs))

	for _, docId := range obj.DocumentIDs {
		data, err := r.ExchangeService.GetDocumentByID(ctx, docId)
		if err != nil {
			return nil, nil
		}

		result = append(result, new(crm_models.Document).FromEntity(data))
	}

	return result, nil
}

// Lead is the resolver for the lead field.
func (r *contactResolver) Lead(ctx context.Context, obj *crm_models.Contact) (*crm_models.Lead, error) {
	if obj.LeadID != nil {
		data, err := r.SalesService.GetLeadByID(ctx, *obj.LeadID)
		if err != nil {
			return nil, nil
		}
		return new(crm_models.Lead).FromEntity(data), nil
	}

	return nil, nil
}

// SaveContact is the resolver for the saveContact field.
func (r *mutationResolver) SaveContact(ctx context.Context, input crm_models.ContactInput) (bool, error) {
	_, err := r.SalesService.SaveContact(ctx, *input.ToEntity())
	if err != nil {
		return false, err
	}

	return true, nil
}

// DeleteContact is the resolver for the deleteContact field.
func (r *mutationResolver) DeleteContact(ctx context.Context, id string) (bool, error) {
	if err := r.SalesService.DeleteContact(ctx, id); err != nil {
		return false, err
	}

	return true, nil
}

// BulkDeleteContacts is the resolver for the bulkDeleteContacts field.
func (r *mutationResolver) BulkDeleteContacts(ctx context.Context, ids []string) (bool, error) {
	if err := r.SalesService.BulkDeleteContacts(ctx, ids); err != nil {
		return false, err
	}

	return true, nil
}

// Contacts is the resolver for the contacts field.
func (r *queryResolver) Contacts(ctx context.Context, ids []string, start *int, limit *int, sort *crm_models.Sort, search *string, filter *crm_models.ContactFilter) (*crm_models.ContactConnection, error) {
	contactsFilter := &sales_entity.ContactFilter{
		Keyword: search,
	}

	if filter != nil {
		contactsFilter.Phone = filter.Phone
		contactsFilter.Email = filter.Email
		contactsFilter.Company = filter.Company
		contactsFilter.Type = (*sales_entity.CounterPartyType)(filter.Type)
		contactsFilter.Address = filter.Address
		contactsFilter.Employee = filter.Employee

		if filter.CreatedAtMin != nil {
			contactsFilter.CreatedAtMin = *filter.CreatedAtMin
		}

		if filter.CreatedAtMax != nil {
			contactsFilter.CreatedAtMax = *filter.CreatedAtMax
		}
	}

	data, total, err := r.SalesService.SearchContacts(ctx, start, limit, sales_entity.ContactSortDefault, contactsFilter)
	if err != nil {
		return nil, err
	}

	var nodes []*crm_models.Contact
	for _, v := range data {
		nodes = append(nodes, new(crm_models.Contact).FromEntity(v))
	}

	return &crm_models.ContactConnection{
		TotalCount: total,
		Nodes:      nodes,
		PageInfo:   &crm_models.PageInfo{},
	}, nil
}

// Contact is the resolver for the contact field.
func (r *queryResolver) Contact(ctx context.Context, id string) (*crm_models.Contact, error) {
	contact, err := r.SalesService.GetContactByID(ctx, id)
	if err != nil {
		return nil, err
	}
	return new(crm_models.Contact).FromEntity(contact), nil
}

// Contracts is the resolver for the contracts field.
func (r *contactInputResolver) Contracts(ctx context.Context, obj *crm_models.ContactInput, data []*crm_models.DocumentInput) error {
	for _, v := range data {
		if v.File != nil {
			result, err := r.ExchangeService.UploadDocument(ctx, *v.ToEntity())
			if err != nil {
				return err
			}

			obj.ContractIDs = append(obj.ContractIDs, result.ID)
		} else if v.ID != "" {
			obj.ContractIDs = append(obj.ContractIDs, v.ID)
		}
	}
	return nil
}

// Documents is the resolver for the documents field.
func (r *contactInputResolver) Documents(ctx context.Context, obj *crm_models.ContactInput, data []*crm_models.DocumentInput) error {
	for _, v := range data {
		if v.File != nil {
			result, err := r.ExchangeService.UploadDocument(ctx, *v.ToEntity())
			if err != nil {
				return err
			}

			obj.DocumentIDs = append(obj.ContractIDs, result.ID)
		} else if v.ID != "" {
			obj.DocumentIDs = append(obj.ContractIDs, v.ID)
		}
	}

	return nil
}

// Contact returns crm_gateway.ContactResolver implementation.
func (r *Resolver) Contact() crm_gateway.ContactResolver { return &contactResolver{r} }

// ContactInput returns crm_gateway.ContactInputResolver implementation.
func (r *Resolver) ContactInput() crm_gateway.ContactInputResolver { return &contactInputResolver{r} }

type contactResolver struct{ *Resolver }
type contactInputResolver struct{ *Resolver }
