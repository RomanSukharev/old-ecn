package crm_resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.47

import (
	"context"

	crm_gateway "github.com/pinks-agency/ecn/server/internal/crm-facade/gateway"
	crm_models "github.com/pinks-agency/ecn/server/internal/crm-facade/models"
	estate_entity "github.com/pinks-agency/ecn/server/pkg/estate/entity"
	shared_entity "github.com/pinks-agency/ecn/server/pkg/shared/entity"
)

// Developer is the resolver for the developer field.
func (r *complexResolver) Developer(ctx context.Context, obj *crm_models.Complex) (*crm_models.Developer, error) {
	if obj.DeveloperID != nil {
		data, err := r.EstateService.GetDeveloperByID(ctx, *obj.DeveloperID)
		if err != nil {
			return nil, err
		}

		return new(crm_models.Developer).FromEntity(data), nil
	}

	return nil, nil
}

// Images is the resolver for the images field.
func (r *complexResolver) Images(ctx context.Context, obj *crm_models.Complex) ([]*crm_models.Image, error) {
	result := make([]*crm_models.Image, 0, len(obj.ImageIDs))

	for _, v := range obj.ImageIDs {
		data, err := r.ExchangeService.GetImageByID(ctx, v)
		if err != nil {
			return nil, nil
		}

		result = append(result, new(crm_models.Image).FromEntity(data))
	}

	return result, nil
}

// Documents is the resolver for the documents field.
func (r *complexResolver) Documents(ctx context.Context, obj *crm_models.Complex) ([]*crm_models.Document, error) {
	result := make([]*crm_models.Document, 0, len(obj.DocumentIDs))

	for _, v := range obj.DocumentIDs {
		data, err := r.ExchangeService.GetDocumentByID(ctx, v)
		if err != nil {
			return nil, nil
		}

		result = append(result, new(crm_models.Document).FromEntity(data))
	}

	return result, nil
}

// ProjectDeclarations is the resolver for the projectDeclarations field.
func (r *complexResolver) ProjectDeclarations(ctx context.Context, obj *crm_models.Complex) ([]*crm_models.Document, error) {
	result := make([]*crm_models.Document, 0, len(obj.ProjectDeclarationIDs))

	for _, v := range obj.ProjectDeclarationIDs {
		data, err := r.ExchangeService.GetDocumentByID(ctx, v)
		if err != nil {
			return nil, nil
		}

		result = append(result, new(crm_models.Document).FromEntity(data))
	}

	return result, nil
}

// SaveComplex is the resolver for the saveComplex field.
func (r *mutationResolver) SaveComplex(ctx context.Context, input crm_models.ComplexInput) (bool, error) {
	_, err := r.EstateService.SaveComplex(ctx, *input.ToEntity())
	if err != nil {
		return false, err
	}

	return true, nil
}

// DeleteComplex is the resolver for the deleteComplex field.
func (r *mutationResolver) DeleteComplex(ctx context.Context, id string) (bool, error) {
	if err := r.EstateService.DeleteComplex(ctx, id); err != nil {
		return false, err
	}

	return true, nil
}

// BulkDeleteComplexes is the resolver for the bulkDeleteComplexes field.
func (r *mutationResolver) BulkDeleteComplexes(ctx context.Context, ids []string) (bool, error) {
	if err := r.EstateService.BulkDeleteComplexes(ctx, ids); err != nil {
		return false, err
	}

	return true, nil
}

// Complexes is the resolver for the complexes field.
func (r *queryResolver) Complexes(ctx context.Context, ids []string, start *int, limit *int, sort *crm_models.Sort, search *string, filter *crm_models.ComplexFilter) (*crm_models.ComplexConnection, error) {
	complexFilter := &estate_entity.ComplexFilter{
		Keyword: search,
	}
	if filter != nil {
		complexFilter.DeveloperID = filter.DeveloperID
		complexFilter.IsDeleted = filter.IsDeleted
		complexFilter.WithPhotos = filter.WithPhotos

		if filter.PublicationStatus != nil {
			complexFilter.PublicationStatus = (*shared_entity.PublicationStatus)(filter.PublicationStatus)
		}
	}

	data, total, err := r.EstateService.SearchComplexes(ctx, start, limit, estate_entity.ComplexSortDefault, complexFilter)
	if err != nil {
		return nil, err
	}

	var nodes []*crm_models.Complex
	for _, v := range data {
		nodes = append(nodes, new(crm_models.Complex).FromEntity(v))
	}

	return &crm_models.ComplexConnection{
		TotalCount: total,
		Nodes:      nodes,
		PageInfo:   &crm_models.PageInfo{},
	}, nil
}

// Complex is the resolver for the complex field.
func (r *queryResolver) Complex(ctx context.Context, id string) (*crm_models.Complex, error) {
	data, err := r.EstateService.GetComplexByID(ctx, id)
	if err != nil {
		return nil, err
	}

	return new(crm_models.Complex).FromEntity(data), nil
}

// Images is the resolver for the images field.
func (r *complexInputResolver) Images(ctx context.Context, obj *crm_models.ComplexInput, data []*crm_models.ImageInput) error {
	for _, v := range data {
		if v.File != nil {
			result, err := r.ExchangeService.UploadImage(ctx, *v.ToEntity())
			if err != nil {
				return err
			}

			obj.ImageIDs = append(obj.ImageIDs, result.ID)
		} else if v.ID != "" {
			obj.ImageIDs = append(obj.ImageIDs, v.ID)
		}
	}

	return nil
}

// Documents is the resolver for the documents field.
func (r *complexInputResolver) Documents(ctx context.Context, obj *crm_models.ComplexInput, data []*crm_models.DocumentInput) error {
	for _, v := range data {
		if v.File != nil {
			result, err := r.ExchangeService.UploadDocument(ctx, *v.ToEntity())
			if err != nil {
				return err
			}

			obj.DocumentIDs = append(obj.DocumentIDs, result.ID)
		} else if v.ID != "" {
			obj.DocumentIDs = append(obj.DocumentIDs, v.ID)
		}
	}

	return nil
}

// ProjectDeclarations is the resolver for the projectDeclarations field.
func (r *complexInputResolver) ProjectDeclarations(ctx context.Context, obj *crm_models.ComplexInput, data []*crm_models.DocumentInput) error {
	for _, v := range data {
		if v.File != nil {
			result, err := r.ExchangeService.UploadDocument(ctx, *v.ToEntity())
			if err != nil {
				return err
			}

			obj.ProjectDeclarationIDs = append(obj.ProjectDeclarationIDs, result.ID)
		} else if v.ID != "" {
			obj.ProjectDeclarationIDs = append(obj.ProjectDeclarationIDs, v.ID)
		}
	}

	return nil
}

// Complex returns crm_gateway.ComplexResolver implementation.
func (r *Resolver) Complex() crm_gateway.ComplexResolver { return &complexResolver{r} }

// ComplexInput returns crm_gateway.ComplexInputResolver implementation.
func (r *Resolver) ComplexInput() crm_gateway.ComplexInputResolver { return &complexInputResolver{r} }

type complexResolver struct{ *Resolver }
type complexInputResolver struct{ *Resolver }
