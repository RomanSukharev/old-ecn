package crm_resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.47

import (
	"context"

	crm_gateway "github.com/pinks-agency/ecn/server/internal/crm-facade/gateway"
	crm_models "github.com/pinks-agency/ecn/server/internal/crm-facade/models"
	content_entity "github.com/pinks-agency/ecn/server/pkg/content/entity"
	shared_entity "github.com/pinks-agency/ecn/server/pkg/shared/entity"
)

// Group is the resolver for the group field.
func (r *articleResolver) Group(ctx context.Context, obj *crm_models.Article) (*crm_models.ArticleGroup, error) {
	if obj != nil && obj.GroupID != nil {
		data, err := r.ContentService.GetArticleGroupByID(ctx, *obj.GroupID)
		if err != nil {
			return nil, nil
		}

		return new(crm_models.ArticleGroup).FromEntity(data), nil
	}

	return nil, nil
}

// Cover is the resolver for the cover field.
func (r *articleResolver) Cover(ctx context.Context, obj *crm_models.Article) (*crm_models.Image, error) {
	if obj != nil && obj.CoverID != nil {
		data, err := r.ExchangeService.GetImageByID(ctx, *obj.CoverID)
		if err != nil {
			return nil, nil
		}

		return new(crm_models.Image).FromEntity(data), nil
	}

	return nil, nil
}

// SaveArticle is the resolver for the saveArticle field.
func (r *mutationResolver) SaveArticle(ctx context.Context, input crm_models.ArticleInput) (bool, error) {
	_, err := r.ContentService.SaveArticle(ctx, *input.ToEntity())
	if err != nil {
		return false, err
	}

	return true, nil
}

// DeleteArticle is the resolver for the deleteArticle field.
func (r *mutationResolver) DeleteArticle(ctx context.Context, id string) (bool, error) {
	if err := r.ContentService.DeleteArticle(ctx, id); err != nil {
		return false, err
	}

	return true, nil
}

// Articles is the resolver for the articles field.
func (r *queryResolver) Articles(ctx context.Context, ids []string, start *int, limit *int, sort *crm_models.Sort, search *string, filter *crm_models.ArticlesFilterInput) (*crm_models.ArticleConnection, error) {
	articleFilter := &content_entity.ArticleFilter{}
	if filter != nil {
		if filter.GroupID != nil {
			articleFilter.GroupID = filter.GroupID
		}

		if filter.Status != nil {
			articleFilter.PublicationStatus = (*shared_entity.PublicationStatus)(filter.Status)
		}

		articleFilter.Keyword = search
	}

	data, total, err := r.ContentService.SearchArticles(ctx, start, limit, content_entity.ArticleSortDefault, articleFilter)
	if err != nil {
		return nil, err
	}

	var nodes []*crm_models.Article
	for _, v := range data {
		nodes = append(nodes, new(crm_models.Article).FromEntity(v))
	}

	return &crm_models.ArticleConnection{
		TotalCount: total,
		Nodes:      nodes,
		PageInfo:   &crm_models.PageInfo{},
	}, nil
}

// Article is the resolver for the article field.
func (r *queryResolver) Article(ctx context.Context, id string) (*crm_models.Article, error) {
	data, err := r.ContentService.GetArticleByID(ctx, id)
	if err != nil {
		return nil, err
	}

	return new(crm_models.Article).FromEntity(data), nil
}

// Cover is the resolver for the cover field.
func (r *articleInputResolver) Cover(ctx context.Context, obj *crm_models.ArticleInput, data *crm_models.ImageInput) error {
	if data != nil {
		if data.File != nil {
			result, err := r.ExchangeService.UploadImage(ctx, *data.ToEntity())
			if err != nil {
				return err
			}
			obj.CoverID = &result.ID
		} else if data.ID != "" {
			obj.CoverID = &data.ID
		}
	}

	return nil
}

// Article returns crm_gateway.ArticleResolver implementation.
func (r *Resolver) Article() crm_gateway.ArticleResolver { return &articleResolver{r} }

// ArticleInput returns crm_gateway.ArticleInputResolver implementation.
func (r *Resolver) ArticleInput() crm_gateway.ArticleInputResolver { return &articleInputResolver{r} }

type articleResolver struct{ *Resolver }
type articleInputResolver struct{ *Resolver }
