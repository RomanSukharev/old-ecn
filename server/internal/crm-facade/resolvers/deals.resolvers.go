package crm_resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.47

import (
	"context"

	crm_gateway "github.com/pinks-agency/ecn/server/internal/crm-facade/gateway"
	crm_models "github.com/pinks-agency/ecn/server/internal/crm-facade/models"
	estate_entity "github.com/pinks-agency/ecn/server/pkg/estate/entity"
	sales_entity "github.com/pinks-agency/ecn/server/pkg/sales/entity"
)

// SellerAgent is the resolver for the sellerAgent field.
func (r *dealResolver) SellerAgent(ctx context.Context, obj *crm_models.Deal) (*crm_models.Employee, error) {
	if obj.SellerAgentID != nil {
		data, err := r.StaffService.GetEmployeeByID(ctx, *obj.SellerAgentID)
		if err != nil {
			return nil, nil
		}
		return new(crm_models.Employee).FromEntity(data), nil
	}

	return nil, nil
}

// SellerContact is the resolver for the sellerContact field.
func (r *dealResolver) SellerContact(ctx context.Context, obj *crm_models.Deal) (*crm_models.Contact, error) {
	if obj.SellerContactID != nil {
		data, err := r.SalesService.GetContactByID(ctx, *obj.SellerContactID)
		if err != nil {
			return nil, nil
		}

		return new(crm_models.Contact).FromEntity(data), nil
	}

	return nil, nil
}

// SellerDocuments is the resolver for the sellerDocuments field.
func (r *dealResolver) SellerDocuments(ctx context.Context, obj *crm_models.Deal) ([]*crm_models.Document, error) {
	result := make([]*crm_models.Document, 0, len(obj.SellerDocumentIDs))

	for _, sellerDocumentId := range obj.SellerDocumentIDs {
		data, err := r.ExchangeService.GetDocumentByID(ctx, sellerDocumentId)
		if err != nil {
			return nil, nil
		}
		result = append(result, new(crm_models.Document).FromEntity(data))
	}

	return result, nil
}

// BuyerAgent is the resolver for the buyerAgent field.
func (r *dealResolver) BuyerAgent(ctx context.Context, obj *crm_models.Deal) (*crm_models.Employee, error) {
	if obj.BuyerAgentID != nil {
		data, err := r.StaffService.GetEmployeeByID(ctx, *obj.BuyerAgentID)
		if err != nil {
			return nil, nil
		}
		return new(crm_models.Employee).FromEntity(data), nil
	}

	return nil, nil
}

// BuyerContact is the resolver for the buyerContact field.
func (r *dealResolver) BuyerContact(ctx context.Context, obj *crm_models.Deal) (*crm_models.Contact, error) {
	if obj.BuyerContactID != nil {
		data, err := r.SalesService.GetContactByID(ctx, *obj.BuyerContactID)
		if err != nil {
			return nil, nil
		}
		return new(crm_models.Contact).FromEntity(data), nil
	}

	return nil, nil
}

// BuyerDocuments is the resolver for the buyerDocuments field.
func (r *dealResolver) BuyerDocuments(ctx context.Context, obj *crm_models.Deal) ([]*crm_models.Document, error) {
	result := make([]*crm_models.Document, 0, len(obj.BuyerDocumentIDs))

	for _, buyerDocumentId := range obj.BuyerDocumentIDs {
		data, err := r.ExchangeService.GetDocumentByID(ctx, buyerDocumentId)
		if err != nil {
			return nil, nil
		}
		result = append(result, new(crm_models.Document).FromEntity(data))
	}

	return result, nil
}

// Property is the resolver for the property field.
func (r *dealResolver) Property(ctx context.Context, obj *crm_models.Deal) (*crm_models.Property, error) {
	if obj.PropertyID != nil {
		data, err := r.EstateService.GetPropertyByID(ctx, *obj.PropertyID)
		if err != nil {
			return nil, nil
		}
		return new(crm_models.Property).FromEntity(data), nil
	}

	return nil, nil
}

// MortgageBroker is the resolver for the mortgageBroker field.
func (r *dealResolver) MortgageBroker(ctx context.Context, obj *crm_models.Deal) (*crm_models.Employee, error) {
	if obj.MortgageBrokerID != nil {
		data, err := r.StaffService.GetEmployeeByID(ctx, *obj.MortgageBrokerID)
		if err != nil {
			return nil, nil
		}
		return new(crm_models.Employee).FromEntity(data), nil
	}

	return nil, nil
}

// MortgageRequest is the resolver for the mortgageRequest field.
func (r *dealResolver) MortgageRequest(ctx context.Context, obj *crm_models.Deal) (*crm_models.MortgageRequest, error) {
	if obj.MortgageRequestID != nil {
		data, err := r.SalesService.GetMortgageRequestByID(ctx, *obj.MortgageRequestID)
		if err != nil {
			return nil, nil
		}
		return new(crm_models.MortgageRequest).FromEntity(data), nil
	}

	return nil, nil
}

// MortgageDocuments is the resolver for the mortgageDocuments field.
func (r *dealResolver) MortgageDocuments(ctx context.Context, obj *crm_models.Deal) ([]*crm_models.Document, error) {
	result := make([]*crm_models.Document, 0, len(obj.MortgageDocumentIDs))

	for _, mortgageDocumentId := range obj.MortgageDocumentIDs {
		data, err := r.ExchangeService.GetDocumentByID(ctx, mortgageDocumentId)
		if err != nil {
			return nil, nil
		}
		result = append(result, new(crm_models.Document).FromEntity(data))
	}

	return result, nil
}

// Lawer is the resolver for the lawer field.
func (r *dealResolver) Lawer(ctx context.Context, obj *crm_models.Deal) (*crm_models.Employee, error) {
	if obj.LawerID != nil {
		data, err := r.StaffService.GetEmployeeByID(ctx, *obj.LawerID)
		if err != nil {
			return nil, nil
		}
		return new(crm_models.Employee).FromEntity(data), nil
	}

	return nil, nil
}

// LawerDocuments is the resolver for the lawerDocuments field.
func (r *dealResolver) LawerDocuments(ctx context.Context, obj *crm_models.Deal) ([]*crm_models.Document, error) {
	result := make([]*crm_models.Document, 0, len(obj.LawerDocumentIDs))

	for _, lawerDocumentId := range obj.LawerDocumentIDs {
		data, err := r.ExchangeService.GetDocumentByID(ctx, lawerDocumentId)
		if err != nil {
			return nil, nil
		}
		result = append(result, new(crm_models.Document).FromEntity(data))
	}

	return result, nil
}

// Accountant is the resolver for the accountant field.
func (r *dealResolver) Accountant(ctx context.Context, obj *crm_models.Deal) (*crm_models.Employee, error) {
	if obj.AccountantID != nil {
		data, err := r.StaffService.GetEmployeeByID(ctx, *obj.AccountantID)
		if err != nil {
			return nil, nil
		}
		return new(crm_models.Employee).FromEntity(data), nil
	}

	return nil, nil
}

// AccountantDocuments is the resolver for the accountantDocuments field.
func (r *dealResolver) AccountantDocuments(ctx context.Context, obj *crm_models.Deal) ([]*crm_models.Document, error) {
	result := make([]*crm_models.Document, 0, len(obj.AccountantDocumentIDs))

	for _, accountantDocumentId := range obj.LawerDocumentIDs {
		data, err := r.ExchangeService.GetDocumentByID(ctx, accountantDocumentId)
		if err != nil {
			return nil, nil
		}
		result = append(result, new(crm_models.Document).FromEntity(data))
	}

	return result, nil
}

// SaveDeal is the resolver for the saveDeal field.
func (r *mutationResolver) SaveDeal(ctx context.Context, input crm_models.DealInput) (bool, error) {
	if _, err := r.SalesService.SaveDeal(ctx, *input.ToEntity()); err != nil {
		return false, err
	}
	return true, nil
}

// DeleteDeal is the resolver for the deleteDeal field.
func (r *mutationResolver) DeleteDeal(ctx context.Context, id string) (bool, error) {
	if err := r.SalesService.DeleteDeal(ctx, id); err != nil {
		return false, err
	}
	return true, nil
}

// ChangeDealStage is the resolver for the changeDealStage field.
func (r *mutationResolver) ChangeDealStage(ctx context.Context, id string, stage crm_models.DealStageEnum) (bool, error) {
	if err := r.SalesService.ChangeDealStage(ctx, id, stage.String()); err != nil {
		return false, err
	}
	return true, nil
}

// BulkDeleteDeals is the resolver for the bulkDeleteDeals field.
func (r *mutationResolver) BulkDeleteDeals(ctx context.Context, ids []string) (bool, error) {
	if err := r.SalesService.BulkDeleteDeals(ctx, ids); err != nil {
		return false, err
	}
	return true, nil
}

// BulkChangeDealsStage is the resolver for the bulkChangeDealsStage field.
func (r *mutationResolver) BulkChangeDealsStage(ctx context.Context, ids []string, stage crm_models.DealStageEnum) (bool, error) {
	if err := r.SalesService.BulkChangeDealsStage(ctx, ids, stage.String()); err != nil {
		return false, err
	}
	return true, nil
}

// Deals is the resolver for the deals field.
func (r *queryResolver) Deals(ctx context.Context, ids []string, start *int, limit *int, sort *crm_models.Sort, search *string, filter *crm_models.DealFilter) (*crm_models.DealConnection, error) {
	dealFilter := &sales_entity.DealFilter{
		Keyword: search,
	}

	if filter != nil {
		dealFilter.Type = (*sales_entity.DealType)(filter.Type)
		dealFilter.Stage = (*sales_entity.DealStage)(filter.Stage)
		dealFilter.Contact = filter.Contact
		dealFilter.Employee = filter.Employee
		dealFilter.Phone = filter.Phone
		dealFilter.PropertyType = (*estate_entity.PropertyType)(filter.PropertyType)
		dealFilter.Deal = filter.Deal
		dealFilter.IsDeleted = filter.IsDeleted

		if filter.CreatedAtMax != nil {
			dealFilter.CreatedAtMax = *filter.CreatedAtMax
		}

		if filter.CreatedAtMin != nil {
			dealFilter.CreatedAtMin = *filter.CreatedAtMin
		}

		if filter.FinishedAtMax != nil {
			dealFilter.FinishedAtMax = *filter.FinishedAtMax
		}

		if filter.FinishedAtMin != nil {
			dealFilter.FinishedAtMin = *filter.FinishedAtMin
		}
	}

	data, total, err := r.SalesService.SearchDeals(ctx, start, limit, sales_entity.DealSortDeafult, dealFilter)
	if err != nil {
		return nil, err
	}

	var nodes []*crm_models.Deal

	for _, v := range data {
		nodes = append(nodes, new(crm_models.Deal).FromEntity(v))
	}

	return &crm_models.DealConnection{
		TotalCount: total,
		Nodes:      nodes,
		PageInfo:   &crm_models.PageInfo{},
	}, nil
}

// Deal is the resolver for the deal field.
func (r *queryResolver) Deal(ctx context.Context, id string) (*crm_models.Deal, error) {
	deal, err := r.SalesService.GetDealByID(ctx, id)
	if err != nil {
		return nil, err
	}
	return new(crm_models.Deal).FromEntity(deal), nil
}

// SellerDocuments is the resolver for the sellerDocuments field.
func (r *dealInputResolver) SellerDocuments(ctx context.Context, obj *crm_models.DealInput, data []*crm_models.DocumentInput) error {
	for _, v := range data {
		if v.File != nil {
			result, err := r.ExchangeService.UploadDocument(ctx, *v.ToEntity())
			if err != nil {
				return err
			}

			obj.SellerDocumentIDs = append(obj.SellerDocumentIDs, result.ID)
		} else if v.ID != "" {
			obj.SellerDocumentIDs = append(obj.SellerDocumentIDs, v.ID)
		}
	}

	return nil
}

// BuyerDocuments is the resolver for the buyerDocuments field.
func (r *dealInputResolver) BuyerDocuments(ctx context.Context, obj *crm_models.DealInput, data []*crm_models.DocumentInput) error {
	for _, v := range data {
		if v.File != nil {
			result, err := r.ExchangeService.UploadDocument(ctx, *v.ToEntity())
			if err != nil {
				return err
			}

			obj.BuyerDocumentIDs = append(obj.BuyerDocumentIDs, result.ID)
		} else if v.ID != "" {
			obj.BuyerDocumentIDs = append(obj.BuyerDocumentIDs, v.ID)
		}
	}
	return nil
}

// MortgageDocuments is the resolver for the mortgageDocuments field.
func (r *dealInputResolver) MortgageDocuments(ctx context.Context, obj *crm_models.DealInput, data []*crm_models.DocumentInput) error {
	for _, v := range data {
		if v.File != nil {
			result, err := r.ExchangeService.UploadDocument(ctx, *v.ToEntity())
			if err != nil {
				return err
			}

			obj.MortgageDocumentIDs = append(obj.MortgageDocumentIDs, result.ID)
		} else if v.ID != "" {
			obj.MortgageDocumentIDs = append(obj.MortgageDocumentIDs, v.ID)
		}
	}
	return nil
}

// LawerDocuments is the resolver for the lawerDocuments field.
func (r *dealInputResolver) LawerDocuments(ctx context.Context, obj *crm_models.DealInput, data []*crm_models.DocumentInput) error {
	for _, v := range data {
		if v.File != nil {
			result, err := r.ExchangeService.UploadDocument(ctx, *v.ToEntity())
			if err != nil {
				return err
			}

			obj.LawerDocumentIDs = append(obj.LawerDocumentIDs, result.ID)
		} else if v.ID != "" {
			obj.LawerDocumentIDs = append(obj.LawerDocumentIDs, v.ID)
		}
	}
	return nil
}

// AccountantDocuments is the resolver for the accountantDocuments field.
func (r *dealInputResolver) AccountantDocuments(ctx context.Context, obj *crm_models.DealInput, data []*crm_models.DocumentInput) error {
	for _, v := range data {
		if v.File != nil {
			result, err := r.ExchangeService.UploadDocument(ctx, *v.ToEntity())
			if err != nil {
				return err
			}

			obj.AccountantDocumentIDs = append(obj.AccountantDocumentIDs, result.ID)
		} else if v.ID != "" {
			obj.AccountantDocumentIDs = append(obj.AccountantDocumentIDs, v.ID)
		}
	}
	return nil
}

// Deal returns crm_gateway.DealResolver implementation.
func (r *Resolver) Deal() crm_gateway.DealResolver { return &dealResolver{r} }

// DealInput returns crm_gateway.DealInputResolver implementation.
func (r *Resolver) DealInput() crm_gateway.DealInputResolver { return &dealInputResolver{r} }

type dealResolver struct{ *Resolver }
type dealInputResolver struct{ *Resolver }
