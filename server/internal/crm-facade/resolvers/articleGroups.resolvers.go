package crm_resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.47

import (
	"context"

	crm_gateway "github.com/pinks-agency/ecn/server/internal/crm-facade/gateway"
	crm_models "github.com/pinks-agency/ecn/server/internal/crm-facade/models"
	content_entity "github.com/pinks-agency/ecn/server/pkg/content/entity"
)

// SaveArticleGroup is the resolver for the saveArticleGroup field.
func (r *mutationResolver) SaveArticleGroup(ctx context.Context, input crm_models.ArticleGroupInput) (bool, error) {
	_, err := r.ContentService.SaveArticleGroup(ctx, *input.ToEntity())
	if err != nil {
		return false, err
	}

	return true, nil
}

// DeleteArticleGroup is the resolver for the deleteArticleGroup field.
func (r *mutationResolver) DeleteArticleGroup(ctx context.Context, id string) (bool, error) {
	if err := r.ContentService.DeleteArticleGroup(ctx, id); err != nil {
		return false, err
	}

	return true, nil
}

// ArticleGroups is the resolver for the articleGroups field.
func (r *queryResolver) ArticleGroups(ctx context.Context, start *int, limit *int, sort *crm_models.Sort, search *string) (*crm_models.ArticleGroupConnection, error) {
	data, total, err := r.ContentService.SearchArticleGroups(ctx, start, limit, content_entity.ArticleGroupSortDefault, &content_entity.ArticleGroupFilter{
		Keyword: search,
	})
	if err != nil {
		return nil, err
	}

	var nodes []*crm_models.ArticleGroup
	for _, v := range data {
		nodes = append(nodes, new(crm_models.ArticleGroup).FromEntity(v))
	}

	return &crm_models.ArticleGroupConnection{
		TotalCount: total,
		Nodes:      nodes,
		PageInfo:   &crm_models.PageInfo{},
	}, nil
}

// ArticleGroup is the resolver for the articleGroup field.
func (r *queryResolver) ArticleGroup(ctx context.Context, id string) (*crm_models.ArticleGroup, error) {
	data, err := r.ContentService.GetArticleGroupByID(ctx, id)
	if err != nil {
		return nil, err
	}

	return new(crm_models.ArticleGroup).FromEntity(data), nil
}

// Mutation returns crm_gateway.MutationResolver implementation.
func (r *Resolver) Mutation() crm_gateway.MutationResolver { return &mutationResolver{r} }

// Query returns crm_gateway.QueryResolver implementation.
func (r *Resolver) Query() crm_gateway.QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
