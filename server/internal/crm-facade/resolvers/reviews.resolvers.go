package crm_resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.47

import (
	"context"

	crm_gateway "github.com/pinks-agency/ecn/server/internal/crm-facade/gateway"
	crm_models "github.com/pinks-agency/ecn/server/internal/crm-facade/models"
	content_entity "github.com/pinks-agency/ecn/server/pkg/content/entity"
	shared_entity "github.com/pinks-agency/ecn/server/pkg/shared/entity"
)

// SaveReview is the resolver for the saveReview field.
func (r *mutationResolver) SaveReview(ctx context.Context, input crm_models.ReviewInput) (bool, error) {
	_, err := r.ContentService.SaveReview(ctx, *input.ToEntity())
	if err != nil {
		return false, err
	}

	return true, nil
}

// DeleteReview is the resolver for the deleteReview field.
func (r *mutationResolver) DeleteReview(ctx context.Context, id string) (bool, error) {
	if err := r.ContentService.DeleteReview(ctx, id); err != nil {
		return false, err
	}

	return true, nil
}

// BulkApproveReviews is the resolver for the bulkApproveReviews field.
func (r *mutationResolver) BulkApproveReviews(ctx context.Context, ids []string) (bool, error) {
	if err := r.ContentService.BulkApproveReviews(ctx, ids); err != nil {
		return false, err
	}

	return true, nil
}

// BulkDeclineReviews is the resolver for the bulkDeclineReviews field.
func (r *mutationResolver) BulkDeclineReviews(ctx context.Context, ids []string) (bool, error) {
	if err := r.ContentService.BulkDeclineReviews(ctx, ids); err != nil {
		return false, err
	}

	return true, nil
}

// BulkDeleteReviews is the resolver for the bulkDeleteReviews field.
func (r *mutationResolver) BulkDeleteReviews(ctx context.Context, ids []string) (bool, error) {
	if err := r.ContentService.BulkDeleteReviews(ctx, ids); err != nil {
		return false, err
	}

	return true, nil
}

// Reviews is the resolver for the reviews field.
func (r *queryResolver) Reviews(ctx context.Context, ids []string, start *int, limit *int, sort *crm_models.Sort, search *string, filter *crm_models.ReviewsFilterInput) (*crm_models.ReviewConnection, error) {
	reviewFilter := &content_entity.ReviewFilter{}
	if filter != nil {
		if filter.PublicationStatus != nil {
			reviewFilter.PublicationStatus = (*shared_entity.PublicationStatus)(filter.PublicationStatus)
		}

		if filter.Status != nil {
			reviewFilter.Status = (*content_entity.ReviewStatus)(filter.Status)
		}

		if filter.EmployeeID != nil {
			reviewFilter.EmployeeID = filter.EmployeeID
		}

		reviewFilter.Keyword = search
	}

	data, total, err := r.ContentService.SearchReviews(ctx, start, limit, content_entity.ReviewSortDefault, reviewFilter)
	if err != nil {
		return nil, err
	}

	var nodes []*crm_models.Review
	for _, v := range data {
		nodes = append(nodes, new(crm_models.Review).FromEntity(v))
	}

	return &crm_models.ReviewConnection{
		TotalCount: total,
		Nodes:      nodes,
		PageInfo:   &crm_models.PageInfo{},
	}, nil
}

// Review is the resolver for the review field.
func (r *queryResolver) Review(ctx context.Context, id string) (*crm_models.Review, error) {
	data, err := r.ContentService.GetReviewByID(ctx, id)
	if err != nil {
		return nil, err
	}

	return new(crm_models.Review).FromEntity(data), nil
}

// Employee is the resolver for the employee field.
func (r *reviewResolver) Employee(ctx context.Context, obj *crm_models.Review) (*crm_models.Employee, error) {
	if obj.EmployeeID != nil {
		data, err := r.StaffService.GetEmployeeByID(ctx, *obj.EmployeeID)
		if err != nil {
			return nil, nil
		}

		return new(crm_models.Employee).FromEntity(data), nil
	}

	return nil, nil
}

// Review returns crm_gateway.ReviewResolver implementation.
func (r *Resolver) Review() crm_gateway.ReviewResolver { return &reviewResolver{r} }

type reviewResolver struct{ *Resolver }
