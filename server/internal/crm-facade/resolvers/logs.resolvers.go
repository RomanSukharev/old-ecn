package crm_resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.47

import (
	"context"

	crm_gateway "github.com/pinks-agency/ecn/server/internal/crm-facade/gateway"
	crm_models "github.com/pinks-agency/ecn/server/internal/crm-facade/models"
	system_entity "github.com/pinks-agency/ecn/server/pkg/system/entity"
)

// Author is the resolver for the author field.
func (r *logResolver) Author(ctx context.Context, obj *crm_models.Log) (*crm_models.Employee, error) {
	if obj.AuthorID != nil {
		data, err := r.StaffService.GetEmployeeByID(ctx, *obj.AuthorID)
		if err != nil {
			return nil, nil
		}

		return new(crm_models.Employee).FromEntity(data), nil
	}

	return nil, nil
}

// Logs is the resolver for the logs field.
func (r *queryResolver) Logs(ctx context.Context, ids []string, start *int, limit *int, sort *crm_models.Sort, search *string, filter *crm_models.LogsFilterInput) (*crm_models.LogConnection, error) {
	logFilter := &system_entity.LogFilter{
		Keyword: search,
	}

	if filter != nil {
		logFilter.AuthorID = filter.Author

		if filter.Level != nil {
			logFilter.Level = (*system_entity.LogLevel)(filter.Level)
		}

		if filter.Type != nil {
			logFilter.Type = (*system_entity.LogType)(filter.Type)
		}
	}

	data, total, err := r.SystemService.SearchLogs(ctx, start, limit, system_entity.LogSortDefault, logFilter)
	if err != nil {
		return nil, err
	}

	var nodes []*crm_models.Log
	for _, v := range data {
		nodes = append(nodes, new(crm_models.Log).FromEntity(v))
	}

	return &crm_models.LogConnection{
		TotalCount: total,
		Nodes:      nodes,
		PageInfo:   &crm_models.PageInfo{},
	}, nil
}

// Log returns crm_gateway.LogResolver implementation.
func (r *Resolver) Log() crm_gateway.LogResolver { return &logResolver{r} }

type logResolver struct{ *Resolver }
