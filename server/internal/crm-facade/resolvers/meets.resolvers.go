package crm_resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.47

import (
	"context"

	crm_gateway "github.com/pinks-agency/ecn/server/internal/crm-facade/gateway"
	crm_models "github.com/pinks-agency/ecn/server/internal/crm-facade/models"
	sales_entity "github.com/pinks-agency/ecn/server/pkg/sales/entity"
)

// Property is the resolver for the property field.
func (r *meetResolver) Property(ctx context.Context, obj *crm_models.Meet) (*crm_models.Property, error) {
	if obj.PropertyID != nil {
		data, err := r.EstateService.GetPropertyByID(ctx, *obj.PropertyID)
		if err != nil {
			return nil, nil
		}
		return new(crm_models.Property).FromEntity(data), nil
	}

	return nil, nil
}

// SellerAgent is the resolver for the sellerAgent field.
func (r *meetResolver) SellerAgent(ctx context.Context, obj *crm_models.Meet) (*crm_models.Employee, error) {
	if obj.SellerAgentID != nil {
		data, err := r.StaffService.GetEmployeeByID(ctx, *obj.SellerAgentID)
		if err != nil {
			return nil, nil
		}
		return new(crm_models.Employee).FromEntity(data), nil
	}

	return nil, nil
}

// SellerContact is the resolver for the sellerContact field.
func (r *meetResolver) SellerContact(ctx context.Context, obj *crm_models.Meet) (*crm_models.Contact, error) {
	if obj.SellerContactID != nil {
		data, err := r.SalesService.GetContactByID(ctx, *obj.SellerContactID)
		if err != nil {
			return nil, nil
		}
		return new(crm_models.Contact).FromEntity(data), nil
	}

	return nil, nil
}

// BuyerAgent is the resolver for the buyerAgent field.
func (r *meetResolver) BuyerAgent(ctx context.Context, obj *crm_models.Meet) (*crm_models.Employee, error) {
	if obj.BuyerAgentID != nil {
		data, err := r.StaffService.GetEmployeeByID(ctx, *obj.BuyerAgentID)
		if err != nil {
			return nil, nil
		}
		return new(crm_models.Employee).FromEntity(data), nil
	}

	return nil, nil
}

// BuyerContact is the resolver for the buyerContact field.
func (r *meetResolver) BuyerContact(ctx context.Context, obj *crm_models.Meet) (*crm_models.Contact, error) {
	if obj.BuyerContactID != nil {
		data, err := r.SalesService.GetContactByID(ctx, *obj.BuyerContactID)
		if err != nil {
			return nil, nil
		}
		return new(crm_models.Contact).FromEntity(data), nil
	}

	return nil, nil
}

// Lawer is the resolver for the lawer field.
func (r *meetResolver) Lawer(ctx context.Context, obj *crm_models.Meet) (*crm_models.Employee, error) {
	if obj.LawerID != nil {
		data, err := r.StaffService.GetEmployeeByID(ctx, *obj.LawerID)
		if err != nil {
			return nil, nil
		}
		return new(crm_models.Employee).FromEntity(data), nil
	}

	return nil, nil
}

// Accountant is the resolver for the accountant field.
func (r *meetResolver) Accountant(ctx context.Context, obj *crm_models.Meet) (*crm_models.Employee, error) {
	if obj.AccountantID != nil {
		data, err := r.StaffService.GetEmployeeByID(ctx, *obj.AccountantID)
		if err != nil {
			return nil, nil
		}
		return new(crm_models.Employee).FromEntity(data), nil
	}

	return nil, nil
}

// MortgageBroker is the resolver for the mortgageBroker field.
func (r *meetResolver) MortgageBroker(ctx context.Context, obj *crm_models.Meet) (*crm_models.Employee, error) {
	if obj.MortgageBrokerID != nil {
		data, err := r.StaffService.GetEmployeeByID(ctx, *obj.MortgageBrokerID)
		if err != nil {
			return nil, nil
		}
		return new(crm_models.Employee).FromEntity(data), nil
	}

	return nil, nil
}

// SaveMeet is the resolver for the saveMeet field.
func (r *mutationResolver) SaveMeet(ctx context.Context, input crm_models.MeetInput) (bool, error) {
	if _, err := r.SalesService.SaveMeet(ctx, *input.ToEntity()); err != nil {
		return false, err
	}
	return true, nil
}

// DeleteMeet is the resolver for the deleteMeet field.
func (r *mutationResolver) DeleteMeet(ctx context.Context, id string) (bool, error) {
	if err := r.SalesService.DeleteMeet(ctx, id); err != nil {
		return false, err
	}
	return true, nil
}

// ChangeMeetStatus is the resolver for the changeMeetStatus field.
func (r *mutationResolver) ChangeMeetStatus(ctx context.Context, id string, status crm_models.MeetStatusEnum) (bool, error) {
	if err := r.SalesService.ChangeMeetStatus(ctx, id, status.String()); err != nil {
		return false, err
	}
	return true, nil
}

// BulkChangeMeetsStatus is the resolver for the bulkChangeMeetsStatus field.
func (r *mutationResolver) BulkChangeMeetsStatus(ctx context.Context, ids []string, status crm_models.MeetStatusEnum) (bool, error) {
	if err := r.SalesService.BulkChangeMeetStatus(ctx, ids, status.String()); err != nil {
		return false, err
	}
	return true, nil
}

// BulkDeleteMeets is the resolver for the bulkDeleteMeets field.
func (r *mutationResolver) BulkDeleteMeets(ctx context.Context, ids []string) (bool, error) {
	if err := r.SalesService.BulkDeleteMeets(ctx, ids); err != nil {
		return false, err
	}
	return true, nil
}

// Meets is the resolver for the meets field.
func (r *queryResolver) Meets(ctx context.Context, ids []string, start *int, limit *int, sort *crm_models.Sort, search *string, filter *crm_models.MeetFilter) (*crm_models.MeetConnection, error) {
	meetFilter := &sales_entity.MeetFilter{
		Keyword: search,
	}

	if filter != nil {
		meetFilter.Type = (*sales_entity.MeetType)(filter.Type)
		meetFilter.SellerAgent = filter.SellerAgent
		meetFilter.BuyerAgent = filter.BuyerAgent
		meetFilter.SellerContact = filter.SellerContact
		meetFilter.BuyerContact = filter.BuyerContact
		meetFilter.DealType = (*sales_entity.DealType)(filter.DealType)
		meetFilter.Property = filter.Property
		meetFilter.Phone = filter.Phone
		meetFilter.Address = filter.Address

		if filter.Status != nil {
			meetStatuses := make([]sales_entity.MeetStatus, 0, len(filter.Status))
			for _, v := range filter.Status {
				meetStatuses = append(meetStatuses, sales_entity.MeetStatus(v))
			}
			meetFilter.Status = meetStatuses
		}

		if filter.CreatedAtMax != nil {
			meetFilter.CreatedAtMax = *filter.CreatedAtMax
		}

		if filter.CreatedAtMin != nil {
			meetFilter.CreatedAtMin = *filter.CreatedAtMin
		}
	}

	data, total, err := r.SalesService.SearchMeets(ctx, start, limit, sales_entity.MeetSortDefault, meetFilter)
	if err != nil {
		return nil, err
	}

	var nodes []*crm_models.Meet
	for _, v := range data {
		nodes = append(nodes, new(crm_models.Meet).FromEntity(v))
	}

	return &crm_models.MeetConnection{
		TotalCount: total,
		Nodes:      nodes,
		PageInfo:   &crm_models.PageInfo{},
	}, nil
}

// Meet is the resolver for the meet field.
func (r *queryResolver) Meet(ctx context.Context, id string) (*crm_models.Meet, error) {
	meet, err := r.SalesService.GetMeetByID(ctx, id)
	if err != nil {
		return nil, err
	}
	return new(crm_models.Meet).FromEntity(meet), nil
}

// Meet returns crm_gateway.MeetResolver implementation.
func (r *Resolver) Meet() crm_gateway.MeetResolver { return &meetResolver{r} }

type meetResolver struct{ *Resolver }
