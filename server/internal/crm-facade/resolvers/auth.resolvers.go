package crm_resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.47

import (
	"context"
	"errors"

	crm_gateway "github.com/pinks-agency/ecn/server/internal/crm-facade/gateway"
	crm_facade_middleware "github.com/pinks-agency/ecn/server/internal/crm-facade/middleware"
	crm_models "github.com/pinks-agency/ecn/server/internal/crm-facade/models"
)

// Avatar is the resolver for the avatar field.
func (r *meResolver) Avatar(ctx context.Context, obj *crm_models.Me) (*crm_models.Image, error) {
	if obj != nil && obj.AvatarID != nil && *obj.AvatarID != "" {
		data, err := r.ExchangeService.GetImageByID(ctx, *obj.AvatarID)
		if err != nil {
			return nil, nil
		}

		return new(crm_models.Image).FromEntity(data), nil
	}

	return nil, nil
}

// Login is the resolver for the login field.
func (r *mutationResolver) Login(ctx context.Context, email string, password string) (*crm_models.LoginOutput, error) {
	data, token, err := r.StaffService.Login(ctx, email, password)
	if err != nil {
		return nil, err
	}

	return &crm_models.LoginOutput{
		Token: token,
		Me:    new(crm_models.Me).FromEntity(data),
	}, nil
}

// Logout is the resolver for the logout field.
func (r *mutationResolver) Logout(ctx context.Context) (bool, error) {
	return true, nil
}

// Me is the resolver for the me field.
func (r *queryResolver) Me(ctx context.Context) (*crm_models.Me, error) {
	user := crm_facade_middleware.ForContext(ctx)
	if user == nil {
		return nil, errors.New("not authorized")
	}

	data, err := r.StaffService.GetEmployeeByID(ctx, user.Id)
	if err != nil {
		return nil, err
	}

	return new(crm_models.Me).FromEntity(data), nil
}

// Me returns crm_gateway.MeResolver implementation.
func (r *Resolver) Me() crm_gateway.MeResolver { return &meResolver{r} }

type meResolver struct{ *Resolver }
