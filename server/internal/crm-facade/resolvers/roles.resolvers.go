package crm_resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.47

import (
	"context"

	crm_models "github.com/pinks-agency/ecn/server/internal/crm-facade/models"
	staff_entity "github.com/pinks-agency/ecn/server/pkg/staff/entity"
)

// SaveRole is the resolver for the saveRole field.
func (r *mutationResolver) SaveRole(ctx context.Context, input crm_models.RoleInput) (bool, error) {
	_, err := r.StaffService.SaveRole(ctx, *input.ToEntity())
	if err != nil {
		return false, err
	}

	return true, nil
}

// DeleteRole is the resolver for the deleteRole field.
func (r *mutationResolver) DeleteRole(ctx context.Context, id string) (bool, error) {
	if err := r.StaffService.DeleteRole(ctx, id); err != nil {
		return false, err
	}

	return true, nil
}

// Roles is the resolver for the roles field.
func (r *queryResolver) Roles(ctx context.Context, ids []string, start *int, limit *int, sort *crm_models.Sort, search *string) (*crm_models.RoleConnection, error) {
	data, total, err := r.StaffService.SearchRoles(ctx, start, limit, staff_entity.RoleSortDefault, &staff_entity.RoleFilter{
		Keyword: search,
	})
	if err != nil {
		return nil, err
	}

	var nodes []*crm_models.Role
	for _, v := range data {
		nodes = append(nodes, new(crm_models.Role).FromEntity(v))
	}

	return &crm_models.RoleConnection{
		TotalCount: total,
		Nodes:      nodes,
		PageInfo:   &crm_models.PageInfo{},
	}, nil
}

// Role is the resolver for the role field.
func (r *queryResolver) Role(ctx context.Context, id string) (*crm_models.Role, error) {
	data, err := r.StaffService.GetRoleByID(ctx, id)
	if err != nil {
		return nil, err
	}

	return new(crm_models.Role).FromEntity(data), nil
}
