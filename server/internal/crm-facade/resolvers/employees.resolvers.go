package crm_resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.47

import (
	"context"

	crm_gateway "github.com/pinks-agency/ecn/server/internal/crm-facade/gateway"
	crm_models "github.com/pinks-agency/ecn/server/internal/crm-facade/models"
	staff_entity "github.com/pinks-agency/ecn/server/pkg/staff/entity"
)

// Position is the resolver for the position field.
func (r *employeeResolver) Position(ctx context.Context, obj *crm_models.Employee) (*crm_models.Position, error) {
	if obj != nil && obj.PositionID != nil {
		data, err := r.StaffService.GetPositionByID(ctx, *obj.PositionID)
		if err != nil {
			return nil, nil
		}

		return new(crm_models.Position).FromEntity(data), nil
	}

	return nil, nil
}

// Department is the resolver for the department field.
func (r *employeeResolver) Department(ctx context.Context, obj *crm_models.Employee) (*crm_models.Department, error) {
	if obj != nil && obj.DepartmentID != nil {
		data, err := r.StaffService.GetDepartmentByID(ctx, *obj.DepartmentID)
		if err != nil {
			return nil, nil
		}

		return new(crm_models.Department).FromEntity(data), nil
	}

	return nil, nil
}

// Group is the resolver for the group field.
func (r *employeeResolver) Group(ctx context.Context, obj *crm_models.Employee) (*crm_models.DepartmentGroup, error) {
	// TODO: return group
	return nil, nil
}

// Role is the resolver for the role field.
func (r *employeeResolver) Role(ctx context.Context, obj *crm_models.Employee) (*crm_models.Role, error) {
	if obj != nil && obj.RoleID != nil {
		data, err := r.StaffService.GetRoleByID(ctx, *obj.RoleID)
		if err != nil {
			return nil, nil
		}

		return new(crm_models.Role).FromEntity(data), nil
	}

	return nil, nil
}

// Avatar is the resolver for the avatar field.
func (r *employeeResolver) Avatar(ctx context.Context, obj *crm_models.Employee) (*crm_models.Image, error) {
	if obj != nil && obj.AvatarID != nil {
		data, err := r.ExchangeService.GetImageByID(ctx, *obj.AvatarID)
		if err != nil {
			return nil, nil
		}

		return new(crm_models.Image).FromEntity(data), nil
	}

	return nil, nil
}

// PublicImage is the resolver for the publicImage field.
func (r *employeeResolver) PublicImage(ctx context.Context, obj *crm_models.Employee) (*crm_models.Image, error) {
	if obj != nil && obj.PublicImageID != nil {
		data, err := r.ExchangeService.GetImageByID(ctx, *obj.PublicImageID)
		if err != nil {
			return nil, nil
		}

		return new(crm_models.Image).FromEntity(data), nil
	}

	return nil, nil
}

// SaveEmployee is the resolver for the saveEmployee field.
func (r *mutationResolver) SaveEmployee(ctx context.Context, input crm_models.EmployeeInput) (bool, error) {
	_, err := r.StaffService.SaveEmployee(ctx, *input.ToEntity())
	if err != nil {
		return false, err
	}

	return true, nil
}

// DeleteEmployee is the resolver for the deleteEmployee field.
func (r *mutationResolver) DeleteEmployee(ctx context.Context, id string) (bool, error) {
	if err := r.StaffService.DeleteEmployee(ctx, id); err != nil {
		return false, err
	}

	return true, nil
}

// DeleteEmployees is the resolver for the deleteEmployees field.
func (r *mutationResolver) DeleteEmployees(ctx context.Context, ids []string) (bool, error) {
	if err := r.StaffService.BulkDeleteEmployees(ctx, ids); err != nil {
		return false, err
	}

	return true, nil
}

// ActivateEmployees is the resolver for the activateEmployees field.
func (r *mutationResolver) ActivateEmployees(ctx context.Context, ids []string) (bool, error) {
	if err := r.StaffService.BulkActivateEmployees(ctx, ids, true); err != nil {
		return false, err
	}

	return true, nil
}

// DeactivateEmployees is the resolver for the deactivateEmployees field.
func (r *mutationResolver) DeactivateEmployees(ctx context.Context, ids []string) (bool, error) {
	if err := r.StaffService.BulkActivateEmployees(ctx, ids, false); err != nil {
		return false, err
	}

	return true, nil
}

// PublishEmployees is the resolver for the publishEmployees field.
func (r *mutationResolver) PublishEmployees(ctx context.Context, ids []string) (bool, error) {
	if err := r.StaffService.BulkPublishEmployees(ctx, ids, true); err != nil {
		return false, err
	}

	return true, nil
}

// UnpublishEmployees is the resolver for the unpublishEmployees field.
func (r *mutationResolver) UnpublishEmployees(ctx context.Context, ids []string) (bool, error) {
	if err := r.StaffService.BulkPublishEmployees(ctx, ids, false); err != nil {
		return false, err
	}

	return true, nil
}

// AssignDepartmentToEmployees is the resolver for the assignDepartmentToEmployees field.
func (r *mutationResolver) AssignDepartmentToEmployees(ctx context.Context, department string, ids []string) (bool, error) {
	if err := r.StaffService.BulkAssignDepartmentToEmployees(ctx, ids, department, nil); err != nil {
		return false, err
	}

	return true, nil
}

// AssignRoleToEmployees is the resolver for the assignRoleToEmployees field.
func (r *mutationResolver) AssignRoleToEmployees(ctx context.Context, role string, ids []string) (bool, error) {
	if err := r.StaffService.BulkAssignRoleToEmployees(ctx, ids, role); err != nil {
		return false, err
	}

	return true, nil
}

// Employees is the resolver for the employees field.
func (r *queryResolver) Employees(ctx context.Context, ids []string, start *int, limit *int, sort *crm_models.Sort, search *string, filter *crm_models.EmployeesFilterInput) (*crm_models.EmployeeConnection, error) {
	employeeFilter := &staff_entity.EmployeeFilter{}
	if filter != nil {
		employeeFilter.DepartmentID = filter.Department
		employeeFilter.GroupID = filter.Group
		employeeFilter.RoleID = filter.Role
		employeeFilter.IsActive = filter.IsActive
		employeeFilter.IsDeleted = filter.IsDeleted
		employeeFilter.IsPublished = filter.IsPublished
		employeeFilter.Keyword = search
	}

	data, total, err := r.StaffService.SearchEmployees(ctx, start, limit, staff_entity.EmployeeSortDefault, employeeFilter)
	if err != nil {
		return nil, err
	}

	var nodes []*crm_models.Employee
	for _, v := range data {
		nodes = append(nodes, new(crm_models.Employee).FromEntity(v))
	}

	return &crm_models.EmployeeConnection{
		TotalCount: total,
		Nodes:      nodes,
		PageInfo:   &crm_models.PageInfo{},
	}, nil
}

// Employee is the resolver for the employee field.
func (r *queryResolver) Employee(ctx context.Context, id string) (*crm_models.Employee, error) {
	data, err := r.StaffService.GetEmployeeByID(ctx, id)
	if err != nil {
		return nil, err
	}

	return new(crm_models.Employee).FromEntity(data), nil
}

// Avatar is the resolver for the avatar field.
func (r *employeeInputResolver) Avatar(ctx context.Context, obj *crm_models.EmployeeInput, data *crm_models.ImageInput) error {
	if data != nil {
		if data.File != nil {
			result, err := r.ExchangeService.UploadImage(ctx, *data.ToEntity())
			if err != nil {
				return err
			}
			obj.AvatarID = &result.ID
		} else if data.ID != "" {
			obj.AvatarID = &data.ID
		}
	}

	return nil
}

// PublicImage is the resolver for the publicImage field.
func (r *employeeInputResolver) PublicImage(ctx context.Context, obj *crm_models.EmployeeInput, data *crm_models.ImageInput) error {
	if data != nil {
		if data.File != nil {
			result, err := r.ExchangeService.UploadImage(ctx, *data.ToEntity())
			if err != nil {
				return err
			}
			obj.PublicImageID = &result.ID
		} else if data.ID != "" {
			obj.PublicImageID = &data.ID
		}
	}

	return nil
}

// Employee returns crm_gateway.EmployeeResolver implementation.
func (r *Resolver) Employee() crm_gateway.EmployeeResolver { return &employeeResolver{r} }

// EmployeeInput returns crm_gateway.EmployeeInputResolver implementation.
func (r *Resolver) EmployeeInput() crm_gateway.EmployeeInputResolver {
	return &employeeInputResolver{r}
}

type employeeResolver struct{ *Resolver }
type employeeInputResolver struct{ *Resolver }
