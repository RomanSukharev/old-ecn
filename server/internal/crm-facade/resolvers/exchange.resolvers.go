package crm_resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.47

import (
	"context"
	"fmt"

	crm_models "github.com/pinks-agency/ecn/server/internal/crm-facade/models"
)

// UploadImage is the resolver for the uploadImage field.
func (r *mutationResolver) UploadImage(ctx context.Context, input crm_models.ImageInput) (*crm_models.Image, error) {
	data, err := r.ExchangeService.UploadImage(ctx, *input.ToEntity())
	if err != nil {
		return nil, err
	}

	return new(crm_models.Image).FromEntity(data), nil
}

// DeleteImage is the resolver for the deleteImage field.
func (r *mutationResolver) DeleteImage(ctx context.Context, id string) (bool, error) {
	if err := r.ExchangeService.DeleteImage(ctx, id); err != nil {
		return false, err
	}

	return true, nil
}

// UploadDocument is the resolver for the uploadDocument field.
func (r *mutationResolver) UploadDocument(ctx context.Context, input crm_models.DocumentInput) (*crm_models.Document, error) {
	data, err := r.ExchangeService.UploadDocument(ctx, *input.ToEntity())
	if err != nil {
		return nil, err
	}

	return new(crm_models.Document).FromEntity(data), nil
}

// DeleteDocument is the resolver for the deleteDocument field.
func (r *mutationResolver) DeleteDocument(ctx context.Context, id string) (bool, error) {
	if err := r.ExchangeService.DeleteDocument(ctx, id); err != nil {
		return false, err
	}

	return true, nil
}

// GeneratePDF is the resolver for the generatePdf field.
func (r *queryResolver) GeneratePDF(ctx context.Context, content string, fileName string) (string, error) {
	panic(fmt.Errorf("not implemented: GeneratePDF - generatePdf"))
}
