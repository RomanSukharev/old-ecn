package crm_resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.47

import (
	"context"
	"fmt"
	"time"

	crm_gateway "github.com/pinks-agency/ecn/server/internal/crm-facade/gateway"
	crm_models "github.com/pinks-agency/ecn/server/internal/crm-facade/models"
	estate_entity "github.com/pinks-agency/ecn/server/pkg/estate/entity"
)

// SaveProperty is the resolver for the saveProperty field.
func (r *mutationResolver) SaveProperty(ctx context.Context, input crm_models.PropertyInput) (bool, error) {
	_, err := r.EstateService.SaveProperty(ctx, *input.ToEntity())
	if err != nil {
		return false, err
	}

	return true, nil
}

// DeleteProperty is the resolver for the deleteProperty field.
func (r *mutationResolver) DeleteProperty(ctx context.Context, id string) (bool, error) {
	if err := r.EstateService.DeleteProperty(ctx, id); err != nil {
		return false, err
	}

	return true, nil
}

// RefreshProperty is the resolver for the refreshProperty field.
func (r *mutationResolver) RefreshProperty(ctx context.Context, id string) (bool, error) {
	if err := r.EstateService.RefreshProperty(ctx, id); err != nil {
		return false, err
	}

	return true, nil
}

// ApproveProperty is the resolver for the approveProperty field.
func (r *mutationResolver) ApproveProperty(ctx context.Context, id string) (bool, error) {
	if err := r.EstateService.ChangePropertyStatus(ctx, id, estate_entity.PropertyStatusPublished); err != nil {
		return false, err
	}

	return true, nil
}

// DeclineProperty is the resolver for the declineProperty field.
func (r *mutationResolver) DeclineProperty(ctx context.Context, id string) (bool, error) {
	if err := r.EstateService.ChangePropertyStatus(ctx, id, estate_entity.PropertyStatusUnpublished); err != nil {
		return false, err
	}

	return true, nil
}

// ArchiveProperty is the resolver for the archiveProperty field.
func (r *mutationResolver) ArchiveProperty(ctx context.Context, id string) (bool, error) {
	if err := r.EstateService.ChangePropertyStatus(ctx, id, estate_entity.PropertyStatusArchived); err != nil {
		return false, err
	}

	return true, nil
}

// BulkDeleteProperties is the resolver for the bulkDeleteProperties field.
func (r *mutationResolver) BulkDeleteProperties(ctx context.Context, ids []string) (bool, error) {
	if err := r.EstateService.BulkDeleteProperties(ctx, ids); err != nil {
		return false, err
	}

	return true, nil
}

// BulkRefreshProperties is the resolver for the bulkRefreshProperties field.
func (r *mutationResolver) BulkRefreshProperties(ctx context.Context, ids []string) (bool, error) {
	if err := r.EstateService.BulkRefreshProperties(ctx, ids); err != nil {
		return false, err
	}

	return true, nil
}

// BulkApproveProperties is the resolver for the bulkApproveProperties field.
func (r *mutationResolver) BulkApproveProperties(ctx context.Context, ids []string) (bool, error) {
	if err := r.EstateService.BulkChangePropertiesStatus(ctx, ids, estate_entity.PropertyStatusPublished); err != nil {
		return false, err
	}

	return true, nil
}

// BulkDeclineProperties is the resolver for the bulkDeclineProperties field.
func (r *mutationResolver) BulkDeclineProperties(ctx context.Context, ids []string) (bool, error) {
	if err := r.EstateService.BulkChangePropertiesStatus(ctx, ids, estate_entity.PropertyStatusUnpublished); err != nil {
		return false, err
	}

	return true, nil
}

// BulkArchiveProperties is the resolver for the bulkArchiveProperties field.
func (r *mutationResolver) BulkArchiveProperties(ctx context.Context, ids []string) (bool, error) {
	if err := r.EstateService.BulkChangePropertiesStatus(ctx, ids, estate_entity.PropertyStatusArchived); err != nil {
		return false, err
	}

	return true, nil
}

// Complex is the resolver for the complex field.
func (r *propertyResolver) Complex(ctx context.Context, obj *crm_models.Property) (*crm_models.Complex, error) {
	if obj.ComplexID != nil {
		data, err := r.EstateService.GetComplexByID(ctx, *obj.ComplexID)
		if err != nil {
			return nil, err
		}

		return new(crm_models.Complex).FromEntity(data), nil
	}

	return nil, nil
}

// ComplexHouse is the resolver for the complexHouse field.
func (r *propertyResolver) ComplexHouse(ctx context.Context, obj *crm_models.Property) (*crm_models.ComplexHouse, error) {
	if obj.ComplexHouseID != nil {
		data, err := r.EstateService.GetComplexHouseByID(ctx, *obj.ComplexHouseID)
		if err != nil {
			return nil, err
		}

		return new(crm_models.ComplexHouse).FromEntity(data), nil
	}

	return nil, nil
}

// Village is the resolver for the village field.
func (r *propertyResolver) Village(ctx context.Context, obj *crm_models.Property) (*crm_models.Village, error) {
	if obj.VillageID != nil {
		data, err := r.EstateService.GetVillageByID(ctx, *obj.VillageID)
		if err != nil {
			return nil, err
		}

		return new(crm_models.Village).FromEntity(data), nil
	}

	return nil, nil
}

// Documents is the resolver for the documents field.
func (r *propertyResolver) Documents(ctx context.Context, obj *crm_models.Property) ([]*crm_models.Document, error) {
	result := make([]*crm_models.Document, 0, len(obj.DocumentIDs))

	for _, v := range obj.DocumentIDs {
		data, err := r.ExchangeService.GetDocumentByID(ctx, v)
		if err != nil {
			return nil, nil
		}

		result = append(result, new(crm_models.Document).FromEntity(data))
	}

	return result, nil
}

// Images is the resolver for the images field.
func (r *propertyResolver) Images(ctx context.Context, obj *crm_models.Property) ([]*crm_models.Image, error) {
	result := make([]*crm_models.Image, 0, len(obj.ImageIDs))

	for _, v := range obj.ImageIDs {
		data, err := r.ExchangeService.GetImageByID(ctx, v)
		if err != nil {
			return nil, nil
		}

		result = append(result, new(crm_models.Image).FromEntity(data))
	}

	return result, nil
}

// Properties is the resolver for the properties field.
func (r *queryResolver) Properties(ctx context.Context, ids []string, start *int, limit *int, sort *crm_models.Sort, search *string, filter *crm_models.PropertyFilter) (*crm_models.PropertyConnection, error) {
	propertyFilter := &estate_entity.PropertyFilter{
		Keyword: search,
	}
	if filter != nil {
		if filter.Deal != nil {
			propertyFilter.Deal = (*estate_entity.Deal)(filter.Deal)
		}

		if filter.Type != nil {
			propertyFilter.Type = (*estate_entity.PropertyType)(filter.Type)
		}

		if filter.SubType != nil {
			propertyFilter.SubType = (*estate_entity.PropertySubType)(filter.SubType)
		}

		propertyFilter.FromDeveloper = filter.FromDeveloper
		propertyFilter.ComplexID = filter.ComplexID
		propertyFilter.VillageID = filter.VillageID
		propertyFilter.IsHot = filter.IsHot
		propertyFilter.IsDeleted = filter.IsDeleted

		for _, v := range filter.Statuses {
			propertyFilter.Statuses = append(propertyFilter.Statuses, estate_entity.PropertyStatus(v))
		}

		propertyFilter.IsStudio = filter.IsStudio
		propertyFilter.MinRooms = filter.MinRooms
		propertyFilter.MaxRooms = filter.MaxRooms

		propertyFilter.MinPrice = filter.MinPrice
		propertyFilter.MaxPrice = filter.MaxPrice
		propertyFilter.MinPricePerMeter = filter.MinPricePerMeter
		propertyFilter.MaxPricePerMeter = filter.MaxPricePerMeter
		propertyFilter.MinPricePerAr = filter.MinPricePerAr
		propertyFilter.MaxPricePerAr = filter.MaxPricePerAr
		propertyFilter.MinArea = filter.MinArea
		propertyFilter.MaxArea = filter.MaxArea
		propertyFilter.MinLandArea = filter.MinLandArea
		propertyFilter.MaxLandArea = filter.MaxLandArea
		propertyFilter.IsReady = filter.IsReady
		propertyFilter.InCity = filter.InCity
		propertyFilter.MinCityDistance = filter.MinCityDistance
		propertyFilter.MaxCityDistance = filter.MaxCityDistance

		if filter.MinCreatedAt != nil {
			propertyFilter.MinCreatedAt = *filter.MinCreatedAt
		}

		if filter.MaxCreatedAt != nil {
			propertyFilter.MaxCreatedAt = *filter.MaxCreatedAt
		}

		propertyFilter.WithPhotos = filter.WithPhotos
	}

	data, total, err := r.EstateService.SearchProperties(ctx, start, limit, estate_entity.PropertySortDefault, propertyFilter)
	if err != nil {
		return nil, err
	}

	var nodes []*crm_models.Property
	for _, v := range data {
		nodes = append(nodes, new(crm_models.Property).FromEntity(v))
	}

	return &crm_models.PropertyConnection{
		TotalCount: total,
		Nodes:      nodes,
		PageInfo:   &crm_models.PageInfo{},
	}, nil
}

// Property is the resolver for the property field.
func (r *queryResolver) Property(ctx context.Context, id string) (*crm_models.Property, error) {
	data, err := r.EstateService.GetPropertyByID(ctx, id)
	if err != nil {
		return nil, err
	}

	return new(crm_models.Property).FromEntity(data), nil
}

// Documents is the resolver for the documents field.
func (r *propertyInputResolver) Documents(ctx context.Context, obj *crm_models.PropertyInput, data []*crm_models.DocumentInput) error {
	for _, v := range data {
		if v.File != nil {
			result, err := r.ExchangeService.UploadDocument(ctx, *v.ToEntity())
			if err != nil {
				return err
			}

			obj.DocumentIDs = append(obj.DocumentIDs, result.ID)
		} else if v.ID != "" {
			obj.DocumentIDs = append(obj.DocumentIDs, v.ID)
		}
	}

	return nil
}

// Images is the resolver for the images field.
func (r *propertyInputResolver) Images(ctx context.Context, obj *crm_models.PropertyInput, data []*crm_models.ImageInput) error {
	for _, v := range data {
		if v.File != nil {
			result, err := r.ExchangeService.UploadImage(ctx, *v.ToEntity())
			if err != nil {
				return err
			}

			obj.ImageIDs = append(obj.ImageIDs, result.ID)
		} else if v.ID != "" {
			obj.ImageIDs = append(obj.ImageIDs, v.ID)
		}
	}

	return nil
}

// Property returns crm_gateway.PropertyResolver implementation.
func (r *Resolver) Property() crm_gateway.PropertyResolver { return &propertyResolver{r} }

// PropertyInput returns crm_gateway.PropertyInputResolver implementation.
func (r *Resolver) PropertyInput() crm_gateway.PropertyInputResolver {
	return &propertyInputResolver{r}
}

type propertyResolver struct{ *Resolver }
type propertyInputResolver struct{ *Resolver }

// !!! WARNING !!!
// The code below was going to be deleted when updating resolvers. It has been copied here so you have
// one last chance to move it out of harms way if you want. There are two reasons this happens:
//   - When renaming or deleting a resolver the old code will be put in here. You can safely delete
//     it when you're done.
//   - You have helper methods in this file. Move them out to keep these resolver files clean.
func (r *propertyResolver) Type(ctx context.Context, obj *crm_models.Property) (*crm_models.PropertyTypeEnum, error) {
	panic(fmt.Errorf("not implemented: Type - type"))
}
func (r *propertyResolver) SubType(ctx context.Context, obj *crm_models.Property) (*crm_models.PropertySubTypeEnum, error) {
	panic(fmt.Errorf("not implemented: SubType - subType"))
}
func (r *propertyInputResolver) Type(ctx context.Context, obj *crm_models.PropertyInput, data *crm_models.PropertyTypeEnum) error {
	panic(fmt.Errorf("not implemented: Type - type"))
}
func (r *propertyInputResolver) SubType(ctx context.Context, obj *crm_models.PropertyInput, data *crm_models.PropertySubTypeEnum) error {
	panic(fmt.Errorf("not implemented: SubType - subType"))
}
func (r *propertyResolver) LandArea(ctx context.Context, obj *crm_models.Property) (*float64, error) {
	panic(fmt.Errorf("not implemented: LandArea - landArea"))
}
func (r *propertyInputResolver) IsDeleted(ctx context.Context, obj *crm_models.PropertyInput, data *bool) error {
	panic(fmt.Errorf("not implemented: IsDeleted - isDeleted"))
}
func (r *propertyInputResolver) Status(ctx context.Context, obj *crm_models.PropertyInput, data *crm_models.PropertyStatusEnum) error {
	panic(fmt.Errorf("not implemented: Status - status"))
}
func (r *propertyInputResolver) LandArea(ctx context.Context, obj *crm_models.PropertyInput, data *float64) error {
	panic(fmt.Errorf("not implemented: LandArea - landArea"))
}
func (r *propertyResolver) PublicationStatus(ctx context.Context, obj *crm_models.Property) (*crm_models.PublicationStatusEnum, error) {
	panic(fmt.Errorf("not implemented: PublicationStatus - publicationStatus"))
}
func (r *propertyInputResolver) PublicationStatus(ctx context.Context, obj *crm_models.PropertyInput, data *crm_models.PublicationStatusEnum) error {
	panic(fmt.Errorf("not implemented: PublicationStatus - publicationStatus"))
}
func (r *propertyResolver) InternalID(ctx context.Context, obj *crm_models.Property) (*int, error) {
	panic(fmt.Errorf("not implemented: InternalID - internalID"))
}
func (r *propertyResolver) Deal(ctx context.Context, obj *crm_models.Property) (*crm_models.DealEnum, error) {
	panic(fmt.Errorf("not implemented: Deal - deal"))
}
func (r *propertyResolver) CommercialUsage(ctx context.Context, obj *crm_models.Property) ([]*crm_models.CommercialUsageEnum, error) {
	panic(fmt.Errorf("not implemented: CommercialUsage - commercialUsage"))
}
func (r *propertyResolver) FromDeveloper(ctx context.Context, obj *crm_models.Property) (*bool, error) {
	panic(fmt.Errorf("not implemented: FromDeveloper - fromDeveloper"))
}
func (r *propertyResolver) InComplex(ctx context.Context, obj *crm_models.Property) (*bool, error) {
	panic(fmt.Errorf("not implemented: InComplex - inComplex"))
}
func (r *propertyResolver) InVillage(ctx context.Context, obj *crm_models.Property) (*bool, error) {
	panic(fmt.Errorf("not implemented: InVillage - inVillage"))
}
func (r *propertyResolver) IsHot(ctx context.Context, obj *crm_models.Property) (*bool, error) {
	panic(fmt.Errorf("not implemented: IsHot - isHot"))
}
func (r *propertyResolver) IsArchived(ctx context.Context, obj *crm_models.Property) (*bool, error) {
	panic(fmt.Errorf("not implemented: IsArchived - isArchived"))
}
func (r *propertyResolver) RefreshDate(ctx context.Context, obj *crm_models.Property) (*time.Time, error) {
	panic(fmt.Errorf("not implemented: RefreshDate - refreshDate"))
}
func (r *propertyResolver) PricePerAr(ctx context.Context, obj *crm_models.Property) (*float64, error) {
	panic(fmt.Errorf("not implemented: PricePerAr - pricePerAr"))
}
func (r *propertyResolver) IsReady(ctx context.Context, obj *crm_models.Property) (*bool, error) {
	panic(fmt.Errorf("not implemented: IsReady - isReady"))
}
func (r *propertyResolver) ReadinessYear(ctx context.Context, obj *crm_models.Property) (*int, error) {
	panic(fmt.Errorf("not implemented: ReadinessYear - readinessYear"))
}
func (r *propertyResolver) ReadinessQuarter(ctx context.Context, obj *crm_models.Property) (*crm_models.QuarterEnum, error) {
	panic(fmt.Errorf("not implemented: ReadinessQuarter - readinessQuarter"))
}
func (r *propertyResolver) BuildYear(ctx context.Context, obj *crm_models.Property) (*int, error) {
	panic(fmt.Errorf("not implemented: BuildYear - buildYear"))
}
func (r *propertyResolver) InCity(ctx context.Context, obj *crm_models.Property) (*bool, error) {
	panic(fmt.Errorf("not implemented: InCity - inCity"))
}
func (r *propertyResolver) RehabType(ctx context.Context, obj *crm_models.Property) (*crm_models.RehabTypeEnum, error) {
	panic(fmt.Errorf("not implemented: RehabType - rehabType"))
}
func (r *propertyResolver) InternalInfo(ctx context.Context, obj *crm_models.Property) (*string, error) {
	panic(fmt.Errorf("not implemented: InternalInfo - internalInfo"))
}
func (r *propertyResolver) ComissionPercent(ctx context.Context, obj *crm_models.Property) (*float64, error) {
	panic(fmt.Errorf("not implemented: ComissionPercent - comissionPercent"))
}
func (r *propertyResolver) ComissionAmount(ctx context.Context, obj *crm_models.Property) (*float64, error) {
	panic(fmt.Errorf("not implemented: ComissionAmount - comissionAmount"))
}
func (r *propertyInputResolver) Deal(ctx context.Context, obj *crm_models.PropertyInput, data *crm_models.DealEnum) error {
	panic(fmt.Errorf("not implemented: Deal - deal"))
}
func (r *propertyInputResolver) CommercialUsage(ctx context.Context, obj *crm_models.PropertyInput, data []*crm_models.CommercialUsageEnum) error {
	panic(fmt.Errorf("not implemented: CommercialUsage - commercialUsage"))
}
func (r *propertyInputResolver) FromDeveloper(ctx context.Context, obj *crm_models.PropertyInput, data *bool) error {
	panic(fmt.Errorf("not implemented: FromDeveloper - fromDeveloper"))
}
func (r *propertyInputResolver) InComplex(ctx context.Context, obj *crm_models.PropertyInput, data *bool) error {
	panic(fmt.Errorf("not implemented: InComplex - inComplex"))
}
func (r *propertyInputResolver) InVillage(ctx context.Context, obj *crm_models.PropertyInput, data *bool) error {
	panic(fmt.Errorf("not implemented: InVillage - inVillage"))
}
func (r *propertyInputResolver) VillageID(ctx context.Context, obj *crm_models.PropertyInput, data *string) error {
	panic(fmt.Errorf("not implemented: VillageID - villageID"))
}
func (r *propertyInputResolver) IsHot(ctx context.Context, obj *crm_models.PropertyInput, data *bool) error {
	panic(fmt.Errorf("not implemented: IsHot - isHot"))
}
func (r *propertyInputResolver) IsArchived(ctx context.Context, obj *crm_models.PropertyInput, data *bool) error {
	panic(fmt.Errorf("not implemented: IsArchived - isArchived"))
}
func (r *propertyInputResolver) IsReady(ctx context.Context, obj *crm_models.PropertyInput, data *bool) error {
	panic(fmt.Errorf("not implemented: IsReady - isReady"))
}
func (r *propertyInputResolver) ReadinessYear(ctx context.Context, obj *crm_models.PropertyInput, data *int) error {
	panic(fmt.Errorf("not implemented: ReadinessYear - readinessYear"))
}
func (r *propertyInputResolver) ReadinessQuarter(ctx context.Context, obj *crm_models.PropertyInput, data *crm_models.QuarterEnum) error {
	panic(fmt.Errorf("not implemented: ReadinessQuarter - readinessQuarter"))
}
func (r *propertyInputResolver) BuildYear(ctx context.Context, obj *crm_models.PropertyInput, data *int) error {
	panic(fmt.Errorf("not implemented: BuildYear - buildYear"))
}
func (r *propertyInputResolver) InCity(ctx context.Context, obj *crm_models.PropertyInput, data *bool) error {
	panic(fmt.Errorf("not implemented: InCity - inCity"))
}
func (r *propertyInputResolver) RehabType(ctx context.Context, obj *crm_models.PropertyInput, data *crm_models.RehabTypeEnum) error {
	panic(fmt.Errorf("not implemented: RehabType - rehabType"))
}
func (r *propertyInputResolver) InternalInfo(ctx context.Context, obj *crm_models.PropertyInput, data *string) error {
	panic(fmt.Errorf("not implemented: InternalInfo - internalInfo"))
}
func (r *propertyInputResolver) ComissionPercent(ctx context.Context, obj *crm_models.PropertyInput, data *float64) error {
	panic(fmt.Errorf("not implemented: ComissionPercent - comissionPercent"))
}
func (r *propertyInputResolver) ComissionAmount(ctx context.Context, obj *crm_models.PropertyInput, data *float64) error {
	panic(fmt.Errorf("not implemented: ComissionAmount - comissionAmount"))
}
