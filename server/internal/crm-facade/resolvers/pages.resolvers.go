package crm_resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.47

import (
	"context"

	crm_models "github.com/pinks-agency/ecn/server/internal/crm-facade/models"
	content_entity "github.com/pinks-agency/ecn/server/pkg/content/entity"
	shared_entity "github.com/pinks-agency/ecn/server/pkg/shared/entity"
)

// SavePage is the resolver for the savePage field.
func (r *mutationResolver) SavePage(ctx context.Context, input crm_models.PageInput) (bool, error) {
	_, err := r.ContentService.SavePage(ctx, *input.ToEntity())
	if err != nil {
		return false, err
	}

	return true, nil
}

// DeletePage is the resolver for the deletePage field.
func (r *mutationResolver) DeletePage(ctx context.Context, id string) (bool, error) {
	if err := r.ContentService.DeletePage(ctx, id); err != nil {
		return false, err
	}

	return true, nil
}

// Pages is the resolver for the pages field.
func (r *queryResolver) Pages(ctx context.Context, ids []string, start *int, limit *int, sort *crm_models.Sort, search *string, filter *crm_models.PageFilterInput) (*crm_models.PageConnection, error) {
	pageFilter := &content_entity.PageFilter{}
	if filter != nil {
		if filter.Status != nil {
			pageFilter.PublicationStatus = (*shared_entity.PublicationStatus)(filter.Status)
		}

		pageFilter.Keyword = search
	}

	data, total, err := r.ContentService.SearchPages(ctx, start, limit, content_entity.PageSortDefault, pageFilter)
	if err != nil {
		return nil, err
	}

	var nodes []*crm_models.Page
	for _, v := range data {
		nodes = append(nodes, new(crm_models.Page).FromEntity(v))
	}

	return &crm_models.PageConnection{
		TotalCount: total,
		Nodes:      nodes,
		PageInfo:   &crm_models.PageInfo{},
	}, nil
}

// Page is the resolver for the page field.
func (r *queryResolver) Page(ctx context.Context, id string) (*crm_models.Page, error) {
	data, err := r.ContentService.GetPageByID(ctx, id)
	if err != nil {
		return nil, err
	}

	return new(crm_models.Page).FromEntity(data), nil
}
