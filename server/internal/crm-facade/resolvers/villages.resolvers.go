package crm_resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.47

import (
	"context"

	crm_gateway "github.com/pinks-agency/ecn/server/internal/crm-facade/gateway"
	crm_models "github.com/pinks-agency/ecn/server/internal/crm-facade/models"
	estate_entity "github.com/pinks-agency/ecn/server/pkg/estate/entity"
	shared_entity "github.com/pinks-agency/ecn/server/pkg/shared/entity"
)

// SaveVillage is the resolver for the saveVillage field.
func (r *mutationResolver) SaveVillage(ctx context.Context, input crm_models.VillageInput) (bool, error) {
	_, err := r.EstateService.SaveVillage(ctx, *input.ToEntity())
	if err != nil {
		return false, err
	}

	return true, nil
}

// DeleteVillage is the resolver for the deleteVillage field.
func (r *mutationResolver) DeleteVillage(ctx context.Context, id string) (bool, error) {
	if err := r.EstateService.DeleteVillage(ctx, id); err != nil {
		return false, err
	}

	return true, nil
}

// BulkDeleteVillages is the resolver for the bulkDeleteVillages field.
func (r *mutationResolver) BulkDeleteVillages(ctx context.Context, ids []string) (bool, error) {
	if err := r.EstateService.BulkDeleteVillages(ctx, ids); err != nil {
		return false, err
	}

	return true, nil
}

// Villages is the resolver for the villages field.
func (r *queryResolver) Villages(ctx context.Context, ids []string, start *int, limit *int, sort *crm_models.Sort, search *string, filter *crm_models.VillageFilter) (*crm_models.VillageConnection, error) {
	villageFilter := &estate_entity.VillageFilter{
		Keyword: search,
	}
	if filter != nil {
		villageFilter.DeveloperID = filter.DeveloperID
		villageFilter.IsDeleted = filter.IsDeleted
		villageFilter.WithPhotos = filter.WithPhotos

		if filter.PublicationStatus != nil {
			villageFilter.PublicationStatus = (*shared_entity.PublicationStatus)(filter.PublicationStatus)
		}
	}

	data, total, err := r.EstateService.SearchVillages(ctx, start, limit, estate_entity.VillageSortDefault, villageFilter)
	if err != nil {
		return nil, err
	}

	var nodes []*crm_models.Village
	for _, v := range data {
		nodes = append(nodes, new(crm_models.Village).FromEntity(v))
	}

	return &crm_models.VillageConnection{
		TotalCount: total,
		Nodes:      nodes,
		PageInfo:   &crm_models.PageInfo{},
	}, nil
}

// Village is the resolver for the village field.
func (r *queryResolver) Village(ctx context.Context, id string) (*crm_models.Village, error) {
	data, err := r.EstateService.GetVillageByID(ctx, id)
	if err != nil {
		return nil, err
	}

	return new(crm_models.Village).FromEntity(data), nil
}

// Developer is the resolver for the developer field.
func (r *villageResolver) Developer(ctx context.Context, obj *crm_models.Village) (*crm_models.Developer, error) {
	if obj.DeveloperID != nil {
		data, err := r.EstateService.GetDeveloperByID(ctx, *obj.DeveloperID)
		if err != nil {
			return nil, err
		}

		return new(crm_models.Developer).FromEntity(data), nil
	}

	return nil, nil
}

// Images is the resolver for the images field.
func (r *villageResolver) Images(ctx context.Context, obj *crm_models.Village) ([]*crm_models.Image, error) {
	result := make([]*crm_models.Image, 0, len(obj.ImageIDs))

	for _, v := range obj.ImageIDs {
		data, err := r.ExchangeService.GetImageByID(ctx, v)
		if err != nil {
			return nil, nil
		}

		result = append(result, new(crm_models.Image).FromEntity(data))
	}

	return result, nil
}

// Documents is the resolver for the documents field.
func (r *villageResolver) Documents(ctx context.Context, obj *crm_models.Village) ([]*crm_models.Document, error) {
	result := make([]*crm_models.Document, 0, len(obj.DocumentIDs))

	for _, v := range obj.DocumentIDs {
		data, err := r.ExchangeService.GetDocumentByID(ctx, v)
		if err != nil {
			return nil, nil
		}

		result = append(result, new(crm_models.Document).FromEntity(data))
	}

	return result, nil
}

// ProjectDeclarations is the resolver for the projectDeclarations field.
func (r *villageResolver) ProjectDeclarations(ctx context.Context, obj *crm_models.Village) ([]*crm_models.Document, error) {
	result := make([]*crm_models.Document, 0, len(obj.ProjectDeclarationIDs))

	for _, v := range obj.ProjectDeclarationIDs {
		data, err := r.ExchangeService.GetDocumentByID(ctx, v)
		if err != nil {
			return nil, nil
		}

		result = append(result, new(crm_models.Document).FromEntity(data))
	}

	return result, nil
}

// Images is the resolver for the images field.
func (r *villageInputResolver) Images(ctx context.Context, obj *crm_models.VillageInput, data []*crm_models.ImageInput) error {
	for _, v := range data {
		if v.File != nil {
			result, err := r.ExchangeService.UploadImage(ctx, *v.ToEntity())
			if err != nil {
				return err
			}

			obj.ImageIDs = append(obj.ImageIDs, result.ID)
		} else if v.ID != "" {
			obj.ImageIDs = append(obj.ImageIDs, v.ID)
		}
	}

	return nil
}

// Documents is the resolver for the documents field.
func (r *villageInputResolver) Documents(ctx context.Context, obj *crm_models.VillageInput, data []*crm_models.DocumentInput) error {
	for _, v := range data {
		if v.File != nil {
			result, err := r.ExchangeService.UploadDocument(ctx, *v.ToEntity())
			if err != nil {
				return err
			}

			obj.DocumentIDs = append(obj.DocumentIDs, result.ID)
		} else if v.ID != "" {
			obj.DocumentIDs = append(obj.DocumentIDs, v.ID)
		}
	}

	return nil
}

// ProjectDeclarations is the resolver for the projectDeclarations field.
func (r *villageInputResolver) ProjectDeclarations(ctx context.Context, obj *crm_models.VillageInput, data []*crm_models.DocumentInput) error {
	for _, v := range data {
		if v.File != nil {
			result, err := r.ExchangeService.UploadDocument(ctx, *v.ToEntity())
			if err != nil {
				return err
			}

			obj.ProjectDeclarationIDs = append(obj.ProjectDeclarationIDs, result.ID)
		} else if v.ID != "" {
			obj.ProjectDeclarationIDs = append(obj.ProjectDeclarationIDs, v.ID)
		}
	}

	return nil
}

// Village returns crm_gateway.VillageResolver implementation.
func (r *Resolver) Village() crm_gateway.VillageResolver { return &villageResolver{r} }

// VillageInput returns crm_gateway.VillageInputResolver implementation.
func (r *Resolver) VillageInput() crm_gateway.VillageInputResolver { return &villageInputResolver{r} }

type villageResolver struct{ *Resolver }
type villageInputResolver struct{ *Resolver }
