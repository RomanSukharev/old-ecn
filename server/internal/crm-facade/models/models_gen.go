// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package crm_models

import (
	"fmt"
	"io"
	"strconv"
	"time"
)

type Node interface {
	IsNode()
	GetID() string
}

type ArticleConnection struct {
	TotalCount int            `json:"totalCount"`
	Edges      []*ArticleEdge `json:"edges"`
	Nodes      []*Article     `json:"nodes"`
	PageInfo   *PageInfo      `json:"pageInfo"`
}

type ArticleEdge struct {
	Node   *Article `json:"node"`
	Cursor string   `json:"cursor"`
}

type ArticleGroupConnection struct {
	TotalCount int                 `json:"totalCount"`
	Edges      []*ArticleGroupEdge `json:"edges"`
	Nodes      []*ArticleGroup     `json:"nodes"`
	PageInfo   *PageInfo           `json:"pageInfo"`
}

type ArticleGroupEdge struct {
	Node   *ArticleGroup `json:"node"`
	Cursor string        `json:"cursor"`
}

type ArticlesFilterInput struct {
	GroupID *string                `json:"groupID,omitempty"`
	Status  *PublicationStatusEnum `json:"status,omitempty"`
}

type Bank struct {
	ID    string  `json:"id"`
	Title *string `json:"title,omitempty"`
}

type ComplexConnection struct {
	TotalCount int            `json:"totalCount"`
	Edges      []*ComplexEdge `json:"edges"`
	Nodes      []*Complex     `json:"nodes"`
	PageInfo   *PageInfo      `json:"pageInfo"`
}

type ComplexEdge struct {
	Node   *Complex `json:"node"`
	Cursor string   `json:"cursor"`
}

type ComplexFilter struct {
	DeveloperID       *string                `json:"developerID,omitempty"`
	IsDeleted         *bool                  `json:"isDeleted,omitempty"`
	PublicationStatus *PublicationStatusEnum `json:"publicationStatus,omitempty"`
	WithPhotos        *bool                  `json:"withPhotos,omitempty"`
}

type ComplexHouseConnection struct {
	TotalCount int                 `json:"totalCount"`
	Edges      []*ComplexHouseEdge `json:"edges"`
	Nodes      []*ComplexHouse     `json:"nodes"`
	PageInfo   *PageInfo           `json:"pageInfo"`
}

type ComplexHouseEdge struct {
	Node   *ComplexHouse `json:"node"`
	Cursor string        `json:"cursor"`
}

type ComplexHouseFilter struct {
	ComplexID         *string                `json:"complexID,omitempty"`
	IsDeleted         *bool                  `json:"isDeleted,omitempty"`
	PublicationStatus *PublicationStatusEnum `json:"publicationStatus,omitempty"`
	WithPhotos        *bool                  `json:"withPhotos,omitempty"`
}

type ContactConnection struct {
	TotalCount int            `json:"totalCount"`
	Edges      []*ContactEdge `json:"edges"`
	Nodes      []*Contact     `json:"nodes"`
	PageInfo   *PageInfo      `json:"pageInfo"`
}

type ContactEdge struct {
	Node   *Contact `json:"node"`
	Cursor string   `json:"cursor"`
}

type ContactFilter struct {
	Phone        *string               `json:"phone,omitempty"`
	Email        *string               `json:"email,omitempty"`
	Type         *CounterPartyTypeEnum `json:"type,omitempty"`
	Company      *string               `json:"company,omitempty"`
	Address      *string               `json:"address,omitempty"`
	Employee     *string               `json:"employee,omitempty"`
	CreatedAtMin *time.Time            `json:"createdAtMin,omitempty"`
	CreatedAtMax *time.Time            `json:"createdAtMax,omitempty"`
}

type ContentBlock struct {
	Type      ContentBlockType       `json:"type"`
	Data      map[string]interface{} `json:"data"`
	IsVisible bool                   `json:"isVisible"`
}

type ContentBlockInput struct {
	Type      ContentBlockType       `json:"type"`
	Data      map[string]interface{} `json:"data"`
	IsVisible bool                   `json:"isVisible"`
}

type DealConnection struct {
	TotalCount int         `json:"totalCount"`
	Edges      []*DealEdge `json:"edges"`
	Nodes      []*Deal     `json:"nodes"`
	PageInfo   *PageInfo   `json:"pageInfo"`
}

type DealEdge struct {
	Node   *Deal  `json:"node"`
	Cursor string `json:"cursor"`
}

type DealFilter struct {
	Type          *DealTypeEnum     `json:"Type,omitempty"`
	Deal          *string           `json:"deal,omitempty"`
	Stage         *DealStageEnum    `json:"stage,omitempty"`
	PropertyType  *PropertyTypeEnum `json:"propertyType,omitempty"`
	Phone         *string           `json:"phone,omitempty"`
	Employee      *string           `json:"employee,omitempty"`
	Contact       *string           `json:"contact,omitempty"`
	IsDeleted     *bool             `json:"isDeleted,omitempty"`
	CreatedAtMin  *time.Time        `json:"createdAtMin,omitempty"`
	CreatedAtMax  *time.Time        `json:"createdAtMax,omitempty"`
	FinishedAtMin *time.Time        `json:"finishedAtMin,omitempty"`
	FinishedAtMax *time.Time        `json:"finishedAtMax,omitempty"`
}

type DepartmentConnection struct {
	TotalCount int               `json:"totalCount"`
	Edges      []*DepartmentEdge `json:"edges"`
	Nodes      []*Department     `json:"nodes"`
	PageInfo   *PageInfo         `json:"pageInfo"`
}

type DepartmentEdge struct {
	Node   *Department `json:"node"`
	Cursor string      `json:"cursor"`
}

type DeveloperConnection struct {
	TotalCount int              `json:"totalCount"`
	Edges      []*DeveloperEdge `json:"edges"`
	Nodes      []*Developer     `json:"nodes"`
	PageInfo   *PageInfo        `json:"pageInfo"`
}

type DeveloperEdge struct {
	Node   *Developer `json:"node"`
	Cursor string     `json:"cursor"`
}

type DeveloperFilterInput struct {
	IsDeleted *bool `json:"isDeleted,omitempty"`
}

type EmployeeConnection struct {
	TotalCount int             `json:"totalCount"`
	Edges      []*EmployeeEdge `json:"edges"`
	Nodes      []*Employee     `json:"nodes"`
	PageInfo   *PageInfo       `json:"pageInfo"`
}

type EmployeeEdge struct {
	Node   *Employee `json:"node"`
	Cursor string    `json:"cursor"`
}

type EmployeesFilterInput struct {
	Position    *string `json:"position,omitempty"`
	Department  *string `json:"department,omitempty"`
	Group       *string `json:"group,omitempty"`
	Role        *string `json:"role,omitempty"`
	IsActive    *bool   `json:"isActive,omitempty"`
	IsPublished *bool   `json:"isPublished,omitempty"`
	IsDeleted   *bool   `json:"isDeleted,omitempty"`
}

type LeadConnection struct {
	TotalCount int         `json:"totalCount"`
	Edges      []*LeadEdge `json:"edges"`
	Nodes      []*Lead     `json:"nodes"`
	PageInfo   *PageInfo   `json:"pageInfo"`
}

type LeadEdge struct {
	Node   *Lead  `json:"node"`
	Cursor string `json:"cursor"`
}

type LeadFilter struct {
	Phone        *string         `json:"phone,omitempty"`
	Email        *string         `json:"email,omitempty"`
	Type         *LeadTypeEnum   `json:"type,omitempty"`
	Status       *LeadStatusEnum `json:"status,omitempty"`
	Company      *string         `json:"company,omitempty"`
	CreatedAtMin *time.Time      `json:"createdAtMin,omitempty"`
	CreatedAtMax *time.Time      `json:"createdAtMax,omitempty"`
}

type LogConnection struct {
	TotalCount int        `json:"totalCount"`
	Edges      []*LogEdge `json:"edges"`
	Nodes      []*Log     `json:"nodes"`
	PageInfo   *PageInfo  `json:"pageInfo"`
}

type LogEdge struct {
	Node   *Log   `json:"node"`
	Cursor string `json:"cursor"`
}

// Результат аутентификации
type LoginOutput struct {
	// JWT-токен пользователя
	Token string `json:"token"`
	// Сведения о текущем пользователе
	Me *Me `json:"me"`
}

type LogsFilterInput struct {
	Author *string       `json:"author,omitempty"`
	Type   *LogTypeEnum  `json:"type,omitempty"`
	Level  *LogLevelEnum `json:"level,omitempty"`
}

type MeetConnection struct {
	TotalCount int         `json:"totalCount"`
	Edges      []*MeetEdge `json:"edges"`
	Nodes      []*Meet     `json:"nodes"`
	PageInfo   *PageInfo   `json:"pageInfo"`
}

type MeetEdge struct {
	Node   *Meet  `json:"node"`
	Cursor string `json:"cursor"`
}

type MeetFilter struct {
	Type          *MeetTypeEnum    `json:"type,omitempty"`
	Status        []MeetStatusEnum `json:"status,omitempty"`
	DealType      *DealTypeEnum    `json:"dealType,omitempty"`
	SellerAgent   *string          `json:"sellerAgent,omitempty"`
	BuyerAgent    *string          `json:"buyerAgent,omitempty"`
	BuyerContact  *string          `json:"buyerContact,omitempty"`
	SellerContact *string          `json:"sellerContact,omitempty"`
	Property      *string          `json:"property,omitempty"`
	Phone         *string          `json:"phone,omitempty"`
	Address       *string          `json:"address,omitempty"`
	CreatedAtMin  *time.Time       `json:"createdAtMin,omitempty"`
	CreatedAtMax  *time.Time       `json:"createdAtMax,omitempty"`
}

type MortgageRequestConnection struct {
	TotalCount int                    `json:"totalCount"`
	Edges      []*MortgageRequestEdge `json:"edges"`
	Nodes      []*MortgageRequest     `json:"nodes"`
	PageInfo   *PageInfo              `json:"pageInfo"`
}

type MortgageRequestEdge struct {
	Node   *MortgageRequest `json:"node"`
	Cursor string           `json:"cursor"`
}

type MortgageRequestFilter struct {
	Status         *MortgageRequestStatusEnum `json:"status,omitempty"`
	MortgageBroker *string                    `json:"mortgageBroker,omitempty"`
	Agent          *string                    `json:"agent,omitempty"`
	Contact        *string                    `json:"contact,omitempty"`
	Property       *string                    `json:"property,omitempty"`
	Deal           *string                    `json:"deal,omitempty"`
	Amount         *float64                   `json:"amount,omitempty"`
	FirstDeposit   *float64                   `json:"firstDeposit,omitempty"`
	Period         *int                       `json:"period,omitempty"`
	Percentage     *float64                   `json:"percentage,omitempty"`
	SendDate       *time.Time                 `json:"sendDate,omitempty"`
	ResponseDate   *time.Time                 `json:"responseDate,omitempty"`
	CreatedAtMin   *time.Time                 `json:"createdAtMin,omitempty"`
	CreatedAtMax   *time.Time                 `json:"createdAtMax,omitempty"`
}

type Mutation struct {
}

type PageConnection struct {
	TotalCount int         `json:"totalCount"`
	Edges      []*PageEdge `json:"edges"`
	Nodes      []*Page     `json:"nodes"`
	PageInfo   *PageInfo   `json:"pageInfo"`
}

type PageEdge struct {
	Node   *Page  `json:"node"`
	Cursor string `json:"cursor"`
}

type PageFilterInput struct {
	Status *PublicationStatusEnum `json:"status,omitempty"`
}

type PageInfo struct {
	StartCursor     *string `json:"startCursor,omitempty"`
	EndCursor       *string `json:"endCursor,omitempty"`
	HasNextPage     bool    `json:"hasNextPage"`
	HasPreviousPage bool    `json:"hasPreviousPage"`
}

type PaginationInput struct {
	First  *int    `json:"first,omitempty"`
	Last   *int    `json:"last,omitempty"`
	After  *string `json:"after,omitempty"`
	Before *string `json:"before,omitempty"`
}

// Результат списочного метода
type PositionConnection struct {
	// Общее количество записей
	TotalCount int `json:"totalCount"`
	// Конечные точки
	Edges []*PositionEdge `json:"edges"`
	// Объекты
	Nodes []*Position `json:"nodes"`
	// Информация для постраничной навигации
	PageInfo *PageInfo `json:"pageInfo"`
}

// Конечная точка
type PositionEdge struct {
	// Объект
	Node *Position `json:"node"`
	// Курсор (идентификатор объекта)
	Cursor string `json:"cursor"`
}

type PropertyConnection struct {
	TotalCount int             `json:"totalCount"`
	Edges      []*PropertyEdge `json:"edges"`
	Nodes      []*Property     `json:"nodes"`
	PageInfo   *PageInfo       `json:"pageInfo"`
}

type PropertyEdge struct {
	Node   *Property `json:"node"`
	Cursor string    `json:"cursor"`
}

type PropertyFilter struct {
	Deal             *DealEnum            `json:"deal,omitempty"`
	Type             *PropertyTypeEnum    `json:"type,omitempty"`
	SubType          *PropertySubTypeEnum `json:"subType,omitempty"`
	FromDeveloper    *bool                `json:"fromDeveloper,omitempty"`
	ComplexID        *string              `json:"complexID,omitempty"`
	ComplexHouseID   *string              `json:"complexHouseID,omitempty"`
	VillageID        *string              `json:"villageID,omitempty"`
	IsHot            *bool                `json:"isHot,omitempty"`
	IsDeleted        *bool                `json:"isDeleted,omitempty"`
	Statuses         []PropertyStatusEnum `json:"statuses,omitempty"`
	IsStudio         *bool                `json:"isStudio,omitempty"`
	MinRooms         *float64             `json:"minRooms,omitempty"`
	MaxRooms         *float64             `json:"maxRooms,omitempty"`
	MinPrice         *float64             `json:"minPrice,omitempty"`
	MaxPrice         *float64             `json:"maxPrice,omitempty"`
	MinPricePerMeter *float64             `json:"minPricePerMeter,omitempty"`
	MaxPricePerMeter *float64             `json:"maxPricePerMeter,omitempty"`
	MinPricePerAr    *float64             `json:"minPricePerAr,omitempty"`
	MaxPricePerAr    *float64             `json:"maxPricePerAr,omitempty"`
	MinArea          *float64             `json:"minArea,omitempty"`
	MaxArea          *float64             `json:"maxArea,omitempty"`
	MinLandArea      *float64             `json:"minLandArea,omitempty"`
	MaxLandArea      *float64             `json:"maxLandArea,omitempty"`
	IsReady          *bool                `json:"isReady,omitempty"`
	InCity           *bool                `json:"inCity,omitempty"`
	MinCityDistance  *int                 `json:"minCityDistance,omitempty"`
	MaxCityDistance  *int                 `json:"maxCityDistance,omitempty"`
	MinCreatedAt     *time.Time           `json:"minCreatedAt,omitempty"`
	MaxCreatedAt     *time.Time           `json:"maxCreatedAt,omitempty"`
	WithPhotos       *bool                `json:"withPhotos,omitempty"`
}

type Query struct {
}

type Readiness struct {
	Year    *int `json:"year,omitempty"`
	Quarter *int `json:"quarter,omitempty"`
}

type ReadinessInput struct {
	Year    *int `json:"year,omitempty"`
	Quarter *int `json:"quarter,omitempty"`
}

type ReviewConnection struct {
	TotalCount int           `json:"totalCount"`
	Edges      []*ReviewEdge `json:"edges"`
	Nodes      []*Review     `json:"nodes"`
	PageInfo   *PageInfo     `json:"pageInfo"`
}

type ReviewEdge struct {
	Node   *Review `json:"node"`
	Cursor string  `json:"cursor"`
}

// Расширенный фильтр по отзывам
type ReviewsFilterInput struct {
	// Набор статусов для фильтрации
	Status *ReviewStatusEnum `json:"status,omitempty"`
	// Набор статусов для фильтрации
	PublicationStatus *PublicationStatusEnum `json:"publicationStatus,omitempty"`
	// Набор идентфикаторов сотрудников для фильтрации
	EmployeeID *string `json:"employeeID,omitempty"`
}

// Результат списочного метода
type RoleConnection struct {
	// Общее количество записей
	TotalCount int `json:"totalCount"`
	// Конечные точки
	Edges []*RoleEdge `json:"edges"`
	// Объекты
	Nodes []*Role `json:"nodes"`
	// Информация для постраничной навигации
	PageInfo *PageInfo `json:"pageInfo"`
}

// Конечная точка
type RoleEdge struct {
	// Объект
	Node *Role `json:"node"`
	// Курсор (идентификатор объекта)
	Cursor string `json:"cursor"`
}

// Режим сортировки для списочных методов
type Sort struct {
	// Поле, по которому производится сортировка
	Field *string `json:"field,omitempty"`
	// Направление сортировки по выбранному полю
	Direction *SortDirection `json:"direction,omitempty"`
}

type StoryConnection struct {
	TotalCount int          `json:"totalCount"`
	Edges      []*StoryEdge `json:"edges"`
	Nodes      []*Story     `json:"nodes"`
	PageInfo   *PageInfo    `json:"pageInfo"`
}

type StoryEdge struct {
	Node   *Story `json:"node"`
	Cursor string `json:"cursor"`
}

type StoryFilterInput struct {
	Category          *StoryCategoryEnum     `json:"category,omitempty"`
	PublicationStatus *PublicationStatusEnum `json:"publicationStatus,omitempty"`
}

type TaskConnection struct {
	TotalCount int         `json:"totalCount"`
	Edges      []*TaskEdge `json:"edges"`
	Nodes      []*Task     `json:"nodes"`
	PageInfo   *PageInfo   `json:"pageInfo"`
}

type TaskEdge struct {
	Node   *Task  `json:"node"`
	Cursor string `json:"cursor"`
}

type TaskFilter struct {
	Status       *TaskStatusEnum `json:"status,omitempty"`
	Lead         *string         `json:"lead,omitempty"`
	Deal         *string         `json:"deal,omitempty"`
	Phone        *string         `json:"phone,omitempty"`
	Assignee     *string         `json:"assignee,omitempty"`
	Reporter     *string         `json:"reporter,omitempty"`
	Contact      *string         `json:"contact,omitempty"`
	Property     *string         `json:"property,omitempty"`
	IsHot        *bool           `json:"isHot,omitempty"`
	Label        *TaskLabelEnum  `json:"label,omitempty"`
	CreatedAtMin *time.Time      `json:"createdAtMin,omitempty"`
	CreatedAtMax *time.Time      `json:"createdAtMax,omitempty"`
}

type VacancyConnection struct {
	TotalCount int            `json:"totalCount"`
	Edges      []*VacancyEdge `json:"edges"`
	Nodes      []*Vacancy     `json:"nodes"`
	PageInfo   *PageInfo      `json:"pageInfo"`
}

type VacancyEdge struct {
	Node   *Vacancy `json:"node"`
	Cursor string   `json:"cursor"`
}

type VacancyRequestConnection struct {
	TotalCount int                   `json:"totalCount"`
	Edges      []*VacancyRequestEdge `json:"edges"`
	Nodes      []*VacancyRequest     `json:"nodes"`
	PageInfo   *PageInfo             `json:"pageInfo"`
}

type VacancyRequestEdge struct {
	Node   *VacancyRequest `json:"node"`
	Cursor string          `json:"cursor"`
}

type VillageConnection struct {
	TotalCount int            `json:"totalCount"`
	Edges      []*VillageEdge `json:"edges"`
	Nodes      []*Village     `json:"nodes"`
	PageInfo   *PageInfo      `json:"pageInfo"`
}

type VillageEdge struct {
	Node   *Village `json:"node"`
	Cursor string   `json:"cursor"`
}

type VillageFilter struct {
	DeveloperID       *string                `json:"developerID,omitempty"`
	IsDeleted         *bool                  `json:"isDeleted,omitempty"`
	PublicationStatus *PublicationStatusEnum `json:"publicationStatus,omitempty"`
	WithPhotos        *bool                  `json:"withPhotos,omitempty"`
}

type CommercialUsageEnum string

const (
	CommercialUsageEnumRetail     CommercialUsageEnum = "RETAIL"
	CommercialUsageEnumOffice     CommercialUsageEnum = "OFFICE"
	CommercialUsageEnumFreeUsage  CommercialUsageEnum = "FREE_USAGE"
	CommercialUsageEnumBase       CommercialUsageEnum = "BASE"
	CommercialUsageEnumBusiness   CommercialUsageEnum = "BUSINESS"
	CommercialUsageEnumProduction CommercialUsageEnum = "PRODUCTION"
	CommercialUsageEnumParking    CommercialUsageEnum = "PARKING"
	CommercialUsageEnumWarehouse  CommercialUsageEnum = "WAREHOUSE"
)

var AllCommercialUsageEnum = []CommercialUsageEnum{
	CommercialUsageEnumRetail,
	CommercialUsageEnumOffice,
	CommercialUsageEnumFreeUsage,
	CommercialUsageEnumBase,
	CommercialUsageEnumBusiness,
	CommercialUsageEnumProduction,
	CommercialUsageEnumParking,
	CommercialUsageEnumWarehouse,
}

func (e CommercialUsageEnum) IsValid() bool {
	switch e {
	case CommercialUsageEnumRetail, CommercialUsageEnumOffice, CommercialUsageEnumFreeUsage, CommercialUsageEnumBase, CommercialUsageEnumBusiness, CommercialUsageEnumProduction, CommercialUsageEnumParking, CommercialUsageEnumWarehouse:
		return true
	}
	return false
}

func (e CommercialUsageEnum) String() string {
	return string(e)
}

func (e *CommercialUsageEnum) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CommercialUsageEnum(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid CommercialUsageEnum", str)
	}
	return nil
}

func (e CommercialUsageEnum) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type ContactSourceEnum string

const (
	ContactSourceEnumSource ContactSourceEnum = "SOURCE"
)

var AllContactSourceEnum = []ContactSourceEnum{
	ContactSourceEnumSource,
}

func (e ContactSourceEnum) IsValid() bool {
	switch e {
	case ContactSourceEnumSource:
		return true
	}
	return false
}

func (e ContactSourceEnum) String() string {
	return string(e)
}

func (e *ContactSourceEnum) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ContactSourceEnum(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ContactSourceEnum", str)
	}
	return nil
}

func (e ContactSourceEnum) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type ContentBlockType string

const (
	ContentBlockTypeText      ContentBlockType = "TEXT"
	ContentBlockTypeCite      ContentBlockType = "CITE"
	ContentBlockTypeDocumentS ContentBlockType = "DocumentS"
	ContentBlockTypeYoutube   ContentBlockType = "YOUTUBE"
	ContentBlockTypeImages    ContentBlockType = "IMAGES"
	ContentBlockTypeAccordion ContentBlockType = "ACCORDION"
	ContentBlockTypeSpecial   ContentBlockType = "SPECIAL"
)

var AllContentBlockType = []ContentBlockType{
	ContentBlockTypeText,
	ContentBlockTypeCite,
	ContentBlockTypeDocumentS,
	ContentBlockTypeYoutube,
	ContentBlockTypeImages,
	ContentBlockTypeAccordion,
	ContentBlockTypeSpecial,
}

func (e ContentBlockType) IsValid() bool {
	switch e {
	case ContentBlockTypeText, ContentBlockTypeCite, ContentBlockTypeDocumentS, ContentBlockTypeYoutube, ContentBlockTypeImages, ContentBlockTypeAccordion, ContentBlockTypeSpecial:
		return true
	}
	return false
}

func (e ContentBlockType) String() string {
	return string(e)
}

func (e *ContentBlockType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ContentBlockType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ContentBlockType", str)
	}
	return nil
}

func (e ContentBlockType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type CounterPartyTypeEnum string

const (
	CounterPartyTypeEnumSaler CounterPartyTypeEnum = "SALER"
	CounterPartyTypeEnumBuyer CounterPartyTypeEnum = "BUYER"
	CounterPartyTypeEnumBoth  CounterPartyTypeEnum = "BOTH"
)

var AllCounterPartyTypeEnum = []CounterPartyTypeEnum{
	CounterPartyTypeEnumSaler,
	CounterPartyTypeEnumBuyer,
	CounterPartyTypeEnumBoth,
}

func (e CounterPartyTypeEnum) IsValid() bool {
	switch e {
	case CounterPartyTypeEnumSaler, CounterPartyTypeEnumBuyer, CounterPartyTypeEnumBoth:
		return true
	}
	return false
}

func (e CounterPartyTypeEnum) String() string {
	return string(e)
}

func (e *CounterPartyTypeEnum) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CounterPartyTypeEnum(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid CounterPartyTypeEnum", str)
	}
	return nil
}

func (e CounterPartyTypeEnum) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type DealEnum string

const (
	DealEnumSell DealEnum = "SELL"
	DealEnumRent DealEnum = "RENT"
)

var AllDealEnum = []DealEnum{
	DealEnumSell,
	DealEnumRent,
}

func (e DealEnum) IsValid() bool {
	switch e {
	case DealEnumSell, DealEnumRent:
		return true
	}
	return false
}

func (e DealEnum) String() string {
	return string(e)
}

func (e *DealEnum) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = DealEnum(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid DealEnum", str)
	}
	return nil
}

func (e DealEnum) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type DealStageEnum string

const (
	DealStageEnumDepositPreparation DealStageEnum = "DEPOSIT_PREPARATION"
	DealStageEnumDepositPaid        DealStageEnum = "DEPOSIT_PAID"
	DealStageEnumScheduledForDeal   DealStageEnum = "SCHEDULED_FOR_DEAL"
	DealStageEnumMfcRegistration    DealStageEnum = "MFC_REGISTRATION"
	DealStageEnumRegistered         DealStageEnum = "REGISTERED"
)

var AllDealStageEnum = []DealStageEnum{
	DealStageEnumDepositPreparation,
	DealStageEnumDepositPaid,
	DealStageEnumScheduledForDeal,
	DealStageEnumMfcRegistration,
	DealStageEnumRegistered,
}

func (e DealStageEnum) IsValid() bool {
	switch e {
	case DealStageEnumDepositPreparation, DealStageEnumDepositPaid, DealStageEnumScheduledForDeal, DealStageEnumMfcRegistration, DealStageEnumRegistered:
		return true
	}
	return false
}

func (e DealStageEnum) String() string {
	return string(e)
}

func (e *DealStageEnum) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = DealStageEnum(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid DealStageEnum", str)
	}
	return nil
}

func (e DealStageEnum) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type DealTypeEnum string

const (
	DealTypeEnumPurchase DealTypeEnum = "PURCHASE"
	DealTypeEnumSale     DealTypeEnum = "SALE"
)

var AllDealTypeEnum = []DealTypeEnum{
	DealTypeEnumPurchase,
	DealTypeEnumSale,
}

func (e DealTypeEnum) IsValid() bool {
	switch e {
	case DealTypeEnumPurchase, DealTypeEnumSale:
		return true
	}
	return false
}

func (e DealTypeEnum) String() string {
	return string(e)
}

func (e *DealTypeEnum) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = DealTypeEnum(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid DealTypeEnum", str)
	}
	return nil
}

func (e DealTypeEnum) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type ImagePreset string

const (
	ImagePresetStaffEmployeeAvatar      ImagePreset = "STAFF_EMPLOYEE_AVATAR"
	ImagePresetStaffEmployeePublicImage ImagePreset = "STAFF_EMPLOYEE_PUBLIC_IMAGE"
	ImagePresetContentKbArticleCover    ImagePreset = "CONTENT_KB_ARTICLE_COVER"
	ImagePresetContentSiteStoryCover    ImagePreset = "CONTENT_SITE_STORY_COVER"
	ImagePresetContentSiteStoryPhoto    ImagePreset = "CONTENT_SITE_STORY_PHOTO"
	ImagePresetEstatePropertyPhoto      ImagePreset = "ESTATE_PROPERTY_PHOTO"
	ImagePresetEstateComplexPhoto       ImagePreset = "ESTATE_COMPLEX_PHOTO"
)

var AllImagePreset = []ImagePreset{
	ImagePresetStaffEmployeeAvatar,
	ImagePresetStaffEmployeePublicImage,
	ImagePresetContentKbArticleCover,
	ImagePresetContentSiteStoryCover,
	ImagePresetContentSiteStoryPhoto,
	ImagePresetEstatePropertyPhoto,
	ImagePresetEstateComplexPhoto,
}

func (e ImagePreset) IsValid() bool {
	switch e {
	case ImagePresetStaffEmployeeAvatar, ImagePresetStaffEmployeePublicImage, ImagePresetContentKbArticleCover, ImagePresetContentSiteStoryCover, ImagePresetContentSiteStoryPhoto, ImagePresetEstatePropertyPhoto, ImagePresetEstateComplexPhoto:
		return true
	}
	return false
}

func (e ImagePreset) String() string {
	return string(e)
}

func (e *ImagePreset) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ImagePreset(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ImagePreset", str)
	}
	return nil
}

func (e ImagePreset) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type LeadSourceEnum string

const (
	LeadSourceEnumSource LeadSourceEnum = "SOURCE"
)

var AllLeadSourceEnum = []LeadSourceEnum{
	LeadSourceEnumSource,
}

func (e LeadSourceEnum) IsValid() bool {
	switch e {
	case LeadSourceEnumSource:
		return true
	}
	return false
}

func (e LeadSourceEnum) String() string {
	return string(e)
}

func (e *LeadSourceEnum) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = LeadSourceEnum(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid LeadSourceEnum", str)
	}
	return nil
}

func (e LeadSourceEnum) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type LeadStatusEnum string

const (
	LeadStatusEnumNew        LeadStatusEnum = "NEW"
	LeadStatusEnumInProgress LeadStatusEnum = "IN_PROGRESS"
	LeadStatusEnumRefused    LeadStatusEnum = "REFUSED"
	LeadStatusEnumSuccess    LeadStatusEnum = "SUCCESS"
	LeadStatusEnumThinking   LeadStatusEnum = "THINKING"
)

var AllLeadStatusEnum = []LeadStatusEnum{
	LeadStatusEnumNew,
	LeadStatusEnumInProgress,
	LeadStatusEnumRefused,
	LeadStatusEnumSuccess,
	LeadStatusEnumThinking,
}

func (e LeadStatusEnum) IsValid() bool {
	switch e {
	case LeadStatusEnumNew, LeadStatusEnumInProgress, LeadStatusEnumRefused, LeadStatusEnumSuccess, LeadStatusEnumThinking:
		return true
	}
	return false
}

func (e LeadStatusEnum) String() string {
	return string(e)
}

func (e *LeadStatusEnum) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = LeadStatusEnum(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid LeadStatusEnum", str)
	}
	return nil
}

func (e LeadStatusEnum) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type LeadTypeEnum string

const (
	LeadTypeEnumSaler LeadTypeEnum = "SALER"
	LeadTypeEnumBuyer LeadTypeEnum = "BUYER"
	LeadTypeEnumBoth  LeadTypeEnum = "BOTH"
)

var AllLeadTypeEnum = []LeadTypeEnum{
	LeadTypeEnumSaler,
	LeadTypeEnumBuyer,
	LeadTypeEnumBoth,
}

func (e LeadTypeEnum) IsValid() bool {
	switch e {
	case LeadTypeEnumSaler, LeadTypeEnumBuyer, LeadTypeEnumBoth:
		return true
	}
	return false
}

func (e LeadTypeEnum) String() string {
	return string(e)
}

func (e *LeadTypeEnum) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = LeadTypeEnum(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid LeadTypeEnum", str)
	}
	return nil
}

func (e LeadTypeEnum) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type LogLevelEnum string

const (
	LogLevelEnumDebug   LogLevelEnum = "DEBUG"
	LogLevelEnumInfo    LogLevelEnum = "INFO"
	LogLevelEnumWarning LogLevelEnum = "WARNING"
	LogLevelEnumError   LogLevelEnum = "ERROR"
	LogLevelEnumFatal   LogLevelEnum = "FATAL"
)

var AllLogLevelEnum = []LogLevelEnum{
	LogLevelEnumDebug,
	LogLevelEnumInfo,
	LogLevelEnumWarning,
	LogLevelEnumError,
	LogLevelEnumFatal,
}

func (e LogLevelEnum) IsValid() bool {
	switch e {
	case LogLevelEnumDebug, LogLevelEnumInfo, LogLevelEnumWarning, LogLevelEnumError, LogLevelEnumFatal:
		return true
	}
	return false
}

func (e LogLevelEnum) String() string {
	return string(e)
}

func (e *LogLevelEnum) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = LogLevelEnum(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid LogLevelEnum", str)
	}
	return nil
}

func (e LogLevelEnum) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type LogTypeEnum string

const (
	LogTypeEnumAuthLogin                         LogTypeEnum = "AUTH_LOGIN"
	LogTypeEnumAuthLogout                        LogTypeEnum = "AUTH_LOGOUT"
	LogTypeEnumStaffEmployeeCreate               LogTypeEnum = "STAFF_EMPLOYEE_CREATE"
	LogTypeEnumStaffEmployeeUpdate               LogTypeEnum = "STAFF_EMPLOYEE_UPDATE"
	LogTypeEnumStaffEmployeeDelete               LogTypeEnum = "STAFF_EMPLOYEE_DELETE"
	LogTypeEnumStaffEmployeesDelete              LogTypeEnum = "STAFF_EMPLOYEES_DELETE"
	LogTypeEnumStaffEmployeesActivate            LogTypeEnum = "STAFF_EMPLOYEES_ACTIVATE"
	LogTypeEnumStaffEmployeesDeactivate          LogTypeEnum = "STAFF_EMPLOYEES_DEACTIVATE"
	LogTypeEnumStaffEmployeesPublish             LogTypeEnum = "STAFF_EMPLOYEES_PUBLISH"
	LogTypeEnumStaffEmployeesUnpublish           LogTypeEnum = "STAFF_EMPLOYEES_UNPUBLISH"
	LogTypeEnumStaffEmployeesAssignDepartment    LogTypeEnum = "STAFF_EMPLOYEES_ASSIGN_DEPARTMENT"
	LogTypeEnumStaffEmployeesAssignRole          LogTypeEnum = "STAFF_EMPLOYEES_ASSIGN_ROLE"
	LogTypeEnumStaffRoleCreate                   LogTypeEnum = "STAFF_ROLE_CREATE"
	LogTypeEnumStaffRoleUpdate                   LogTypeEnum = "STAFF_ROLE_UPDATE"
	LogTypeEnumStaffRoleDelete                   LogTypeEnum = "STAFF_ROLE_DELETE"
	LogTypeEnumStaffRolesDelete                  LogTypeEnum = "STAFF_ROLES_DELETE"
	LogTypeEnumStaffDepartmentCreate             LogTypeEnum = "STAFF_DEPARTMENT_CREATE"
	LogTypeEnumStaffDepartmentUpdate             LogTypeEnum = "STAFF_DEPARTMENT_UPDATE"
	LogTypeEnumStaffDepartmentDelete             LogTypeEnum = "STAFF_DEPARTMENT_DELETE"
	LogTypeEnumStaffDepartmentsDelete            LogTypeEnum = "STAFF_DEPARTMENTS_DELETE"
	LogTypeEnumStaffPositionCreate               LogTypeEnum = "STAFF_POSITION_CREATE"
	LogTypeEnumStaffPositionUpdate               LogTypeEnum = "STAFF_POSITION_UPDATE"
	LogTypeEnumStaffPositionDelete               LogTypeEnum = "STAFF_POSITION_DELETE"
	LogTypeEnumStaffPositionsDelete              LogTypeEnum = "STAFF_POSITIONS_DELETE"
	LogTypeEnumEstateComplexHouseCreate          LogTypeEnum = "ESTATE_COMPLEX_HOUSE_CREATE"
	LogTypeEnumEstateComplexHouseUpdate          LogTypeEnum = "ESTATE_COMPLEX_HOUSE_UPDATE"
	LogTypeEnumEstateComplexHouseDelete          LogTypeEnum = "ESTATE_COMPLEX_HOUSE_DELETE"
	LogTypeEnumEstateComplexHousesDelete         LogTypeEnum = "ESTATE_COMPLEX_HOUSES_DELETE"
	LogTypeEnumEstateComplexCreate               LogTypeEnum = "ESTATE_COMPLEX_CREATE"
	LogTypeEnumEstateComplexUpdate               LogTypeEnum = "ESTATE_COMPLEX_UPDATE"
	LogTypeEnumEstateComplexDelete               LogTypeEnum = "ESTATE_COMPLEX_DELETE"
	LogTypeEnumEstateComplexesDelete             LogTypeEnum = "ESTATE_COMPLEXES_DELETE"
	LogTypeEnumEstateDeveloperCreate             LogTypeEnum = "ESTATE_DEVELOPER_CREATE"
	LogTypeEnumEstateDeveloperUpdate             LogTypeEnum = "ESTATE_DEVELOPER_UPDATE"
	LogTypeEnumEstateDeveloperDelete             LogTypeEnum = "ESTATE_DEVELOPER_DELETE"
	LogTypeEnumEstateDevelopersDelete            LogTypeEnum = "ESTATE_DEVELOPERS_DELETE"
	LogTypeEnumEstatePropertyCreate              LogTypeEnum = "ESTATE_PROPERTY_CREATE"
	LogTypeEnumEstatePropertyUpdate              LogTypeEnum = "ESTATE_PROPERTY_UPDATE"
	LogTypeEnumEstatePropertyDelete              LogTypeEnum = "ESTATE_PROPERTY_DELETE"
	LogTypeEnumEstatePropertyRefresh             LogTypeEnum = "ESTATE_PROPERTY_REFRESH"
	LogTypeEnumEstatePropertyChangeStatus        LogTypeEnum = "ESTATE_PROPERTY_CHANGE_STATUS"
	LogTypeEnumEstatePropertiesDelete            LogTypeEnum = "ESTATE_PROPERTIES_DELETE"
	LogTypeEnumEstatePropertiesRefresh           LogTypeEnum = "ESTATE_PROPERTIES_REFRESH"
	LogTypeEnumEstatePropertiesChangeStatus      LogTypeEnum = "ESTATE_PROPERTIES_CHANGE_STATUS"
	LogTypeEnumEstatePropertyUpdatePriceHistory  LogTypeEnum = "ESTATE_PROPERTY_UPDATE_PRICE_HISTORY"
	LogTypeEnumEstateVillageCreate               LogTypeEnum = "ESTATE_VILLAGE_CREATE"
	LogTypeEnumEstateVillageUpdate               LogTypeEnum = "ESTATE_VILLAGE_UPDATE"
	LogTypeEnumEstateVillageDelete               LogTypeEnum = "ESTATE_VILLAGE_DELETE"
	LogTypeEnumEstateVillagesDelete              LogTypeEnum = "ESTATE_VILLAGES_DELETE"
	LogTypeEnumSalesContactCreate                LogTypeEnum = "SALES_CONTACT_CREATE"
	LogTypeEnumSalesContactUpdate                LogTypeEnum = "SALES_CONTACT_UPDATE"
	LogTypeEnumSalesContactDelete                LogTypeEnum = "SALES_CONTACT_DELETE"
	LogTypeEnumSalesContactsDelete               LogTypeEnum = "SALES_CONTACTS_DELETE"
	LogTypeEnumSalesDealCreate                   LogTypeEnum = "SALES_DEAL_CREATE"
	LogTypeEnumSalesDealUpdate                   LogTypeEnum = "SALES_DEAL_UPDATE"
	LogTypeEnumSalesDealDelete                   LogTypeEnum = "SALES_DEAL_DELETE"
	LogTypeEnumSalesDealChangeStage              LogTypeEnum = "SALES_DEAL_CHANGE_STAGE"
	LogTypeEnumSalesDealsDelete                  LogTypeEnum = "SALES_DEALS_DELETE"
	LogTypeEnumSalesDealsChangeStage             LogTypeEnum = "SALES_DEALS_CHANGE_STAGE"
	LogTypeEnumSalesLeadCreate                   LogTypeEnum = "SALES_LEAD_CREATE"
	LogTypeEnumSalesLeadUpdate                   LogTypeEnum = "SALES_LEAD_UPDATE"
	LogTypeEnumSalesLeadDelete                   LogTypeEnum = "SALES_LEAD_DELETE"
	LogTypeEnumSalesLeadChangeStatus             LogTypeEnum = "SALES_LEAD_CHANGE_STATUS"
	LogTypeEnumSalesLeadsDelete                  LogTypeEnum = "SALES_LEADS_DELETE"
	LogTypeEnumSalesLeadsChangeStatus            LogTypeEnum = "SALES_LEADS_CHANGE_STATUS"
	LogTypeEnumSalesMeetCreate                   LogTypeEnum = "SALES_MEET_CREATE"
	LogTypeEnumSalesMeetUpdate                   LogTypeEnum = "SALES_MEET_UPDATE"
	LogTypeEnumSalesMeetDelete                   LogTypeEnum = "SALES_MEET_DELETE"
	LogTypeEnumSalesMeetChangeStatus             LogTypeEnum = "SALES_MEET_CHANGE_STATUS"
	LogTypeEnumSalesMeetsDelete                  LogTypeEnum = "SALES_MEETS_DELETE"
	LogTypeEnumSalesMeetsChangeStatus            LogTypeEnum = "SALES_MEETS_CHANGE_STATUS"
	LogTypeEnumSalesTaskCreate                   LogTypeEnum = "SALES_TASK_CREATE"
	LogTypeEnumSalesTaskUpdate                   LogTypeEnum = "SALES_TASK_UPDATE"
	LogTypeEnumSalesTaskDelete                   LogTypeEnum = "SALES_TASK_DELETE"
	LogTypeEnumSalesTaskComplete                 LogTypeEnum = "SALES_TASK_COMPLETE"
	LogTypeEnumSalesTasksDelete                  LogTypeEnum = "SALES_TASKS_DELETE"
	LogTypeEnumSalesTasksComplete                LogTypeEnum = "SALES_TASKS_COMPLETE"
	LogTypeEnumSalesMortgageRequestCreate        LogTypeEnum = "SALES_MORTGAGE_REQUEST_CREATE"
	LogTypeEnumSalesMortgageRequestUpdate        LogTypeEnum = "SALES_MORTGAGE_REQUEST_UPDATE"
	LogTypeEnumSalesMortgageRequestDelete        LogTypeEnum = "SALES_MORTGAGE_REQUEST_DELETE"
	LogTypeEnumSalesMortgageRequestChangeStatus  LogTypeEnum = "SALES_MORTGAGE_REQUEST_CHANGE_STATUS"
	LogTypeEnumSalesMortgageRequestsDelete       LogTypeEnum = "SALES_MORTGAGE_REQUESTS_DELETE"
	LogTypeEnumSalesMortgageRequestsChangeStatus LogTypeEnum = "SALES_MORTGAGE_REQUESTS_CHANGE_STATUS"
)

var AllLogTypeEnum = []LogTypeEnum{
	LogTypeEnumAuthLogin,
	LogTypeEnumAuthLogout,
	LogTypeEnumStaffEmployeeCreate,
	LogTypeEnumStaffEmployeeUpdate,
	LogTypeEnumStaffEmployeeDelete,
	LogTypeEnumStaffEmployeesDelete,
	LogTypeEnumStaffEmployeesActivate,
	LogTypeEnumStaffEmployeesDeactivate,
	LogTypeEnumStaffEmployeesPublish,
	LogTypeEnumStaffEmployeesUnpublish,
	LogTypeEnumStaffEmployeesAssignDepartment,
	LogTypeEnumStaffEmployeesAssignRole,
	LogTypeEnumStaffRoleCreate,
	LogTypeEnumStaffRoleUpdate,
	LogTypeEnumStaffRoleDelete,
	LogTypeEnumStaffRolesDelete,
	LogTypeEnumStaffDepartmentCreate,
	LogTypeEnumStaffDepartmentUpdate,
	LogTypeEnumStaffDepartmentDelete,
	LogTypeEnumStaffDepartmentsDelete,
	LogTypeEnumStaffPositionCreate,
	LogTypeEnumStaffPositionUpdate,
	LogTypeEnumStaffPositionDelete,
	LogTypeEnumStaffPositionsDelete,
	LogTypeEnumEstateComplexHouseCreate,
	LogTypeEnumEstateComplexHouseUpdate,
	LogTypeEnumEstateComplexHouseDelete,
	LogTypeEnumEstateComplexHousesDelete,
	LogTypeEnumEstateComplexCreate,
	LogTypeEnumEstateComplexUpdate,
	LogTypeEnumEstateComplexDelete,
	LogTypeEnumEstateComplexesDelete,
	LogTypeEnumEstateDeveloperCreate,
	LogTypeEnumEstateDeveloperUpdate,
	LogTypeEnumEstateDeveloperDelete,
	LogTypeEnumEstateDevelopersDelete,
	LogTypeEnumEstatePropertyCreate,
	LogTypeEnumEstatePropertyUpdate,
	LogTypeEnumEstatePropertyDelete,
	LogTypeEnumEstatePropertyRefresh,
	LogTypeEnumEstatePropertyChangeStatus,
	LogTypeEnumEstatePropertiesDelete,
	LogTypeEnumEstatePropertiesRefresh,
	LogTypeEnumEstatePropertiesChangeStatus,
	LogTypeEnumEstatePropertyUpdatePriceHistory,
	LogTypeEnumEstateVillageCreate,
	LogTypeEnumEstateVillageUpdate,
	LogTypeEnumEstateVillageDelete,
	LogTypeEnumEstateVillagesDelete,
	LogTypeEnumSalesContactCreate,
	LogTypeEnumSalesContactUpdate,
	LogTypeEnumSalesContactDelete,
	LogTypeEnumSalesContactsDelete,
	LogTypeEnumSalesDealCreate,
	LogTypeEnumSalesDealUpdate,
	LogTypeEnumSalesDealDelete,
	LogTypeEnumSalesDealChangeStage,
	LogTypeEnumSalesDealsDelete,
	LogTypeEnumSalesDealsChangeStage,
	LogTypeEnumSalesLeadCreate,
	LogTypeEnumSalesLeadUpdate,
	LogTypeEnumSalesLeadDelete,
	LogTypeEnumSalesLeadChangeStatus,
	LogTypeEnumSalesLeadsDelete,
	LogTypeEnumSalesLeadsChangeStatus,
	LogTypeEnumSalesMeetCreate,
	LogTypeEnumSalesMeetUpdate,
	LogTypeEnumSalesMeetDelete,
	LogTypeEnumSalesMeetChangeStatus,
	LogTypeEnumSalesMeetsDelete,
	LogTypeEnumSalesMeetsChangeStatus,
	LogTypeEnumSalesTaskCreate,
	LogTypeEnumSalesTaskUpdate,
	LogTypeEnumSalesTaskDelete,
	LogTypeEnumSalesTaskComplete,
	LogTypeEnumSalesTasksDelete,
	LogTypeEnumSalesTasksComplete,
	LogTypeEnumSalesMortgageRequestCreate,
	LogTypeEnumSalesMortgageRequestUpdate,
	LogTypeEnumSalesMortgageRequestDelete,
	LogTypeEnumSalesMortgageRequestChangeStatus,
	LogTypeEnumSalesMortgageRequestsDelete,
	LogTypeEnumSalesMortgageRequestsChangeStatus,
}

func (e LogTypeEnum) IsValid() bool {
	switch e {
	case LogTypeEnumAuthLogin, LogTypeEnumAuthLogout, LogTypeEnumStaffEmployeeCreate, LogTypeEnumStaffEmployeeUpdate, LogTypeEnumStaffEmployeeDelete, LogTypeEnumStaffEmployeesDelete, LogTypeEnumStaffEmployeesActivate, LogTypeEnumStaffEmployeesDeactivate, LogTypeEnumStaffEmployeesPublish, LogTypeEnumStaffEmployeesUnpublish, LogTypeEnumStaffEmployeesAssignDepartment, LogTypeEnumStaffEmployeesAssignRole, LogTypeEnumStaffRoleCreate, LogTypeEnumStaffRoleUpdate, LogTypeEnumStaffRoleDelete, LogTypeEnumStaffRolesDelete, LogTypeEnumStaffDepartmentCreate, LogTypeEnumStaffDepartmentUpdate, LogTypeEnumStaffDepartmentDelete, LogTypeEnumStaffDepartmentsDelete, LogTypeEnumStaffPositionCreate, LogTypeEnumStaffPositionUpdate, LogTypeEnumStaffPositionDelete, LogTypeEnumStaffPositionsDelete, LogTypeEnumEstateComplexHouseCreate, LogTypeEnumEstateComplexHouseUpdate, LogTypeEnumEstateComplexHouseDelete, LogTypeEnumEstateComplexHousesDelete, LogTypeEnumEstateComplexCreate, LogTypeEnumEstateComplexUpdate, LogTypeEnumEstateComplexDelete, LogTypeEnumEstateComplexesDelete, LogTypeEnumEstateDeveloperCreate, LogTypeEnumEstateDeveloperUpdate, LogTypeEnumEstateDeveloperDelete, LogTypeEnumEstateDevelopersDelete, LogTypeEnumEstatePropertyCreate, LogTypeEnumEstatePropertyUpdate, LogTypeEnumEstatePropertyDelete, LogTypeEnumEstatePropertyRefresh, LogTypeEnumEstatePropertyChangeStatus, LogTypeEnumEstatePropertiesDelete, LogTypeEnumEstatePropertiesRefresh, LogTypeEnumEstatePropertiesChangeStatus, LogTypeEnumEstatePropertyUpdatePriceHistory, LogTypeEnumEstateVillageCreate, LogTypeEnumEstateVillageUpdate, LogTypeEnumEstateVillageDelete, LogTypeEnumEstateVillagesDelete, LogTypeEnumSalesContactCreate, LogTypeEnumSalesContactUpdate, LogTypeEnumSalesContactDelete, LogTypeEnumSalesContactsDelete, LogTypeEnumSalesDealCreate, LogTypeEnumSalesDealUpdate, LogTypeEnumSalesDealDelete, LogTypeEnumSalesDealChangeStage, LogTypeEnumSalesDealsDelete, LogTypeEnumSalesDealsChangeStage, LogTypeEnumSalesLeadCreate, LogTypeEnumSalesLeadUpdate, LogTypeEnumSalesLeadDelete, LogTypeEnumSalesLeadChangeStatus, LogTypeEnumSalesLeadsDelete, LogTypeEnumSalesLeadsChangeStatus, LogTypeEnumSalesMeetCreate, LogTypeEnumSalesMeetUpdate, LogTypeEnumSalesMeetDelete, LogTypeEnumSalesMeetChangeStatus, LogTypeEnumSalesMeetsDelete, LogTypeEnumSalesMeetsChangeStatus, LogTypeEnumSalesTaskCreate, LogTypeEnumSalesTaskUpdate, LogTypeEnumSalesTaskDelete, LogTypeEnumSalesTaskComplete, LogTypeEnumSalesTasksDelete, LogTypeEnumSalesTasksComplete, LogTypeEnumSalesMortgageRequestCreate, LogTypeEnumSalesMortgageRequestUpdate, LogTypeEnumSalesMortgageRequestDelete, LogTypeEnumSalesMortgageRequestChangeStatus, LogTypeEnumSalesMortgageRequestsDelete, LogTypeEnumSalesMortgageRequestsChangeStatus:
		return true
	}
	return false
}

func (e LogTypeEnum) String() string {
	return string(e)
}

func (e *LogTypeEnum) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = LogTypeEnum(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid LogTypeEnum", str)
	}
	return nil
}

func (e LogTypeEnum) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type MeetCancelReasonEnum string

const (
	MeetCancelReasonEnumChangedMind MeetCancelReasonEnum = "CHANGED_MIND"
	MeetCancelReasonEnumRefusal     MeetCancelReasonEnum = "REFUSAL"
	MeetCancelReasonEnumOwnOpinion  MeetCancelReasonEnum = "OWN_OPINION"
)

var AllMeetCancelReasonEnum = []MeetCancelReasonEnum{
	MeetCancelReasonEnumChangedMind,
	MeetCancelReasonEnumRefusal,
	MeetCancelReasonEnumOwnOpinion,
}

func (e MeetCancelReasonEnum) IsValid() bool {
	switch e {
	case MeetCancelReasonEnumChangedMind, MeetCancelReasonEnumRefusal, MeetCancelReasonEnumOwnOpinion:
		return true
	}
	return false
}

func (e MeetCancelReasonEnum) String() string {
	return string(e)
}

func (e *MeetCancelReasonEnum) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = MeetCancelReasonEnum(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid MeetCancelReasonEnum", str)
	}
	return nil
}

func (e MeetCancelReasonEnum) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type MeetStatusEnum string

const (
	MeetStatusEnumGoingOnSale MeetStatusEnum = "GOING_ON_SALE"
	MeetStatusEnumCancelled   MeetStatusEnum = "CANCELLED"
	MeetStatusEnumFinished    MeetStatusEnum = "FINISHED"
)

var AllMeetStatusEnum = []MeetStatusEnum{
	MeetStatusEnumGoingOnSale,
	MeetStatusEnumCancelled,
	MeetStatusEnumFinished,
}

func (e MeetStatusEnum) IsValid() bool {
	switch e {
	case MeetStatusEnumGoingOnSale, MeetStatusEnumCancelled, MeetStatusEnumFinished:
		return true
	}
	return false
}

func (e MeetStatusEnum) String() string {
	return string(e)
}

func (e *MeetStatusEnum) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = MeetStatusEnum(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid MeetStatusEnum", str)
	}
	return nil
}

func (e MeetStatusEnum) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type MeetTypeEnum string

const (
	MeetTypeEnumRent MeetTypeEnum = "RENT"
	MeetTypeEnumSale MeetTypeEnum = "SALE"
)

var AllMeetTypeEnum = []MeetTypeEnum{
	MeetTypeEnumRent,
	MeetTypeEnumSale,
}

func (e MeetTypeEnum) IsValid() bool {
	switch e {
	case MeetTypeEnumRent, MeetTypeEnumSale:
		return true
	}
	return false
}

func (e MeetTypeEnum) String() string {
	return string(e)
}

func (e *MeetTypeEnum) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = MeetTypeEnum(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid MeetTypeEnum", str)
	}
	return nil
}

func (e MeetTypeEnum) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type MortgageRequestStatusEnum string

const (
	MortgageRequestStatusEnumSent            MortgageRequestStatusEnum = "SENT"
	MortgageRequestStatusEnumApproved        MortgageRequestStatusEnum = "APPROVED"
	MortgageRequestStatusEnumRefusal         MortgageRequestStatusEnum = "REFUSAL"
	MortgageRequestStatusEnumObjectApproval  MortgageRequestStatusEnum = "OBJECT_APPROVAL"
	MortgageRequestStatusEnumBankExpectation MortgageRequestStatusEnum = "BANK_EXPECTATION"
)

var AllMortgageRequestStatusEnum = []MortgageRequestStatusEnum{
	MortgageRequestStatusEnumSent,
	MortgageRequestStatusEnumApproved,
	MortgageRequestStatusEnumRefusal,
	MortgageRequestStatusEnumObjectApproval,
	MortgageRequestStatusEnumBankExpectation,
}

func (e MortgageRequestStatusEnum) IsValid() bool {
	switch e {
	case MortgageRequestStatusEnumSent, MortgageRequestStatusEnumApproved, MortgageRequestStatusEnumRefusal, MortgageRequestStatusEnumObjectApproval, MortgageRequestStatusEnumBankExpectation:
		return true
	}
	return false
}

func (e MortgageRequestStatusEnum) String() string {
	return string(e)
}

func (e *MortgageRequestStatusEnum) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = MortgageRequestStatusEnum(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid MortgageRequestStatusEnum", str)
	}
	return nil
}

func (e MortgageRequestStatusEnum) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type PropertySourceEnum string

const (
	PropertySourceEnumAvito           PropertySourceEnum = "AVITO"
	PropertySourceEnumYoula           PropertySourceEnum = "YOULA"
	PropertySourceEnumCian            PropertySourceEnum = "CIAN"
	PropertySourceEnumDomclick        PropertySourceEnum = "DOMCLICK"
	PropertySourceEnumYandex          PropertySourceEnum = "YANDEX"
	PropertySourceEnumOtherAggregator PropertySourceEnum = "OTHER_AGGREGATOR"
	PropertySourceEnumRecommendation  PropertySourceEnum = "RECOMMENDATION"
	PropertySourceEnumReturnedClient  PropertySourceEnum = "RETURNED_CLIENT"
	PropertySourceEnumLists           PropertySourceEnum = "LISTS"
	PropertySourceEnumSelection       PropertySourceEnum = "SELECTION"
	PropertySourceEnumOther           PropertySourceEnum = "OTHER"
)

var AllPropertySourceEnum = []PropertySourceEnum{
	PropertySourceEnumAvito,
	PropertySourceEnumYoula,
	PropertySourceEnumCian,
	PropertySourceEnumDomclick,
	PropertySourceEnumYandex,
	PropertySourceEnumOtherAggregator,
	PropertySourceEnumRecommendation,
	PropertySourceEnumReturnedClient,
	PropertySourceEnumLists,
	PropertySourceEnumSelection,
	PropertySourceEnumOther,
}

func (e PropertySourceEnum) IsValid() bool {
	switch e {
	case PropertySourceEnumAvito, PropertySourceEnumYoula, PropertySourceEnumCian, PropertySourceEnumDomclick, PropertySourceEnumYandex, PropertySourceEnumOtherAggregator, PropertySourceEnumRecommendation, PropertySourceEnumReturnedClient, PropertySourceEnumLists, PropertySourceEnumSelection, PropertySourceEnumOther:
		return true
	}
	return false
}

func (e PropertySourceEnum) String() string {
	return string(e)
}

func (e *PropertySourceEnum) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PropertySourceEnum(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PropertySourceEnum", str)
	}
	return nil
}

func (e PropertySourceEnum) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type PropertyStatusEnum string

const (
	PropertyStatusEnumPublished    PropertyStatusEnum = "PUBLISHED"
	PropertyStatusEnumUnpublished  PropertyStatusEnum = "UNPUBLISHED"
	PropertyStatusEnumOnModeration PropertyStatusEnum = "ON_MODERATION"
	PropertyStatusEnumArchived     PropertyStatusEnum = "ARCHIVED"
	PropertyStatusEnumTrash        PropertyStatusEnum = "TRASH"
)

var AllPropertyStatusEnum = []PropertyStatusEnum{
	PropertyStatusEnumPublished,
	PropertyStatusEnumUnpublished,
	PropertyStatusEnumOnModeration,
	PropertyStatusEnumArchived,
	PropertyStatusEnumTrash,
}

func (e PropertyStatusEnum) IsValid() bool {
	switch e {
	case PropertyStatusEnumPublished, PropertyStatusEnumUnpublished, PropertyStatusEnumOnModeration, PropertyStatusEnumArchived, PropertyStatusEnumTrash:
		return true
	}
	return false
}

func (e PropertyStatusEnum) String() string {
	return string(e)
}

func (e *PropertyStatusEnum) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PropertyStatusEnum(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PropertyStatusEnum", str)
	}
	return nil
}

func (e PropertyStatusEnum) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type PropertySubTypeEnum string

const (
	PropertySubTypeEnumFlat        PropertySubTypeEnum = "FLAT"
	PropertySubTypeEnumRoom        PropertySubTypeEnum = "ROOM"
	PropertySubTypeEnumApartment   PropertySubTypeEnum = "APARTMENT"
	PropertySubTypeEnumStudio      PropertySubTypeEnum = "STUDIO"
	PropertySubTypeEnumLand        PropertySubTypeEnum = "LAND"
	PropertySubTypeEnumHouse       PropertySubTypeEnum = "HOUSE"
	PropertySubTypeEnumTownhouse   PropertySubTypeEnum = "TOWNHOUSE"
	PropertySubTypeEnumSummerHouse PropertySubTypeEnum = "SUMMER_HOUSE"
	PropertySubTypeEnumGarage      PropertySubTypeEnum = "GARAGE"
	PropertySubTypeEnumParking     PropertySubTypeEnum = "PARKING"
)

var AllPropertySubTypeEnum = []PropertySubTypeEnum{
	PropertySubTypeEnumFlat,
	PropertySubTypeEnumRoom,
	PropertySubTypeEnumApartment,
	PropertySubTypeEnumStudio,
	PropertySubTypeEnumLand,
	PropertySubTypeEnumHouse,
	PropertySubTypeEnumTownhouse,
	PropertySubTypeEnumSummerHouse,
	PropertySubTypeEnumGarage,
	PropertySubTypeEnumParking,
}

func (e PropertySubTypeEnum) IsValid() bool {
	switch e {
	case PropertySubTypeEnumFlat, PropertySubTypeEnumRoom, PropertySubTypeEnumApartment, PropertySubTypeEnumStudio, PropertySubTypeEnumLand, PropertySubTypeEnumHouse, PropertySubTypeEnumTownhouse, PropertySubTypeEnumSummerHouse, PropertySubTypeEnumGarage, PropertySubTypeEnumParking:
		return true
	}
	return false
}

func (e PropertySubTypeEnum) String() string {
	return string(e)
}

func (e *PropertySubTypeEnum) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PropertySubTypeEnum(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PropertySubTypeEnum", str)
	}
	return nil
}

func (e PropertySubTypeEnum) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type PropertyTypeEnum string

const (
	PropertyTypeEnumUsed       PropertyTypeEnum = "USED"
	PropertyTypeEnumNew        PropertyTypeEnum = "NEW"
	PropertyTypeEnumVillage    PropertyTypeEnum = "VILLAGE"
	PropertyTypeEnumSuburban   PropertyTypeEnum = "SUBURBAN"
	PropertyTypeEnumCommercial PropertyTypeEnum = "COMMERCIAL"
)

var AllPropertyTypeEnum = []PropertyTypeEnum{
	PropertyTypeEnumUsed,
	PropertyTypeEnumNew,
	PropertyTypeEnumVillage,
	PropertyTypeEnumSuburban,
	PropertyTypeEnumCommercial,
}

func (e PropertyTypeEnum) IsValid() bool {
	switch e {
	case PropertyTypeEnumUsed, PropertyTypeEnumNew, PropertyTypeEnumVillage, PropertyTypeEnumSuburban, PropertyTypeEnumCommercial:
		return true
	}
	return false
}

func (e PropertyTypeEnum) String() string {
	return string(e)
}

func (e *PropertyTypeEnum) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PropertyTypeEnum(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PropertyTypeEnum", str)
	}
	return nil
}

func (e PropertyTypeEnum) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Статус публикации
type PublicationStatusEnum string

const (
	// Запись опубликована
	PublicationStatusEnumPublished PublicationStatusEnum = "PUBLISHED"
	// Черновик
	PublicationStatusEnumDraft PublicationStatusEnum = "DRAFT"
	// Запись снята с публикации
	PublicationStatusEnumUnpublished PublicationStatusEnum = "UNPUBLISHED"
)

var AllPublicationStatusEnum = []PublicationStatusEnum{
	PublicationStatusEnumPublished,
	PublicationStatusEnumDraft,
	PublicationStatusEnumUnpublished,
}

func (e PublicationStatusEnum) IsValid() bool {
	switch e {
	case PublicationStatusEnumPublished, PublicationStatusEnumDraft, PublicationStatusEnumUnpublished:
		return true
	}
	return false
}

func (e PublicationStatusEnum) String() string {
	return string(e)
}

func (e *PublicationStatusEnum) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PublicationStatusEnum(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PublicationStatusEnum", str)
	}
	return nil
}

func (e PublicationStatusEnum) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type QuarterEnum string

const (
	QuarterEnumI   QuarterEnum = "I"
	QuarterEnumIi  QuarterEnum = "II"
	QuarterEnumIii QuarterEnum = "III"
	QuarterEnumIv  QuarterEnum = "IV"
)

var AllQuarterEnum = []QuarterEnum{
	QuarterEnumI,
	QuarterEnumIi,
	QuarterEnumIii,
	QuarterEnumIv,
}

func (e QuarterEnum) IsValid() bool {
	switch e {
	case QuarterEnumI, QuarterEnumIi, QuarterEnumIii, QuarterEnumIv:
		return true
	}
	return false
}

func (e QuarterEnum) String() string {
	return string(e)
}

func (e *QuarterEnum) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = QuarterEnum(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid QuarterEnum", str)
	}
	return nil
}

func (e QuarterEnum) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type RehabTypeEnum string

const (
	RehabTypeEnumNone      RehabTypeEnum = "NONE"
	RehabTypeEnumDraft     RehabTypeEnum = "DRAFT"
	RehabTypeEnumDeveloper RehabTypeEnum = "DEVELOPER"
	RehabTypeEnumDesign    RehabTypeEnum = "DESIGN"
	RehabTypeEnumClean     RehabTypeEnum = "CLEAN"
)

var AllRehabTypeEnum = []RehabTypeEnum{
	RehabTypeEnumNone,
	RehabTypeEnumDraft,
	RehabTypeEnumDeveloper,
	RehabTypeEnumDesign,
	RehabTypeEnumClean,
}

func (e RehabTypeEnum) IsValid() bool {
	switch e {
	case RehabTypeEnumNone, RehabTypeEnumDraft, RehabTypeEnumDeveloper, RehabTypeEnumDesign, RehabTypeEnumClean:
		return true
	}
	return false
}

func (e RehabTypeEnum) String() string {
	return string(e)
}

func (e *RehabTypeEnum) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = RehabTypeEnum(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid RehabTypeEnum", str)
	}
	return nil
}

func (e RehabTypeEnum) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Статус отзыва
type ReviewStatusEnum string

const (
	// Новый
	ReviewStatusEnumNew ReviewStatusEnum = "NEW"
	// Подтверждён
	ReviewStatusEnumApproved ReviewStatusEnum = "APPROVED"
	// Отклонён
	ReviewStatusEnumDeclined ReviewStatusEnum = "DECLINED"
)

var AllReviewStatusEnum = []ReviewStatusEnum{
	ReviewStatusEnumNew,
	ReviewStatusEnumApproved,
	ReviewStatusEnumDeclined,
}

func (e ReviewStatusEnum) IsValid() bool {
	switch e {
	case ReviewStatusEnumNew, ReviewStatusEnumApproved, ReviewStatusEnumDeclined:
		return true
	}
	return false
}

func (e ReviewStatusEnum) String() string {
	return string(e)
}

func (e *ReviewStatusEnum) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ReviewStatusEnum(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ReviewStatusEnum", str)
	}
	return nil
}

func (e ReviewStatusEnum) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Список доступных разрешений
type RolePermissionsEnum string

const (
	RolePermissionsEnumStaffSaveEmployee         RolePermissionsEnum = "STAFF_SAVE_EMPLOYEE"
	RolePermissionsEnumStaffSavePosition         RolePermissionsEnum = "STAFF_SAVE_POSITION"
	RolePermissionsEnumStaffSaveDepartment       RolePermissionsEnum = "STAFF_SAVE_DEPARTMENT"
	RolePermissionsEnumStaffSaveRole             RolePermissionsEnum = "STAFF_SAVE_ROLE"
	RolePermissionsEnumStaffDeleteEmployee       RolePermissionsEnum = "STAFF_DELETE_EMPLOYEE"
	RolePermissionsEnumStaffDeletePosition       RolePermissionsEnum = "STAFF_DELETE_POSITION"
	RolePermissionsEnumStaffDeleteDepartment     RolePermissionsEnum = "STAFF_DELETE_DEPARTMENT"
	RolePermissionsEnumStaffDeleteRole           RolePermissionsEnum = "STAFF_DELETE_ROLE"
	RolePermissionsEnumContentSaveArticle        RolePermissionsEnum = "CONTENT_SAVE_ARTICLE"
	RolePermissionsEnumContentSaveArticleGroup   RolePermissionsEnum = "CONTENT_SAVE_ARTICLE_GROUP"
	RolePermissionsEnumContentSavePage           RolePermissionsEnum = "CONTENT_SAVE_PAGE"
	RolePermissionsEnumContentSaveReview         RolePermissionsEnum = "CONTENT_SAVE_REVIEW"
	RolePermissionsEnumContentSaveStory          RolePermissionsEnum = "CONTENT_SAVE_STORY"
	RolePermissionsEnumContentSaveVacancy        RolePermissionsEnum = "CONTENT_SAVE_VACANCY"
	RolePermissionsEnumContentDeleteArticle      RolePermissionsEnum = "CONTENT_DELETE_ARTICLE"
	RolePermissionsEnumContentDeleteArticleGroup RolePermissionsEnum = "CONTENT_DELETE_ARTICLE_GROUP"
	RolePermissionsEnumContentDeletePage         RolePermissionsEnum = "CONTENT_DELETE_PAGE"
	RolePermissionsEnumContentDeleteReview       RolePermissionsEnum = "CONTENT_DELETE_REVIEW"
	RolePermissionsEnumContentDeleteStory        RolePermissionsEnum = "CONTENT_DELETE_STORY"
	RolePermissionsEnumContentDeleteVacancy      RolePermissionsEnum = "CONTENT_DELETE_VACANCY"
	RolePermissionsEnumSystemViewLog             RolePermissionsEnum = "SYSTEM_VIEW_LOG"
)

var AllRolePermissionsEnum = []RolePermissionsEnum{
	RolePermissionsEnumStaffSaveEmployee,
	RolePermissionsEnumStaffSavePosition,
	RolePermissionsEnumStaffSaveDepartment,
	RolePermissionsEnumStaffSaveRole,
	RolePermissionsEnumStaffDeleteEmployee,
	RolePermissionsEnumStaffDeletePosition,
	RolePermissionsEnumStaffDeleteDepartment,
	RolePermissionsEnumStaffDeleteRole,
	RolePermissionsEnumContentSaveArticle,
	RolePermissionsEnumContentSaveArticleGroup,
	RolePermissionsEnumContentSavePage,
	RolePermissionsEnumContentSaveReview,
	RolePermissionsEnumContentSaveStory,
	RolePermissionsEnumContentSaveVacancy,
	RolePermissionsEnumContentDeleteArticle,
	RolePermissionsEnumContentDeleteArticleGroup,
	RolePermissionsEnumContentDeletePage,
	RolePermissionsEnumContentDeleteReview,
	RolePermissionsEnumContentDeleteStory,
	RolePermissionsEnumContentDeleteVacancy,
	RolePermissionsEnumSystemViewLog,
}

func (e RolePermissionsEnum) IsValid() bool {
	switch e {
	case RolePermissionsEnumStaffSaveEmployee, RolePermissionsEnumStaffSavePosition, RolePermissionsEnumStaffSaveDepartment, RolePermissionsEnumStaffSaveRole, RolePermissionsEnumStaffDeleteEmployee, RolePermissionsEnumStaffDeletePosition, RolePermissionsEnumStaffDeleteDepartment, RolePermissionsEnumStaffDeleteRole, RolePermissionsEnumContentSaveArticle, RolePermissionsEnumContentSaveArticleGroup, RolePermissionsEnumContentSavePage, RolePermissionsEnumContentSaveReview, RolePermissionsEnumContentSaveStory, RolePermissionsEnumContentSaveVacancy, RolePermissionsEnumContentDeleteArticle, RolePermissionsEnumContentDeleteArticleGroup, RolePermissionsEnumContentDeletePage, RolePermissionsEnumContentDeleteReview, RolePermissionsEnumContentDeleteStory, RolePermissionsEnumContentDeleteVacancy, RolePermissionsEnumSystemViewLog:
		return true
	}
	return false
}

func (e RolePermissionsEnum) String() string {
	return string(e)
}

func (e *RolePermissionsEnum) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = RolePermissionsEnum(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid RolePermissionsEnum", str)
	}
	return nil
}

func (e RolePermissionsEnum) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Направления сортировки
type SortDirection string

const (
	// По возрастанию
	SortDirectionAsc SortDirection = "ASC"
	// По убыванию
	SortDirectionDesc SortDirection = "DESC"
)

var AllSortDirection = []SortDirection{
	SortDirectionAsc,
	SortDirectionDesc,
}

func (e SortDirection) IsValid() bool {
	switch e {
	case SortDirectionAsc, SortDirectionDesc:
		return true
	}
	return false
}

func (e SortDirection) String() string {
	return string(e)
}

func (e *SortDirection) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SortDirection(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SortDirection", str)
	}
	return nil
}

func (e SortDirection) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type StatusCodeEnum string

const (
	StatusCodeEnumStatus010100 StatusCodeEnum = "STATUS_010100"
	StatusCodeEnumStatus010101 StatusCodeEnum = "STATUS_010101"
	StatusCodeEnumStatus010102 StatusCodeEnum = "STATUS_010102"
	StatusCodeEnumStatus010103 StatusCodeEnum = "STATUS_010103"
	StatusCodeEnumStatus010200 StatusCodeEnum = "STATUS_010200"
	StatusCodeEnumStatus010300 StatusCodeEnum = "STATUS_010300"
	StatusCodeEnumStatus010301 StatusCodeEnum = "STATUS_010301"
	StatusCodeEnumStatus010302 StatusCodeEnum = "STATUS_010302"
	StatusCodeEnumStatus010400 StatusCodeEnum = "STATUS_010400"
	StatusCodeEnumStatus010401 StatusCodeEnum = "STATUS_010401"
	StatusCodeEnumStatus010402 StatusCodeEnum = "STATUS_010402"
	StatusCodeEnumStatus010500 StatusCodeEnum = "STATUS_010500"
	StatusCodeEnumStatus010501 StatusCodeEnum = "STATUS_010501"
	StatusCodeEnumStatus010502 StatusCodeEnum = "STATUS_010502"
	StatusCodeEnumStatus010600 StatusCodeEnum = "STATUS_010600"
	StatusCodeEnumStatus010601 StatusCodeEnum = "STATUS_010601"
	StatusCodeEnumStatus010602 StatusCodeEnum = "STATUS_010602"
	StatusCodeEnumStatus010700 StatusCodeEnum = "STATUS_010700"
	StatusCodeEnumStatus010701 StatusCodeEnum = "STATUS_010701"
	StatusCodeEnumStatus010702 StatusCodeEnum = "STATUS_010702"
	StatusCodeEnumStatus010800 StatusCodeEnum = "STATUS_010800"
	StatusCodeEnumStatus010801 StatusCodeEnum = "STATUS_010801"
	StatusCodeEnumStatus010802 StatusCodeEnum = "STATUS_010802"
	StatusCodeEnumStatus010900 StatusCodeEnum = "STATUS_010900"
	StatusCodeEnumStatus010901 StatusCodeEnum = "STATUS_010901"
	StatusCodeEnumStatus010902 StatusCodeEnum = "STATUS_010902"
	StatusCodeEnumStatus010903 StatusCodeEnum = "STATUS_010903"
	StatusCodeEnumStatus011000 StatusCodeEnum = "STATUS_011000"
	StatusCodeEnumStatus011001 StatusCodeEnum = "STATUS_011001"
	StatusCodeEnumStatus011002 StatusCodeEnum = "STATUS_011002"
	StatusCodeEnumStatus011003 StatusCodeEnum = "STATUS_011003"
	StatusCodeEnumStatus011004 StatusCodeEnum = "STATUS_011004"
	StatusCodeEnumStatus011100 StatusCodeEnum = "STATUS_011100"
	StatusCodeEnumStatus011101 StatusCodeEnum = "STATUS_011101"
	StatusCodeEnumStatus011102 StatusCodeEnum = "STATUS_011102"
	StatusCodeEnumStatus011200 StatusCodeEnum = "STATUS_011200"
	StatusCodeEnumStatus011201 StatusCodeEnum = "STATUS_011201"
	StatusCodeEnumStatus011202 StatusCodeEnum = "STATUS_011202"
	StatusCodeEnumStatus011300 StatusCodeEnum = "STATUS_011300"
	StatusCodeEnumStatus011301 StatusCodeEnum = "STATUS_011301"
	StatusCodeEnumStatus011302 StatusCodeEnum = "STATUS_011302"
	StatusCodeEnumStatus011400 StatusCodeEnum = "STATUS_011400"
	StatusCodeEnumStatus011401 StatusCodeEnum = "STATUS_011401"
	StatusCodeEnumStatus011402 StatusCodeEnum = "STATUS_011402"
	StatusCodeEnumStatus011500 StatusCodeEnum = "STATUS_011500"
	StatusCodeEnumStatus011501 StatusCodeEnum = "STATUS_011501"
	StatusCodeEnumStatus011502 StatusCodeEnum = "STATUS_011502"
	StatusCodeEnumStatus011600 StatusCodeEnum = "STATUS_011600"
	StatusCodeEnumStatus011601 StatusCodeEnum = "STATUS_011601"
	StatusCodeEnumStatus011602 StatusCodeEnum = "STATUS_011602"
	StatusCodeEnumStatus011700 StatusCodeEnum = "STATUS_011700"
	StatusCodeEnumStatus011701 StatusCodeEnum = "STATUS_011701"
	StatusCodeEnumStatus011702 StatusCodeEnum = "STATUS_011702"
	StatusCodeEnumStatus011800 StatusCodeEnum = "STATUS_011800"
	StatusCodeEnumStatus011801 StatusCodeEnum = "STATUS_011801"
	StatusCodeEnumStatus011802 StatusCodeEnum = "STATUS_011802"
	StatusCodeEnumStatus011900 StatusCodeEnum = "STATUS_011900"
	StatusCodeEnumStatus011901 StatusCodeEnum = "STATUS_011901"
	StatusCodeEnumStatus011902 StatusCodeEnum = "STATUS_011902"
	StatusCodeEnumStatus011903 StatusCodeEnum = "STATUS_011903"
	StatusCodeEnumStatus012000 StatusCodeEnum = "STATUS_012000"
	StatusCodeEnumStatus012001 StatusCodeEnum = "STATUS_012001"
	StatusCodeEnumStatus012002 StatusCodeEnum = "STATUS_012002"
	StatusCodeEnumStatus012003 StatusCodeEnum = "STATUS_012003"
	StatusCodeEnumStatus012004 StatusCodeEnum = "STATUS_012004"
	StatusCodeEnumStatus012005 StatusCodeEnum = "STATUS_012005"
	StatusCodeEnumStatus012006 StatusCodeEnum = "STATUS_012006"
	StatusCodeEnumStatus012007 StatusCodeEnum = "STATUS_012007"
	StatusCodeEnumStatus012008 StatusCodeEnum = "STATUS_012008"
	StatusCodeEnumStatus012100 StatusCodeEnum = "STATUS_012100"
	StatusCodeEnumStatus012101 StatusCodeEnum = "STATUS_012101"
	StatusCodeEnumStatus012102 StatusCodeEnum = "STATUS_012102"
	StatusCodeEnumStatus012103 StatusCodeEnum = "STATUS_012103"
	StatusCodeEnumStatus012200 StatusCodeEnum = "STATUS_012200"
	StatusCodeEnumStatus012201 StatusCodeEnum = "STATUS_012201"
	StatusCodeEnumStatus012202 StatusCodeEnum = "STATUS_012202"
	StatusCodeEnumStatus012203 StatusCodeEnum = "STATUS_012203"
	StatusCodeEnumStatus020100 StatusCodeEnum = "STATUS_020100"
	StatusCodeEnumStatus020101 StatusCodeEnum = "STATUS_020101"
	StatusCodeEnumStatus020102 StatusCodeEnum = "STATUS_020102"
	StatusCodeEnumStatus020200 StatusCodeEnum = "STATUS_020200"
	StatusCodeEnumStatus020201 StatusCodeEnum = "STATUS_020201"
	StatusCodeEnumStatus020202 StatusCodeEnum = "STATUS_020202"
	StatusCodeEnumStatus020300 StatusCodeEnum = "STATUS_020300"
	StatusCodeEnumStatus020301 StatusCodeEnum = "STATUS_020301"
	StatusCodeEnumStatus020302 StatusCodeEnum = "STATUS_020302"
	StatusCodeEnumStatus020400 StatusCodeEnum = "STATUS_020400"
	StatusCodeEnumStatus020401 StatusCodeEnum = "STATUS_020401"
	StatusCodeEnumStatus020402 StatusCodeEnum = "STATUS_020402"
	StatusCodeEnumStatus020500 StatusCodeEnum = "STATUS_020500"
	StatusCodeEnumStatus020501 StatusCodeEnum = "STATUS_020501"
	StatusCodeEnumStatus020502 StatusCodeEnum = "STATUS_020502"
	StatusCodeEnumStatus020600 StatusCodeEnum = "STATUS_020600"
	StatusCodeEnumStatus020601 StatusCodeEnum = "STATUS_020601"
	StatusCodeEnumStatus020602 StatusCodeEnum = "STATUS_020602"
	StatusCodeEnumStatus020700 StatusCodeEnum = "STATUS_020700"
	StatusCodeEnumStatus020701 StatusCodeEnum = "STATUS_020701"
	StatusCodeEnumStatus020702 StatusCodeEnum = "STATUS_020702"
	StatusCodeEnumStatus020800 StatusCodeEnum = "STATUS_020800"
	StatusCodeEnumStatus020801 StatusCodeEnum = "STATUS_020801"
	StatusCodeEnumStatus020802 StatusCodeEnum = "STATUS_020802"
	StatusCodeEnumStatus020900 StatusCodeEnum = "STATUS_020900"
	StatusCodeEnumStatus020901 StatusCodeEnum = "STATUS_020901"
	StatusCodeEnumStatus020902 StatusCodeEnum = "STATUS_020902"
	StatusCodeEnumStatus021000 StatusCodeEnum = "STATUS_021000"
	StatusCodeEnumStatus021001 StatusCodeEnum = "STATUS_021001"
	StatusCodeEnumStatus021002 StatusCodeEnum = "STATUS_021002"
	StatusCodeEnumStatus021100 StatusCodeEnum = "STATUS_021100"
	StatusCodeEnumStatus021101 StatusCodeEnum = "STATUS_021101"
	StatusCodeEnumStatus021102 StatusCodeEnum = "STATUS_021102"
	StatusCodeEnumStatus021200 StatusCodeEnum = "STATUS_021200"
	StatusCodeEnumStatus021201 StatusCodeEnum = "STATUS_021201"
	StatusCodeEnumStatus021202 StatusCodeEnum = "STATUS_021202"
	StatusCodeEnumStatus021300 StatusCodeEnum = "STATUS_021300"
	StatusCodeEnumStatus021301 StatusCodeEnum = "STATUS_021301"
	StatusCodeEnumStatus021302 StatusCodeEnum = "STATUS_021302"
	StatusCodeEnumStatus021400 StatusCodeEnum = "STATUS_021400"
	StatusCodeEnumStatus021401 StatusCodeEnum = "STATUS_021401"
	StatusCodeEnumStatus021402 StatusCodeEnum = "STATUS_021402"
	StatusCodeEnumStatus021500 StatusCodeEnum = "STATUS_021500"
	StatusCodeEnumStatus021501 StatusCodeEnum = "STATUS_021501"
	StatusCodeEnumStatus021502 StatusCodeEnum = "STATUS_021502"
	StatusCodeEnumStatus021600 StatusCodeEnum = "STATUS_021600"
	StatusCodeEnumStatus021601 StatusCodeEnum = "STATUS_021601"
	StatusCodeEnumStatus021602 StatusCodeEnum = "STATUS_021602"
	StatusCodeEnumStatus021700 StatusCodeEnum = "STATUS_021700"
	StatusCodeEnumStatus021701 StatusCodeEnum = "STATUS_021701"
	StatusCodeEnumStatus021702 StatusCodeEnum = "STATUS_021702"
	StatusCodeEnumStatus021800 StatusCodeEnum = "STATUS_021800"
	StatusCodeEnumStatus021801 StatusCodeEnum = "STATUS_021801"
	StatusCodeEnumStatus021802 StatusCodeEnum = "STATUS_021802"
	StatusCodeEnumStatus021900 StatusCodeEnum = "STATUS_021900"
	StatusCodeEnumStatus021901 StatusCodeEnum = "STATUS_021901"
	StatusCodeEnumStatus021902 StatusCodeEnum = "STATUS_021902"
	StatusCodeEnumStatus022000 StatusCodeEnum = "STATUS_022000"
	StatusCodeEnumStatus022001 StatusCodeEnum = "STATUS_022001"
	StatusCodeEnumStatus022002 StatusCodeEnum = "STATUS_022002"
	StatusCodeEnumStatus022100 StatusCodeEnum = "STATUS_022100"
	StatusCodeEnumStatus022200 StatusCodeEnum = "STATUS_022200"
	StatusCodeEnumStatus022201 StatusCodeEnum = "STATUS_022201"
	StatusCodeEnumStatus022202 StatusCodeEnum = "STATUS_022202"
	StatusCodeEnumStatus022300 StatusCodeEnum = "STATUS_022300"
	StatusCodeEnumStatus022301 StatusCodeEnum = "STATUS_022301"
	StatusCodeEnumStatus022302 StatusCodeEnum = "STATUS_022302"
	StatusCodeEnumStatus022400 StatusCodeEnum = "STATUS_022400"
	StatusCodeEnumStatus022401 StatusCodeEnum = "STATUS_022401"
	StatusCodeEnumStatus022402 StatusCodeEnum = "STATUS_022402"
	StatusCodeEnumStatus022500 StatusCodeEnum = "STATUS_022500"
	StatusCodeEnumStatus022501 StatusCodeEnum = "STATUS_022501"
	StatusCodeEnumStatus022502 StatusCodeEnum = "STATUS_022502"
	StatusCodeEnumStatus030100 StatusCodeEnum = "STATUS_030100"
	StatusCodeEnumStatus030101 StatusCodeEnum = "STATUS_030101"
	StatusCodeEnumStatus030102 StatusCodeEnum = "STATUS_030102"
	StatusCodeEnumStatus030200 StatusCodeEnum = "STATUS_030200"
	StatusCodeEnumStatus030201 StatusCodeEnum = "STATUS_030201"
	StatusCodeEnumStatus030202 StatusCodeEnum = "STATUS_030202"
	StatusCodeEnumStatus030300 StatusCodeEnum = "STATUS_030300"
	StatusCodeEnumStatus030301 StatusCodeEnum = "STATUS_030301"
	StatusCodeEnumStatus030302 StatusCodeEnum = "STATUS_030302"
	StatusCodeEnumStatus030400 StatusCodeEnum = "STATUS_030400"
	StatusCodeEnumStatus030401 StatusCodeEnum = "STATUS_030401"
	StatusCodeEnumStatus030402 StatusCodeEnum = "STATUS_030402"
	StatusCodeEnumStatus030500 StatusCodeEnum = "STATUS_030500"
	StatusCodeEnumStatus030501 StatusCodeEnum = "STATUS_030501"
	StatusCodeEnumStatus030502 StatusCodeEnum = "STATUS_030502"
	StatusCodeEnumStatus030600 StatusCodeEnum = "STATUS_030600"
	StatusCodeEnumStatus030601 StatusCodeEnum = "STATUS_030601"
	StatusCodeEnumStatus030602 StatusCodeEnum = "STATUS_030602"
	StatusCodeEnumStatus030700 StatusCodeEnum = "STATUS_030700"
	StatusCodeEnumStatus030701 StatusCodeEnum = "STATUS_030701"
	StatusCodeEnumStatus030702 StatusCodeEnum = "STATUS_030702"
	StatusCodeEnumStatus030800 StatusCodeEnum = "STATUS_030800"
	StatusCodeEnumStatus030801 StatusCodeEnum = "STATUS_030801"
	StatusCodeEnumStatus030802 StatusCodeEnum = "STATUS_030802"
	StatusCodeEnumStatus030900 StatusCodeEnum = "STATUS_030900"
	StatusCodeEnumStatus030901 StatusCodeEnum = "STATUS_030901"
	StatusCodeEnumStatus030902 StatusCodeEnum = "STATUS_030902"
	StatusCodeEnumStatus031000 StatusCodeEnum = "STATUS_031000"
	StatusCodeEnumStatus031001 StatusCodeEnum = "STATUS_031001"
	StatusCodeEnumStatus031002 StatusCodeEnum = "STATUS_031002"
	StatusCodeEnumStatus031100 StatusCodeEnum = "STATUS_031100"
	StatusCodeEnumStatus031101 StatusCodeEnum = "STATUS_031101"
	StatusCodeEnumStatus031102 StatusCodeEnum = "STATUS_031102"
	StatusCodeEnumStatus031200 StatusCodeEnum = "STATUS_031200"
	StatusCodeEnumStatus031201 StatusCodeEnum = "STATUS_031201"
	StatusCodeEnumStatus031202 StatusCodeEnum = "STATUS_031202"
	StatusCodeEnumStatus031300 StatusCodeEnum = "STATUS_031300"
	StatusCodeEnumStatus031301 StatusCodeEnum = "STATUS_031301"
	StatusCodeEnumStatus031302 StatusCodeEnum = "STATUS_031302"
	StatusCodeEnumStatus031400 StatusCodeEnum = "STATUS_031400"
	StatusCodeEnumStatus031401 StatusCodeEnum = "STATUS_031401"
	StatusCodeEnumStatus031402 StatusCodeEnum = "STATUS_031402"
	StatusCodeEnumStatus031500 StatusCodeEnum = "STATUS_031500"
	StatusCodeEnumStatus031501 StatusCodeEnum = "STATUS_031501"
	StatusCodeEnumStatus031502 StatusCodeEnum = "STATUS_031502"
	StatusCodeEnumStatus031600 StatusCodeEnum = "STATUS_031600"
	StatusCodeEnumStatus031601 StatusCodeEnum = "STATUS_031601"
	StatusCodeEnumStatus031602 StatusCodeEnum = "STATUS_031602"
	StatusCodeEnumStatus031700 StatusCodeEnum = "STATUS_031700"
	StatusCodeEnumStatus031701 StatusCodeEnum = "STATUS_031701"
	StatusCodeEnumStatus031702 StatusCodeEnum = "STATUS_031702"
	StatusCodeEnumStatus031800 StatusCodeEnum = "STATUS_031800"
	StatusCodeEnumStatus031801 StatusCodeEnum = "STATUS_031801"
	StatusCodeEnumStatus031802 StatusCodeEnum = "STATUS_031802"
	StatusCodeEnumStatus031900 StatusCodeEnum = "STATUS_031900"
	StatusCodeEnumStatus031901 StatusCodeEnum = "STATUS_031901"
	StatusCodeEnumStatus031902 StatusCodeEnum = "STATUS_031902"
	StatusCodeEnumStatus032000 StatusCodeEnum = "STATUS_032000"
	StatusCodeEnumStatus032001 StatusCodeEnum = "STATUS_032001"
	StatusCodeEnumStatus032002 StatusCodeEnum = "STATUS_032002"
	StatusCodeEnumStatus032100 StatusCodeEnum = "STATUS_032100"
	StatusCodeEnumStatus032101 StatusCodeEnum = "STATUS_032101"
	StatusCodeEnumStatus032102 StatusCodeEnum = "STATUS_032102"
	StatusCodeEnumStatus032200 StatusCodeEnum = "STATUS_032200"
	StatusCodeEnumStatus032201 StatusCodeEnum = "STATUS_032201"
	StatusCodeEnumStatus032202 StatusCodeEnum = "STATUS_032202"
	StatusCodeEnumStatus032300 StatusCodeEnum = "STATUS_032300"
	StatusCodeEnumStatus032301 StatusCodeEnum = "STATUS_032301"
	StatusCodeEnumStatus032302 StatusCodeEnum = "STATUS_032302"
	StatusCodeEnumStatus032400 StatusCodeEnum = "STATUS_032400"
	StatusCodeEnumStatus032401 StatusCodeEnum = "STATUS_032401"
	StatusCodeEnumStatus032402 StatusCodeEnum = "STATUS_032402"
	StatusCodeEnumStatus032500 StatusCodeEnum = "STATUS_032500"
	StatusCodeEnumStatus032501 StatusCodeEnum = "STATUS_032501"
	StatusCodeEnumStatus032502 StatusCodeEnum = "STATUS_032502"
	StatusCodeEnumStatus032600 StatusCodeEnum = "STATUS_032600"
	StatusCodeEnumStatus032601 StatusCodeEnum = "STATUS_032601"
	StatusCodeEnumStatus032602 StatusCodeEnum = "STATUS_032602"
	StatusCodeEnumStatus032700 StatusCodeEnum = "STATUS_032700"
	StatusCodeEnumStatus032701 StatusCodeEnum = "STATUS_032701"
	StatusCodeEnumStatus032702 StatusCodeEnum = "STATUS_032702"
	StatusCodeEnumStatus032800 StatusCodeEnum = "STATUS_032800"
	StatusCodeEnumStatus032801 StatusCodeEnum = "STATUS_032801"
	StatusCodeEnumStatus032802 StatusCodeEnum = "STATUS_032802"
	StatusCodeEnumStatus032900 StatusCodeEnum = "STATUS_032900"
	StatusCodeEnumStatus032901 StatusCodeEnum = "STATUS_032901"
	StatusCodeEnumStatus032902 StatusCodeEnum = "STATUS_032902"
	StatusCodeEnumStatus033000 StatusCodeEnum = "STATUS_033000"
	StatusCodeEnumStatus033001 StatusCodeEnum = "STATUS_033001"
	StatusCodeEnumStatus033002 StatusCodeEnum = "STATUS_033002"
	StatusCodeEnumStatus033100 StatusCodeEnum = "STATUS_033100"
	StatusCodeEnumStatus033101 StatusCodeEnum = "STATUS_033101"
	StatusCodeEnumStatus033102 StatusCodeEnum = "STATUS_033102"
	StatusCodeEnumStatus033200 StatusCodeEnum = "STATUS_033200"
	StatusCodeEnumStatus033201 StatusCodeEnum = "STATUS_033201"
	StatusCodeEnumStatus033202 StatusCodeEnum = "STATUS_033202"
	StatusCodeEnumStatus033300 StatusCodeEnum = "STATUS_033300"
	StatusCodeEnumStatus033301 StatusCodeEnum = "STATUS_033301"
	StatusCodeEnumStatus033302 StatusCodeEnum = "STATUS_033302"
	StatusCodeEnumStatus033400 StatusCodeEnum = "STATUS_033400"
	StatusCodeEnumStatus033401 StatusCodeEnum = "STATUS_033401"
	StatusCodeEnumStatus033402 StatusCodeEnum = "STATUS_033402"
)

var AllStatusCodeEnum = []StatusCodeEnum{
	StatusCodeEnumStatus010100,
	StatusCodeEnumStatus010101,
	StatusCodeEnumStatus010102,
	StatusCodeEnumStatus010103,
	StatusCodeEnumStatus010200,
	StatusCodeEnumStatus010300,
	StatusCodeEnumStatus010301,
	StatusCodeEnumStatus010302,
	StatusCodeEnumStatus010400,
	StatusCodeEnumStatus010401,
	StatusCodeEnumStatus010402,
	StatusCodeEnumStatus010500,
	StatusCodeEnumStatus010501,
	StatusCodeEnumStatus010502,
	StatusCodeEnumStatus010600,
	StatusCodeEnumStatus010601,
	StatusCodeEnumStatus010602,
	StatusCodeEnumStatus010700,
	StatusCodeEnumStatus010701,
	StatusCodeEnumStatus010702,
	StatusCodeEnumStatus010800,
	StatusCodeEnumStatus010801,
	StatusCodeEnumStatus010802,
	StatusCodeEnumStatus010900,
	StatusCodeEnumStatus010901,
	StatusCodeEnumStatus010902,
	StatusCodeEnumStatus010903,
	StatusCodeEnumStatus011000,
	StatusCodeEnumStatus011001,
	StatusCodeEnumStatus011002,
	StatusCodeEnumStatus011003,
	StatusCodeEnumStatus011004,
	StatusCodeEnumStatus011100,
	StatusCodeEnumStatus011101,
	StatusCodeEnumStatus011102,
	StatusCodeEnumStatus011200,
	StatusCodeEnumStatus011201,
	StatusCodeEnumStatus011202,
	StatusCodeEnumStatus011300,
	StatusCodeEnumStatus011301,
	StatusCodeEnumStatus011302,
	StatusCodeEnumStatus011400,
	StatusCodeEnumStatus011401,
	StatusCodeEnumStatus011402,
	StatusCodeEnumStatus011500,
	StatusCodeEnumStatus011501,
	StatusCodeEnumStatus011502,
	StatusCodeEnumStatus011600,
	StatusCodeEnumStatus011601,
	StatusCodeEnumStatus011602,
	StatusCodeEnumStatus011700,
	StatusCodeEnumStatus011701,
	StatusCodeEnumStatus011702,
	StatusCodeEnumStatus011800,
	StatusCodeEnumStatus011801,
	StatusCodeEnumStatus011802,
	StatusCodeEnumStatus011900,
	StatusCodeEnumStatus011901,
	StatusCodeEnumStatus011902,
	StatusCodeEnumStatus011903,
	StatusCodeEnumStatus012000,
	StatusCodeEnumStatus012001,
	StatusCodeEnumStatus012002,
	StatusCodeEnumStatus012003,
	StatusCodeEnumStatus012004,
	StatusCodeEnumStatus012005,
	StatusCodeEnumStatus012006,
	StatusCodeEnumStatus012007,
	StatusCodeEnumStatus012008,
	StatusCodeEnumStatus012100,
	StatusCodeEnumStatus012101,
	StatusCodeEnumStatus012102,
	StatusCodeEnumStatus012103,
	StatusCodeEnumStatus012200,
	StatusCodeEnumStatus012201,
	StatusCodeEnumStatus012202,
	StatusCodeEnumStatus012203,
	StatusCodeEnumStatus020100,
	StatusCodeEnumStatus020101,
	StatusCodeEnumStatus020102,
	StatusCodeEnumStatus020200,
	StatusCodeEnumStatus020201,
	StatusCodeEnumStatus020202,
	StatusCodeEnumStatus020300,
	StatusCodeEnumStatus020301,
	StatusCodeEnumStatus020302,
	StatusCodeEnumStatus020400,
	StatusCodeEnumStatus020401,
	StatusCodeEnumStatus020402,
	StatusCodeEnumStatus020500,
	StatusCodeEnumStatus020501,
	StatusCodeEnumStatus020502,
	StatusCodeEnumStatus020600,
	StatusCodeEnumStatus020601,
	StatusCodeEnumStatus020602,
	StatusCodeEnumStatus020700,
	StatusCodeEnumStatus020701,
	StatusCodeEnumStatus020702,
	StatusCodeEnumStatus020800,
	StatusCodeEnumStatus020801,
	StatusCodeEnumStatus020802,
	StatusCodeEnumStatus020900,
	StatusCodeEnumStatus020901,
	StatusCodeEnumStatus020902,
	StatusCodeEnumStatus021000,
	StatusCodeEnumStatus021001,
	StatusCodeEnumStatus021002,
	StatusCodeEnumStatus021100,
	StatusCodeEnumStatus021101,
	StatusCodeEnumStatus021102,
	StatusCodeEnumStatus021200,
	StatusCodeEnumStatus021201,
	StatusCodeEnumStatus021202,
	StatusCodeEnumStatus021300,
	StatusCodeEnumStatus021301,
	StatusCodeEnumStatus021302,
	StatusCodeEnumStatus021400,
	StatusCodeEnumStatus021401,
	StatusCodeEnumStatus021402,
	StatusCodeEnumStatus021500,
	StatusCodeEnumStatus021501,
	StatusCodeEnumStatus021502,
	StatusCodeEnumStatus021600,
	StatusCodeEnumStatus021601,
	StatusCodeEnumStatus021602,
	StatusCodeEnumStatus021700,
	StatusCodeEnumStatus021701,
	StatusCodeEnumStatus021702,
	StatusCodeEnumStatus021800,
	StatusCodeEnumStatus021801,
	StatusCodeEnumStatus021802,
	StatusCodeEnumStatus021900,
	StatusCodeEnumStatus021901,
	StatusCodeEnumStatus021902,
	StatusCodeEnumStatus022000,
	StatusCodeEnumStatus022001,
	StatusCodeEnumStatus022002,
	StatusCodeEnumStatus022100,
	StatusCodeEnumStatus022200,
	StatusCodeEnumStatus022201,
	StatusCodeEnumStatus022202,
	StatusCodeEnumStatus022300,
	StatusCodeEnumStatus022301,
	StatusCodeEnumStatus022302,
	StatusCodeEnumStatus022400,
	StatusCodeEnumStatus022401,
	StatusCodeEnumStatus022402,
	StatusCodeEnumStatus022500,
	StatusCodeEnumStatus022501,
	StatusCodeEnumStatus022502,
	StatusCodeEnumStatus030100,
	StatusCodeEnumStatus030101,
	StatusCodeEnumStatus030102,
	StatusCodeEnumStatus030200,
	StatusCodeEnumStatus030201,
	StatusCodeEnumStatus030202,
	StatusCodeEnumStatus030300,
	StatusCodeEnumStatus030301,
	StatusCodeEnumStatus030302,
	StatusCodeEnumStatus030400,
	StatusCodeEnumStatus030401,
	StatusCodeEnumStatus030402,
	StatusCodeEnumStatus030500,
	StatusCodeEnumStatus030501,
	StatusCodeEnumStatus030502,
	StatusCodeEnumStatus030600,
	StatusCodeEnumStatus030601,
	StatusCodeEnumStatus030602,
	StatusCodeEnumStatus030700,
	StatusCodeEnumStatus030701,
	StatusCodeEnumStatus030702,
	StatusCodeEnumStatus030800,
	StatusCodeEnumStatus030801,
	StatusCodeEnumStatus030802,
	StatusCodeEnumStatus030900,
	StatusCodeEnumStatus030901,
	StatusCodeEnumStatus030902,
	StatusCodeEnumStatus031000,
	StatusCodeEnumStatus031001,
	StatusCodeEnumStatus031002,
	StatusCodeEnumStatus031100,
	StatusCodeEnumStatus031101,
	StatusCodeEnumStatus031102,
	StatusCodeEnumStatus031200,
	StatusCodeEnumStatus031201,
	StatusCodeEnumStatus031202,
	StatusCodeEnumStatus031300,
	StatusCodeEnumStatus031301,
	StatusCodeEnumStatus031302,
	StatusCodeEnumStatus031400,
	StatusCodeEnumStatus031401,
	StatusCodeEnumStatus031402,
	StatusCodeEnumStatus031500,
	StatusCodeEnumStatus031501,
	StatusCodeEnumStatus031502,
	StatusCodeEnumStatus031600,
	StatusCodeEnumStatus031601,
	StatusCodeEnumStatus031602,
	StatusCodeEnumStatus031700,
	StatusCodeEnumStatus031701,
	StatusCodeEnumStatus031702,
	StatusCodeEnumStatus031800,
	StatusCodeEnumStatus031801,
	StatusCodeEnumStatus031802,
	StatusCodeEnumStatus031900,
	StatusCodeEnumStatus031901,
	StatusCodeEnumStatus031902,
	StatusCodeEnumStatus032000,
	StatusCodeEnumStatus032001,
	StatusCodeEnumStatus032002,
	StatusCodeEnumStatus032100,
	StatusCodeEnumStatus032101,
	StatusCodeEnumStatus032102,
	StatusCodeEnumStatus032200,
	StatusCodeEnumStatus032201,
	StatusCodeEnumStatus032202,
	StatusCodeEnumStatus032300,
	StatusCodeEnumStatus032301,
	StatusCodeEnumStatus032302,
	StatusCodeEnumStatus032400,
	StatusCodeEnumStatus032401,
	StatusCodeEnumStatus032402,
	StatusCodeEnumStatus032500,
	StatusCodeEnumStatus032501,
	StatusCodeEnumStatus032502,
	StatusCodeEnumStatus032600,
	StatusCodeEnumStatus032601,
	StatusCodeEnumStatus032602,
	StatusCodeEnumStatus032700,
	StatusCodeEnumStatus032701,
	StatusCodeEnumStatus032702,
	StatusCodeEnumStatus032800,
	StatusCodeEnumStatus032801,
	StatusCodeEnumStatus032802,
	StatusCodeEnumStatus032900,
	StatusCodeEnumStatus032901,
	StatusCodeEnumStatus032902,
	StatusCodeEnumStatus033000,
	StatusCodeEnumStatus033001,
	StatusCodeEnumStatus033002,
	StatusCodeEnumStatus033100,
	StatusCodeEnumStatus033101,
	StatusCodeEnumStatus033102,
	StatusCodeEnumStatus033200,
	StatusCodeEnumStatus033201,
	StatusCodeEnumStatus033202,
	StatusCodeEnumStatus033300,
	StatusCodeEnumStatus033301,
	StatusCodeEnumStatus033302,
	StatusCodeEnumStatus033400,
	StatusCodeEnumStatus033401,
	StatusCodeEnumStatus033402,
}

func (e StatusCodeEnum) IsValid() bool {
	switch e {
	case StatusCodeEnumStatus010100, StatusCodeEnumStatus010101, StatusCodeEnumStatus010102, StatusCodeEnumStatus010103, StatusCodeEnumStatus010200, StatusCodeEnumStatus010300, StatusCodeEnumStatus010301, StatusCodeEnumStatus010302, StatusCodeEnumStatus010400, StatusCodeEnumStatus010401, StatusCodeEnumStatus010402, StatusCodeEnumStatus010500, StatusCodeEnumStatus010501, StatusCodeEnumStatus010502, StatusCodeEnumStatus010600, StatusCodeEnumStatus010601, StatusCodeEnumStatus010602, StatusCodeEnumStatus010700, StatusCodeEnumStatus010701, StatusCodeEnumStatus010702, StatusCodeEnumStatus010800, StatusCodeEnumStatus010801, StatusCodeEnumStatus010802, StatusCodeEnumStatus010900, StatusCodeEnumStatus010901, StatusCodeEnumStatus010902, StatusCodeEnumStatus010903, StatusCodeEnumStatus011000, StatusCodeEnumStatus011001, StatusCodeEnumStatus011002, StatusCodeEnumStatus011003, StatusCodeEnumStatus011004, StatusCodeEnumStatus011100, StatusCodeEnumStatus011101, StatusCodeEnumStatus011102, StatusCodeEnumStatus011200, StatusCodeEnumStatus011201, StatusCodeEnumStatus011202, StatusCodeEnumStatus011300, StatusCodeEnumStatus011301, StatusCodeEnumStatus011302, StatusCodeEnumStatus011400, StatusCodeEnumStatus011401, StatusCodeEnumStatus011402, StatusCodeEnumStatus011500, StatusCodeEnumStatus011501, StatusCodeEnumStatus011502, StatusCodeEnumStatus011600, StatusCodeEnumStatus011601, StatusCodeEnumStatus011602, StatusCodeEnumStatus011700, StatusCodeEnumStatus011701, StatusCodeEnumStatus011702, StatusCodeEnumStatus011800, StatusCodeEnumStatus011801, StatusCodeEnumStatus011802, StatusCodeEnumStatus011900, StatusCodeEnumStatus011901, StatusCodeEnumStatus011902, StatusCodeEnumStatus011903, StatusCodeEnumStatus012000, StatusCodeEnumStatus012001, StatusCodeEnumStatus012002, StatusCodeEnumStatus012003, StatusCodeEnumStatus012004, StatusCodeEnumStatus012005, StatusCodeEnumStatus012006, StatusCodeEnumStatus012007, StatusCodeEnumStatus012008, StatusCodeEnumStatus012100, StatusCodeEnumStatus012101, StatusCodeEnumStatus012102, StatusCodeEnumStatus012103, StatusCodeEnumStatus012200, StatusCodeEnumStatus012201, StatusCodeEnumStatus012202, StatusCodeEnumStatus012203, StatusCodeEnumStatus020100, StatusCodeEnumStatus020101, StatusCodeEnumStatus020102, StatusCodeEnumStatus020200, StatusCodeEnumStatus020201, StatusCodeEnumStatus020202, StatusCodeEnumStatus020300, StatusCodeEnumStatus020301, StatusCodeEnumStatus020302, StatusCodeEnumStatus020400, StatusCodeEnumStatus020401, StatusCodeEnumStatus020402, StatusCodeEnumStatus020500, StatusCodeEnumStatus020501, StatusCodeEnumStatus020502, StatusCodeEnumStatus020600, StatusCodeEnumStatus020601, StatusCodeEnumStatus020602, StatusCodeEnumStatus020700, StatusCodeEnumStatus020701, StatusCodeEnumStatus020702, StatusCodeEnumStatus020800, StatusCodeEnumStatus020801, StatusCodeEnumStatus020802, StatusCodeEnumStatus020900, StatusCodeEnumStatus020901, StatusCodeEnumStatus020902, StatusCodeEnumStatus021000, StatusCodeEnumStatus021001, StatusCodeEnumStatus021002, StatusCodeEnumStatus021100, StatusCodeEnumStatus021101, StatusCodeEnumStatus021102, StatusCodeEnumStatus021200, StatusCodeEnumStatus021201, StatusCodeEnumStatus021202, StatusCodeEnumStatus021300, StatusCodeEnumStatus021301, StatusCodeEnumStatus021302, StatusCodeEnumStatus021400, StatusCodeEnumStatus021401, StatusCodeEnumStatus021402, StatusCodeEnumStatus021500, StatusCodeEnumStatus021501, StatusCodeEnumStatus021502, StatusCodeEnumStatus021600, StatusCodeEnumStatus021601, StatusCodeEnumStatus021602, StatusCodeEnumStatus021700, StatusCodeEnumStatus021701, StatusCodeEnumStatus021702, StatusCodeEnumStatus021800, StatusCodeEnumStatus021801, StatusCodeEnumStatus021802, StatusCodeEnumStatus021900, StatusCodeEnumStatus021901, StatusCodeEnumStatus021902, StatusCodeEnumStatus022000, StatusCodeEnumStatus022001, StatusCodeEnumStatus022002, StatusCodeEnumStatus022100, StatusCodeEnumStatus022200, StatusCodeEnumStatus022201, StatusCodeEnumStatus022202, StatusCodeEnumStatus022300, StatusCodeEnumStatus022301, StatusCodeEnumStatus022302, StatusCodeEnumStatus022400, StatusCodeEnumStatus022401, StatusCodeEnumStatus022402, StatusCodeEnumStatus022500, StatusCodeEnumStatus022501, StatusCodeEnumStatus022502, StatusCodeEnumStatus030100, StatusCodeEnumStatus030101, StatusCodeEnumStatus030102, StatusCodeEnumStatus030200, StatusCodeEnumStatus030201, StatusCodeEnumStatus030202, StatusCodeEnumStatus030300, StatusCodeEnumStatus030301, StatusCodeEnumStatus030302, StatusCodeEnumStatus030400, StatusCodeEnumStatus030401, StatusCodeEnumStatus030402, StatusCodeEnumStatus030500, StatusCodeEnumStatus030501, StatusCodeEnumStatus030502, StatusCodeEnumStatus030600, StatusCodeEnumStatus030601, StatusCodeEnumStatus030602, StatusCodeEnumStatus030700, StatusCodeEnumStatus030701, StatusCodeEnumStatus030702, StatusCodeEnumStatus030800, StatusCodeEnumStatus030801, StatusCodeEnumStatus030802, StatusCodeEnumStatus030900, StatusCodeEnumStatus030901, StatusCodeEnumStatus030902, StatusCodeEnumStatus031000, StatusCodeEnumStatus031001, StatusCodeEnumStatus031002, StatusCodeEnumStatus031100, StatusCodeEnumStatus031101, StatusCodeEnumStatus031102, StatusCodeEnumStatus031200, StatusCodeEnumStatus031201, StatusCodeEnumStatus031202, StatusCodeEnumStatus031300, StatusCodeEnumStatus031301, StatusCodeEnumStatus031302, StatusCodeEnumStatus031400, StatusCodeEnumStatus031401, StatusCodeEnumStatus031402, StatusCodeEnumStatus031500, StatusCodeEnumStatus031501, StatusCodeEnumStatus031502, StatusCodeEnumStatus031600, StatusCodeEnumStatus031601, StatusCodeEnumStatus031602, StatusCodeEnumStatus031700, StatusCodeEnumStatus031701, StatusCodeEnumStatus031702, StatusCodeEnumStatus031800, StatusCodeEnumStatus031801, StatusCodeEnumStatus031802, StatusCodeEnumStatus031900, StatusCodeEnumStatus031901, StatusCodeEnumStatus031902, StatusCodeEnumStatus032000, StatusCodeEnumStatus032001, StatusCodeEnumStatus032002, StatusCodeEnumStatus032100, StatusCodeEnumStatus032101, StatusCodeEnumStatus032102, StatusCodeEnumStatus032200, StatusCodeEnumStatus032201, StatusCodeEnumStatus032202, StatusCodeEnumStatus032300, StatusCodeEnumStatus032301, StatusCodeEnumStatus032302, StatusCodeEnumStatus032400, StatusCodeEnumStatus032401, StatusCodeEnumStatus032402, StatusCodeEnumStatus032500, StatusCodeEnumStatus032501, StatusCodeEnumStatus032502, StatusCodeEnumStatus032600, StatusCodeEnumStatus032601, StatusCodeEnumStatus032602, StatusCodeEnumStatus032700, StatusCodeEnumStatus032701, StatusCodeEnumStatus032702, StatusCodeEnumStatus032800, StatusCodeEnumStatus032801, StatusCodeEnumStatus032802, StatusCodeEnumStatus032900, StatusCodeEnumStatus032901, StatusCodeEnumStatus032902, StatusCodeEnumStatus033000, StatusCodeEnumStatus033001, StatusCodeEnumStatus033002, StatusCodeEnumStatus033100, StatusCodeEnumStatus033101, StatusCodeEnumStatus033102, StatusCodeEnumStatus033200, StatusCodeEnumStatus033201, StatusCodeEnumStatus033202, StatusCodeEnumStatus033300, StatusCodeEnumStatus033301, StatusCodeEnumStatus033302, StatusCodeEnumStatus033400, StatusCodeEnumStatus033401, StatusCodeEnumStatus033402:
		return true
	}
	return false
}

func (e StatusCodeEnum) String() string {
	return string(e)
}

func (e *StatusCodeEnum) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = StatusCodeEnum(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid StatusCodeEnum", str)
	}
	return nil
}

func (e StatusCodeEnum) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Категория новости
type StoryCategoryEnum string

const (
	// Новости
	StoryCategoryEnumNews StoryCategoryEnum = "NEWS"
	// Недвижимость
	StoryCategoryEnumEstate StoryCategoryEnum = "ESTATE"
	// Жизнь компании
	StoryCategoryEnumCompany StoryCategoryEnum = "COMPANY"
)

var AllStoryCategoryEnum = []StoryCategoryEnum{
	StoryCategoryEnumNews,
	StoryCategoryEnumEstate,
	StoryCategoryEnumCompany,
}

func (e StoryCategoryEnum) IsValid() bool {
	switch e {
	case StoryCategoryEnumNews, StoryCategoryEnumEstate, StoryCategoryEnumCompany:
		return true
	}
	return false
}

func (e StoryCategoryEnum) String() string {
	return string(e)
}

func (e *StoryCategoryEnum) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = StoryCategoryEnum(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid StoryCategoryEnum", str)
	}
	return nil
}

func (e StoryCategoryEnum) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type TaskLabelEnum string

const (
	TaskLabelEnumImportant TaskLabelEnum = "IMPORTANT"
	TaskLabelEnumNoMatter  TaskLabelEnum = "NO_MATTER"
)

var AllTaskLabelEnum = []TaskLabelEnum{
	TaskLabelEnumImportant,
	TaskLabelEnumNoMatter,
}

func (e TaskLabelEnum) IsValid() bool {
	switch e {
	case TaskLabelEnumImportant, TaskLabelEnumNoMatter:
		return true
	}
	return false
}

func (e TaskLabelEnum) String() string {
	return string(e)
}

func (e *TaskLabelEnum) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = TaskLabelEnum(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid TaskLabelEnum", str)
	}
	return nil
}

func (e TaskLabelEnum) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type TaskStatusEnum string

const (
	TaskStatusEnumNew        TaskStatusEnum = "NEW"
	TaskStatusEnumInProgress TaskStatusEnum = "IN_PROGRESS"
	TaskStatusEnumCompleted  TaskStatusEnum = "COMPLETED"
	TaskStatusEnumClosed     TaskStatusEnum = "CLOSED"
	TaskStatusEnumOverdue    TaskStatusEnum = "OVERDUE"
)

var AllTaskStatusEnum = []TaskStatusEnum{
	TaskStatusEnumNew,
	TaskStatusEnumInProgress,
	TaskStatusEnumCompleted,
	TaskStatusEnumClosed,
	TaskStatusEnumOverdue,
}

func (e TaskStatusEnum) IsValid() bool {
	switch e {
	case TaskStatusEnumNew, TaskStatusEnumInProgress, TaskStatusEnumCompleted, TaskStatusEnumClosed, TaskStatusEnumOverdue:
		return true
	}
	return false
}

func (e TaskStatusEnum) String() string {
	return string(e)
}

func (e *TaskStatusEnum) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = TaskStatusEnum(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid TaskStatusEnum", str)
	}
	return nil
}

func (e TaskStatusEnum) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type ToiletTypeEnum string

const (
	ToiletTypeEnumUnited   ToiletTypeEnum = "UNITED"
	ToiletTypeEnumSplitted ToiletTypeEnum = "SPLITTED"
)

var AllToiletTypeEnum = []ToiletTypeEnum{
	ToiletTypeEnumUnited,
	ToiletTypeEnumSplitted,
}

func (e ToiletTypeEnum) IsValid() bool {
	switch e {
	case ToiletTypeEnumUnited, ToiletTypeEnumSplitted:
		return true
	}
	return false
}

func (e ToiletTypeEnum) String() string {
	return string(e)
}

func (e *ToiletTypeEnum) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ToiletTypeEnum(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ToiletTypeEnum", str)
	}
	return nil
}

func (e ToiletTypeEnum) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Статус отклика на вакансию
type VacancyRequestStatusEnum string

const (
	// Новый
	VacancyRequestStatusEnumNew VacancyRequestStatusEnum = "NEW"
	// Отклонён
	VacancyRequestStatusEnumDeclined VacancyRequestStatusEnum = "DECLINED"
	// Принят в работу
	VacancyRequestStatusEnumApproved VacancyRequestStatusEnum = "APPROVED"
)

var AllVacancyRequestStatusEnum = []VacancyRequestStatusEnum{
	VacancyRequestStatusEnumNew,
	VacancyRequestStatusEnumDeclined,
	VacancyRequestStatusEnumApproved,
}

func (e VacancyRequestStatusEnum) IsValid() bool {
	switch e {
	case VacancyRequestStatusEnumNew, VacancyRequestStatusEnumDeclined, VacancyRequestStatusEnumApproved:
		return true
	}
	return false
}

func (e VacancyRequestStatusEnum) String() string {
	return string(e)
}

func (e *VacancyRequestStatusEnum) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = VacancyRequestStatusEnum(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid VacancyRequestStatusEnum", str)
	}
	return nil
}

func (e VacancyRequestStatusEnum) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// График работы по вакансии
type VacancyScheduleEnum string

const (
	// Полный день
	VacancyScheduleEnumFullTime VacancyScheduleEnum = "FULL_TIME"
	// Частичная занятость
	VacancyScheduleEnumPartTime VacancyScheduleEnum = "PART_TIME"
)

var AllVacancyScheduleEnum = []VacancyScheduleEnum{
	VacancyScheduleEnumFullTime,
	VacancyScheduleEnumPartTime,
}

func (e VacancyScheduleEnum) IsValid() bool {
	switch e {
	case VacancyScheduleEnumFullTime, VacancyScheduleEnumPartTime:
		return true
	}
	return false
}

func (e VacancyScheduleEnum) String() string {
	return string(e)
}

func (e *VacancyScheduleEnum) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = VacancyScheduleEnum(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid VacancyScheduleEnum", str)
	}
	return nil
}

func (e VacancyScheduleEnum) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
