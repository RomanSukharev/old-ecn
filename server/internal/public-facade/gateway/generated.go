// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package public_gateway

import (
	"bytes"
	"context"
	"errors"
	"fmt"
	"strconv"
	"sync"
	"sync/atomic"
	"time"

	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/introspection"
	public_models "github.com/pinks-agency/ecn/server/internal/public-facade/models"
	gqlparser "github.com/vektah/gqlparser/v2"
	"github.com/vektah/gqlparser/v2/ast"
)

// region    ************************** generated!.gotpl **************************

// NewExecutableSchema creates an ExecutableSchema from the ResolverRoot interface.
func NewExecutableSchema(cfg Config) graphql.ExecutableSchema {
	return &executableSchema{
		schema:     cfg.Schema,
		resolvers:  cfg.Resolvers,
		directives: cfg.Directives,
		complexity: cfg.Complexity,
	}
}

type Config struct {
	Schema     *ast.Schema
	Resolvers  ResolverRoot
	Directives DirectiveRoot
	Complexity ComplexityRoot
}

type ResolverRoot interface {
	Complex() ComplexResolver
	ComplexHouse() ComplexHouseResolver
	Developer() DeveloperResolver
	Employee() EmployeeResolver
	Mutation() MutationResolver
	Property() PropertyResolver
	Query() QueryResolver
	Review() ReviewResolver
	Story() StoryResolver
	Village() VillageResolver
}

type DirectiveRoot struct {
	Validate func(ctx context.Context, obj interface{}, next graphql.Resolver, constraint string) (res interface{}, err error)
}

type ComplexityRoot struct {
	Complex struct {
		Address             func(childComplexity int) int
		CadastrNumber       func(childComplexity int) int
		CityDistance        func(childComplexity int) int
		CreatedAt           func(childComplexity int) int
		Description         func(childComplexity int) int
		Developer           func(childComplexity int) int
		Documents           func(childComplexity int) int
		ID                  func(childComplexity int) int
		Images              func(childComplexity int) int
		InCity              func(childComplexity int) int
		IsReady             func(childComplexity int) int
		Lat                 func(childComplexity int) int
		Lon                 func(childComplexity int) int
		ProjectDeclarations func(childComplexity int) int
		ReadinessQuarter    func(childComplexity int) int
		ReadinessYear       func(childComplexity int) int
		Region              func(childComplexity int) int
		SeoText             func(childComplexity int) int
		SubRegion           func(childComplexity int) int
		Title               func(childComplexity int) int
		TourLink            func(childComplexity int) int
		UpdatedAt           func(childComplexity int) int
		YoutubeLink         func(childComplexity int) int
	}

	ComplexConnection struct {
		Edges      func(childComplexity int) int
		Nodes      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	ComplexEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	ComplexHouse struct {
		Address             func(childComplexity int) int
		CadastrNumber       func(childComplexity int) int
		Complex             func(childComplexity int) int
		CreatedAt           func(childComplexity int) int
		Description         func(childComplexity int) int
		Documents           func(childComplexity int) int
		ID                  func(childComplexity int) int
		Images              func(childComplexity int) int
		IsReady             func(childComplexity int) int
		Lat                 func(childComplexity int) int
		Lon                 func(childComplexity int) int
		ProjectDeclarations func(childComplexity int) int
		ReadinessQuarter    func(childComplexity int) int
		ReadinessYear       func(childComplexity int) int
		SeoText             func(childComplexity int) int
		Title               func(childComplexity int) int
		TourLink            func(childComplexity int) int
		UpdatedAt           func(childComplexity int) int
		YoutubeLink         func(childComplexity int) int
	}

	ComplexHouseConnection struct {
		Edges      func(childComplexity int) int
		Nodes      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	ComplexHouseEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	ContentBlock struct {
		Data      func(childComplexity int) int
		IsVisible func(childComplexity int) int
		Type      func(childComplexity int) int
	}

	Developer struct {
		CreatedAt func(childComplexity int) int
		ID        func(childComplexity int) int
		Logo      func(childComplexity int) int
		Title     func(childComplexity int) int
		URL       func(childComplexity int) int
		UpdatedAt func(childComplexity int) int
	}

	DeveloperConnection struct {
		Edges      func(childComplexity int) int
		Nodes      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	DeveloperEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	Document struct {
		CreatedAt func(childComplexity int) int
		FileName  func(childComplexity int) int
		FileType  func(childComplexity int) int
		ID        func(childComplexity int) int
		Path      func(childComplexity int) int
		Title     func(childComplexity int) int
		URL       func(childComplexity int) int
	}

	Employee struct {
		Avatar           func(childComplexity int) int
		Birthday         func(childComplexity int) int
		CreatedAt        func(childComplexity int) int
		Description      func(childComplexity int) int
		Email            func(childComplexity int) int
		ID               func(childComplexity int) int
		InternalInfo     func(childComplexity int) int
		IsDeleted        func(childComplexity int) int
		IsPublished      func(childComplexity int) int
		Name             func(childComplexity int) int
		Patronymic       func(childComplexity int) int
		Phone            func(childComplexity int) int
		PublicImage      func(childComplexity int) int
		ShortDescription func(childComplexity int) int
		Surname          func(childComplexity int) int
		UpdatedAt        func(childComplexity int) int
	}

	EmployeeConnection struct {
		Edges      func(childComplexity int) int
		Nodes      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	EmployeeEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	Image struct {
		BlurHash    func(childComplexity int) int
		CreatedAt   func(childComplexity int) int
		FileName    func(childComplexity int) int
		FileType    func(childComplexity int) int
		ID          func(childComplexity int) int
		Path        func(childComplexity int) int
		Preset      func(childComplexity int) int
		PreviewPath func(childComplexity int) int
		PreviewURL  func(childComplexity int) int
		Title       func(childComplexity int) int
		URL         func(childComplexity int) int
	}

	Mutation struct {
		CreateVacancyRequest func(childComplexity int, input public_models.VacancyRequestInput) int
		UploadDocument       func(childComplexity int, input public_models.DocumentInput) int
		UploadImage          func(childComplexity int, input public_models.ImageInput) int
	}

	Page struct {
		ContentBlocks func(childComplexity int) int
		CreatedAt     func(childComplexity int) int
		Description   func(childComplexity int) int
		ID            func(childComplexity int) int
		Status        func(childComplexity int) int
		Title         func(childComplexity int) int
		URL           func(childComplexity int) int
		UpdatedAt     func(childComplexity int) int
	}

	PageConnection struct {
		Edges      func(childComplexity int) int
		Nodes      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	PageEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	PageInfo struct {
		EndCursor       func(childComplexity int) int
		HasNextPage     func(childComplexity int) int
		HasPreviousPage func(childComplexity int) int
		StartCursor     func(childComplexity int) int
	}

	Property struct {
		Address          func(childComplexity int) int
		Area             func(childComplexity int) int
		CadastrNumber    func(childComplexity int) int
		CeilingHeight    func(childComplexity int) int
		CityDistance     func(childComplexity int) int
		ComissionAmount  func(childComplexity int) int
		ComissionPercent func(childComplexity int) int
		CommercialUsage  func(childComplexity int) int
		Complex          func(childComplexity int) int
		ComplexHouse     func(childComplexity int) int
		CreatedAt        func(childComplexity int) int
		Deal             func(childComplexity int) int
		Description      func(childComplexity int) int
		Documents        func(childComplexity int) int
		Floor            func(childComplexity int) int
		Floors           func(childComplexity int) int
		FromDeveloper    func(childComplexity int) int
		ID               func(childComplexity int) int
		Images           func(childComplexity int) int
		InCity           func(childComplexity int) int
		InComplex        func(childComplexity int) int
		InVillage        func(childComplexity int) int
		InternalID       func(childComplexity int) int
		IsHot            func(childComplexity int) int
		IsReady          func(childComplexity int) int
		KitchenArea      func(childComplexity int) int
		LandArea         func(childComplexity int) int
		Lat              func(childComplexity int) int
		LivingArea       func(childComplexity int) int
		Lon              func(childComplexity int) int
		Price            func(childComplexity int) int
		PricePerAr       func(childComplexity int) int
		PricePerMeter    func(childComplexity int) int
		ReadinessQuarter func(childComplexity int) int
		ReadinessYear    func(childComplexity int) int
		RefreshDate      func(childComplexity int) int
		Region           func(childComplexity int) int
		RehabType        func(childComplexity int) int
		Rooms            func(childComplexity int) int
		SeoText          func(childComplexity int) int
		SubRegion        func(childComplexity int) int
		SubType          func(childComplexity int) int
		Title            func(childComplexity int) int
		ToiletType       func(childComplexity int) int
		TourLink         func(childComplexity int) int
		Type             func(childComplexity int) int
		UpdatedAt        func(childComplexity int) int
		Village          func(childComplexity int) int
		YoutubeLink      func(childComplexity int) int
	}

	PropertyConnection struct {
		Edges      func(childComplexity int) int
		Nodes      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	PropertyEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	Query struct {
		Complex       func(childComplexity int, id string) int
		ComplexHouse  func(childComplexity int, id string) int
		ComplexHouses func(childComplexity int, ids []string, start *int, limit *int, sort *public_models.Sort, search *string, filter *public_models.ComplexHouseFilter) int
		Complexes     func(childComplexity int, ids []string, start *int, limit *int, sort *public_models.Sort, search *string) int
		Developer     func(childComplexity int, id string) int
		Developers    func(childComplexity int, ids []string, start *int, limit *int, sort *public_models.Sort, search *string) int
		Employee      func(childComplexity int, id string) int
		Employees     func(childComplexity int, ids []string, start *int, limit *int, sort *public_models.Sort, search *string) int
		GeneratePDF   func(childComplexity int, content string, fileName string) int
		Page          func(childComplexity int, url string) int
		Properties    func(childComplexity int, ids []string, start *int, limit *int, sort *public_models.Sort, search *string, filter *public_models.PropertyFilter) int
		Property      func(childComplexity int, id string) int
		Review        func(childComplexity int, id string) int
		Reviews       func(childComplexity int, ids []string, start *int, limit *int, sort *public_models.Sort, search *string, filter *public_models.ReviewsFilterInput) int
		Stories       func(childComplexity int, ids []string, start *int, limit *int, sort *public_models.Sort, search *string) int
		Story         func(childComplexity int, id string) int
		Vacancies     func(childComplexity int, ids []string, start *int, limit *int, sort *public_models.Sort, search *string) int
		Vacancy       func(childComplexity int, id string) int
		Village       func(childComplexity int, id string) int
		Villages      func(childComplexity int, ids []string, start *int, limit *int, sort *public_models.Sort, search *string) int
	}

	Readiness struct {
		Quarter func(childComplexity int) int
		Year    func(childComplexity int) int
	}

	Review struct {
		AuthorName  func(childComplexity int) int
		AuthorPhone func(childComplexity int) int
		CreatedAt   func(childComplexity int) int
		Employee    func(childComplexity int) int
		ID          func(childComplexity int) int
		Status      func(childComplexity int) int
		Text        func(childComplexity int) int
		UpdatedAt   func(childComplexity int) int
	}

	ReviewConnection struct {
		Edges      func(childComplexity int) int
		Nodes      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	ReviewEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	Story struct {
		Category      func(childComplexity int) int
		ContentBlocks func(childComplexity int) int
		Cover         func(childComplexity int) int
		CreatedAt     func(childComplexity int) int
		ID            func(childComplexity int) int
		Teaser        func(childComplexity int) int
		Title         func(childComplexity int) int
		UpdatedAt     func(childComplexity int) int
	}

	StoryConnection struct {
		Edges      func(childComplexity int) int
		Nodes      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	StoryEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	Vacancy struct {
		CreatedAt         func(childComplexity int) int
		Description       func(childComplexity int) int
		Experience        func(childComplexity int) int
		ID                func(childComplexity int) int
		PublicationStatus func(childComplexity int) int
		Salary            func(childComplexity int) int
		Schedule          func(childComplexity int) int
		Title             func(childComplexity int) int
		UpdatedAt         func(childComplexity int) int
	}

	VacancyConnection struct {
		Edges      func(childComplexity int) int
		Nodes      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	VacancyEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	Village struct {
		Address             func(childComplexity int) int
		CadastrNumber       func(childComplexity int) int
		CityDistance        func(childComplexity int) int
		CreatedAt           func(childComplexity int) int
		Description         func(childComplexity int) int
		Developer           func(childComplexity int) int
		Documents           func(childComplexity int) int
		ID                  func(childComplexity int) int
		Images              func(childComplexity int) int
		InCity              func(childComplexity int) int
		IsReady             func(childComplexity int) int
		Lat                 func(childComplexity int) int
		Lon                 func(childComplexity int) int
		ProjectDeclarations func(childComplexity int) int
		ReadinessQuarter    func(childComplexity int) int
		ReadinessYear       func(childComplexity int) int
		Region              func(childComplexity int) int
		SeoText             func(childComplexity int) int
		SubRegion           func(childComplexity int) int
		Title               func(childComplexity int) int
		TourLink            func(childComplexity int) int
		UpdatedAt           func(childComplexity int) int
		YoutubeLink         func(childComplexity int) int
	}

	VillageConnection struct {
		Edges      func(childComplexity int) int
		Nodes      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	VillageEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}
}

type ComplexResolver interface {
	Developer(ctx context.Context, obj *public_models.Complex) (*public_models.Developer, error)

	Images(ctx context.Context, obj *public_models.Complex) ([]*public_models.Image, error)
	Documents(ctx context.Context, obj *public_models.Complex) ([]*public_models.Document, error)
	ProjectDeclarations(ctx context.Context, obj *public_models.Complex) ([]*public_models.Document, error)
}
type ComplexHouseResolver interface {
	Complex(ctx context.Context, obj *public_models.ComplexHouse) (*public_models.Complex, error)

	Images(ctx context.Context, obj *public_models.ComplexHouse) ([]*public_models.Image, error)
	Documents(ctx context.Context, obj *public_models.ComplexHouse) ([]*public_models.Document, error)
	ProjectDeclarations(ctx context.Context, obj *public_models.ComplexHouse) ([]*public_models.Document, error)
}
type DeveloperResolver interface {
	Logo(ctx context.Context, obj *public_models.Developer) (*public_models.Image, error)
}
type EmployeeResolver interface {
	Avatar(ctx context.Context, obj *public_models.Employee) (*public_models.Image, error)
	PublicImage(ctx context.Context, obj *public_models.Employee) (*public_models.Image, error)
}
type MutationResolver interface {
	UploadImage(ctx context.Context, input public_models.ImageInput) (*public_models.Image, error)
	UploadDocument(ctx context.Context, input public_models.DocumentInput) (*public_models.Document, error)
	CreateVacancyRequest(ctx context.Context, input public_models.VacancyRequestInput) (bool, error)
}
type PropertyResolver interface {
	Complex(ctx context.Context, obj *public_models.Property) (*public_models.Complex, error)
	ComplexHouse(ctx context.Context, obj *public_models.Property) (*public_models.ComplexHouse, error)

	Village(ctx context.Context, obj *public_models.Property) (*public_models.Village, error)

	Documents(ctx context.Context, obj *public_models.Property) ([]*public_models.Document, error)
	Images(ctx context.Context, obj *public_models.Property) ([]*public_models.Image, error)
}
type QueryResolver interface {
	ComplexHouses(ctx context.Context, ids []string, start *int, limit *int, sort *public_models.Sort, search *string, filter *public_models.ComplexHouseFilter) (*public_models.ComplexHouseConnection, error)
	ComplexHouse(ctx context.Context, id string) (*public_models.ComplexHouse, error)
	Complexes(ctx context.Context, ids []string, start *int, limit *int, sort *public_models.Sort, search *string) (*public_models.ComplexConnection, error)
	Complex(ctx context.Context, id string) (*public_models.Complex, error)
	Developers(ctx context.Context, ids []string, start *int, limit *int, sort *public_models.Sort, search *string) (*public_models.DeveloperConnection, error)
	Developer(ctx context.Context, id string) (*public_models.Developer, error)
	Employees(ctx context.Context, ids []string, start *int, limit *int, sort *public_models.Sort, search *string) (*public_models.EmployeeConnection, error)
	Employee(ctx context.Context, id string) (*public_models.Employee, error)
	GeneratePDF(ctx context.Context, content string, fileName string) (string, error)
	Page(ctx context.Context, url string) (*public_models.Page, error)
	Properties(ctx context.Context, ids []string, start *int, limit *int, sort *public_models.Sort, search *string, filter *public_models.PropertyFilter) (*public_models.PropertyConnection, error)
	Property(ctx context.Context, id string) (*public_models.Property, error)
	Reviews(ctx context.Context, ids []string, start *int, limit *int, sort *public_models.Sort, search *string, filter *public_models.ReviewsFilterInput) (*public_models.ReviewConnection, error)
	Review(ctx context.Context, id string) (*public_models.Review, error)
	Stories(ctx context.Context, ids []string, start *int, limit *int, sort *public_models.Sort, search *string) (*public_models.StoryConnection, error)
	Story(ctx context.Context, id string) (*public_models.Story, error)
	Vacancies(ctx context.Context, ids []string, start *int, limit *int, sort *public_models.Sort, search *string) (*public_models.VacancyConnection, error)
	Vacancy(ctx context.Context, id string) (*public_models.Vacancy, error)
	Villages(ctx context.Context, ids []string, start *int, limit *int, sort *public_models.Sort, search *string) (*public_models.VillageConnection, error)
	Village(ctx context.Context, id string) (*public_models.Village, error)
}
type ReviewResolver interface {
	Employee(ctx context.Context, obj *public_models.Review) (*public_models.Employee, error)
}
type StoryResolver interface {
	Cover(ctx context.Context, obj *public_models.Story) (*public_models.Image, error)
}
type VillageResolver interface {
	Developer(ctx context.Context, obj *public_models.Village) (*public_models.Developer, error)

	Images(ctx context.Context, obj *public_models.Village) ([]*public_models.Image, error)
	Documents(ctx context.Context, obj *public_models.Village) ([]*public_models.Document, error)
	ProjectDeclarations(ctx context.Context, obj *public_models.Village) ([]*public_models.Document, error)
}

type executableSchema struct {
	schema     *ast.Schema
	resolvers  ResolverRoot
	directives DirectiveRoot
	complexity ComplexityRoot
}

func (e *executableSchema) Schema() *ast.Schema {
	if e.schema != nil {
		return e.schema
	}
	return parsedSchema
}

func (e *executableSchema) Complexity(typeName, field string, childComplexity int, rawArgs map[string]interface{}) (int, bool) {
	ec := executionContext{nil, e, 0, 0, nil}
	_ = ec
	switch typeName + "." + field {

	case "Complex.address":
		if e.complexity.Complex.Address == nil {
			break
		}

		return e.complexity.Complex.Address(childComplexity), true

	case "Complex.cadastrNumber":
		if e.complexity.Complex.CadastrNumber == nil {
			break
		}

		return e.complexity.Complex.CadastrNumber(childComplexity), true

	case "Complex.cityDistance":
		if e.complexity.Complex.CityDistance == nil {
			break
		}

		return e.complexity.Complex.CityDistance(childComplexity), true

	case "Complex.createdAt":
		if e.complexity.Complex.CreatedAt == nil {
			break
		}

		return e.complexity.Complex.CreatedAt(childComplexity), true

	case "Complex.description":
		if e.complexity.Complex.Description == nil {
			break
		}

		return e.complexity.Complex.Description(childComplexity), true

	case "Complex.developer":
		if e.complexity.Complex.Developer == nil {
			break
		}

		return e.complexity.Complex.Developer(childComplexity), true

	case "Complex.documents":
		if e.complexity.Complex.Documents == nil {
			break
		}

		return e.complexity.Complex.Documents(childComplexity), true

	case "Complex.id":
		if e.complexity.Complex.ID == nil {
			break
		}

		return e.complexity.Complex.ID(childComplexity), true

	case "Complex.images":
		if e.complexity.Complex.Images == nil {
			break
		}

		return e.complexity.Complex.Images(childComplexity), true

	case "Complex.inCity":
		if e.complexity.Complex.InCity == nil {
			break
		}

		return e.complexity.Complex.InCity(childComplexity), true

	case "Complex.isReady":
		if e.complexity.Complex.IsReady == nil {
			break
		}

		return e.complexity.Complex.IsReady(childComplexity), true

	case "Complex.lat":
		if e.complexity.Complex.Lat == nil {
			break
		}

		return e.complexity.Complex.Lat(childComplexity), true

	case "Complex.lon":
		if e.complexity.Complex.Lon == nil {
			break
		}

		return e.complexity.Complex.Lon(childComplexity), true

	case "Complex.projectDeclarations":
		if e.complexity.Complex.ProjectDeclarations == nil {
			break
		}

		return e.complexity.Complex.ProjectDeclarations(childComplexity), true

	case "Complex.readinessQuarter":
		if e.complexity.Complex.ReadinessQuarter == nil {
			break
		}

		return e.complexity.Complex.ReadinessQuarter(childComplexity), true

	case "Complex.readinessYear":
		if e.complexity.Complex.ReadinessYear == nil {
			break
		}

		return e.complexity.Complex.ReadinessYear(childComplexity), true

	case "Complex.region":
		if e.complexity.Complex.Region == nil {
			break
		}

		return e.complexity.Complex.Region(childComplexity), true

	case "Complex.seoText":
		if e.complexity.Complex.SeoText == nil {
			break
		}

		return e.complexity.Complex.SeoText(childComplexity), true

	case "Complex.subRegion":
		if e.complexity.Complex.SubRegion == nil {
			break
		}

		return e.complexity.Complex.SubRegion(childComplexity), true

	case "Complex.title":
		if e.complexity.Complex.Title == nil {
			break
		}

		return e.complexity.Complex.Title(childComplexity), true

	case "Complex.tourLink":
		if e.complexity.Complex.TourLink == nil {
			break
		}

		return e.complexity.Complex.TourLink(childComplexity), true

	case "Complex.updatedAt":
		if e.complexity.Complex.UpdatedAt == nil {
			break
		}

		return e.complexity.Complex.UpdatedAt(childComplexity), true

	case "Complex.youtubeLink":
		if e.complexity.Complex.YoutubeLink == nil {
			break
		}

		return e.complexity.Complex.YoutubeLink(childComplexity), true

	case "ComplexConnection.edges":
		if e.complexity.ComplexConnection.Edges == nil {
			break
		}

		return e.complexity.ComplexConnection.Edges(childComplexity), true

	case "ComplexConnection.nodes":
		if e.complexity.ComplexConnection.Nodes == nil {
			break
		}

		return e.complexity.ComplexConnection.Nodes(childComplexity), true

	case "ComplexConnection.pageInfo":
		if e.complexity.ComplexConnection.PageInfo == nil {
			break
		}

		return e.complexity.ComplexConnection.PageInfo(childComplexity), true

	case "ComplexConnection.totalCount":
		if e.complexity.ComplexConnection.TotalCount == nil {
			break
		}

		return e.complexity.ComplexConnection.TotalCount(childComplexity), true

	case "ComplexEdge.cursor":
		if e.complexity.ComplexEdge.Cursor == nil {
			break
		}

		return e.complexity.ComplexEdge.Cursor(childComplexity), true

	case "ComplexEdge.node":
		if e.complexity.ComplexEdge.Node == nil {
			break
		}

		return e.complexity.ComplexEdge.Node(childComplexity), true

	case "ComplexHouse.address":
		if e.complexity.ComplexHouse.Address == nil {
			break
		}

		return e.complexity.ComplexHouse.Address(childComplexity), true

	case "ComplexHouse.cadastrNumber":
		if e.complexity.ComplexHouse.CadastrNumber == nil {
			break
		}

		return e.complexity.ComplexHouse.CadastrNumber(childComplexity), true

	case "ComplexHouse.complex":
		if e.complexity.ComplexHouse.Complex == nil {
			break
		}

		return e.complexity.ComplexHouse.Complex(childComplexity), true

	case "ComplexHouse.createdAt":
		if e.complexity.ComplexHouse.CreatedAt == nil {
			break
		}

		return e.complexity.ComplexHouse.CreatedAt(childComplexity), true

	case "ComplexHouse.description":
		if e.complexity.ComplexHouse.Description == nil {
			break
		}

		return e.complexity.ComplexHouse.Description(childComplexity), true

	case "ComplexHouse.documents":
		if e.complexity.ComplexHouse.Documents == nil {
			break
		}

		return e.complexity.ComplexHouse.Documents(childComplexity), true

	case "ComplexHouse.id":
		if e.complexity.ComplexHouse.ID == nil {
			break
		}

		return e.complexity.ComplexHouse.ID(childComplexity), true

	case "ComplexHouse.images":
		if e.complexity.ComplexHouse.Images == nil {
			break
		}

		return e.complexity.ComplexHouse.Images(childComplexity), true

	case "ComplexHouse.isReady":
		if e.complexity.ComplexHouse.IsReady == nil {
			break
		}

		return e.complexity.ComplexHouse.IsReady(childComplexity), true

	case "ComplexHouse.lat":
		if e.complexity.ComplexHouse.Lat == nil {
			break
		}

		return e.complexity.ComplexHouse.Lat(childComplexity), true

	case "ComplexHouse.lon":
		if e.complexity.ComplexHouse.Lon == nil {
			break
		}

		return e.complexity.ComplexHouse.Lon(childComplexity), true

	case "ComplexHouse.projectDeclarations":
		if e.complexity.ComplexHouse.ProjectDeclarations == nil {
			break
		}

		return e.complexity.ComplexHouse.ProjectDeclarations(childComplexity), true

	case "ComplexHouse.readinessQuarter":
		if e.complexity.ComplexHouse.ReadinessQuarter == nil {
			break
		}

		return e.complexity.ComplexHouse.ReadinessQuarter(childComplexity), true

	case "ComplexHouse.readinessYear":
		if e.complexity.ComplexHouse.ReadinessYear == nil {
			break
		}

		return e.complexity.ComplexHouse.ReadinessYear(childComplexity), true

	case "ComplexHouse.seoText":
		if e.complexity.ComplexHouse.SeoText == nil {
			break
		}

		return e.complexity.ComplexHouse.SeoText(childComplexity), true

	case "ComplexHouse.title":
		if e.complexity.ComplexHouse.Title == nil {
			break
		}

		return e.complexity.ComplexHouse.Title(childComplexity), true

	case "ComplexHouse.tourLink":
		if e.complexity.ComplexHouse.TourLink == nil {
			break
		}

		return e.complexity.ComplexHouse.TourLink(childComplexity), true

	case "ComplexHouse.updatedAt":
		if e.complexity.ComplexHouse.UpdatedAt == nil {
			break
		}

		return e.complexity.ComplexHouse.UpdatedAt(childComplexity), true

	case "ComplexHouse.youtubeLink":
		if e.complexity.ComplexHouse.YoutubeLink == nil {
			break
		}

		return e.complexity.ComplexHouse.YoutubeLink(childComplexity), true

	case "ComplexHouseConnection.edges":
		if e.complexity.ComplexHouseConnection.Edges == nil {
			break
		}

		return e.complexity.ComplexHouseConnection.Edges(childComplexity), true

	case "ComplexHouseConnection.nodes":
		if e.complexity.ComplexHouseConnection.Nodes == nil {
			break
		}

		return e.complexity.ComplexHouseConnection.Nodes(childComplexity), true

	case "ComplexHouseConnection.pageInfo":
		if e.complexity.ComplexHouseConnection.PageInfo == nil {
			break
		}

		return e.complexity.ComplexHouseConnection.PageInfo(childComplexity), true

	case "ComplexHouseConnection.totalCount":
		if e.complexity.ComplexHouseConnection.TotalCount == nil {
			break
		}

		return e.complexity.ComplexHouseConnection.TotalCount(childComplexity), true

	case "ComplexHouseEdge.cursor":
		if e.complexity.ComplexHouseEdge.Cursor == nil {
			break
		}

		return e.complexity.ComplexHouseEdge.Cursor(childComplexity), true

	case "ComplexHouseEdge.node":
		if e.complexity.ComplexHouseEdge.Node == nil {
			break
		}

		return e.complexity.ComplexHouseEdge.Node(childComplexity), true

	case "ContentBlock.data":
		if e.complexity.ContentBlock.Data == nil {
			break
		}

		return e.complexity.ContentBlock.Data(childComplexity), true

	case "ContentBlock.isVisible":
		if e.complexity.ContentBlock.IsVisible == nil {
			break
		}

		return e.complexity.ContentBlock.IsVisible(childComplexity), true

	case "ContentBlock.type":
		if e.complexity.ContentBlock.Type == nil {
			break
		}

		return e.complexity.ContentBlock.Type(childComplexity), true

	case "Developer.createdAt":
		if e.complexity.Developer.CreatedAt == nil {
			break
		}

		return e.complexity.Developer.CreatedAt(childComplexity), true

	case "Developer.id":
		if e.complexity.Developer.ID == nil {
			break
		}

		return e.complexity.Developer.ID(childComplexity), true

	case "Developer.logo":
		if e.complexity.Developer.Logo == nil {
			break
		}

		return e.complexity.Developer.Logo(childComplexity), true

	case "Developer.title":
		if e.complexity.Developer.Title == nil {
			break
		}

		return e.complexity.Developer.Title(childComplexity), true

	case "Developer.url":
		if e.complexity.Developer.URL == nil {
			break
		}

		return e.complexity.Developer.URL(childComplexity), true

	case "Developer.updatedAt":
		if e.complexity.Developer.UpdatedAt == nil {
			break
		}

		return e.complexity.Developer.UpdatedAt(childComplexity), true

	case "DeveloperConnection.edges":
		if e.complexity.DeveloperConnection.Edges == nil {
			break
		}

		return e.complexity.DeveloperConnection.Edges(childComplexity), true

	case "DeveloperConnection.nodes":
		if e.complexity.DeveloperConnection.Nodes == nil {
			break
		}

		return e.complexity.DeveloperConnection.Nodes(childComplexity), true

	case "DeveloperConnection.pageInfo":
		if e.complexity.DeveloperConnection.PageInfo == nil {
			break
		}

		return e.complexity.DeveloperConnection.PageInfo(childComplexity), true

	case "DeveloperConnection.totalCount":
		if e.complexity.DeveloperConnection.TotalCount == nil {
			break
		}

		return e.complexity.DeveloperConnection.TotalCount(childComplexity), true

	case "DeveloperEdge.cursor":
		if e.complexity.DeveloperEdge.Cursor == nil {
			break
		}

		return e.complexity.DeveloperEdge.Cursor(childComplexity), true

	case "DeveloperEdge.node":
		if e.complexity.DeveloperEdge.Node == nil {
			break
		}

		return e.complexity.DeveloperEdge.Node(childComplexity), true

	case "Document.createdAt":
		if e.complexity.Document.CreatedAt == nil {
			break
		}

		return e.complexity.Document.CreatedAt(childComplexity), true

	case "Document.fileName":
		if e.complexity.Document.FileName == nil {
			break
		}

		return e.complexity.Document.FileName(childComplexity), true

	case "Document.fileType":
		if e.complexity.Document.FileType == nil {
			break
		}

		return e.complexity.Document.FileType(childComplexity), true

	case "Document.id":
		if e.complexity.Document.ID == nil {
			break
		}

		return e.complexity.Document.ID(childComplexity), true

	case "Document.path":
		if e.complexity.Document.Path == nil {
			break
		}

		return e.complexity.Document.Path(childComplexity), true

	case "Document.title":
		if e.complexity.Document.Title == nil {
			break
		}

		return e.complexity.Document.Title(childComplexity), true

	case "Document.url":
		if e.complexity.Document.URL == nil {
			break
		}

		return e.complexity.Document.URL(childComplexity), true

	case "Employee.avatar":
		if e.complexity.Employee.Avatar == nil {
			break
		}

		return e.complexity.Employee.Avatar(childComplexity), true

	case "Employee.birthday":
		if e.complexity.Employee.Birthday == nil {
			break
		}

		return e.complexity.Employee.Birthday(childComplexity), true

	case "Employee.createdAt":
		if e.complexity.Employee.CreatedAt == nil {
			break
		}

		return e.complexity.Employee.CreatedAt(childComplexity), true

	case "Employee.description":
		if e.complexity.Employee.Description == nil {
			break
		}

		return e.complexity.Employee.Description(childComplexity), true

	case "Employee.email":
		if e.complexity.Employee.Email == nil {
			break
		}

		return e.complexity.Employee.Email(childComplexity), true

	case "Employee.id":
		if e.complexity.Employee.ID == nil {
			break
		}

		return e.complexity.Employee.ID(childComplexity), true

	case "Employee.internalInfo":
		if e.complexity.Employee.InternalInfo == nil {
			break
		}

		return e.complexity.Employee.InternalInfo(childComplexity), true

	case "Employee.isDeleted":
		if e.complexity.Employee.IsDeleted == nil {
			break
		}

		return e.complexity.Employee.IsDeleted(childComplexity), true

	case "Employee.isPublished":
		if e.complexity.Employee.IsPublished == nil {
			break
		}

		return e.complexity.Employee.IsPublished(childComplexity), true

	case "Employee.name":
		if e.complexity.Employee.Name == nil {
			break
		}

		return e.complexity.Employee.Name(childComplexity), true

	case "Employee.patronymic":
		if e.complexity.Employee.Patronymic == nil {
			break
		}

		return e.complexity.Employee.Patronymic(childComplexity), true

	case "Employee.phone":
		if e.complexity.Employee.Phone == nil {
			break
		}

		return e.complexity.Employee.Phone(childComplexity), true

	case "Employee.publicImage":
		if e.complexity.Employee.PublicImage == nil {
			break
		}

		return e.complexity.Employee.PublicImage(childComplexity), true

	case "Employee.shortDescription":
		if e.complexity.Employee.ShortDescription == nil {
			break
		}

		return e.complexity.Employee.ShortDescription(childComplexity), true

	case "Employee.surname":
		if e.complexity.Employee.Surname == nil {
			break
		}

		return e.complexity.Employee.Surname(childComplexity), true

	case "Employee.updatedAt":
		if e.complexity.Employee.UpdatedAt == nil {
			break
		}

		return e.complexity.Employee.UpdatedAt(childComplexity), true

	case "EmployeeConnection.edges":
		if e.complexity.EmployeeConnection.Edges == nil {
			break
		}

		return e.complexity.EmployeeConnection.Edges(childComplexity), true

	case "EmployeeConnection.nodes":
		if e.complexity.EmployeeConnection.Nodes == nil {
			break
		}

		return e.complexity.EmployeeConnection.Nodes(childComplexity), true

	case "EmployeeConnection.pageInfo":
		if e.complexity.EmployeeConnection.PageInfo == nil {
			break
		}

		return e.complexity.EmployeeConnection.PageInfo(childComplexity), true

	case "EmployeeConnection.totalCount":
		if e.complexity.EmployeeConnection.TotalCount == nil {
			break
		}

		return e.complexity.EmployeeConnection.TotalCount(childComplexity), true

	case "EmployeeEdge.cursor":
		if e.complexity.EmployeeEdge.Cursor == nil {
			break
		}

		return e.complexity.EmployeeEdge.Cursor(childComplexity), true

	case "EmployeeEdge.node":
		if e.complexity.EmployeeEdge.Node == nil {
			break
		}

		return e.complexity.EmployeeEdge.Node(childComplexity), true

	case "Image.blurHash":
		if e.complexity.Image.BlurHash == nil {
			break
		}

		return e.complexity.Image.BlurHash(childComplexity), true

	case "Image.createdAt":
		if e.complexity.Image.CreatedAt == nil {
			break
		}

		return e.complexity.Image.CreatedAt(childComplexity), true

	case "Image.fileName":
		if e.complexity.Image.FileName == nil {
			break
		}

		return e.complexity.Image.FileName(childComplexity), true

	case "Image.fileType":
		if e.complexity.Image.FileType == nil {
			break
		}

		return e.complexity.Image.FileType(childComplexity), true

	case "Image.id":
		if e.complexity.Image.ID == nil {
			break
		}

		return e.complexity.Image.ID(childComplexity), true

	case "Image.path":
		if e.complexity.Image.Path == nil {
			break
		}

		return e.complexity.Image.Path(childComplexity), true

	case "Image.preset":
		if e.complexity.Image.Preset == nil {
			break
		}

		return e.complexity.Image.Preset(childComplexity), true

	case "Image.previewPath":
		if e.complexity.Image.PreviewPath == nil {
			break
		}

		return e.complexity.Image.PreviewPath(childComplexity), true

	case "Image.previewUrl":
		if e.complexity.Image.PreviewURL == nil {
			break
		}

		return e.complexity.Image.PreviewURL(childComplexity), true

	case "Image.title":
		if e.complexity.Image.Title == nil {
			break
		}

		return e.complexity.Image.Title(childComplexity), true

	case "Image.url":
		if e.complexity.Image.URL == nil {
			break
		}

		return e.complexity.Image.URL(childComplexity), true

	case "Mutation.createVacancyRequest":
		if e.complexity.Mutation.CreateVacancyRequest == nil {
			break
		}

		args, err := ec.field_Mutation_createVacancyRequest_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateVacancyRequest(childComplexity, args["input"].(public_models.VacancyRequestInput)), true

	case "Mutation.uploadDocument":
		if e.complexity.Mutation.UploadDocument == nil {
			break
		}

		args, err := ec.field_Mutation_uploadDocument_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UploadDocument(childComplexity, args["input"].(public_models.DocumentInput)), true

	case "Mutation.uploadImage":
		if e.complexity.Mutation.UploadImage == nil {
			break
		}

		args, err := ec.field_Mutation_uploadImage_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UploadImage(childComplexity, args["input"].(public_models.ImageInput)), true

	case "Page.contentBlocks":
		if e.complexity.Page.ContentBlocks == nil {
			break
		}

		return e.complexity.Page.ContentBlocks(childComplexity), true

	case "Page.createdAt":
		if e.complexity.Page.CreatedAt == nil {
			break
		}

		return e.complexity.Page.CreatedAt(childComplexity), true

	case "Page.description":
		if e.complexity.Page.Description == nil {
			break
		}

		return e.complexity.Page.Description(childComplexity), true

	case "Page.id":
		if e.complexity.Page.ID == nil {
			break
		}

		return e.complexity.Page.ID(childComplexity), true

	case "Page.status":
		if e.complexity.Page.Status == nil {
			break
		}

		return e.complexity.Page.Status(childComplexity), true

	case "Page.title":
		if e.complexity.Page.Title == nil {
			break
		}

		return e.complexity.Page.Title(childComplexity), true

	case "Page.url":
		if e.complexity.Page.URL == nil {
			break
		}

		return e.complexity.Page.URL(childComplexity), true

	case "Page.updatedAt":
		if e.complexity.Page.UpdatedAt == nil {
			break
		}

		return e.complexity.Page.UpdatedAt(childComplexity), true

	case "PageConnection.edges":
		if e.complexity.PageConnection.Edges == nil {
			break
		}

		return e.complexity.PageConnection.Edges(childComplexity), true

	case "PageConnection.nodes":
		if e.complexity.PageConnection.Nodes == nil {
			break
		}

		return e.complexity.PageConnection.Nodes(childComplexity), true

	case "PageConnection.pageInfo":
		if e.complexity.PageConnection.PageInfo == nil {
			break
		}

		return e.complexity.PageConnection.PageInfo(childComplexity), true

	case "PageConnection.totalCount":
		if e.complexity.PageConnection.TotalCount == nil {
			break
		}

		return e.complexity.PageConnection.TotalCount(childComplexity), true

	case "PageEdge.cursor":
		if e.complexity.PageEdge.Cursor == nil {
			break
		}

		return e.complexity.PageEdge.Cursor(childComplexity), true

	case "PageEdge.node":
		if e.complexity.PageEdge.Node == nil {
			break
		}

		return e.complexity.PageEdge.Node(childComplexity), true

	case "PageInfo.endCursor":
		if e.complexity.PageInfo.EndCursor == nil {
			break
		}

		return e.complexity.PageInfo.EndCursor(childComplexity), true

	case "PageInfo.hasNextPage":
		if e.complexity.PageInfo.HasNextPage == nil {
			break
		}

		return e.complexity.PageInfo.HasNextPage(childComplexity), true

	case "PageInfo.hasPreviousPage":
		if e.complexity.PageInfo.HasPreviousPage == nil {
			break
		}

		return e.complexity.PageInfo.HasPreviousPage(childComplexity), true

	case "PageInfo.startCursor":
		if e.complexity.PageInfo.StartCursor == nil {
			break
		}

		return e.complexity.PageInfo.StartCursor(childComplexity), true

	case "Property.address":
		if e.complexity.Property.Address == nil {
			break
		}

		return e.complexity.Property.Address(childComplexity), true

	case "Property.area":
		if e.complexity.Property.Area == nil {
			break
		}

		return e.complexity.Property.Area(childComplexity), true

	case "Property.cadastrNumber":
		if e.complexity.Property.CadastrNumber == nil {
			break
		}

		return e.complexity.Property.CadastrNumber(childComplexity), true

	case "Property.ceilingHeight":
		if e.complexity.Property.CeilingHeight == nil {
			break
		}

		return e.complexity.Property.CeilingHeight(childComplexity), true

	case "Property.cityDistance":
		if e.complexity.Property.CityDistance == nil {
			break
		}

		return e.complexity.Property.CityDistance(childComplexity), true

	case "Property.comissionAmount":
		if e.complexity.Property.ComissionAmount == nil {
			break
		}

		return e.complexity.Property.ComissionAmount(childComplexity), true

	case "Property.comissionPercent":
		if e.complexity.Property.ComissionPercent == nil {
			break
		}

		return e.complexity.Property.ComissionPercent(childComplexity), true

	case "Property.commercialUsage":
		if e.complexity.Property.CommercialUsage == nil {
			break
		}

		return e.complexity.Property.CommercialUsage(childComplexity), true

	case "Property.complex":
		if e.complexity.Property.Complex == nil {
			break
		}

		return e.complexity.Property.Complex(childComplexity), true

	case "Property.complexHouse":
		if e.complexity.Property.ComplexHouse == nil {
			break
		}

		return e.complexity.Property.ComplexHouse(childComplexity), true

	case "Property.createdAt":
		if e.complexity.Property.CreatedAt == nil {
			break
		}

		return e.complexity.Property.CreatedAt(childComplexity), true

	case "Property.deal":
		if e.complexity.Property.Deal == nil {
			break
		}

		return e.complexity.Property.Deal(childComplexity), true

	case "Property.description":
		if e.complexity.Property.Description == nil {
			break
		}

		return e.complexity.Property.Description(childComplexity), true

	case "Property.documents":
		if e.complexity.Property.Documents == nil {
			break
		}

		return e.complexity.Property.Documents(childComplexity), true

	case "Property.floor":
		if e.complexity.Property.Floor == nil {
			break
		}

		return e.complexity.Property.Floor(childComplexity), true

	case "Property.floors":
		if e.complexity.Property.Floors == nil {
			break
		}

		return e.complexity.Property.Floors(childComplexity), true

	case "Property.fromDeveloper":
		if e.complexity.Property.FromDeveloper == nil {
			break
		}

		return e.complexity.Property.FromDeveloper(childComplexity), true

	case "Property.id":
		if e.complexity.Property.ID == nil {
			break
		}

		return e.complexity.Property.ID(childComplexity), true

	case "Property.images":
		if e.complexity.Property.Images == nil {
			break
		}

		return e.complexity.Property.Images(childComplexity), true

	case "Property.inCity":
		if e.complexity.Property.InCity == nil {
			break
		}

		return e.complexity.Property.InCity(childComplexity), true

	case "Property.inComplex":
		if e.complexity.Property.InComplex == nil {
			break
		}

		return e.complexity.Property.InComplex(childComplexity), true

	case "Property.inVillage":
		if e.complexity.Property.InVillage == nil {
			break
		}

		return e.complexity.Property.InVillage(childComplexity), true

	case "Property.internalID":
		if e.complexity.Property.InternalID == nil {
			break
		}

		return e.complexity.Property.InternalID(childComplexity), true

	case "Property.isHot":
		if e.complexity.Property.IsHot == nil {
			break
		}

		return e.complexity.Property.IsHot(childComplexity), true

	case "Property.isReady":
		if e.complexity.Property.IsReady == nil {
			break
		}

		return e.complexity.Property.IsReady(childComplexity), true

	case "Property.kitchenArea":
		if e.complexity.Property.KitchenArea == nil {
			break
		}

		return e.complexity.Property.KitchenArea(childComplexity), true

	case "Property.landArea":
		if e.complexity.Property.LandArea == nil {
			break
		}

		return e.complexity.Property.LandArea(childComplexity), true

	case "Property.lat":
		if e.complexity.Property.Lat == nil {
			break
		}

		return e.complexity.Property.Lat(childComplexity), true

	case "Property.livingArea":
		if e.complexity.Property.LivingArea == nil {
			break
		}

		return e.complexity.Property.LivingArea(childComplexity), true

	case "Property.lon":
		if e.complexity.Property.Lon == nil {
			break
		}

		return e.complexity.Property.Lon(childComplexity), true

	case "Property.price":
		if e.complexity.Property.Price == nil {
			break
		}

		return e.complexity.Property.Price(childComplexity), true

	case "Property.pricePerAr":
		if e.complexity.Property.PricePerAr == nil {
			break
		}

		return e.complexity.Property.PricePerAr(childComplexity), true

	case "Property.pricePerMeter":
		if e.complexity.Property.PricePerMeter == nil {
			break
		}

		return e.complexity.Property.PricePerMeter(childComplexity), true

	case "Property.readinessQuarter":
		if e.complexity.Property.ReadinessQuarter == nil {
			break
		}

		return e.complexity.Property.ReadinessQuarter(childComplexity), true

	case "Property.readinessYear":
		if e.complexity.Property.ReadinessYear == nil {
			break
		}

		return e.complexity.Property.ReadinessYear(childComplexity), true

	case "Property.refreshDate":
		if e.complexity.Property.RefreshDate == nil {
			break
		}

		return e.complexity.Property.RefreshDate(childComplexity), true

	case "Property.region":
		if e.complexity.Property.Region == nil {
			break
		}

		return e.complexity.Property.Region(childComplexity), true

	case "Property.rehabType":
		if e.complexity.Property.RehabType == nil {
			break
		}

		return e.complexity.Property.RehabType(childComplexity), true

	case "Property.rooms":
		if e.complexity.Property.Rooms == nil {
			break
		}

		return e.complexity.Property.Rooms(childComplexity), true

	case "Property.seoText":
		if e.complexity.Property.SeoText == nil {
			break
		}

		return e.complexity.Property.SeoText(childComplexity), true

	case "Property.subRegion":
		if e.complexity.Property.SubRegion == nil {
			break
		}

		return e.complexity.Property.SubRegion(childComplexity), true

	case "Property.subType":
		if e.complexity.Property.SubType == nil {
			break
		}

		return e.complexity.Property.SubType(childComplexity), true

	case "Property.title":
		if e.complexity.Property.Title == nil {
			break
		}

		return e.complexity.Property.Title(childComplexity), true

	case "Property.toiletType":
		if e.complexity.Property.ToiletType == nil {
			break
		}

		return e.complexity.Property.ToiletType(childComplexity), true

	case "Property.tourLink":
		if e.complexity.Property.TourLink == nil {
			break
		}

		return e.complexity.Property.TourLink(childComplexity), true

	case "Property.type":
		if e.complexity.Property.Type == nil {
			break
		}

		return e.complexity.Property.Type(childComplexity), true

	case "Property.updatedAt":
		if e.complexity.Property.UpdatedAt == nil {
			break
		}

		return e.complexity.Property.UpdatedAt(childComplexity), true

	case "Property.village":
		if e.complexity.Property.Village == nil {
			break
		}

		return e.complexity.Property.Village(childComplexity), true

	case "Property.youtubeLink":
		if e.complexity.Property.YoutubeLink == nil {
			break
		}

		return e.complexity.Property.YoutubeLink(childComplexity), true

	case "PropertyConnection.edges":
		if e.complexity.PropertyConnection.Edges == nil {
			break
		}

		return e.complexity.PropertyConnection.Edges(childComplexity), true

	case "PropertyConnection.nodes":
		if e.complexity.PropertyConnection.Nodes == nil {
			break
		}

		return e.complexity.PropertyConnection.Nodes(childComplexity), true

	case "PropertyConnection.pageInfo":
		if e.complexity.PropertyConnection.PageInfo == nil {
			break
		}

		return e.complexity.PropertyConnection.PageInfo(childComplexity), true

	case "PropertyConnection.totalCount":
		if e.complexity.PropertyConnection.TotalCount == nil {
			break
		}

		return e.complexity.PropertyConnection.TotalCount(childComplexity), true

	case "PropertyEdge.cursor":
		if e.complexity.PropertyEdge.Cursor == nil {
			break
		}

		return e.complexity.PropertyEdge.Cursor(childComplexity), true

	case "PropertyEdge.node":
		if e.complexity.PropertyEdge.Node == nil {
			break
		}

		return e.complexity.PropertyEdge.Node(childComplexity), true

	case "Query.complex":
		if e.complexity.Query.Complex == nil {
			break
		}

		args, err := ec.field_Query_complex_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Complex(childComplexity, args["id"].(string)), true

	case "Query.complexHouse":
		if e.complexity.Query.ComplexHouse == nil {
			break
		}

		args, err := ec.field_Query_complexHouse_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ComplexHouse(childComplexity, args["id"].(string)), true

	case "Query.complexHouses":
		if e.complexity.Query.ComplexHouses == nil {
			break
		}

		args, err := ec.field_Query_complexHouses_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ComplexHouses(childComplexity, args["ids"].([]string), args["start"].(*int), args["limit"].(*int), args["sort"].(*public_models.Sort), args["search"].(*string), args["filter"].(*public_models.ComplexHouseFilter)), true

	case "Query.complexes":
		if e.complexity.Query.Complexes == nil {
			break
		}

		args, err := ec.field_Query_complexes_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Complexes(childComplexity, args["ids"].([]string), args["start"].(*int), args["limit"].(*int), args["sort"].(*public_models.Sort), args["search"].(*string)), true

	case "Query.developer":
		if e.complexity.Query.Developer == nil {
			break
		}

		args, err := ec.field_Query_developer_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Developer(childComplexity, args["id"].(string)), true

	case "Query.developers":
		if e.complexity.Query.Developers == nil {
			break
		}

		args, err := ec.field_Query_developers_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Developers(childComplexity, args["ids"].([]string), args["start"].(*int), args["limit"].(*int), args["sort"].(*public_models.Sort), args["search"].(*string)), true

	case "Query.employee":
		if e.complexity.Query.Employee == nil {
			break
		}

		args, err := ec.field_Query_employee_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Employee(childComplexity, args["id"].(string)), true

	case "Query.employees":
		if e.complexity.Query.Employees == nil {
			break
		}

		args, err := ec.field_Query_employees_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Employees(childComplexity, args["ids"].([]string), args["start"].(*int), args["limit"].(*int), args["sort"].(*public_models.Sort), args["search"].(*string)), true

	case "Query.generatePdf":
		if e.complexity.Query.GeneratePDF == nil {
			break
		}

		args, err := ec.field_Query_generatePdf_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GeneratePDF(childComplexity, args["content"].(string), args["fileName"].(string)), true

	case "Query.page":
		if e.complexity.Query.Page == nil {
			break
		}

		args, err := ec.field_Query_page_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Page(childComplexity, args["url"].(string)), true

	case "Query.properties":
		if e.complexity.Query.Properties == nil {
			break
		}

		args, err := ec.field_Query_properties_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Properties(childComplexity, args["ids"].([]string), args["start"].(*int), args["limit"].(*int), args["sort"].(*public_models.Sort), args["search"].(*string), args["filter"].(*public_models.PropertyFilter)), true

	case "Query.property":
		if e.complexity.Query.Property == nil {
			break
		}

		args, err := ec.field_Query_property_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Property(childComplexity, args["id"].(string)), true

	case "Query.review":
		if e.complexity.Query.Review == nil {
			break
		}

		args, err := ec.field_Query_review_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Review(childComplexity, args["id"].(string)), true

	case "Query.reviews":
		if e.complexity.Query.Reviews == nil {
			break
		}

		args, err := ec.field_Query_reviews_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Reviews(childComplexity, args["ids"].([]string), args["start"].(*int), args["limit"].(*int), args["sort"].(*public_models.Sort), args["search"].(*string), args["filter"].(*public_models.ReviewsFilterInput)), true

	case "Query.stories":
		if e.complexity.Query.Stories == nil {
			break
		}

		args, err := ec.field_Query_stories_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Stories(childComplexity, args["ids"].([]string), args["start"].(*int), args["limit"].(*int), args["sort"].(*public_models.Sort), args["search"].(*string)), true

	case "Query.story":
		if e.complexity.Query.Story == nil {
			break
		}

		args, err := ec.field_Query_story_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Story(childComplexity, args["id"].(string)), true

	case "Query.vacancies":
		if e.complexity.Query.Vacancies == nil {
			break
		}

		args, err := ec.field_Query_vacancies_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Vacancies(childComplexity, args["ids"].([]string), args["start"].(*int), args["limit"].(*int), args["sort"].(*public_models.Sort), args["search"].(*string)), true

	case "Query.vacancy":
		if e.complexity.Query.Vacancy == nil {
			break
		}

		args, err := ec.field_Query_vacancy_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Vacancy(childComplexity, args["id"].(string)), true

	case "Query.village":
		if e.complexity.Query.Village == nil {
			break
		}

		args, err := ec.field_Query_village_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Village(childComplexity, args["id"].(string)), true

	case "Query.villages":
		if e.complexity.Query.Villages == nil {
			break
		}

		args, err := ec.field_Query_villages_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Villages(childComplexity, args["ids"].([]string), args["start"].(*int), args["limit"].(*int), args["sort"].(*public_models.Sort), args["search"].(*string)), true

	case "Readiness.quarter":
		if e.complexity.Readiness.Quarter == nil {
			break
		}

		return e.complexity.Readiness.Quarter(childComplexity), true

	case "Readiness.year":
		if e.complexity.Readiness.Year == nil {
			break
		}

		return e.complexity.Readiness.Year(childComplexity), true

	case "Review.authorName":
		if e.complexity.Review.AuthorName == nil {
			break
		}

		return e.complexity.Review.AuthorName(childComplexity), true

	case "Review.authorPhone":
		if e.complexity.Review.AuthorPhone == nil {
			break
		}

		return e.complexity.Review.AuthorPhone(childComplexity), true

	case "Review.createdAt":
		if e.complexity.Review.CreatedAt == nil {
			break
		}

		return e.complexity.Review.CreatedAt(childComplexity), true

	case "Review.employee":
		if e.complexity.Review.Employee == nil {
			break
		}

		return e.complexity.Review.Employee(childComplexity), true

	case "Review.id":
		if e.complexity.Review.ID == nil {
			break
		}

		return e.complexity.Review.ID(childComplexity), true

	case "Review.status":
		if e.complexity.Review.Status == nil {
			break
		}

		return e.complexity.Review.Status(childComplexity), true

	case "Review.text":
		if e.complexity.Review.Text == nil {
			break
		}

		return e.complexity.Review.Text(childComplexity), true

	case "Review.updatedAt":
		if e.complexity.Review.UpdatedAt == nil {
			break
		}

		return e.complexity.Review.UpdatedAt(childComplexity), true

	case "ReviewConnection.edges":
		if e.complexity.ReviewConnection.Edges == nil {
			break
		}

		return e.complexity.ReviewConnection.Edges(childComplexity), true

	case "ReviewConnection.nodes":
		if e.complexity.ReviewConnection.Nodes == nil {
			break
		}

		return e.complexity.ReviewConnection.Nodes(childComplexity), true

	case "ReviewConnection.pageInfo":
		if e.complexity.ReviewConnection.PageInfo == nil {
			break
		}

		return e.complexity.ReviewConnection.PageInfo(childComplexity), true

	case "ReviewConnection.totalCount":
		if e.complexity.ReviewConnection.TotalCount == nil {
			break
		}

		return e.complexity.ReviewConnection.TotalCount(childComplexity), true

	case "ReviewEdge.cursor":
		if e.complexity.ReviewEdge.Cursor == nil {
			break
		}

		return e.complexity.ReviewEdge.Cursor(childComplexity), true

	case "ReviewEdge.node":
		if e.complexity.ReviewEdge.Node == nil {
			break
		}

		return e.complexity.ReviewEdge.Node(childComplexity), true

	case "Story.category":
		if e.complexity.Story.Category == nil {
			break
		}

		return e.complexity.Story.Category(childComplexity), true

	case "Story.contentBlocks":
		if e.complexity.Story.ContentBlocks == nil {
			break
		}

		return e.complexity.Story.ContentBlocks(childComplexity), true

	case "Story.cover":
		if e.complexity.Story.Cover == nil {
			break
		}

		return e.complexity.Story.Cover(childComplexity), true

	case "Story.createdAt":
		if e.complexity.Story.CreatedAt == nil {
			break
		}

		return e.complexity.Story.CreatedAt(childComplexity), true

	case "Story.id":
		if e.complexity.Story.ID == nil {
			break
		}

		return e.complexity.Story.ID(childComplexity), true

	case "Story.teaser":
		if e.complexity.Story.Teaser == nil {
			break
		}

		return e.complexity.Story.Teaser(childComplexity), true

	case "Story.title":
		if e.complexity.Story.Title == nil {
			break
		}

		return e.complexity.Story.Title(childComplexity), true

	case "Story.updatedAt":
		if e.complexity.Story.UpdatedAt == nil {
			break
		}

		return e.complexity.Story.UpdatedAt(childComplexity), true

	case "StoryConnection.edges":
		if e.complexity.StoryConnection.Edges == nil {
			break
		}

		return e.complexity.StoryConnection.Edges(childComplexity), true

	case "StoryConnection.nodes":
		if e.complexity.StoryConnection.Nodes == nil {
			break
		}

		return e.complexity.StoryConnection.Nodes(childComplexity), true

	case "StoryConnection.pageInfo":
		if e.complexity.StoryConnection.PageInfo == nil {
			break
		}

		return e.complexity.StoryConnection.PageInfo(childComplexity), true

	case "StoryConnection.totalCount":
		if e.complexity.StoryConnection.TotalCount == nil {
			break
		}

		return e.complexity.StoryConnection.TotalCount(childComplexity), true

	case "StoryEdge.cursor":
		if e.complexity.StoryEdge.Cursor == nil {
			break
		}

		return e.complexity.StoryEdge.Cursor(childComplexity), true

	case "StoryEdge.node":
		if e.complexity.StoryEdge.Node == nil {
			break
		}

		return e.complexity.StoryEdge.Node(childComplexity), true

	case "Vacancy.createdAt":
		if e.complexity.Vacancy.CreatedAt == nil {
			break
		}

		return e.complexity.Vacancy.CreatedAt(childComplexity), true

	case "Vacancy.description":
		if e.complexity.Vacancy.Description == nil {
			break
		}

		return e.complexity.Vacancy.Description(childComplexity), true

	case "Vacancy.experience":
		if e.complexity.Vacancy.Experience == nil {
			break
		}

		return e.complexity.Vacancy.Experience(childComplexity), true

	case "Vacancy.id":
		if e.complexity.Vacancy.ID == nil {
			break
		}

		return e.complexity.Vacancy.ID(childComplexity), true

	case "Vacancy.publicationStatus":
		if e.complexity.Vacancy.PublicationStatus == nil {
			break
		}

		return e.complexity.Vacancy.PublicationStatus(childComplexity), true

	case "Vacancy.salary":
		if e.complexity.Vacancy.Salary == nil {
			break
		}

		return e.complexity.Vacancy.Salary(childComplexity), true

	case "Vacancy.schedule":
		if e.complexity.Vacancy.Schedule == nil {
			break
		}

		return e.complexity.Vacancy.Schedule(childComplexity), true

	case "Vacancy.title":
		if e.complexity.Vacancy.Title == nil {
			break
		}

		return e.complexity.Vacancy.Title(childComplexity), true

	case "Vacancy.updatedAt":
		if e.complexity.Vacancy.UpdatedAt == nil {
			break
		}

		return e.complexity.Vacancy.UpdatedAt(childComplexity), true

	case "VacancyConnection.edges":
		if e.complexity.VacancyConnection.Edges == nil {
			break
		}

		return e.complexity.VacancyConnection.Edges(childComplexity), true

	case "VacancyConnection.nodes":
		if e.complexity.VacancyConnection.Nodes == nil {
			break
		}

		return e.complexity.VacancyConnection.Nodes(childComplexity), true

	case "VacancyConnection.pageInfo":
		if e.complexity.VacancyConnection.PageInfo == nil {
			break
		}

		return e.complexity.VacancyConnection.PageInfo(childComplexity), true

	case "VacancyConnection.totalCount":
		if e.complexity.VacancyConnection.TotalCount == nil {
			break
		}

		return e.complexity.VacancyConnection.TotalCount(childComplexity), true

	case "VacancyEdge.cursor":
		if e.complexity.VacancyEdge.Cursor == nil {
			break
		}

		return e.complexity.VacancyEdge.Cursor(childComplexity), true

	case "VacancyEdge.node":
		if e.complexity.VacancyEdge.Node == nil {
			break
		}

		return e.complexity.VacancyEdge.Node(childComplexity), true

	case "Village.address":
		if e.complexity.Village.Address == nil {
			break
		}

		return e.complexity.Village.Address(childComplexity), true

	case "Village.cadastrNumber":
		if e.complexity.Village.CadastrNumber == nil {
			break
		}

		return e.complexity.Village.CadastrNumber(childComplexity), true

	case "Village.cityDistance":
		if e.complexity.Village.CityDistance == nil {
			break
		}

		return e.complexity.Village.CityDistance(childComplexity), true

	case "Village.createdAt":
		if e.complexity.Village.CreatedAt == nil {
			break
		}

		return e.complexity.Village.CreatedAt(childComplexity), true

	case "Village.description":
		if e.complexity.Village.Description == nil {
			break
		}

		return e.complexity.Village.Description(childComplexity), true

	case "Village.developer":
		if e.complexity.Village.Developer == nil {
			break
		}

		return e.complexity.Village.Developer(childComplexity), true

	case "Village.documents":
		if e.complexity.Village.Documents == nil {
			break
		}

		return e.complexity.Village.Documents(childComplexity), true

	case "Village.id":
		if e.complexity.Village.ID == nil {
			break
		}

		return e.complexity.Village.ID(childComplexity), true

	case "Village.images":
		if e.complexity.Village.Images == nil {
			break
		}

		return e.complexity.Village.Images(childComplexity), true

	case "Village.inCity":
		if e.complexity.Village.InCity == nil {
			break
		}

		return e.complexity.Village.InCity(childComplexity), true

	case "Village.isReady":
		if e.complexity.Village.IsReady == nil {
			break
		}

		return e.complexity.Village.IsReady(childComplexity), true

	case "Village.lat":
		if e.complexity.Village.Lat == nil {
			break
		}

		return e.complexity.Village.Lat(childComplexity), true

	case "Village.lon":
		if e.complexity.Village.Lon == nil {
			break
		}

		return e.complexity.Village.Lon(childComplexity), true

	case "Village.projectDeclarations":
		if e.complexity.Village.ProjectDeclarations == nil {
			break
		}

		return e.complexity.Village.ProjectDeclarations(childComplexity), true

	case "Village.readinessQuarter":
		if e.complexity.Village.ReadinessQuarter == nil {
			break
		}

		return e.complexity.Village.ReadinessQuarter(childComplexity), true

	case "Village.readinessYear":
		if e.complexity.Village.ReadinessYear == nil {
			break
		}

		return e.complexity.Village.ReadinessYear(childComplexity), true

	case "Village.region":
		if e.complexity.Village.Region == nil {
			break
		}

		return e.complexity.Village.Region(childComplexity), true

	case "Village.seoText":
		if e.complexity.Village.SeoText == nil {
			break
		}

		return e.complexity.Village.SeoText(childComplexity), true

	case "Village.subRegion":
		if e.complexity.Village.SubRegion == nil {
			break
		}

		return e.complexity.Village.SubRegion(childComplexity), true

	case "Village.title":
		if e.complexity.Village.Title == nil {
			break
		}

		return e.complexity.Village.Title(childComplexity), true

	case "Village.tourLink":
		if e.complexity.Village.TourLink == nil {
			break
		}

		return e.complexity.Village.TourLink(childComplexity), true

	case "Village.updatedAt":
		if e.complexity.Village.UpdatedAt == nil {
			break
		}

		return e.complexity.Village.UpdatedAt(childComplexity), true

	case "Village.youtubeLink":
		if e.complexity.Village.YoutubeLink == nil {
			break
		}

		return e.complexity.Village.YoutubeLink(childComplexity), true

	case "VillageConnection.edges":
		if e.complexity.VillageConnection.Edges == nil {
			break
		}

		return e.complexity.VillageConnection.Edges(childComplexity), true

	case "VillageConnection.nodes":
		if e.complexity.VillageConnection.Nodes == nil {
			break
		}

		return e.complexity.VillageConnection.Nodes(childComplexity), true

	case "VillageConnection.pageInfo":
		if e.complexity.VillageConnection.PageInfo == nil {
			break
		}

		return e.complexity.VillageConnection.PageInfo(childComplexity), true

	case "VillageConnection.totalCount":
		if e.complexity.VillageConnection.TotalCount == nil {
			break
		}

		return e.complexity.VillageConnection.TotalCount(childComplexity), true

	case "VillageEdge.cursor":
		if e.complexity.VillageEdge.Cursor == nil {
			break
		}

		return e.complexity.VillageEdge.Cursor(childComplexity), true

	case "VillageEdge.node":
		if e.complexity.VillageEdge.Node == nil {
			break
		}

		return e.complexity.VillageEdge.Node(childComplexity), true

	}
	return 0, false
}

func (e *executableSchema) Exec(ctx context.Context) graphql.ResponseHandler {
	rc := graphql.GetOperationContext(ctx)
	ec := executionContext{rc, e, 0, 0, make(chan graphql.DeferredResult)}
	inputUnmarshalMap := graphql.BuildUnmarshalerMap(
		ec.unmarshalInputComplexHouseFilter,
		ec.unmarshalInputContentBlockInput,
		ec.unmarshalInputDocumentInput,
		ec.unmarshalInputImageInput,
		ec.unmarshalInputPaginationInput,
		ec.unmarshalInputPropertyFilter,
		ec.unmarshalInputReviewsFilterInput,
		ec.unmarshalInputSort,
		ec.unmarshalInputVacancyRequestInput,
	)
	first := true

	switch rc.Operation.Operation {
	case ast.Query:
		return func(ctx context.Context) *graphql.Response {
			var response graphql.Response
			var data graphql.Marshaler
			if first {
				first = false
				ctx = graphql.WithUnmarshalerMap(ctx, inputUnmarshalMap)
				data = ec._Query(ctx, rc.Operation.SelectionSet)
			} else {
				if atomic.LoadInt32(&ec.pendingDeferred) > 0 {
					result := <-ec.deferredResults
					atomic.AddInt32(&ec.pendingDeferred, -1)
					data = result.Result
					response.Path = result.Path
					response.Label = result.Label
					response.Errors = result.Errors
				} else {
					return nil
				}
			}
			var buf bytes.Buffer
			data.MarshalGQL(&buf)
			response.Data = buf.Bytes()
			if atomic.LoadInt32(&ec.deferred) > 0 {
				hasNext := atomic.LoadInt32(&ec.pendingDeferred) > 0
				response.HasNext = &hasNext
			}

			return &response
		}
	case ast.Mutation:
		return func(ctx context.Context) *graphql.Response {
			if !first {
				return nil
			}
			first = false
			ctx = graphql.WithUnmarshalerMap(ctx, inputUnmarshalMap)
			data := ec._Mutation(ctx, rc.Operation.SelectionSet)
			var buf bytes.Buffer
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}

	default:
		return graphql.OneShot(graphql.ErrorResponse(ctx, "unsupported GraphQL operation"))
	}
}

type executionContext struct {
	*graphql.OperationContext
	*executableSchema
	deferred        int32
	pendingDeferred int32
	deferredResults chan graphql.DeferredResult
}

func (ec *executionContext) processDeferredGroup(dg graphql.DeferredGroup) {
	atomic.AddInt32(&ec.pendingDeferred, 1)
	go func() {
		ctx := graphql.WithFreshResponseContext(dg.Context)
		dg.FieldSet.Dispatch(ctx)
		ds := graphql.DeferredResult{
			Path:   dg.Path,
			Label:  dg.Label,
			Result: dg.FieldSet,
			Errors: graphql.GetErrors(ctx),
		}
		// null fields should bubble up
		if dg.FieldSet.Invalids > 0 {
			ds.Result = graphql.Null
		}
		ec.deferredResults <- ds
	}()
}

func (ec *executionContext) introspectSchema() (*introspection.Schema, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapSchema(ec.Schema()), nil
}

func (ec *executionContext) introspectType(name string) (*introspection.Type, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapTypeFromDef(ec.Schema(), ec.Schema().Types[name]), nil
}

var sources = []*ast.Source{
	{Name: "../schema/_shared.graphql", Input: `#
# Custom Scalars
#

scalar Time
scalar Upload
scalar Cursor
scalar JSON

#
# Directives
#

directive @goModel(
  model: String
  models: [String!]
  forceGenerate: Boolean
) on OBJECT | INPUT_OBJECT | SCALAR | ENUM | ENUM_VALUE | INTERFACE | UNION

directive @goField(
  forceResolver: Boolean
  name: String
  omittable: Boolean
) on INPUT_FIELD_DEFINITION | FIELD_DEFINITION

directive @goTag(
  key: String!
  value: String
) on INPUT_FIELD_DEFINITION | FIELD_DEFINITION

directive @validate(
  constraint: String!
) on INPUT_FIELD_DEFINITION | ARGUMENT_DEFINITION

"""
Направления сортировки
"""
enum SortDirection {
  """
  По возрастанию
  """
  ASC
  """
  По убыванию
  """
  DESC
}

"""
Режим сортировки для списочных методов
"""
input Sort {
  """
  Поле, по которому производится сортировка
  """
  field: String = "id"
  """
  Направление сортировки по выбранному полю
  """
  direction: SortDirection = ASC
}

"""
Статус публикации
"""
enum PublicationStatusEnum {
  """
  Запись опубликована
  """
  PUBLISHED
  """
  Черновик
  """
  DRAFT
  """
  Запись снята с публикации
  """
  UNPUBLISHED
}

type Readiness {
  year: Int
  quarter: Int
}

# Interfaces

interface Node {
  id: ID!
}

# Pagination

type PageInfo {
  startCursor: Cursor
  endCursor: Cursor
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
}

input PaginationInput {
  first: Int
  last: Int
  after: Cursor
  before: Cursor
}

enum QuarterEnum {
  I
  II
  III
  IV
}

`, BuiltIn: false},
	{Name: "../schema/complexHouses.graphql", Input: `type ComplexHouse {
  id: ID!

  complex: Complex @goField(forceResolver: true)

  title: String!
  description: String!
  address: String!
  lat: Float
  lon: Float
  cadastrNumber: String
  seoText: String
  youtubeLink: String
  tourLink: String

  isReady: Boolean
  readinessQuarter: QuarterEnum
  readinessYear: Int

  images: [Image!] @goField(forceResolver: true)
  documents: [Document!] @goField(forceResolver: true)
  projectDeclarations: [Document!] @goField(forceResolver: true)

  createdAt: Time!
  updatedAt: Time!
}

type ComplexHouseConnection {
  totalCount: Int!
  edges: [ComplexHouseEdge!]!
  nodes: [ComplexHouse!]!
  pageInfo: PageInfo!
}

type ComplexHouseEdge {
  node: ComplexHouse!
  cursor: Cursor!
}

input ComplexHouseFilter {
  complexID: ID @validate(constraint: "mongodb")
}

extend type Query {
  complexHouses(
    """
    Перечень идентификаторов для ограничения выборки
    """
    ids: [ID!] @validate(constraint: "dive,required,mongodb")
    """
    Начало для постраничной навигации
    """
    start: Int @validate(constraint: "number,gte=0")
    """
    Количество элементов для постраничной навигации
    """
    limit: Int @validate(constraint: "number,gte=1")
    """
    Режим сортировки
    """
    sort: Sort
    """
    Ключевые слова для полнотекстового поиска
    """
    search: String @validate(constraint: "max=32")
    """
    Дополнительные параметры фильтрации
    """
    filter: ComplexHouseFilter
  ): ComplexHouseConnection!

  complexHouse(id: ID! @validate(constraint: "required,mongodb")): ComplexHouse!
}
`, BuiltIn: false},
	{Name: "../schema/complexes.graphql", Input: `type Complex {
  id: ID!

  title: String!
  description: String!
  address: String!
  lat: Float
  lon: Float
  cadastrNumber: String
  seoText: String
  youtubeLink: String
  tourLink: String

  inCity: Boolean
  cityDistance: Int
  region: String
  subRegion: String

  developer: Developer @goField(forceResolver: true)

  isReady: Boolean
  readinessQuarter: QuarterEnum
  readinessYear: Int

  images: [Image!] @goField(forceResolver: true)
  documents: [Document!] @goField(forceResolver: true)
  projectDeclarations: [Document!] @goField(forceResolver: true)

  createdAt: Time!
  updatedAt: Time!
}

type ComplexConnection {
  totalCount: Int!
  edges: [ComplexEdge!]!
  nodes: [Complex!]!
  pageInfo: PageInfo!
}

type ComplexEdge {
  node: Complex!
  cursor: Cursor!
}

extend type Query {
  complexes(
    """
    Перечень идентификаторов для ограничения выборки
    """
    ids: [ID!] @validate(constraint: "dive,required,mongodb")
    """
    Начало для постраничной навигации
    """
    start: Int @validate(constraint: "number,gte=0")
    """
    Количество элементов для постраничной навигации
    """
    limit: Int @validate(constraint: "number,gte=1")
    """
    Режим сортировки
    """
    sort: Sort
    """
    Ключевые слова для полнотекстового поиска
    """
    search: String @validate(constraint: "max=32")
  ): ComplexConnection!

  complex(id: ID! @validate(constraint: "required,mongodb")): Complex!
}
`, BuiltIn: false},
	{Name: "../schema/contentBlocks.graphql", Input: `type ContentBlock {
  type: ContentBlockType!
  data: JSON!
  isVisible: Boolean!
}

input ContentBlockInput {
  type: ContentBlockType!
  data: JSON!
  isVisible: Boolean!
}

enum ContentBlockType {
  TEXT
  CITE
  FILES
  YOUTUBE
  IMAGES
  ACCORDION
  SPECIAL
}
`, BuiltIn: false},
	{Name: "../schema/developers.graphql", Input: `type Developer {
  id: ID!

  title: String!
  url: String
  logo: Image

  createdAt: Time!
  updatedAt: Time!
}

type DeveloperConnection {
  totalCount: Int!
  edges: [DeveloperEdge!]!
  nodes: [Developer!]!
  pageInfo: PageInfo!
}

type DeveloperEdge {
  node: Developer!
  cursor: Cursor!
}

extend type Query {
  developers(
    """
    Перечень идентификаторов для ограничения выборки
    """
    ids: [ID!] @validate(constraint: "dive,required,mongodb")
    """
    Начало для постраничной навигации
    """
    start: Int @validate(constraint: "number,gte=0")
    """
    Количество элементов для постраничной навигации
    """
    limit: Int @validate(constraint: "number,gte=1")
    """
    Режим сортировки
    """
    sort: Sort
    """
    Ключевые слова для полнотекстового поиска
    """
    search: String @validate(constraint: "min=3,max=32")
  ): DeveloperConnection!

  developer(id: ID! @validate(constraint: "required,mongodb")): Developer!
}
`, BuiltIn: false},
	{Name: "../schema/employees.graphql", Input: `type Employee {
  id: ID!
  name: String!
  surname: String!
  patronymic: String
  birthday: Time
  email: String!
  phone: String!
  internalInfo: String
  shortDescription: String
  description: String
  isPublished: Boolean!
  isDeleted: Boolean!
  avatar: Image @goField(forceResolver: true)
  publicImage: Image @goField(forceResolver: true)
  createdAt: Time!
  updatedAt: Time!
}

#
# Выдача списочного результата
#

type EmployeeConnection {
  totalCount: Int!
  edges: [EmployeeEdge!]!
  nodes: [Employee!]!
  pageInfo: PageInfo!
}

type EmployeeEdge {
  node: Employee!
  cursor: Cursor!
}

extend type Query {
  employees(
    ids: [ID!] @validate(constraint: "dive,required,mongodb")
    start: Int @validate(constraint: "number,gte=0")
    limit: Int @validate(constraint: "number,gte=1")
    sort: Sort
    search: String @validate(constraint: "min=3,max=32")
  ): EmployeeConnection!

  employee(id: ID! @validate(constraint: "required,mongodb")): Employee!
}
`, BuiltIn: false},
	{Name: "../schema/exchange.graphql", Input: `extend type Query {
  generatePdf(content: String!, fileName: String!): String!
}

extend type Mutation {
  uploadImage(input: ImageInput!): Image!

  uploadDocument(input: DocumentInput!): Document!
}

enum ImagePreset {
  STAFF_EMPLOYEE_AVATAR
  STAFF_EMPLOYEE_PUBLIC_IMAGE
  #
  CONTENT_KB_ARTICLE_COVER
  CONTENT_SITE_STORY_COVER
  CONTENT_SITE_STORY_PHOTO
  #
  ESTATE_PROPERTY_PHOTO
  ESTATE_COMPLEX_PHOTO
}

input ImageInput {
  id: ID
  file: Upload
  title: String @validate(constraint: "max=100,min=3")
  preset: ImagePreset
}

input DocumentInput {
  id: ID
  file: Upload
  title: String @validate(constraint: "max=100,min=3")
}

type Document {
  id: ID!
  url: String!
  path: String!
  title: String
  fileName: String!
  fileType: String!
  createdAt: Time!
}

type Image {
  id: ID!
  url: String!
  path: String!
  title: String
  fileName: String!
  fileType: String!
  previewUrl: String
  previewPath: String
  blurHash: String
  preset: ImagePreset!
  createdAt: Time!
}
`, BuiltIn: false},
	{Name: "../schema/pages.graphql", Input: `type Page {
  id: ID!
  url: String!
  title: String!
  description: String!
  contentBlocks: [ContentBlock!]!
  status: PublicationStatusEnum!
  createdAt: Time!
  updatedAt: Time!
}

#
# Выдача списочного результата
#

type PageConnection {
  totalCount: Int!
  edges: [PageEdge!]!
  nodes: [Page!]!
  pageInfo: PageInfo!
}

type PageEdge {
  node: Page!
  cursor: Cursor!
}

extend type Query {
  """
  Получение страницы по URL
  """
  page(
    """
    URL страницы
    """
    url: String! @validate(constraint: "required")
  ): Page!
}
`, BuiltIn: false},
	{Name: "../schema/properties.graphql", Input: `enum ToiletTypeEnum {
  UNITED
  SPLITTED
}

enum RehabTypeEnum {
  NONE
  DRAFT
  DEVELOPER
  DESIGN
  CLEAN
}

enum PropertySourceEnum {
  AVITO
  YOULA
  CIAN
  DOMCLICK
  YANDEX
  OTHER_AGGREGATOR
  RECOMMENDATION
  RETURNED_CLIENT
  LISTS
  SELECTION
  OTHER
}

enum PropertyStatusEnum {
  PUBLISHED
  UNPUBLISHED
  ON_MODERATION
  ARCHIVED
  TRASH
}

enum PropertyTypeEnum {
  USED
  NEW
  VILLAGE
  SUBURBAN
  COMMERCIAL
}

enum PropertySubTypeEnum {
  FLAT
  ROOM
  APARTMENT
  STUDIO
  LAND
  HOUSE
  TOWNHOUSE
  SUMMER_HOUSE
  GARAGE
  PARKING
}

enum CommercialUsageEnum {
  RETAIL
  OFFICE
  FREE_USAGE
  BASE
  BUSINESS
  PRODUCTION
  PARKING
  WAREHOUSE
}

enum DealEnum {
  SELL
  RENT
}

type Property {
  id: ID!

  internalID: Int
  deal: DealEnum
  type: PropertyTypeEnum
  subType: PropertySubTypeEnum
  commercialUsage: [CommercialUsageEnum]

  fromDeveloper: Boolean

  inComplex: Boolean
  complex: Complex
  complexHouse: ComplexHouse

  inVillage: Boolean
  village: Village

  isHot: Boolean

  title: String
  description: String
  address: String
  lat: Float
  lon: Float
  cadastrNumber: String
  seoText: String
  youtubeLink: String
  tourLink: String

  documents: [Document]
  images: [Image]

  refreshDate: Time

  price: Float
  pricePerMeter: Float
  pricePerAr: Float

  isReady: Boolean
  readinessYear: Int
  readinessQuarter: QuarterEnum

  inCity: Boolean
  cityDistance: Int
  region: String
  subRegion: String

  rooms: Int
  area: Float
  landArea: Float
  livingArea: Float
  kitchenArea: Float
  toiletType: ToiletTypeEnum
  rehabType: RehabTypeEnum
  floor: Int
  floors: Int
  ceilingHeight: Float

  comissionPercent: Float
  comissionAmount: Float

  createdAt: Time!
  updatedAt: Time!
}

type PropertyConnection {
  totalCount: Int!
  edges: [PropertyEdge!]!
  nodes: [Property!]!
  pageInfo: PageInfo!
}

type PropertyEdge {
  node: Property!
  cursor: Cursor!
}

input PropertyFilter {
  deal: DealEnum
  type: PropertyTypeEnum
  subType: PropertySubTypeEnum
  fromDeveloper: Boolean @validate(constraint: "boolean")
  complexID: String @validate(constraint: "mongodb")
  complexHouseID: String @validate(constraint: "mongodb")
  villageID: String @validate(constraint: "mongodb")
  isHot: Boolean @validate(constraint: "boolean")
  minRooms: Float @validate(constraint: "gte=0")
  maxRooms: Float @validate(constraint: "gte=0")
  minPrice: Float @validate(constraint: "gte=0")
  maxPrice: Float @validate(constraint: "gte=0")
  minPricePerMeter: Float @validate(constraint: "gte=0")
  maxPricePerMeter: Float @validate(constraint: "gte=0")
  minPricePerAr: Float @validate(constraint: "gte=0")
  maxPricePerAr: Float @validate(constraint: "gte=0")
  minArea: Float @validate(constraint: "gte=0")
  maxArea: Float @validate(constraint: "gte=0")
  minLandArea: Float @validate(constraint: "gte=0")
  maxLandArea: Float @validate(constraint: "gte=0")
  isReady: Boolean @validate(constraint: "boolean")
  inCity: Boolean @validate(constraint: "boolean")
  minCityDistance: Int @validate(constraint: "gte=0")
  maxCityDistance: Int @validate(constraint: "gte=0")
  withPhotos: Boolean @validate(constraint: "boolean")
}

extend type Query {
  properties(
    """
    Перечень идентификаторов для ограничения выборки
    """
    ids: [ID!] @validate(constraint: "dive,required,mongodb")
    """
    Начало для постраничной навигации
    """
    start: Int @validate(constraint: "number,gte=0")
    """
    Количество элементов для постраничной навигации
    """
    limit: Int @validate(constraint: "number,gte=1")
    """
    Режим сортировки
    """
    sort: Sort
    """
    Ключевые слова для полнотекстового поиска
    """
    search: String @validate(constraint: "min=3,max=32")
    """
    Дополнительные параметры фильтрации
    """
    filter: PropertyFilter
  ): PropertyConnection!

  property(id: ID! @validate(constraint: "required,mongodb")): Property!
}
`, BuiltIn: false},
	{Name: "../schema/reviews.graphql", Input: `"""
Отзыв
"""
type Review {
  """
  Уникальный идентификатор
  """
  id: ID!
  """
  Сотрудник
  """
  employee: Employee @goField(forceResolver: true)
  """
  Текст отзыва
  """
  text: String!
  """
  Имя автора
  """
  authorName: String!
  """
  Номер телефона автора
  """
  authorPhone: String!
  """
  Статус отзыва
  """
  status: ReviewStatusEnum!
  """
  Дата и время создания
  """
  createdAt: Time!
  """
  Дата и время обновления
  """
  updatedAt: Time!
}

#
# Выдача списочного результата
#

type ReviewConnection {
  totalCount: Int!
  edges: [ReviewEdge!]!
  nodes: [Review!]!
  pageInfo: PageInfo!
}

type ReviewEdge {
  node: Review!
  cursor: Cursor!
}

"""
Расширенный фильтр по отзывам
"""
input ReviewsFilterInput {
  """
  Набор статусов для фильтрации
  """
  statuses: [ReviewStatusEnum!] @validate(constraint: "dive,required")
  """
  Набор идентфикаторов сотрудников для фильтрации
  """
  employees: [ID!] @validate(constraint: "dive,required,mongodb")
}

"""
Статус отзыва
"""
enum ReviewStatusEnum {
  """
  Новый
  """
  NEW
  """
  Подтверждён
  """
  APPROVED
  """
  Отклонён
  """
  DECLINED
}

extend type Query {
  """
  Получение списка отзывов
  """
  reviews(
    """
    Перечень идентификаторов для ограничения выборки
    """
    ids: [ID!] @validate(constraint: "dive,required,mongodb")
    """
    Начало для постраничной навигации
    """
    start: Int @validate(constraint: "number,gte=0")
    """
    Количество элементов для постраничной навигации
    """
    limit: Int @validate(constraint: "number,gte=1")
    """
    Режим сортировки
    """
    sort: Sort
    """
    Ключевые слова для полнотекстового поиска
    """
    search: String @validate(constraint: "min=3,max=32")
    """
    Расширенный фильтр
    """
    filter: ReviewsFilterInput
  ): ReviewConnection!

  """
  Получение отзыва по идентификатору
  """
  review(
    """
    Уникальный идентификатор
    """
    id: ID! @validate(constraint: "required,mongodb")
  ): Review!
}
`, BuiltIn: false},
	{Name: "../schema/stories.graphql", Input: `"""
Новость
"""
type Story {
  """
  Уникальный идентификатор
  """
  id: ID!
  category: StoryCategoryEnum!
  """
  Название
  """
  title: String!
  teaser: String
  contentBlocks: [ContentBlock!]!
  cover: Image
  """
  Дата и время создания
  """
  createdAt: Time!
  """
  Дата и время обновления
  """
  updatedAt: Time!
}

#
# Выдача списочного результата
#

type StoryConnection {
  totalCount: Int!
  edges: [StoryEdge!]!
  nodes: [Story!]!
  pageInfo: PageInfo!
}

type StoryEdge {
  node: Story!
  cursor: Cursor!
}

"""
Категория новости
"""
enum StoryCategoryEnum {
  """
  Новости
  """
  NEWS
  """
  Недвижимость
  """
  ESTATE
  """
  Жизнь компании
  """
  COMPANY
}

extend type Query {
  """
  Получение списка новостей
  """
  stories(
    """
    Перечень идентификаторов для ограничения выборки
    """
    ids: [ID!] @validate(constraint: "dive,required,mongodb")
    """
    Начало для постраничной навигации
    """
    start: Int @validate(constraint: "number,gte=0")
    """
    Количество элементов для постраничной навигации
    """
    limit: Int @validate(constraint: "number,gte=1")
    """
    Режим сортировки
    """
    sort: Sort
    """
    Ключевые слова для полнотекстового поиска
    """
    search: String @validate(constraint: "min=3,max=32")
  ): StoryConnection!

  """
  Получение новости по идентификатору
  """
  story(
    """
    Уникальный идентификатор
    """
    id: ID! @validate(constraint: "required,mongodb")
  ): Story!
}
`, BuiltIn: false},
	{Name: "../schema/vacancies.graphql", Input: `"""
Вакансия
"""
type Vacancy {
  """
  Уникальный идентификатор
  """
  id: ID!
  """
  Название вакансии
  """
  title: String!
  """
  Описание вакансии
  """
  description: String!
  """
  Стаж
  """
  experience: String
  """
  Заработная плата
  """
  salary: String
  """
  График работы
  """
  schedule: VacancyScheduleEnum!
  """
  Статус вакансии
  """
  publicationStatus: PublicationStatusEnum!
  """
  Дата и время создания
  """
  createdAt: Time!
  """
  Дата и время обновления
  """
  updatedAt: Time!
}

#
# Выдача списочного результата
#

type VacancyConnection {
  totalCount: Int!
  edges: [VacancyEdge!]!
  nodes: [Vacancy!]!
  pageInfo: PageInfo!
}

type VacancyEdge {
  node: Vacancy!
  cursor: Cursor!
}

"""
График работы по вакансии
"""
enum VacancyScheduleEnum {
  """
  Полный день
  """
  FULL_TIME
  """
  Частичная занятость
  """
  PART_TIME
}

extend type Query {
  """
  Получение списка вакансий
  """
  vacancies(
    """
    Перечень идентификаторов для ограничения выборки
    """
    ids: [ID!] @validate(constraint: "dive,required,mongodb")
    """
    Начало для постраничной навигации
    """
    start: Int @validate(constraint: "number,gte=0")
    """
    Количество элементов для постраничной навигации
    """
    limit: Int @validate(constraint: "number,gte=1")
    """
    Режим сортировки
    """
    sort: Sort
    """
    Ключевые слова для полнотекстового поиска
    """
    search: String @validate(constraint: "min=3,max=32")
  ): VacancyConnection!

  """
  Получение вакансии по идентификатору
  """
  vacancy(
    """
    Уникальный идентификатор
    """
    id: ID! @validate(constraint: "required,mongodb")
  ): Vacancy!
}
`, BuiltIn: false},
	{Name: "../schema/vacancyRequests.graphql", Input: `"""
Отклик на вакансию
"""
input VacancyRequestInput {
  """
  Связанная вакансия
  """
  vacancy: ID!
  """
  Имя соискателя
  """
  name: String!
  """
  Сопроводительное письмо
  """
  letter: String!
  """
  Вложения
  """
  attachments: [DocumentInput!]
}

extend type Mutation {
  createVacancyRequest(
    input: VacancyRequestInput! @validate(constraint: "required")
  ): Boolean!
}
`, BuiltIn: false},
	{Name: "../schema/villages.graphql", Input: `type Village {
  id: ID!

  title: String!
  description: String!
  address: String!
  lat: Float
  lon: Float
  cadastrNumber: String
  seoText: String
  youtubeLink: String
  tourLink: String

  inCity: Boolean
  cityDistance: Int
  region: String
  subRegion: String

  developer: Developer @goField(forceResolver: true)

  isReady: Boolean
  readinessQuarter: QuarterEnum
  readinessYear: Int

  images: [Image!] @goField(forceResolver: true)
  documents: [Document!] @goField(forceResolver: true)
  projectDeclarations: [Document!] @goField(forceResolver: true)

  createdAt: Time!
  updatedAt: Time!
}

type VillageConnection {
  totalCount: Int!
  edges: [VillageEdge!]!
  nodes: [Village!]!
  pageInfo: PageInfo!
}

type VillageEdge {
  node: Village!
  cursor: Cursor!
}

extend type Query {
  villages(
    """
    Перечень идентификаторов для ограничения выборки
    """
    ids: [ID!] @validate(constraint: "dive,required,mongodb")
    """
    Начало для постраничной навигации
    """
    start: Int @validate(constraint: "number,gte=0")
    """
    Количество элементов для постраничной навигации
    """
    limit: Int @validate(constraint: "number,gte=1")
    """
    Режим сортировки
    """
    sort: Sort
    """
    Ключевые слова для полнотекстового поиска
    """
    search: String @validate(constraint: "min=3,max=32")
  ): VillageConnection!

  village(id: ID! @validate(constraint: "required,mongodb")): Village!
}
`, BuiltIn: false},
}
var parsedSchema = gqlparser.MustLoadSchema(sources...)

// endregion ************************** generated!.gotpl **************************

// region    ***************************** args.gotpl *****************************

func (ec *executionContext) dir_validate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["constraint"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("constraint"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["constraint"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createVacancyRequest_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 public_models.VacancyRequestInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		directive0 := func(ctx context.Context) (interface{}, error) {
			return ec.unmarshalNVacancyRequestInput2githubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐVacancyRequestInput(ctx, tmp)
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			constraint, err := ec.unmarshalNString2string(ctx, "required")
			if err != nil {
				return nil, err
			}
			if ec.directives.Validate == nil {
				return nil, errors.New("directive validate is not implemented")
			}
			return ec.directives.Validate(ctx, rawArgs, directive0, constraint)
		}

		tmp, err = directive1(ctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if data, ok := tmp.(public_models.VacancyRequestInput); ok {
			arg0 = data
		} else {
			return nil, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be github.com/pinks-agency/ecn/server/internal/public-facade/models.VacancyRequestInput`, tmp))
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_uploadDocument_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 public_models.DocumentInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNDocumentInput2githubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐDocumentInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_uploadImage_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 public_models.ImageInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNImageInput2githubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐImageInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query___type_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["name"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["name"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_complexHouse_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalNID2string(ctx, tmp) }
		directive1 := func(ctx context.Context) (interface{}, error) {
			constraint, err := ec.unmarshalNString2string(ctx, "required,mongodb")
			if err != nil {
				return nil, err
			}
			if ec.directives.Validate == nil {
				return nil, errors.New("directive validate is not implemented")
			}
			return ec.directives.Validate(ctx, rawArgs, directive0, constraint)
		}

		tmp, err = directive1(ctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if data, ok := tmp.(string); ok {
			arg0 = data
		} else {
			return nil, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be string`, tmp))
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_complexHouses_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []string
	if tmp, ok := rawArgs["ids"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ids"))
		directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOID2ᚕstringᚄ(ctx, tmp) }
		directive1 := func(ctx context.Context) (interface{}, error) {
			constraint, err := ec.unmarshalNString2string(ctx, "dive,required,mongodb")
			if err != nil {
				return nil, err
			}
			if ec.directives.Validate == nil {
				return nil, errors.New("directive validate is not implemented")
			}
			return ec.directives.Validate(ctx, rawArgs, directive0, constraint)
		}

		tmp, err = directive1(ctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if data, ok := tmp.([]string); ok {
			arg0 = data
		} else if tmp == nil {
			arg0 = nil
		} else {
			return nil, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be []string`, tmp))
		}
	}
	args["ids"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["start"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("start"))
		directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOInt2ᚖint(ctx, tmp) }
		directive1 := func(ctx context.Context) (interface{}, error) {
			constraint, err := ec.unmarshalNString2string(ctx, "number,gte=0")
			if err != nil {
				return nil, err
			}
			if ec.directives.Validate == nil {
				return nil, errors.New("directive validate is not implemented")
			}
			return ec.directives.Validate(ctx, rawArgs, directive0, constraint)
		}

		tmp, err = directive1(ctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if data, ok := tmp.(*int); ok {
			arg1 = data
		} else if tmp == nil {
			arg1 = nil
		} else {
			return nil, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be *int`, tmp))
		}
	}
	args["start"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOInt2ᚖint(ctx, tmp) }
		directive1 := func(ctx context.Context) (interface{}, error) {
			constraint, err := ec.unmarshalNString2string(ctx, "number,gte=1")
			if err != nil {
				return nil, err
			}
			if ec.directives.Validate == nil {
				return nil, errors.New("directive validate is not implemented")
			}
			return ec.directives.Validate(ctx, rawArgs, directive0, constraint)
		}

		tmp, err = directive1(ctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if data, ok := tmp.(*int); ok {
			arg2 = data
		} else if tmp == nil {
			arg2 = nil
		} else {
			return nil, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be *int`, tmp))
		}
	}
	args["limit"] = arg2
	var arg3 *public_models.Sort
	if tmp, ok := rawArgs["sort"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sort"))
		arg3, err = ec.unmarshalOSort2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐSort(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["sort"] = arg3
	var arg4 *string
	if tmp, ok := rawArgs["search"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("search"))
		directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚖstring(ctx, tmp) }
		directive1 := func(ctx context.Context) (interface{}, error) {
			constraint, err := ec.unmarshalNString2string(ctx, "max=32")
			if err != nil {
				return nil, err
			}
			if ec.directives.Validate == nil {
				return nil, errors.New("directive validate is not implemented")
			}
			return ec.directives.Validate(ctx, rawArgs, directive0, constraint)
		}

		tmp, err = directive1(ctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if data, ok := tmp.(*string); ok {
			arg4 = data
		} else if tmp == nil {
			arg4 = nil
		} else {
			return nil, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp))
		}
	}
	args["search"] = arg4
	var arg5 *public_models.ComplexHouseFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg5, err = ec.unmarshalOComplexHouseFilter2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐComplexHouseFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg5
	return args, nil
}

func (ec *executionContext) field_Query_complex_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalNID2string(ctx, tmp) }
		directive1 := func(ctx context.Context) (interface{}, error) {
			constraint, err := ec.unmarshalNString2string(ctx, "required,mongodb")
			if err != nil {
				return nil, err
			}
			if ec.directives.Validate == nil {
				return nil, errors.New("directive validate is not implemented")
			}
			return ec.directives.Validate(ctx, rawArgs, directive0, constraint)
		}

		tmp, err = directive1(ctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if data, ok := tmp.(string); ok {
			arg0 = data
		} else {
			return nil, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be string`, tmp))
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_complexes_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []string
	if tmp, ok := rawArgs["ids"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ids"))
		directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOID2ᚕstringᚄ(ctx, tmp) }
		directive1 := func(ctx context.Context) (interface{}, error) {
			constraint, err := ec.unmarshalNString2string(ctx, "dive,required,mongodb")
			if err != nil {
				return nil, err
			}
			if ec.directives.Validate == nil {
				return nil, errors.New("directive validate is not implemented")
			}
			return ec.directives.Validate(ctx, rawArgs, directive0, constraint)
		}

		tmp, err = directive1(ctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if data, ok := tmp.([]string); ok {
			arg0 = data
		} else if tmp == nil {
			arg0 = nil
		} else {
			return nil, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be []string`, tmp))
		}
	}
	args["ids"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["start"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("start"))
		directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOInt2ᚖint(ctx, tmp) }
		directive1 := func(ctx context.Context) (interface{}, error) {
			constraint, err := ec.unmarshalNString2string(ctx, "number,gte=0")
			if err != nil {
				return nil, err
			}
			if ec.directives.Validate == nil {
				return nil, errors.New("directive validate is not implemented")
			}
			return ec.directives.Validate(ctx, rawArgs, directive0, constraint)
		}

		tmp, err = directive1(ctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if data, ok := tmp.(*int); ok {
			arg1 = data
		} else if tmp == nil {
			arg1 = nil
		} else {
			return nil, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be *int`, tmp))
		}
	}
	args["start"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOInt2ᚖint(ctx, tmp) }
		directive1 := func(ctx context.Context) (interface{}, error) {
			constraint, err := ec.unmarshalNString2string(ctx, "number,gte=1")
			if err != nil {
				return nil, err
			}
			if ec.directives.Validate == nil {
				return nil, errors.New("directive validate is not implemented")
			}
			return ec.directives.Validate(ctx, rawArgs, directive0, constraint)
		}

		tmp, err = directive1(ctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if data, ok := tmp.(*int); ok {
			arg2 = data
		} else if tmp == nil {
			arg2 = nil
		} else {
			return nil, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be *int`, tmp))
		}
	}
	args["limit"] = arg2
	var arg3 *public_models.Sort
	if tmp, ok := rawArgs["sort"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sort"))
		arg3, err = ec.unmarshalOSort2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐSort(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["sort"] = arg3
	var arg4 *string
	if tmp, ok := rawArgs["search"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("search"))
		directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚖstring(ctx, tmp) }
		directive1 := func(ctx context.Context) (interface{}, error) {
			constraint, err := ec.unmarshalNString2string(ctx, "max=32")
			if err != nil {
				return nil, err
			}
			if ec.directives.Validate == nil {
				return nil, errors.New("directive validate is not implemented")
			}
			return ec.directives.Validate(ctx, rawArgs, directive0, constraint)
		}

		tmp, err = directive1(ctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if data, ok := tmp.(*string); ok {
			arg4 = data
		} else if tmp == nil {
			arg4 = nil
		} else {
			return nil, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp))
		}
	}
	args["search"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_developer_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalNID2string(ctx, tmp) }
		directive1 := func(ctx context.Context) (interface{}, error) {
			constraint, err := ec.unmarshalNString2string(ctx, "required,mongodb")
			if err != nil {
				return nil, err
			}
			if ec.directives.Validate == nil {
				return nil, errors.New("directive validate is not implemented")
			}
			return ec.directives.Validate(ctx, rawArgs, directive0, constraint)
		}

		tmp, err = directive1(ctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if data, ok := tmp.(string); ok {
			arg0 = data
		} else {
			return nil, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be string`, tmp))
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_developers_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []string
	if tmp, ok := rawArgs["ids"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ids"))
		directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOID2ᚕstringᚄ(ctx, tmp) }
		directive1 := func(ctx context.Context) (interface{}, error) {
			constraint, err := ec.unmarshalNString2string(ctx, "dive,required,mongodb")
			if err != nil {
				return nil, err
			}
			if ec.directives.Validate == nil {
				return nil, errors.New("directive validate is not implemented")
			}
			return ec.directives.Validate(ctx, rawArgs, directive0, constraint)
		}

		tmp, err = directive1(ctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if data, ok := tmp.([]string); ok {
			arg0 = data
		} else if tmp == nil {
			arg0 = nil
		} else {
			return nil, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be []string`, tmp))
		}
	}
	args["ids"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["start"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("start"))
		directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOInt2ᚖint(ctx, tmp) }
		directive1 := func(ctx context.Context) (interface{}, error) {
			constraint, err := ec.unmarshalNString2string(ctx, "number,gte=0")
			if err != nil {
				return nil, err
			}
			if ec.directives.Validate == nil {
				return nil, errors.New("directive validate is not implemented")
			}
			return ec.directives.Validate(ctx, rawArgs, directive0, constraint)
		}

		tmp, err = directive1(ctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if data, ok := tmp.(*int); ok {
			arg1 = data
		} else if tmp == nil {
			arg1 = nil
		} else {
			return nil, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be *int`, tmp))
		}
	}
	args["start"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOInt2ᚖint(ctx, tmp) }
		directive1 := func(ctx context.Context) (interface{}, error) {
			constraint, err := ec.unmarshalNString2string(ctx, "number,gte=1")
			if err != nil {
				return nil, err
			}
			if ec.directives.Validate == nil {
				return nil, errors.New("directive validate is not implemented")
			}
			return ec.directives.Validate(ctx, rawArgs, directive0, constraint)
		}

		tmp, err = directive1(ctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if data, ok := tmp.(*int); ok {
			arg2 = data
		} else if tmp == nil {
			arg2 = nil
		} else {
			return nil, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be *int`, tmp))
		}
	}
	args["limit"] = arg2
	var arg3 *public_models.Sort
	if tmp, ok := rawArgs["sort"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sort"))
		arg3, err = ec.unmarshalOSort2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐSort(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["sort"] = arg3
	var arg4 *string
	if tmp, ok := rawArgs["search"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("search"))
		directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚖstring(ctx, tmp) }
		directive1 := func(ctx context.Context) (interface{}, error) {
			constraint, err := ec.unmarshalNString2string(ctx, "min=3,max=32")
			if err != nil {
				return nil, err
			}
			if ec.directives.Validate == nil {
				return nil, errors.New("directive validate is not implemented")
			}
			return ec.directives.Validate(ctx, rawArgs, directive0, constraint)
		}

		tmp, err = directive1(ctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if data, ok := tmp.(*string); ok {
			arg4 = data
		} else if tmp == nil {
			arg4 = nil
		} else {
			return nil, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp))
		}
	}
	args["search"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_employee_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalNID2string(ctx, tmp) }
		directive1 := func(ctx context.Context) (interface{}, error) {
			constraint, err := ec.unmarshalNString2string(ctx, "required,mongodb")
			if err != nil {
				return nil, err
			}
			if ec.directives.Validate == nil {
				return nil, errors.New("directive validate is not implemented")
			}
			return ec.directives.Validate(ctx, rawArgs, directive0, constraint)
		}

		tmp, err = directive1(ctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if data, ok := tmp.(string); ok {
			arg0 = data
		} else {
			return nil, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be string`, tmp))
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_employees_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []string
	if tmp, ok := rawArgs["ids"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ids"))
		directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOID2ᚕstringᚄ(ctx, tmp) }
		directive1 := func(ctx context.Context) (interface{}, error) {
			constraint, err := ec.unmarshalNString2string(ctx, "dive,required,mongodb")
			if err != nil {
				return nil, err
			}
			if ec.directives.Validate == nil {
				return nil, errors.New("directive validate is not implemented")
			}
			return ec.directives.Validate(ctx, rawArgs, directive0, constraint)
		}

		tmp, err = directive1(ctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if data, ok := tmp.([]string); ok {
			arg0 = data
		} else if tmp == nil {
			arg0 = nil
		} else {
			return nil, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be []string`, tmp))
		}
	}
	args["ids"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["start"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("start"))
		directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOInt2ᚖint(ctx, tmp) }
		directive1 := func(ctx context.Context) (interface{}, error) {
			constraint, err := ec.unmarshalNString2string(ctx, "number,gte=0")
			if err != nil {
				return nil, err
			}
			if ec.directives.Validate == nil {
				return nil, errors.New("directive validate is not implemented")
			}
			return ec.directives.Validate(ctx, rawArgs, directive0, constraint)
		}

		tmp, err = directive1(ctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if data, ok := tmp.(*int); ok {
			arg1 = data
		} else if tmp == nil {
			arg1 = nil
		} else {
			return nil, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be *int`, tmp))
		}
	}
	args["start"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOInt2ᚖint(ctx, tmp) }
		directive1 := func(ctx context.Context) (interface{}, error) {
			constraint, err := ec.unmarshalNString2string(ctx, "number,gte=1")
			if err != nil {
				return nil, err
			}
			if ec.directives.Validate == nil {
				return nil, errors.New("directive validate is not implemented")
			}
			return ec.directives.Validate(ctx, rawArgs, directive0, constraint)
		}

		tmp, err = directive1(ctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if data, ok := tmp.(*int); ok {
			arg2 = data
		} else if tmp == nil {
			arg2 = nil
		} else {
			return nil, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be *int`, tmp))
		}
	}
	args["limit"] = arg2
	var arg3 *public_models.Sort
	if tmp, ok := rawArgs["sort"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sort"))
		arg3, err = ec.unmarshalOSort2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐSort(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["sort"] = arg3
	var arg4 *string
	if tmp, ok := rawArgs["search"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("search"))
		directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚖstring(ctx, tmp) }
		directive1 := func(ctx context.Context) (interface{}, error) {
			constraint, err := ec.unmarshalNString2string(ctx, "min=3,max=32")
			if err != nil {
				return nil, err
			}
			if ec.directives.Validate == nil {
				return nil, errors.New("directive validate is not implemented")
			}
			return ec.directives.Validate(ctx, rawArgs, directive0, constraint)
		}

		tmp, err = directive1(ctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if data, ok := tmp.(*string); ok {
			arg4 = data
		} else if tmp == nil {
			arg4 = nil
		} else {
			return nil, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp))
		}
	}
	args["search"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_generatePdf_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["content"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("content"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["content"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["fileName"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fileName"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["fileName"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_page_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["url"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("url"))
		directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalNString2string(ctx, tmp) }
		directive1 := func(ctx context.Context) (interface{}, error) {
			constraint, err := ec.unmarshalNString2string(ctx, "required")
			if err != nil {
				return nil, err
			}
			if ec.directives.Validate == nil {
				return nil, errors.New("directive validate is not implemented")
			}
			return ec.directives.Validate(ctx, rawArgs, directive0, constraint)
		}

		tmp, err = directive1(ctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if data, ok := tmp.(string); ok {
			arg0 = data
		} else {
			return nil, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be string`, tmp))
		}
	}
	args["url"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_properties_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []string
	if tmp, ok := rawArgs["ids"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ids"))
		directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOID2ᚕstringᚄ(ctx, tmp) }
		directive1 := func(ctx context.Context) (interface{}, error) {
			constraint, err := ec.unmarshalNString2string(ctx, "dive,required,mongodb")
			if err != nil {
				return nil, err
			}
			if ec.directives.Validate == nil {
				return nil, errors.New("directive validate is not implemented")
			}
			return ec.directives.Validate(ctx, rawArgs, directive0, constraint)
		}

		tmp, err = directive1(ctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if data, ok := tmp.([]string); ok {
			arg0 = data
		} else if tmp == nil {
			arg0 = nil
		} else {
			return nil, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be []string`, tmp))
		}
	}
	args["ids"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["start"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("start"))
		directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOInt2ᚖint(ctx, tmp) }
		directive1 := func(ctx context.Context) (interface{}, error) {
			constraint, err := ec.unmarshalNString2string(ctx, "number,gte=0")
			if err != nil {
				return nil, err
			}
			if ec.directives.Validate == nil {
				return nil, errors.New("directive validate is not implemented")
			}
			return ec.directives.Validate(ctx, rawArgs, directive0, constraint)
		}

		tmp, err = directive1(ctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if data, ok := tmp.(*int); ok {
			arg1 = data
		} else if tmp == nil {
			arg1 = nil
		} else {
			return nil, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be *int`, tmp))
		}
	}
	args["start"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOInt2ᚖint(ctx, tmp) }
		directive1 := func(ctx context.Context) (interface{}, error) {
			constraint, err := ec.unmarshalNString2string(ctx, "number,gte=1")
			if err != nil {
				return nil, err
			}
			if ec.directives.Validate == nil {
				return nil, errors.New("directive validate is not implemented")
			}
			return ec.directives.Validate(ctx, rawArgs, directive0, constraint)
		}

		tmp, err = directive1(ctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if data, ok := tmp.(*int); ok {
			arg2 = data
		} else if tmp == nil {
			arg2 = nil
		} else {
			return nil, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be *int`, tmp))
		}
	}
	args["limit"] = arg2
	var arg3 *public_models.Sort
	if tmp, ok := rawArgs["sort"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sort"))
		arg3, err = ec.unmarshalOSort2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐSort(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["sort"] = arg3
	var arg4 *string
	if tmp, ok := rawArgs["search"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("search"))
		directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚖstring(ctx, tmp) }
		directive1 := func(ctx context.Context) (interface{}, error) {
			constraint, err := ec.unmarshalNString2string(ctx, "min=3,max=32")
			if err != nil {
				return nil, err
			}
			if ec.directives.Validate == nil {
				return nil, errors.New("directive validate is not implemented")
			}
			return ec.directives.Validate(ctx, rawArgs, directive0, constraint)
		}

		tmp, err = directive1(ctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if data, ok := tmp.(*string); ok {
			arg4 = data
		} else if tmp == nil {
			arg4 = nil
		} else {
			return nil, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp))
		}
	}
	args["search"] = arg4
	var arg5 *public_models.PropertyFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg5, err = ec.unmarshalOPropertyFilter2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐPropertyFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg5
	return args, nil
}

func (ec *executionContext) field_Query_property_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalNID2string(ctx, tmp) }
		directive1 := func(ctx context.Context) (interface{}, error) {
			constraint, err := ec.unmarshalNString2string(ctx, "required,mongodb")
			if err != nil {
				return nil, err
			}
			if ec.directives.Validate == nil {
				return nil, errors.New("directive validate is not implemented")
			}
			return ec.directives.Validate(ctx, rawArgs, directive0, constraint)
		}

		tmp, err = directive1(ctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if data, ok := tmp.(string); ok {
			arg0 = data
		} else {
			return nil, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be string`, tmp))
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_review_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalNID2string(ctx, tmp) }
		directive1 := func(ctx context.Context) (interface{}, error) {
			constraint, err := ec.unmarshalNString2string(ctx, "required,mongodb")
			if err != nil {
				return nil, err
			}
			if ec.directives.Validate == nil {
				return nil, errors.New("directive validate is not implemented")
			}
			return ec.directives.Validate(ctx, rawArgs, directive0, constraint)
		}

		tmp, err = directive1(ctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if data, ok := tmp.(string); ok {
			arg0 = data
		} else {
			return nil, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be string`, tmp))
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_reviews_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []string
	if tmp, ok := rawArgs["ids"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ids"))
		directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOID2ᚕstringᚄ(ctx, tmp) }
		directive1 := func(ctx context.Context) (interface{}, error) {
			constraint, err := ec.unmarshalNString2string(ctx, "dive,required,mongodb")
			if err != nil {
				return nil, err
			}
			if ec.directives.Validate == nil {
				return nil, errors.New("directive validate is not implemented")
			}
			return ec.directives.Validate(ctx, rawArgs, directive0, constraint)
		}

		tmp, err = directive1(ctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if data, ok := tmp.([]string); ok {
			arg0 = data
		} else if tmp == nil {
			arg0 = nil
		} else {
			return nil, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be []string`, tmp))
		}
	}
	args["ids"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["start"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("start"))
		directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOInt2ᚖint(ctx, tmp) }
		directive1 := func(ctx context.Context) (interface{}, error) {
			constraint, err := ec.unmarshalNString2string(ctx, "number,gte=0")
			if err != nil {
				return nil, err
			}
			if ec.directives.Validate == nil {
				return nil, errors.New("directive validate is not implemented")
			}
			return ec.directives.Validate(ctx, rawArgs, directive0, constraint)
		}

		tmp, err = directive1(ctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if data, ok := tmp.(*int); ok {
			arg1 = data
		} else if tmp == nil {
			arg1 = nil
		} else {
			return nil, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be *int`, tmp))
		}
	}
	args["start"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOInt2ᚖint(ctx, tmp) }
		directive1 := func(ctx context.Context) (interface{}, error) {
			constraint, err := ec.unmarshalNString2string(ctx, "number,gte=1")
			if err != nil {
				return nil, err
			}
			if ec.directives.Validate == nil {
				return nil, errors.New("directive validate is not implemented")
			}
			return ec.directives.Validate(ctx, rawArgs, directive0, constraint)
		}

		tmp, err = directive1(ctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if data, ok := tmp.(*int); ok {
			arg2 = data
		} else if tmp == nil {
			arg2 = nil
		} else {
			return nil, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be *int`, tmp))
		}
	}
	args["limit"] = arg2
	var arg3 *public_models.Sort
	if tmp, ok := rawArgs["sort"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sort"))
		arg3, err = ec.unmarshalOSort2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐSort(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["sort"] = arg3
	var arg4 *string
	if tmp, ok := rawArgs["search"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("search"))
		directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚖstring(ctx, tmp) }
		directive1 := func(ctx context.Context) (interface{}, error) {
			constraint, err := ec.unmarshalNString2string(ctx, "min=3,max=32")
			if err != nil {
				return nil, err
			}
			if ec.directives.Validate == nil {
				return nil, errors.New("directive validate is not implemented")
			}
			return ec.directives.Validate(ctx, rawArgs, directive0, constraint)
		}

		tmp, err = directive1(ctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if data, ok := tmp.(*string); ok {
			arg4 = data
		} else if tmp == nil {
			arg4 = nil
		} else {
			return nil, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp))
		}
	}
	args["search"] = arg4
	var arg5 *public_models.ReviewsFilterInput
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg5, err = ec.unmarshalOReviewsFilterInput2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐReviewsFilterInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg5
	return args, nil
}

func (ec *executionContext) field_Query_stories_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []string
	if tmp, ok := rawArgs["ids"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ids"))
		directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOID2ᚕstringᚄ(ctx, tmp) }
		directive1 := func(ctx context.Context) (interface{}, error) {
			constraint, err := ec.unmarshalNString2string(ctx, "dive,required,mongodb")
			if err != nil {
				return nil, err
			}
			if ec.directives.Validate == nil {
				return nil, errors.New("directive validate is not implemented")
			}
			return ec.directives.Validate(ctx, rawArgs, directive0, constraint)
		}

		tmp, err = directive1(ctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if data, ok := tmp.([]string); ok {
			arg0 = data
		} else if tmp == nil {
			arg0 = nil
		} else {
			return nil, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be []string`, tmp))
		}
	}
	args["ids"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["start"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("start"))
		directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOInt2ᚖint(ctx, tmp) }
		directive1 := func(ctx context.Context) (interface{}, error) {
			constraint, err := ec.unmarshalNString2string(ctx, "number,gte=0")
			if err != nil {
				return nil, err
			}
			if ec.directives.Validate == nil {
				return nil, errors.New("directive validate is not implemented")
			}
			return ec.directives.Validate(ctx, rawArgs, directive0, constraint)
		}

		tmp, err = directive1(ctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if data, ok := tmp.(*int); ok {
			arg1 = data
		} else if tmp == nil {
			arg1 = nil
		} else {
			return nil, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be *int`, tmp))
		}
	}
	args["start"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOInt2ᚖint(ctx, tmp) }
		directive1 := func(ctx context.Context) (interface{}, error) {
			constraint, err := ec.unmarshalNString2string(ctx, "number,gte=1")
			if err != nil {
				return nil, err
			}
			if ec.directives.Validate == nil {
				return nil, errors.New("directive validate is not implemented")
			}
			return ec.directives.Validate(ctx, rawArgs, directive0, constraint)
		}

		tmp, err = directive1(ctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if data, ok := tmp.(*int); ok {
			arg2 = data
		} else if tmp == nil {
			arg2 = nil
		} else {
			return nil, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be *int`, tmp))
		}
	}
	args["limit"] = arg2
	var arg3 *public_models.Sort
	if tmp, ok := rawArgs["sort"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sort"))
		arg3, err = ec.unmarshalOSort2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐSort(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["sort"] = arg3
	var arg4 *string
	if tmp, ok := rawArgs["search"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("search"))
		directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚖstring(ctx, tmp) }
		directive1 := func(ctx context.Context) (interface{}, error) {
			constraint, err := ec.unmarshalNString2string(ctx, "min=3,max=32")
			if err != nil {
				return nil, err
			}
			if ec.directives.Validate == nil {
				return nil, errors.New("directive validate is not implemented")
			}
			return ec.directives.Validate(ctx, rawArgs, directive0, constraint)
		}

		tmp, err = directive1(ctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if data, ok := tmp.(*string); ok {
			arg4 = data
		} else if tmp == nil {
			arg4 = nil
		} else {
			return nil, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp))
		}
	}
	args["search"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_story_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalNID2string(ctx, tmp) }
		directive1 := func(ctx context.Context) (interface{}, error) {
			constraint, err := ec.unmarshalNString2string(ctx, "required,mongodb")
			if err != nil {
				return nil, err
			}
			if ec.directives.Validate == nil {
				return nil, errors.New("directive validate is not implemented")
			}
			return ec.directives.Validate(ctx, rawArgs, directive0, constraint)
		}

		tmp, err = directive1(ctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if data, ok := tmp.(string); ok {
			arg0 = data
		} else {
			return nil, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be string`, tmp))
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_vacancies_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []string
	if tmp, ok := rawArgs["ids"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ids"))
		directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOID2ᚕstringᚄ(ctx, tmp) }
		directive1 := func(ctx context.Context) (interface{}, error) {
			constraint, err := ec.unmarshalNString2string(ctx, "dive,required,mongodb")
			if err != nil {
				return nil, err
			}
			if ec.directives.Validate == nil {
				return nil, errors.New("directive validate is not implemented")
			}
			return ec.directives.Validate(ctx, rawArgs, directive0, constraint)
		}

		tmp, err = directive1(ctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if data, ok := tmp.([]string); ok {
			arg0 = data
		} else if tmp == nil {
			arg0 = nil
		} else {
			return nil, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be []string`, tmp))
		}
	}
	args["ids"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["start"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("start"))
		directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOInt2ᚖint(ctx, tmp) }
		directive1 := func(ctx context.Context) (interface{}, error) {
			constraint, err := ec.unmarshalNString2string(ctx, "number,gte=0")
			if err != nil {
				return nil, err
			}
			if ec.directives.Validate == nil {
				return nil, errors.New("directive validate is not implemented")
			}
			return ec.directives.Validate(ctx, rawArgs, directive0, constraint)
		}

		tmp, err = directive1(ctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if data, ok := tmp.(*int); ok {
			arg1 = data
		} else if tmp == nil {
			arg1 = nil
		} else {
			return nil, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be *int`, tmp))
		}
	}
	args["start"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOInt2ᚖint(ctx, tmp) }
		directive1 := func(ctx context.Context) (interface{}, error) {
			constraint, err := ec.unmarshalNString2string(ctx, "number,gte=1")
			if err != nil {
				return nil, err
			}
			if ec.directives.Validate == nil {
				return nil, errors.New("directive validate is not implemented")
			}
			return ec.directives.Validate(ctx, rawArgs, directive0, constraint)
		}

		tmp, err = directive1(ctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if data, ok := tmp.(*int); ok {
			arg2 = data
		} else if tmp == nil {
			arg2 = nil
		} else {
			return nil, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be *int`, tmp))
		}
	}
	args["limit"] = arg2
	var arg3 *public_models.Sort
	if tmp, ok := rawArgs["sort"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sort"))
		arg3, err = ec.unmarshalOSort2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐSort(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["sort"] = arg3
	var arg4 *string
	if tmp, ok := rawArgs["search"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("search"))
		directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚖstring(ctx, tmp) }
		directive1 := func(ctx context.Context) (interface{}, error) {
			constraint, err := ec.unmarshalNString2string(ctx, "min=3,max=32")
			if err != nil {
				return nil, err
			}
			if ec.directives.Validate == nil {
				return nil, errors.New("directive validate is not implemented")
			}
			return ec.directives.Validate(ctx, rawArgs, directive0, constraint)
		}

		tmp, err = directive1(ctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if data, ok := tmp.(*string); ok {
			arg4 = data
		} else if tmp == nil {
			arg4 = nil
		} else {
			return nil, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp))
		}
	}
	args["search"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_vacancy_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalNID2string(ctx, tmp) }
		directive1 := func(ctx context.Context) (interface{}, error) {
			constraint, err := ec.unmarshalNString2string(ctx, "required,mongodb")
			if err != nil {
				return nil, err
			}
			if ec.directives.Validate == nil {
				return nil, errors.New("directive validate is not implemented")
			}
			return ec.directives.Validate(ctx, rawArgs, directive0, constraint)
		}

		tmp, err = directive1(ctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if data, ok := tmp.(string); ok {
			arg0 = data
		} else {
			return nil, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be string`, tmp))
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_village_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalNID2string(ctx, tmp) }
		directive1 := func(ctx context.Context) (interface{}, error) {
			constraint, err := ec.unmarshalNString2string(ctx, "required,mongodb")
			if err != nil {
				return nil, err
			}
			if ec.directives.Validate == nil {
				return nil, errors.New("directive validate is not implemented")
			}
			return ec.directives.Validate(ctx, rawArgs, directive0, constraint)
		}

		tmp, err = directive1(ctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if data, ok := tmp.(string); ok {
			arg0 = data
		} else {
			return nil, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be string`, tmp))
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_villages_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []string
	if tmp, ok := rawArgs["ids"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ids"))
		directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOID2ᚕstringᚄ(ctx, tmp) }
		directive1 := func(ctx context.Context) (interface{}, error) {
			constraint, err := ec.unmarshalNString2string(ctx, "dive,required,mongodb")
			if err != nil {
				return nil, err
			}
			if ec.directives.Validate == nil {
				return nil, errors.New("directive validate is not implemented")
			}
			return ec.directives.Validate(ctx, rawArgs, directive0, constraint)
		}

		tmp, err = directive1(ctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if data, ok := tmp.([]string); ok {
			arg0 = data
		} else if tmp == nil {
			arg0 = nil
		} else {
			return nil, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be []string`, tmp))
		}
	}
	args["ids"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["start"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("start"))
		directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOInt2ᚖint(ctx, tmp) }
		directive1 := func(ctx context.Context) (interface{}, error) {
			constraint, err := ec.unmarshalNString2string(ctx, "number,gte=0")
			if err != nil {
				return nil, err
			}
			if ec.directives.Validate == nil {
				return nil, errors.New("directive validate is not implemented")
			}
			return ec.directives.Validate(ctx, rawArgs, directive0, constraint)
		}

		tmp, err = directive1(ctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if data, ok := tmp.(*int); ok {
			arg1 = data
		} else if tmp == nil {
			arg1 = nil
		} else {
			return nil, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be *int`, tmp))
		}
	}
	args["start"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOInt2ᚖint(ctx, tmp) }
		directive1 := func(ctx context.Context) (interface{}, error) {
			constraint, err := ec.unmarshalNString2string(ctx, "number,gte=1")
			if err != nil {
				return nil, err
			}
			if ec.directives.Validate == nil {
				return nil, errors.New("directive validate is not implemented")
			}
			return ec.directives.Validate(ctx, rawArgs, directive0, constraint)
		}

		tmp, err = directive1(ctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if data, ok := tmp.(*int); ok {
			arg2 = data
		} else if tmp == nil {
			arg2 = nil
		} else {
			return nil, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be *int`, tmp))
		}
	}
	args["limit"] = arg2
	var arg3 *public_models.Sort
	if tmp, ok := rawArgs["sort"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sort"))
		arg3, err = ec.unmarshalOSort2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐSort(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["sort"] = arg3
	var arg4 *string
	if tmp, ok := rawArgs["search"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("search"))
		directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚖstring(ctx, tmp) }
		directive1 := func(ctx context.Context) (interface{}, error) {
			constraint, err := ec.unmarshalNString2string(ctx, "min=3,max=32")
			if err != nil {
				return nil, err
			}
			if ec.directives.Validate == nil {
				return nil, errors.New("directive validate is not implemented")
			}
			return ec.directives.Validate(ctx, rawArgs, directive0, constraint)
		}

		tmp, err = directive1(ctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if data, ok := tmp.(*string); ok {
			arg4 = data
		} else if tmp == nil {
			arg4 = nil
		} else {
			return nil, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp))
		}
	}
	args["search"] = arg4
	return args, nil
}

func (ec *executionContext) field___Type_enumValues_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
		arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

func (ec *executionContext) field___Type_fields_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
		arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

// endregion ***************************** args.gotpl *****************************

// region    ************************** directives.gotpl **************************

// endregion ************************** directives.gotpl **************************

// region    **************************** field.gotpl *****************************

func (ec *executionContext) _Complex_id(ctx context.Context, field graphql.CollectedField, obj *public_models.Complex) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Complex_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Complex_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Complex",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Complex_title(ctx context.Context, field graphql.CollectedField, obj *public_models.Complex) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Complex_title(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Title, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Complex_title(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Complex",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Complex_description(ctx context.Context, field graphql.CollectedField, obj *public_models.Complex) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Complex_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Complex_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Complex",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Complex_address(ctx context.Context, field graphql.CollectedField, obj *public_models.Complex) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Complex_address(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Address, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Complex_address(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Complex",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Complex_lat(ctx context.Context, field graphql.CollectedField, obj *public_models.Complex) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Complex_lat(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Lat, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Complex_lat(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Complex",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Complex_lon(ctx context.Context, field graphql.CollectedField, obj *public_models.Complex) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Complex_lon(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Lon, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Complex_lon(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Complex",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Complex_cadastrNumber(ctx context.Context, field graphql.CollectedField, obj *public_models.Complex) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Complex_cadastrNumber(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CadastrNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Complex_cadastrNumber(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Complex",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Complex_seoText(ctx context.Context, field graphql.CollectedField, obj *public_models.Complex) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Complex_seoText(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SeoText, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Complex_seoText(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Complex",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Complex_youtubeLink(ctx context.Context, field graphql.CollectedField, obj *public_models.Complex) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Complex_youtubeLink(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.YoutubeLink, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Complex_youtubeLink(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Complex",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Complex_tourLink(ctx context.Context, field graphql.CollectedField, obj *public_models.Complex) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Complex_tourLink(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TourLink, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Complex_tourLink(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Complex",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Complex_inCity(ctx context.Context, field graphql.CollectedField, obj *public_models.Complex) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Complex_inCity(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InCity, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Complex_inCity(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Complex",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Complex_cityDistance(ctx context.Context, field graphql.CollectedField, obj *public_models.Complex) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Complex_cityDistance(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CityDistance, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Complex_cityDistance(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Complex",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Complex_region(ctx context.Context, field graphql.CollectedField, obj *public_models.Complex) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Complex_region(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Region, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Complex_region(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Complex",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Complex_subRegion(ctx context.Context, field graphql.CollectedField, obj *public_models.Complex) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Complex_subRegion(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubRegion, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Complex_subRegion(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Complex",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Complex_developer(ctx context.Context, field graphql.CollectedField, obj *public_models.Complex) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Complex_developer(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Complex().Developer(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*public_models.Developer)
	fc.Result = res
	return ec.marshalODeveloper2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐDeveloper(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Complex_developer(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Complex",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Developer_id(ctx, field)
			case "title":
				return ec.fieldContext_Developer_title(ctx, field)
			case "url":
				return ec.fieldContext_Developer_url(ctx, field)
			case "logo":
				return ec.fieldContext_Developer_logo(ctx, field)
			case "createdAt":
				return ec.fieldContext_Developer_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Developer_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Developer", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Complex_isReady(ctx context.Context, field graphql.CollectedField, obj *public_models.Complex) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Complex_isReady(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsReady, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Complex_isReady(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Complex",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Complex_readinessQuarter(ctx context.Context, field graphql.CollectedField, obj *public_models.Complex) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Complex_readinessQuarter(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ReadinessQuarter, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*public_models.QuarterEnum)
	fc.Result = res
	return ec.marshalOQuarterEnum2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐQuarterEnum(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Complex_readinessQuarter(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Complex",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type QuarterEnum does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Complex_readinessYear(ctx context.Context, field graphql.CollectedField, obj *public_models.Complex) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Complex_readinessYear(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ReadinessYear, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Complex_readinessYear(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Complex",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Complex_images(ctx context.Context, field graphql.CollectedField, obj *public_models.Complex) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Complex_images(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Complex().Images(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*public_models.Image)
	fc.Result = res
	return ec.marshalOImage2ᚕᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐImageᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Complex_images(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Complex",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Image_id(ctx, field)
			case "url":
				return ec.fieldContext_Image_url(ctx, field)
			case "path":
				return ec.fieldContext_Image_path(ctx, field)
			case "title":
				return ec.fieldContext_Image_title(ctx, field)
			case "fileName":
				return ec.fieldContext_Image_fileName(ctx, field)
			case "fileType":
				return ec.fieldContext_Image_fileType(ctx, field)
			case "previewUrl":
				return ec.fieldContext_Image_previewUrl(ctx, field)
			case "previewPath":
				return ec.fieldContext_Image_previewPath(ctx, field)
			case "blurHash":
				return ec.fieldContext_Image_blurHash(ctx, field)
			case "preset":
				return ec.fieldContext_Image_preset(ctx, field)
			case "createdAt":
				return ec.fieldContext_Image_createdAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Image", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Complex_documents(ctx context.Context, field graphql.CollectedField, obj *public_models.Complex) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Complex_documents(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Complex().Documents(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*public_models.Document)
	fc.Result = res
	return ec.marshalODocument2ᚕᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐDocumentᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Complex_documents(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Complex",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Document_id(ctx, field)
			case "url":
				return ec.fieldContext_Document_url(ctx, field)
			case "path":
				return ec.fieldContext_Document_path(ctx, field)
			case "title":
				return ec.fieldContext_Document_title(ctx, field)
			case "fileName":
				return ec.fieldContext_Document_fileName(ctx, field)
			case "fileType":
				return ec.fieldContext_Document_fileType(ctx, field)
			case "createdAt":
				return ec.fieldContext_Document_createdAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Document", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Complex_projectDeclarations(ctx context.Context, field graphql.CollectedField, obj *public_models.Complex) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Complex_projectDeclarations(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Complex().ProjectDeclarations(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*public_models.Document)
	fc.Result = res
	return ec.marshalODocument2ᚕᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐDocumentᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Complex_projectDeclarations(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Complex",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Document_id(ctx, field)
			case "url":
				return ec.fieldContext_Document_url(ctx, field)
			case "path":
				return ec.fieldContext_Document_path(ctx, field)
			case "title":
				return ec.fieldContext_Document_title(ctx, field)
			case "fileName":
				return ec.fieldContext_Document_fileName(ctx, field)
			case "fileType":
				return ec.fieldContext_Document_fileType(ctx, field)
			case "createdAt":
				return ec.fieldContext_Document_createdAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Document", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Complex_createdAt(ctx context.Context, field graphql.CollectedField, obj *public_models.Complex) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Complex_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Complex_createdAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Complex",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Complex_updatedAt(ctx context.Context, field graphql.CollectedField, obj *public_models.Complex) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Complex_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Complex_updatedAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Complex",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ComplexConnection_totalCount(ctx context.Context, field graphql.CollectedField, obj *public_models.ComplexConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ComplexConnection_totalCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ComplexConnection_totalCount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ComplexConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ComplexConnection_edges(ctx context.Context, field graphql.CollectedField, obj *public_models.ComplexConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ComplexConnection_edges(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*public_models.ComplexEdge)
	fc.Result = res
	return ec.marshalNComplexEdge2ᚕᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐComplexEdgeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ComplexConnection_edges(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ComplexConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "node":
				return ec.fieldContext_ComplexEdge_node(ctx, field)
			case "cursor":
				return ec.fieldContext_ComplexEdge_cursor(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ComplexEdge", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ComplexConnection_nodes(ctx context.Context, field graphql.CollectedField, obj *public_models.ComplexConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ComplexConnection_nodes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Nodes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*public_models.Complex)
	fc.Result = res
	return ec.marshalNComplex2ᚕᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐComplexᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ComplexConnection_nodes(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ComplexConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Complex_id(ctx, field)
			case "title":
				return ec.fieldContext_Complex_title(ctx, field)
			case "description":
				return ec.fieldContext_Complex_description(ctx, field)
			case "address":
				return ec.fieldContext_Complex_address(ctx, field)
			case "lat":
				return ec.fieldContext_Complex_lat(ctx, field)
			case "lon":
				return ec.fieldContext_Complex_lon(ctx, field)
			case "cadastrNumber":
				return ec.fieldContext_Complex_cadastrNumber(ctx, field)
			case "seoText":
				return ec.fieldContext_Complex_seoText(ctx, field)
			case "youtubeLink":
				return ec.fieldContext_Complex_youtubeLink(ctx, field)
			case "tourLink":
				return ec.fieldContext_Complex_tourLink(ctx, field)
			case "inCity":
				return ec.fieldContext_Complex_inCity(ctx, field)
			case "cityDistance":
				return ec.fieldContext_Complex_cityDistance(ctx, field)
			case "region":
				return ec.fieldContext_Complex_region(ctx, field)
			case "subRegion":
				return ec.fieldContext_Complex_subRegion(ctx, field)
			case "developer":
				return ec.fieldContext_Complex_developer(ctx, field)
			case "isReady":
				return ec.fieldContext_Complex_isReady(ctx, field)
			case "readinessQuarter":
				return ec.fieldContext_Complex_readinessQuarter(ctx, field)
			case "readinessYear":
				return ec.fieldContext_Complex_readinessYear(ctx, field)
			case "images":
				return ec.fieldContext_Complex_images(ctx, field)
			case "documents":
				return ec.fieldContext_Complex_documents(ctx, field)
			case "projectDeclarations":
				return ec.fieldContext_Complex_projectDeclarations(ctx, field)
			case "createdAt":
				return ec.fieldContext_Complex_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Complex_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Complex", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ComplexConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *public_models.ComplexConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ComplexConnection_pageInfo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*public_models.PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ComplexConnection_pageInfo(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ComplexConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "startCursor":
				return ec.fieldContext_PageInfo_startCursor(ctx, field)
			case "endCursor":
				return ec.fieldContext_PageInfo_endCursor(ctx, field)
			case "hasNextPage":
				return ec.fieldContext_PageInfo_hasNextPage(ctx, field)
			case "hasPreviousPage":
				return ec.fieldContext_PageInfo_hasPreviousPage(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PageInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ComplexEdge_node(ctx context.Context, field graphql.CollectedField, obj *public_models.ComplexEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ComplexEdge_node(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*public_models.Complex)
	fc.Result = res
	return ec.marshalNComplex2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐComplex(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ComplexEdge_node(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ComplexEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Complex_id(ctx, field)
			case "title":
				return ec.fieldContext_Complex_title(ctx, field)
			case "description":
				return ec.fieldContext_Complex_description(ctx, field)
			case "address":
				return ec.fieldContext_Complex_address(ctx, field)
			case "lat":
				return ec.fieldContext_Complex_lat(ctx, field)
			case "lon":
				return ec.fieldContext_Complex_lon(ctx, field)
			case "cadastrNumber":
				return ec.fieldContext_Complex_cadastrNumber(ctx, field)
			case "seoText":
				return ec.fieldContext_Complex_seoText(ctx, field)
			case "youtubeLink":
				return ec.fieldContext_Complex_youtubeLink(ctx, field)
			case "tourLink":
				return ec.fieldContext_Complex_tourLink(ctx, field)
			case "inCity":
				return ec.fieldContext_Complex_inCity(ctx, field)
			case "cityDistance":
				return ec.fieldContext_Complex_cityDistance(ctx, field)
			case "region":
				return ec.fieldContext_Complex_region(ctx, field)
			case "subRegion":
				return ec.fieldContext_Complex_subRegion(ctx, field)
			case "developer":
				return ec.fieldContext_Complex_developer(ctx, field)
			case "isReady":
				return ec.fieldContext_Complex_isReady(ctx, field)
			case "readinessQuarter":
				return ec.fieldContext_Complex_readinessQuarter(ctx, field)
			case "readinessYear":
				return ec.fieldContext_Complex_readinessYear(ctx, field)
			case "images":
				return ec.fieldContext_Complex_images(ctx, field)
			case "documents":
				return ec.fieldContext_Complex_documents(ctx, field)
			case "projectDeclarations":
				return ec.fieldContext_Complex_projectDeclarations(ctx, field)
			case "createdAt":
				return ec.fieldContext_Complex_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Complex_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Complex", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ComplexEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *public_models.ComplexEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ComplexEdge_cursor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNCursor2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ComplexEdge_cursor(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ComplexEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Cursor does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ComplexHouse_id(ctx context.Context, field graphql.CollectedField, obj *public_models.ComplexHouse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ComplexHouse_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ComplexHouse_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ComplexHouse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ComplexHouse_complex(ctx context.Context, field graphql.CollectedField, obj *public_models.ComplexHouse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ComplexHouse_complex(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.ComplexHouse().Complex(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*public_models.Complex)
	fc.Result = res
	return ec.marshalOComplex2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐComplex(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ComplexHouse_complex(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ComplexHouse",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Complex_id(ctx, field)
			case "title":
				return ec.fieldContext_Complex_title(ctx, field)
			case "description":
				return ec.fieldContext_Complex_description(ctx, field)
			case "address":
				return ec.fieldContext_Complex_address(ctx, field)
			case "lat":
				return ec.fieldContext_Complex_lat(ctx, field)
			case "lon":
				return ec.fieldContext_Complex_lon(ctx, field)
			case "cadastrNumber":
				return ec.fieldContext_Complex_cadastrNumber(ctx, field)
			case "seoText":
				return ec.fieldContext_Complex_seoText(ctx, field)
			case "youtubeLink":
				return ec.fieldContext_Complex_youtubeLink(ctx, field)
			case "tourLink":
				return ec.fieldContext_Complex_tourLink(ctx, field)
			case "inCity":
				return ec.fieldContext_Complex_inCity(ctx, field)
			case "cityDistance":
				return ec.fieldContext_Complex_cityDistance(ctx, field)
			case "region":
				return ec.fieldContext_Complex_region(ctx, field)
			case "subRegion":
				return ec.fieldContext_Complex_subRegion(ctx, field)
			case "developer":
				return ec.fieldContext_Complex_developer(ctx, field)
			case "isReady":
				return ec.fieldContext_Complex_isReady(ctx, field)
			case "readinessQuarter":
				return ec.fieldContext_Complex_readinessQuarter(ctx, field)
			case "readinessYear":
				return ec.fieldContext_Complex_readinessYear(ctx, field)
			case "images":
				return ec.fieldContext_Complex_images(ctx, field)
			case "documents":
				return ec.fieldContext_Complex_documents(ctx, field)
			case "projectDeclarations":
				return ec.fieldContext_Complex_projectDeclarations(ctx, field)
			case "createdAt":
				return ec.fieldContext_Complex_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Complex_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Complex", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ComplexHouse_title(ctx context.Context, field graphql.CollectedField, obj *public_models.ComplexHouse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ComplexHouse_title(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Title, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ComplexHouse_title(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ComplexHouse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ComplexHouse_description(ctx context.Context, field graphql.CollectedField, obj *public_models.ComplexHouse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ComplexHouse_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ComplexHouse_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ComplexHouse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ComplexHouse_address(ctx context.Context, field graphql.CollectedField, obj *public_models.ComplexHouse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ComplexHouse_address(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Address, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ComplexHouse_address(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ComplexHouse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ComplexHouse_lat(ctx context.Context, field graphql.CollectedField, obj *public_models.ComplexHouse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ComplexHouse_lat(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Lat, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ComplexHouse_lat(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ComplexHouse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ComplexHouse_lon(ctx context.Context, field graphql.CollectedField, obj *public_models.ComplexHouse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ComplexHouse_lon(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Lon, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ComplexHouse_lon(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ComplexHouse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ComplexHouse_cadastrNumber(ctx context.Context, field graphql.CollectedField, obj *public_models.ComplexHouse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ComplexHouse_cadastrNumber(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CadastrNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ComplexHouse_cadastrNumber(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ComplexHouse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ComplexHouse_seoText(ctx context.Context, field graphql.CollectedField, obj *public_models.ComplexHouse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ComplexHouse_seoText(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SeoText, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ComplexHouse_seoText(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ComplexHouse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ComplexHouse_youtubeLink(ctx context.Context, field graphql.CollectedField, obj *public_models.ComplexHouse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ComplexHouse_youtubeLink(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.YoutubeLink, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ComplexHouse_youtubeLink(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ComplexHouse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ComplexHouse_tourLink(ctx context.Context, field graphql.CollectedField, obj *public_models.ComplexHouse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ComplexHouse_tourLink(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TourLink, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ComplexHouse_tourLink(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ComplexHouse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ComplexHouse_isReady(ctx context.Context, field graphql.CollectedField, obj *public_models.ComplexHouse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ComplexHouse_isReady(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsReady, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ComplexHouse_isReady(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ComplexHouse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ComplexHouse_readinessQuarter(ctx context.Context, field graphql.CollectedField, obj *public_models.ComplexHouse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ComplexHouse_readinessQuarter(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ReadinessQuarter, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*public_models.QuarterEnum)
	fc.Result = res
	return ec.marshalOQuarterEnum2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐQuarterEnum(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ComplexHouse_readinessQuarter(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ComplexHouse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type QuarterEnum does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ComplexHouse_readinessYear(ctx context.Context, field graphql.CollectedField, obj *public_models.ComplexHouse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ComplexHouse_readinessYear(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ReadinessYear, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ComplexHouse_readinessYear(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ComplexHouse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ComplexHouse_images(ctx context.Context, field graphql.CollectedField, obj *public_models.ComplexHouse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ComplexHouse_images(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.ComplexHouse().Images(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*public_models.Image)
	fc.Result = res
	return ec.marshalOImage2ᚕᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐImageᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ComplexHouse_images(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ComplexHouse",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Image_id(ctx, field)
			case "url":
				return ec.fieldContext_Image_url(ctx, field)
			case "path":
				return ec.fieldContext_Image_path(ctx, field)
			case "title":
				return ec.fieldContext_Image_title(ctx, field)
			case "fileName":
				return ec.fieldContext_Image_fileName(ctx, field)
			case "fileType":
				return ec.fieldContext_Image_fileType(ctx, field)
			case "previewUrl":
				return ec.fieldContext_Image_previewUrl(ctx, field)
			case "previewPath":
				return ec.fieldContext_Image_previewPath(ctx, field)
			case "blurHash":
				return ec.fieldContext_Image_blurHash(ctx, field)
			case "preset":
				return ec.fieldContext_Image_preset(ctx, field)
			case "createdAt":
				return ec.fieldContext_Image_createdAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Image", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ComplexHouse_documents(ctx context.Context, field graphql.CollectedField, obj *public_models.ComplexHouse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ComplexHouse_documents(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.ComplexHouse().Documents(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*public_models.Document)
	fc.Result = res
	return ec.marshalODocument2ᚕᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐDocumentᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ComplexHouse_documents(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ComplexHouse",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Document_id(ctx, field)
			case "url":
				return ec.fieldContext_Document_url(ctx, field)
			case "path":
				return ec.fieldContext_Document_path(ctx, field)
			case "title":
				return ec.fieldContext_Document_title(ctx, field)
			case "fileName":
				return ec.fieldContext_Document_fileName(ctx, field)
			case "fileType":
				return ec.fieldContext_Document_fileType(ctx, field)
			case "createdAt":
				return ec.fieldContext_Document_createdAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Document", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ComplexHouse_projectDeclarations(ctx context.Context, field graphql.CollectedField, obj *public_models.ComplexHouse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ComplexHouse_projectDeclarations(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.ComplexHouse().ProjectDeclarations(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*public_models.Document)
	fc.Result = res
	return ec.marshalODocument2ᚕᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐDocumentᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ComplexHouse_projectDeclarations(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ComplexHouse",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Document_id(ctx, field)
			case "url":
				return ec.fieldContext_Document_url(ctx, field)
			case "path":
				return ec.fieldContext_Document_path(ctx, field)
			case "title":
				return ec.fieldContext_Document_title(ctx, field)
			case "fileName":
				return ec.fieldContext_Document_fileName(ctx, field)
			case "fileType":
				return ec.fieldContext_Document_fileType(ctx, field)
			case "createdAt":
				return ec.fieldContext_Document_createdAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Document", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ComplexHouse_createdAt(ctx context.Context, field graphql.CollectedField, obj *public_models.ComplexHouse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ComplexHouse_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ComplexHouse_createdAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ComplexHouse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ComplexHouse_updatedAt(ctx context.Context, field graphql.CollectedField, obj *public_models.ComplexHouse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ComplexHouse_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ComplexHouse_updatedAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ComplexHouse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ComplexHouseConnection_totalCount(ctx context.Context, field graphql.CollectedField, obj *public_models.ComplexHouseConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ComplexHouseConnection_totalCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ComplexHouseConnection_totalCount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ComplexHouseConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ComplexHouseConnection_edges(ctx context.Context, field graphql.CollectedField, obj *public_models.ComplexHouseConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ComplexHouseConnection_edges(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*public_models.ComplexHouseEdge)
	fc.Result = res
	return ec.marshalNComplexHouseEdge2ᚕᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐComplexHouseEdgeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ComplexHouseConnection_edges(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ComplexHouseConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "node":
				return ec.fieldContext_ComplexHouseEdge_node(ctx, field)
			case "cursor":
				return ec.fieldContext_ComplexHouseEdge_cursor(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ComplexHouseEdge", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ComplexHouseConnection_nodes(ctx context.Context, field graphql.CollectedField, obj *public_models.ComplexHouseConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ComplexHouseConnection_nodes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Nodes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*public_models.ComplexHouse)
	fc.Result = res
	return ec.marshalNComplexHouse2ᚕᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐComplexHouseᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ComplexHouseConnection_nodes(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ComplexHouseConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ComplexHouse_id(ctx, field)
			case "complex":
				return ec.fieldContext_ComplexHouse_complex(ctx, field)
			case "title":
				return ec.fieldContext_ComplexHouse_title(ctx, field)
			case "description":
				return ec.fieldContext_ComplexHouse_description(ctx, field)
			case "address":
				return ec.fieldContext_ComplexHouse_address(ctx, field)
			case "lat":
				return ec.fieldContext_ComplexHouse_lat(ctx, field)
			case "lon":
				return ec.fieldContext_ComplexHouse_lon(ctx, field)
			case "cadastrNumber":
				return ec.fieldContext_ComplexHouse_cadastrNumber(ctx, field)
			case "seoText":
				return ec.fieldContext_ComplexHouse_seoText(ctx, field)
			case "youtubeLink":
				return ec.fieldContext_ComplexHouse_youtubeLink(ctx, field)
			case "tourLink":
				return ec.fieldContext_ComplexHouse_tourLink(ctx, field)
			case "isReady":
				return ec.fieldContext_ComplexHouse_isReady(ctx, field)
			case "readinessQuarter":
				return ec.fieldContext_ComplexHouse_readinessQuarter(ctx, field)
			case "readinessYear":
				return ec.fieldContext_ComplexHouse_readinessYear(ctx, field)
			case "images":
				return ec.fieldContext_ComplexHouse_images(ctx, field)
			case "documents":
				return ec.fieldContext_ComplexHouse_documents(ctx, field)
			case "projectDeclarations":
				return ec.fieldContext_ComplexHouse_projectDeclarations(ctx, field)
			case "createdAt":
				return ec.fieldContext_ComplexHouse_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_ComplexHouse_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ComplexHouse", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ComplexHouseConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *public_models.ComplexHouseConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ComplexHouseConnection_pageInfo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*public_models.PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ComplexHouseConnection_pageInfo(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ComplexHouseConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "startCursor":
				return ec.fieldContext_PageInfo_startCursor(ctx, field)
			case "endCursor":
				return ec.fieldContext_PageInfo_endCursor(ctx, field)
			case "hasNextPage":
				return ec.fieldContext_PageInfo_hasNextPage(ctx, field)
			case "hasPreviousPage":
				return ec.fieldContext_PageInfo_hasPreviousPage(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PageInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ComplexHouseEdge_node(ctx context.Context, field graphql.CollectedField, obj *public_models.ComplexHouseEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ComplexHouseEdge_node(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*public_models.ComplexHouse)
	fc.Result = res
	return ec.marshalNComplexHouse2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐComplexHouse(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ComplexHouseEdge_node(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ComplexHouseEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ComplexHouse_id(ctx, field)
			case "complex":
				return ec.fieldContext_ComplexHouse_complex(ctx, field)
			case "title":
				return ec.fieldContext_ComplexHouse_title(ctx, field)
			case "description":
				return ec.fieldContext_ComplexHouse_description(ctx, field)
			case "address":
				return ec.fieldContext_ComplexHouse_address(ctx, field)
			case "lat":
				return ec.fieldContext_ComplexHouse_lat(ctx, field)
			case "lon":
				return ec.fieldContext_ComplexHouse_lon(ctx, field)
			case "cadastrNumber":
				return ec.fieldContext_ComplexHouse_cadastrNumber(ctx, field)
			case "seoText":
				return ec.fieldContext_ComplexHouse_seoText(ctx, field)
			case "youtubeLink":
				return ec.fieldContext_ComplexHouse_youtubeLink(ctx, field)
			case "tourLink":
				return ec.fieldContext_ComplexHouse_tourLink(ctx, field)
			case "isReady":
				return ec.fieldContext_ComplexHouse_isReady(ctx, field)
			case "readinessQuarter":
				return ec.fieldContext_ComplexHouse_readinessQuarter(ctx, field)
			case "readinessYear":
				return ec.fieldContext_ComplexHouse_readinessYear(ctx, field)
			case "images":
				return ec.fieldContext_ComplexHouse_images(ctx, field)
			case "documents":
				return ec.fieldContext_ComplexHouse_documents(ctx, field)
			case "projectDeclarations":
				return ec.fieldContext_ComplexHouse_projectDeclarations(ctx, field)
			case "createdAt":
				return ec.fieldContext_ComplexHouse_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_ComplexHouse_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ComplexHouse", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ComplexHouseEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *public_models.ComplexHouseEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ComplexHouseEdge_cursor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNCursor2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ComplexHouseEdge_cursor(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ComplexHouseEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Cursor does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ContentBlock_type(ctx context.Context, field graphql.CollectedField, obj *public_models.ContentBlock) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ContentBlock_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(public_models.ContentBlockType)
	fc.Result = res
	return ec.marshalNContentBlockType2githubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐContentBlockType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ContentBlock_type(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ContentBlock",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ContentBlockType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ContentBlock_data(ctx context.Context, field graphql.CollectedField, obj *public_models.ContentBlock) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ContentBlock_data(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Data, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(map[string]interface{})
	fc.Result = res
	return ec.marshalNJSON2map(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ContentBlock_data(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ContentBlock",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type JSON does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ContentBlock_isVisible(ctx context.Context, field graphql.CollectedField, obj *public_models.ContentBlock) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ContentBlock_isVisible(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsVisible, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ContentBlock_isVisible(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ContentBlock",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Developer_id(ctx context.Context, field graphql.CollectedField, obj *public_models.Developer) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Developer_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Developer_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Developer",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Developer_title(ctx context.Context, field graphql.CollectedField, obj *public_models.Developer) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Developer_title(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Title, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Developer_title(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Developer",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Developer_url(ctx context.Context, field graphql.CollectedField, obj *public_models.Developer) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Developer_url(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.URL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Developer_url(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Developer",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Developer_logo(ctx context.Context, field graphql.CollectedField, obj *public_models.Developer) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Developer_logo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Developer().Logo(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*public_models.Image)
	fc.Result = res
	return ec.marshalOImage2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐImage(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Developer_logo(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Developer",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Image_id(ctx, field)
			case "url":
				return ec.fieldContext_Image_url(ctx, field)
			case "path":
				return ec.fieldContext_Image_path(ctx, field)
			case "title":
				return ec.fieldContext_Image_title(ctx, field)
			case "fileName":
				return ec.fieldContext_Image_fileName(ctx, field)
			case "fileType":
				return ec.fieldContext_Image_fileType(ctx, field)
			case "previewUrl":
				return ec.fieldContext_Image_previewUrl(ctx, field)
			case "previewPath":
				return ec.fieldContext_Image_previewPath(ctx, field)
			case "blurHash":
				return ec.fieldContext_Image_blurHash(ctx, field)
			case "preset":
				return ec.fieldContext_Image_preset(ctx, field)
			case "createdAt":
				return ec.fieldContext_Image_createdAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Image", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Developer_createdAt(ctx context.Context, field graphql.CollectedField, obj *public_models.Developer) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Developer_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Developer_createdAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Developer",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Developer_updatedAt(ctx context.Context, field graphql.CollectedField, obj *public_models.Developer) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Developer_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Developer_updatedAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Developer",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeveloperConnection_totalCount(ctx context.Context, field graphql.CollectedField, obj *public_models.DeveloperConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeveloperConnection_totalCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeveloperConnection_totalCount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeveloperConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeveloperConnection_edges(ctx context.Context, field graphql.CollectedField, obj *public_models.DeveloperConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeveloperConnection_edges(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*public_models.DeveloperEdge)
	fc.Result = res
	return ec.marshalNDeveloperEdge2ᚕᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐDeveloperEdgeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeveloperConnection_edges(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeveloperConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "node":
				return ec.fieldContext_DeveloperEdge_node(ctx, field)
			case "cursor":
				return ec.fieldContext_DeveloperEdge_cursor(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DeveloperEdge", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeveloperConnection_nodes(ctx context.Context, field graphql.CollectedField, obj *public_models.DeveloperConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeveloperConnection_nodes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Nodes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*public_models.Developer)
	fc.Result = res
	return ec.marshalNDeveloper2ᚕᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐDeveloperᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeveloperConnection_nodes(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeveloperConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Developer_id(ctx, field)
			case "title":
				return ec.fieldContext_Developer_title(ctx, field)
			case "url":
				return ec.fieldContext_Developer_url(ctx, field)
			case "logo":
				return ec.fieldContext_Developer_logo(ctx, field)
			case "createdAt":
				return ec.fieldContext_Developer_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Developer_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Developer", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeveloperConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *public_models.DeveloperConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeveloperConnection_pageInfo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*public_models.PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeveloperConnection_pageInfo(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeveloperConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "startCursor":
				return ec.fieldContext_PageInfo_startCursor(ctx, field)
			case "endCursor":
				return ec.fieldContext_PageInfo_endCursor(ctx, field)
			case "hasNextPage":
				return ec.fieldContext_PageInfo_hasNextPage(ctx, field)
			case "hasPreviousPage":
				return ec.fieldContext_PageInfo_hasPreviousPage(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PageInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeveloperEdge_node(ctx context.Context, field graphql.CollectedField, obj *public_models.DeveloperEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeveloperEdge_node(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*public_models.Developer)
	fc.Result = res
	return ec.marshalNDeveloper2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐDeveloper(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeveloperEdge_node(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeveloperEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Developer_id(ctx, field)
			case "title":
				return ec.fieldContext_Developer_title(ctx, field)
			case "url":
				return ec.fieldContext_Developer_url(ctx, field)
			case "logo":
				return ec.fieldContext_Developer_logo(ctx, field)
			case "createdAt":
				return ec.fieldContext_Developer_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Developer_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Developer", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeveloperEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *public_models.DeveloperEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeveloperEdge_cursor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNCursor2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeveloperEdge_cursor(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeveloperEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Cursor does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Document_id(ctx context.Context, field graphql.CollectedField, obj *public_models.Document) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Document_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Document_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Document",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Document_url(ctx context.Context, field graphql.CollectedField, obj *public_models.Document) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Document_url(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.URL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Document_url(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Document",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Document_path(ctx context.Context, field graphql.CollectedField, obj *public_models.Document) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Document_path(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Path, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Document_path(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Document",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Document_title(ctx context.Context, field graphql.CollectedField, obj *public_models.Document) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Document_title(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Title, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Document_title(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Document",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Document_fileName(ctx context.Context, field graphql.CollectedField, obj *public_models.Document) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Document_fileName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FileName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Document_fileName(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Document",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Document_fileType(ctx context.Context, field graphql.CollectedField, obj *public_models.Document) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Document_fileType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FileType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Document_fileType(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Document",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Document_createdAt(ctx context.Context, field graphql.CollectedField, obj *public_models.Document) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Document_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Document_createdAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Document",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Employee_id(ctx context.Context, field graphql.CollectedField, obj *public_models.Employee) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Employee_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Employee_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Employee",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Employee_name(ctx context.Context, field graphql.CollectedField, obj *public_models.Employee) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Employee_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Employee_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Employee",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Employee_surname(ctx context.Context, field graphql.CollectedField, obj *public_models.Employee) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Employee_surname(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Surname, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Employee_surname(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Employee",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Employee_patronymic(ctx context.Context, field graphql.CollectedField, obj *public_models.Employee) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Employee_patronymic(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Patronymic, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Employee_patronymic(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Employee",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Employee_birthday(ctx context.Context, field graphql.CollectedField, obj *public_models.Employee) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Employee_birthday(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Birthday, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalOTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Employee_birthday(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Employee",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Employee_email(ctx context.Context, field graphql.CollectedField, obj *public_models.Employee) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Employee_email(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Email, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Employee_email(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Employee",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Employee_phone(ctx context.Context, field graphql.CollectedField, obj *public_models.Employee) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Employee_phone(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Phone, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Employee_phone(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Employee",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Employee_internalInfo(ctx context.Context, field graphql.CollectedField, obj *public_models.Employee) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Employee_internalInfo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InternalInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Employee_internalInfo(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Employee",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Employee_shortDescription(ctx context.Context, field graphql.CollectedField, obj *public_models.Employee) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Employee_shortDescription(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ShortDescription, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Employee_shortDescription(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Employee",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Employee_description(ctx context.Context, field graphql.CollectedField, obj *public_models.Employee) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Employee_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Employee_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Employee",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Employee_isPublished(ctx context.Context, field graphql.CollectedField, obj *public_models.Employee) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Employee_isPublished(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsPublished, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Employee_isPublished(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Employee",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Employee_isDeleted(ctx context.Context, field graphql.CollectedField, obj *public_models.Employee) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Employee_isDeleted(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeleted, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Employee_isDeleted(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Employee",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Employee_avatar(ctx context.Context, field graphql.CollectedField, obj *public_models.Employee) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Employee_avatar(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Employee().Avatar(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*public_models.Image)
	fc.Result = res
	return ec.marshalOImage2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐImage(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Employee_avatar(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Employee",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Image_id(ctx, field)
			case "url":
				return ec.fieldContext_Image_url(ctx, field)
			case "path":
				return ec.fieldContext_Image_path(ctx, field)
			case "title":
				return ec.fieldContext_Image_title(ctx, field)
			case "fileName":
				return ec.fieldContext_Image_fileName(ctx, field)
			case "fileType":
				return ec.fieldContext_Image_fileType(ctx, field)
			case "previewUrl":
				return ec.fieldContext_Image_previewUrl(ctx, field)
			case "previewPath":
				return ec.fieldContext_Image_previewPath(ctx, field)
			case "blurHash":
				return ec.fieldContext_Image_blurHash(ctx, field)
			case "preset":
				return ec.fieldContext_Image_preset(ctx, field)
			case "createdAt":
				return ec.fieldContext_Image_createdAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Image", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Employee_publicImage(ctx context.Context, field graphql.CollectedField, obj *public_models.Employee) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Employee_publicImage(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Employee().PublicImage(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*public_models.Image)
	fc.Result = res
	return ec.marshalOImage2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐImage(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Employee_publicImage(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Employee",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Image_id(ctx, field)
			case "url":
				return ec.fieldContext_Image_url(ctx, field)
			case "path":
				return ec.fieldContext_Image_path(ctx, field)
			case "title":
				return ec.fieldContext_Image_title(ctx, field)
			case "fileName":
				return ec.fieldContext_Image_fileName(ctx, field)
			case "fileType":
				return ec.fieldContext_Image_fileType(ctx, field)
			case "previewUrl":
				return ec.fieldContext_Image_previewUrl(ctx, field)
			case "previewPath":
				return ec.fieldContext_Image_previewPath(ctx, field)
			case "blurHash":
				return ec.fieldContext_Image_blurHash(ctx, field)
			case "preset":
				return ec.fieldContext_Image_preset(ctx, field)
			case "createdAt":
				return ec.fieldContext_Image_createdAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Image", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Employee_createdAt(ctx context.Context, field graphql.CollectedField, obj *public_models.Employee) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Employee_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Employee_createdAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Employee",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Employee_updatedAt(ctx context.Context, field graphql.CollectedField, obj *public_models.Employee) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Employee_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Employee_updatedAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Employee",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _EmployeeConnection_totalCount(ctx context.Context, field graphql.CollectedField, obj *public_models.EmployeeConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_EmployeeConnection_totalCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_EmployeeConnection_totalCount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EmployeeConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _EmployeeConnection_edges(ctx context.Context, field graphql.CollectedField, obj *public_models.EmployeeConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_EmployeeConnection_edges(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*public_models.EmployeeEdge)
	fc.Result = res
	return ec.marshalNEmployeeEdge2ᚕᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐEmployeeEdgeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_EmployeeConnection_edges(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EmployeeConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "node":
				return ec.fieldContext_EmployeeEdge_node(ctx, field)
			case "cursor":
				return ec.fieldContext_EmployeeEdge_cursor(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type EmployeeEdge", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _EmployeeConnection_nodes(ctx context.Context, field graphql.CollectedField, obj *public_models.EmployeeConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_EmployeeConnection_nodes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Nodes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*public_models.Employee)
	fc.Result = res
	return ec.marshalNEmployee2ᚕᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐEmployeeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_EmployeeConnection_nodes(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EmployeeConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Employee_id(ctx, field)
			case "name":
				return ec.fieldContext_Employee_name(ctx, field)
			case "surname":
				return ec.fieldContext_Employee_surname(ctx, field)
			case "patronymic":
				return ec.fieldContext_Employee_patronymic(ctx, field)
			case "birthday":
				return ec.fieldContext_Employee_birthday(ctx, field)
			case "email":
				return ec.fieldContext_Employee_email(ctx, field)
			case "phone":
				return ec.fieldContext_Employee_phone(ctx, field)
			case "internalInfo":
				return ec.fieldContext_Employee_internalInfo(ctx, field)
			case "shortDescription":
				return ec.fieldContext_Employee_shortDescription(ctx, field)
			case "description":
				return ec.fieldContext_Employee_description(ctx, field)
			case "isPublished":
				return ec.fieldContext_Employee_isPublished(ctx, field)
			case "isDeleted":
				return ec.fieldContext_Employee_isDeleted(ctx, field)
			case "avatar":
				return ec.fieldContext_Employee_avatar(ctx, field)
			case "publicImage":
				return ec.fieldContext_Employee_publicImage(ctx, field)
			case "createdAt":
				return ec.fieldContext_Employee_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Employee_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Employee", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _EmployeeConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *public_models.EmployeeConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_EmployeeConnection_pageInfo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*public_models.PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_EmployeeConnection_pageInfo(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EmployeeConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "startCursor":
				return ec.fieldContext_PageInfo_startCursor(ctx, field)
			case "endCursor":
				return ec.fieldContext_PageInfo_endCursor(ctx, field)
			case "hasNextPage":
				return ec.fieldContext_PageInfo_hasNextPage(ctx, field)
			case "hasPreviousPage":
				return ec.fieldContext_PageInfo_hasPreviousPage(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PageInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _EmployeeEdge_node(ctx context.Context, field graphql.CollectedField, obj *public_models.EmployeeEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_EmployeeEdge_node(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*public_models.Employee)
	fc.Result = res
	return ec.marshalNEmployee2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐEmployee(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_EmployeeEdge_node(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EmployeeEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Employee_id(ctx, field)
			case "name":
				return ec.fieldContext_Employee_name(ctx, field)
			case "surname":
				return ec.fieldContext_Employee_surname(ctx, field)
			case "patronymic":
				return ec.fieldContext_Employee_patronymic(ctx, field)
			case "birthday":
				return ec.fieldContext_Employee_birthday(ctx, field)
			case "email":
				return ec.fieldContext_Employee_email(ctx, field)
			case "phone":
				return ec.fieldContext_Employee_phone(ctx, field)
			case "internalInfo":
				return ec.fieldContext_Employee_internalInfo(ctx, field)
			case "shortDescription":
				return ec.fieldContext_Employee_shortDescription(ctx, field)
			case "description":
				return ec.fieldContext_Employee_description(ctx, field)
			case "isPublished":
				return ec.fieldContext_Employee_isPublished(ctx, field)
			case "isDeleted":
				return ec.fieldContext_Employee_isDeleted(ctx, field)
			case "avatar":
				return ec.fieldContext_Employee_avatar(ctx, field)
			case "publicImage":
				return ec.fieldContext_Employee_publicImage(ctx, field)
			case "createdAt":
				return ec.fieldContext_Employee_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Employee_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Employee", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _EmployeeEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *public_models.EmployeeEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_EmployeeEdge_cursor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNCursor2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_EmployeeEdge_cursor(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EmployeeEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Cursor does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Image_id(ctx context.Context, field graphql.CollectedField, obj *public_models.Image) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Image_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Image_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Image",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Image_url(ctx context.Context, field graphql.CollectedField, obj *public_models.Image) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Image_url(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.URL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Image_url(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Image",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Image_path(ctx context.Context, field graphql.CollectedField, obj *public_models.Image) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Image_path(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Path, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Image_path(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Image",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Image_title(ctx context.Context, field graphql.CollectedField, obj *public_models.Image) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Image_title(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Title, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Image_title(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Image",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Image_fileName(ctx context.Context, field graphql.CollectedField, obj *public_models.Image) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Image_fileName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FileName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Image_fileName(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Image",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Image_fileType(ctx context.Context, field graphql.CollectedField, obj *public_models.Image) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Image_fileType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FileType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Image_fileType(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Image",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Image_previewUrl(ctx context.Context, field graphql.CollectedField, obj *public_models.Image) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Image_previewUrl(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PreviewURL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Image_previewUrl(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Image",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Image_previewPath(ctx context.Context, field graphql.CollectedField, obj *public_models.Image) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Image_previewPath(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PreviewPath, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Image_previewPath(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Image",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Image_blurHash(ctx context.Context, field graphql.CollectedField, obj *public_models.Image) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Image_blurHash(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BlurHash, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Image_blurHash(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Image",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Image_preset(ctx context.Context, field graphql.CollectedField, obj *public_models.Image) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Image_preset(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Preset, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(public_models.ImagePreset)
	fc.Result = res
	return ec.marshalNImagePreset2githubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐImagePreset(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Image_preset(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Image",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ImagePreset does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Image_createdAt(ctx context.Context, field graphql.CollectedField, obj *public_models.Image) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Image_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Image_createdAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Image",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_uploadImage(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_uploadImage(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UploadImage(rctx, fc.Args["input"].(public_models.ImageInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*public_models.Image)
	fc.Result = res
	return ec.marshalNImage2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐImage(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_uploadImage(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Image_id(ctx, field)
			case "url":
				return ec.fieldContext_Image_url(ctx, field)
			case "path":
				return ec.fieldContext_Image_path(ctx, field)
			case "title":
				return ec.fieldContext_Image_title(ctx, field)
			case "fileName":
				return ec.fieldContext_Image_fileName(ctx, field)
			case "fileType":
				return ec.fieldContext_Image_fileType(ctx, field)
			case "previewUrl":
				return ec.fieldContext_Image_previewUrl(ctx, field)
			case "previewPath":
				return ec.fieldContext_Image_previewPath(ctx, field)
			case "blurHash":
				return ec.fieldContext_Image_blurHash(ctx, field)
			case "preset":
				return ec.fieldContext_Image_preset(ctx, field)
			case "createdAt":
				return ec.fieldContext_Image_createdAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Image", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_uploadImage_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_uploadDocument(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_uploadDocument(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UploadDocument(rctx, fc.Args["input"].(public_models.DocumentInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*public_models.Document)
	fc.Result = res
	return ec.marshalNDocument2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐDocument(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_uploadDocument(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Document_id(ctx, field)
			case "url":
				return ec.fieldContext_Document_url(ctx, field)
			case "path":
				return ec.fieldContext_Document_path(ctx, field)
			case "title":
				return ec.fieldContext_Document_title(ctx, field)
			case "fileName":
				return ec.fieldContext_Document_fileName(ctx, field)
			case "fileType":
				return ec.fieldContext_Document_fileType(ctx, field)
			case "createdAt":
				return ec.fieldContext_Document_createdAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Document", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_uploadDocument_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createVacancyRequest(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createVacancyRequest(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateVacancyRequest(rctx, fc.Args["input"].(public_models.VacancyRequestInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createVacancyRequest(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createVacancyRequest_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Page_id(ctx context.Context, field graphql.CollectedField, obj *public_models.Page) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Page_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Page_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Page",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Page_url(ctx context.Context, field graphql.CollectedField, obj *public_models.Page) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Page_url(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.URL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Page_url(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Page",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Page_title(ctx context.Context, field graphql.CollectedField, obj *public_models.Page) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Page_title(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Title, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Page_title(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Page",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Page_description(ctx context.Context, field graphql.CollectedField, obj *public_models.Page) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Page_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Page_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Page",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Page_contentBlocks(ctx context.Context, field graphql.CollectedField, obj *public_models.Page) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Page_contentBlocks(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ContentBlocks, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*public_models.ContentBlock)
	fc.Result = res
	return ec.marshalNContentBlock2ᚕᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐContentBlockᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Page_contentBlocks(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Page",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "type":
				return ec.fieldContext_ContentBlock_type(ctx, field)
			case "data":
				return ec.fieldContext_ContentBlock_data(ctx, field)
			case "isVisible":
				return ec.fieldContext_ContentBlock_isVisible(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ContentBlock", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Page_status(ctx context.Context, field graphql.CollectedField, obj *public_models.Page) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Page_status(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(public_models.PublicationStatusEnum)
	fc.Result = res
	return ec.marshalNPublicationStatusEnum2githubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐPublicationStatusEnum(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Page_status(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Page",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type PublicationStatusEnum does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Page_createdAt(ctx context.Context, field graphql.CollectedField, obj *public_models.Page) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Page_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Page_createdAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Page",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Page_updatedAt(ctx context.Context, field graphql.CollectedField, obj *public_models.Page) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Page_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Page_updatedAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Page",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PageConnection_totalCount(ctx context.Context, field graphql.CollectedField, obj *public_models.PageConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PageConnection_totalCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PageConnection_totalCount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PageConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PageConnection_edges(ctx context.Context, field graphql.CollectedField, obj *public_models.PageConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PageConnection_edges(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*public_models.PageEdge)
	fc.Result = res
	return ec.marshalNPageEdge2ᚕᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐPageEdgeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PageConnection_edges(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PageConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "node":
				return ec.fieldContext_PageEdge_node(ctx, field)
			case "cursor":
				return ec.fieldContext_PageEdge_cursor(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PageEdge", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _PageConnection_nodes(ctx context.Context, field graphql.CollectedField, obj *public_models.PageConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PageConnection_nodes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Nodes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*public_models.Page)
	fc.Result = res
	return ec.marshalNPage2ᚕᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐPageᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PageConnection_nodes(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PageConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Page_id(ctx, field)
			case "url":
				return ec.fieldContext_Page_url(ctx, field)
			case "title":
				return ec.fieldContext_Page_title(ctx, field)
			case "description":
				return ec.fieldContext_Page_description(ctx, field)
			case "contentBlocks":
				return ec.fieldContext_Page_contentBlocks(ctx, field)
			case "status":
				return ec.fieldContext_Page_status(ctx, field)
			case "createdAt":
				return ec.fieldContext_Page_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Page_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Page", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _PageConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *public_models.PageConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PageConnection_pageInfo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*public_models.PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PageConnection_pageInfo(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PageConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "startCursor":
				return ec.fieldContext_PageInfo_startCursor(ctx, field)
			case "endCursor":
				return ec.fieldContext_PageInfo_endCursor(ctx, field)
			case "hasNextPage":
				return ec.fieldContext_PageInfo_hasNextPage(ctx, field)
			case "hasPreviousPage":
				return ec.fieldContext_PageInfo_hasPreviousPage(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PageInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _PageEdge_node(ctx context.Context, field graphql.CollectedField, obj *public_models.PageEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PageEdge_node(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*public_models.Page)
	fc.Result = res
	return ec.marshalNPage2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐPage(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PageEdge_node(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PageEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Page_id(ctx, field)
			case "url":
				return ec.fieldContext_Page_url(ctx, field)
			case "title":
				return ec.fieldContext_Page_title(ctx, field)
			case "description":
				return ec.fieldContext_Page_description(ctx, field)
			case "contentBlocks":
				return ec.fieldContext_Page_contentBlocks(ctx, field)
			case "status":
				return ec.fieldContext_Page_status(ctx, field)
			case "createdAt":
				return ec.fieldContext_Page_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Page_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Page", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _PageEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *public_models.PageEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PageEdge_cursor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNCursor2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PageEdge_cursor(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PageEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Cursor does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PageInfo_startCursor(ctx context.Context, field graphql.CollectedField, obj *public_models.PageInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PageInfo_startCursor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StartCursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOCursor2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PageInfo_startCursor(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PageInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Cursor does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PageInfo_endCursor(ctx context.Context, field graphql.CollectedField, obj *public_models.PageInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PageInfo_endCursor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EndCursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOCursor2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PageInfo_endCursor(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PageInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Cursor does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PageInfo_hasNextPage(ctx context.Context, field graphql.CollectedField, obj *public_models.PageInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PageInfo_hasNextPage(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HasNextPage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PageInfo_hasNextPage(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PageInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PageInfo_hasPreviousPage(ctx context.Context, field graphql.CollectedField, obj *public_models.PageInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PageInfo_hasPreviousPage(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HasPreviousPage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PageInfo_hasPreviousPage(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PageInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Property_id(ctx context.Context, field graphql.CollectedField, obj *public_models.Property) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Property_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Property_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Property",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Property_internalID(ctx context.Context, field graphql.CollectedField, obj *public_models.Property) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Property_internalID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InternalID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Property_internalID(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Property",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Property_deal(ctx context.Context, field graphql.CollectedField, obj *public_models.Property) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Property_deal(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Deal, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*public_models.DealEnum)
	fc.Result = res
	return ec.marshalODealEnum2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐDealEnum(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Property_deal(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Property",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DealEnum does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Property_type(ctx context.Context, field graphql.CollectedField, obj *public_models.Property) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Property_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*public_models.PropertyTypeEnum)
	fc.Result = res
	return ec.marshalOPropertyTypeEnum2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐPropertyTypeEnum(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Property_type(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Property",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type PropertyTypeEnum does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Property_subType(ctx context.Context, field graphql.CollectedField, obj *public_models.Property) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Property_subType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*public_models.PropertySubTypeEnum)
	fc.Result = res
	return ec.marshalOPropertySubTypeEnum2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐPropertySubTypeEnum(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Property_subType(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Property",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type PropertySubTypeEnum does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Property_commercialUsage(ctx context.Context, field graphql.CollectedField, obj *public_models.Property) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Property_commercialUsage(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CommercialUsage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]public_models.CommercialUsageEnum)
	fc.Result = res
	return ec.marshalOCommercialUsageEnum2ᚕgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐCommercialUsageEnum(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Property_commercialUsage(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Property",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type CommercialUsageEnum does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Property_fromDeveloper(ctx context.Context, field graphql.CollectedField, obj *public_models.Property) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Property_fromDeveloper(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FromDeveloper, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Property_fromDeveloper(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Property",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Property_inComplex(ctx context.Context, field graphql.CollectedField, obj *public_models.Property) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Property_inComplex(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InComplex, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Property_inComplex(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Property",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Property_complex(ctx context.Context, field graphql.CollectedField, obj *public_models.Property) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Property_complex(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Property().Complex(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*public_models.Complex)
	fc.Result = res
	return ec.marshalOComplex2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐComplex(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Property_complex(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Property",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Complex_id(ctx, field)
			case "title":
				return ec.fieldContext_Complex_title(ctx, field)
			case "description":
				return ec.fieldContext_Complex_description(ctx, field)
			case "address":
				return ec.fieldContext_Complex_address(ctx, field)
			case "lat":
				return ec.fieldContext_Complex_lat(ctx, field)
			case "lon":
				return ec.fieldContext_Complex_lon(ctx, field)
			case "cadastrNumber":
				return ec.fieldContext_Complex_cadastrNumber(ctx, field)
			case "seoText":
				return ec.fieldContext_Complex_seoText(ctx, field)
			case "youtubeLink":
				return ec.fieldContext_Complex_youtubeLink(ctx, field)
			case "tourLink":
				return ec.fieldContext_Complex_tourLink(ctx, field)
			case "inCity":
				return ec.fieldContext_Complex_inCity(ctx, field)
			case "cityDistance":
				return ec.fieldContext_Complex_cityDistance(ctx, field)
			case "region":
				return ec.fieldContext_Complex_region(ctx, field)
			case "subRegion":
				return ec.fieldContext_Complex_subRegion(ctx, field)
			case "developer":
				return ec.fieldContext_Complex_developer(ctx, field)
			case "isReady":
				return ec.fieldContext_Complex_isReady(ctx, field)
			case "readinessQuarter":
				return ec.fieldContext_Complex_readinessQuarter(ctx, field)
			case "readinessYear":
				return ec.fieldContext_Complex_readinessYear(ctx, field)
			case "images":
				return ec.fieldContext_Complex_images(ctx, field)
			case "documents":
				return ec.fieldContext_Complex_documents(ctx, field)
			case "projectDeclarations":
				return ec.fieldContext_Complex_projectDeclarations(ctx, field)
			case "createdAt":
				return ec.fieldContext_Complex_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Complex_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Complex", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Property_complexHouse(ctx context.Context, field graphql.CollectedField, obj *public_models.Property) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Property_complexHouse(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Property().ComplexHouse(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*public_models.ComplexHouse)
	fc.Result = res
	return ec.marshalOComplexHouse2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐComplexHouse(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Property_complexHouse(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Property",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ComplexHouse_id(ctx, field)
			case "complex":
				return ec.fieldContext_ComplexHouse_complex(ctx, field)
			case "title":
				return ec.fieldContext_ComplexHouse_title(ctx, field)
			case "description":
				return ec.fieldContext_ComplexHouse_description(ctx, field)
			case "address":
				return ec.fieldContext_ComplexHouse_address(ctx, field)
			case "lat":
				return ec.fieldContext_ComplexHouse_lat(ctx, field)
			case "lon":
				return ec.fieldContext_ComplexHouse_lon(ctx, field)
			case "cadastrNumber":
				return ec.fieldContext_ComplexHouse_cadastrNumber(ctx, field)
			case "seoText":
				return ec.fieldContext_ComplexHouse_seoText(ctx, field)
			case "youtubeLink":
				return ec.fieldContext_ComplexHouse_youtubeLink(ctx, field)
			case "tourLink":
				return ec.fieldContext_ComplexHouse_tourLink(ctx, field)
			case "isReady":
				return ec.fieldContext_ComplexHouse_isReady(ctx, field)
			case "readinessQuarter":
				return ec.fieldContext_ComplexHouse_readinessQuarter(ctx, field)
			case "readinessYear":
				return ec.fieldContext_ComplexHouse_readinessYear(ctx, field)
			case "images":
				return ec.fieldContext_ComplexHouse_images(ctx, field)
			case "documents":
				return ec.fieldContext_ComplexHouse_documents(ctx, field)
			case "projectDeclarations":
				return ec.fieldContext_ComplexHouse_projectDeclarations(ctx, field)
			case "createdAt":
				return ec.fieldContext_ComplexHouse_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_ComplexHouse_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ComplexHouse", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Property_inVillage(ctx context.Context, field graphql.CollectedField, obj *public_models.Property) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Property_inVillage(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InVillage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Property_inVillage(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Property",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Property_village(ctx context.Context, field graphql.CollectedField, obj *public_models.Property) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Property_village(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Property().Village(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*public_models.Village)
	fc.Result = res
	return ec.marshalOVillage2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐVillage(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Property_village(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Property",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Village_id(ctx, field)
			case "title":
				return ec.fieldContext_Village_title(ctx, field)
			case "description":
				return ec.fieldContext_Village_description(ctx, field)
			case "address":
				return ec.fieldContext_Village_address(ctx, field)
			case "lat":
				return ec.fieldContext_Village_lat(ctx, field)
			case "lon":
				return ec.fieldContext_Village_lon(ctx, field)
			case "cadastrNumber":
				return ec.fieldContext_Village_cadastrNumber(ctx, field)
			case "seoText":
				return ec.fieldContext_Village_seoText(ctx, field)
			case "youtubeLink":
				return ec.fieldContext_Village_youtubeLink(ctx, field)
			case "tourLink":
				return ec.fieldContext_Village_tourLink(ctx, field)
			case "inCity":
				return ec.fieldContext_Village_inCity(ctx, field)
			case "cityDistance":
				return ec.fieldContext_Village_cityDistance(ctx, field)
			case "region":
				return ec.fieldContext_Village_region(ctx, field)
			case "subRegion":
				return ec.fieldContext_Village_subRegion(ctx, field)
			case "developer":
				return ec.fieldContext_Village_developer(ctx, field)
			case "isReady":
				return ec.fieldContext_Village_isReady(ctx, field)
			case "readinessQuarter":
				return ec.fieldContext_Village_readinessQuarter(ctx, field)
			case "readinessYear":
				return ec.fieldContext_Village_readinessYear(ctx, field)
			case "images":
				return ec.fieldContext_Village_images(ctx, field)
			case "documents":
				return ec.fieldContext_Village_documents(ctx, field)
			case "projectDeclarations":
				return ec.fieldContext_Village_projectDeclarations(ctx, field)
			case "createdAt":
				return ec.fieldContext_Village_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Village_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Village", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Property_isHot(ctx context.Context, field graphql.CollectedField, obj *public_models.Property) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Property_isHot(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsHot, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Property_isHot(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Property",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Property_title(ctx context.Context, field graphql.CollectedField, obj *public_models.Property) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Property_title(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Title, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Property_title(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Property",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Property_description(ctx context.Context, field graphql.CollectedField, obj *public_models.Property) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Property_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Property_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Property",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Property_address(ctx context.Context, field graphql.CollectedField, obj *public_models.Property) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Property_address(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Address, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Property_address(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Property",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Property_lat(ctx context.Context, field graphql.CollectedField, obj *public_models.Property) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Property_lat(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Lat, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Property_lat(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Property",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Property_lon(ctx context.Context, field graphql.CollectedField, obj *public_models.Property) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Property_lon(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Lon, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Property_lon(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Property",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Property_cadastrNumber(ctx context.Context, field graphql.CollectedField, obj *public_models.Property) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Property_cadastrNumber(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CadastrNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Property_cadastrNumber(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Property",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Property_seoText(ctx context.Context, field graphql.CollectedField, obj *public_models.Property) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Property_seoText(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SeoText, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Property_seoText(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Property",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Property_youtubeLink(ctx context.Context, field graphql.CollectedField, obj *public_models.Property) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Property_youtubeLink(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.YoutubeLink, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Property_youtubeLink(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Property",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Property_tourLink(ctx context.Context, field graphql.CollectedField, obj *public_models.Property) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Property_tourLink(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TourLink, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Property_tourLink(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Property",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Property_documents(ctx context.Context, field graphql.CollectedField, obj *public_models.Property) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Property_documents(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Property().Documents(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*public_models.Document)
	fc.Result = res
	return ec.marshalODocument2ᚕᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐDocument(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Property_documents(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Property",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Document_id(ctx, field)
			case "url":
				return ec.fieldContext_Document_url(ctx, field)
			case "path":
				return ec.fieldContext_Document_path(ctx, field)
			case "title":
				return ec.fieldContext_Document_title(ctx, field)
			case "fileName":
				return ec.fieldContext_Document_fileName(ctx, field)
			case "fileType":
				return ec.fieldContext_Document_fileType(ctx, field)
			case "createdAt":
				return ec.fieldContext_Document_createdAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Document", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Property_images(ctx context.Context, field graphql.CollectedField, obj *public_models.Property) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Property_images(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Property().Images(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*public_models.Image)
	fc.Result = res
	return ec.marshalOImage2ᚕᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐImage(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Property_images(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Property",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Image_id(ctx, field)
			case "url":
				return ec.fieldContext_Image_url(ctx, field)
			case "path":
				return ec.fieldContext_Image_path(ctx, field)
			case "title":
				return ec.fieldContext_Image_title(ctx, field)
			case "fileName":
				return ec.fieldContext_Image_fileName(ctx, field)
			case "fileType":
				return ec.fieldContext_Image_fileType(ctx, field)
			case "previewUrl":
				return ec.fieldContext_Image_previewUrl(ctx, field)
			case "previewPath":
				return ec.fieldContext_Image_previewPath(ctx, field)
			case "blurHash":
				return ec.fieldContext_Image_blurHash(ctx, field)
			case "preset":
				return ec.fieldContext_Image_preset(ctx, field)
			case "createdAt":
				return ec.fieldContext_Image_createdAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Image", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Property_refreshDate(ctx context.Context, field graphql.CollectedField, obj *public_models.Property) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Property_refreshDate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RefreshDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalOTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Property_refreshDate(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Property",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Property_price(ctx context.Context, field graphql.CollectedField, obj *public_models.Property) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Property_price(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Price, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Property_price(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Property",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Property_pricePerMeter(ctx context.Context, field graphql.CollectedField, obj *public_models.Property) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Property_pricePerMeter(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PricePerMeter, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Property_pricePerMeter(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Property",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Property_pricePerAr(ctx context.Context, field graphql.CollectedField, obj *public_models.Property) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Property_pricePerAr(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PricePerAr, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Property_pricePerAr(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Property",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Property_isReady(ctx context.Context, field graphql.CollectedField, obj *public_models.Property) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Property_isReady(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsReady, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Property_isReady(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Property",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Property_readinessYear(ctx context.Context, field graphql.CollectedField, obj *public_models.Property) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Property_readinessYear(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ReadinessYear, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Property_readinessYear(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Property",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Property_readinessQuarter(ctx context.Context, field graphql.CollectedField, obj *public_models.Property) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Property_readinessQuarter(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ReadinessQuarter, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*public_models.QuarterEnum)
	fc.Result = res
	return ec.marshalOQuarterEnum2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐQuarterEnum(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Property_readinessQuarter(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Property",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type QuarterEnum does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Property_inCity(ctx context.Context, field graphql.CollectedField, obj *public_models.Property) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Property_inCity(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InCity, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Property_inCity(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Property",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Property_cityDistance(ctx context.Context, field graphql.CollectedField, obj *public_models.Property) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Property_cityDistance(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CityDistance, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Property_cityDistance(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Property",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Property_region(ctx context.Context, field graphql.CollectedField, obj *public_models.Property) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Property_region(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Region, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Property_region(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Property",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Property_subRegion(ctx context.Context, field graphql.CollectedField, obj *public_models.Property) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Property_subRegion(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubRegion, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Property_subRegion(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Property",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Property_rooms(ctx context.Context, field graphql.CollectedField, obj *public_models.Property) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Property_rooms(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Rooms, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Property_rooms(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Property",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Property_area(ctx context.Context, field graphql.CollectedField, obj *public_models.Property) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Property_area(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Area, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Property_area(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Property",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Property_landArea(ctx context.Context, field graphql.CollectedField, obj *public_models.Property) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Property_landArea(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LandArea, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Property_landArea(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Property",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Property_livingArea(ctx context.Context, field graphql.CollectedField, obj *public_models.Property) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Property_livingArea(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LivingArea, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Property_livingArea(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Property",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Property_kitchenArea(ctx context.Context, field graphql.CollectedField, obj *public_models.Property) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Property_kitchenArea(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.KitchenArea, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Property_kitchenArea(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Property",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Property_toiletType(ctx context.Context, field graphql.CollectedField, obj *public_models.Property) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Property_toiletType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ToiletType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*public_models.ToiletTypeEnum)
	fc.Result = res
	return ec.marshalOToiletTypeEnum2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐToiletTypeEnum(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Property_toiletType(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Property",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ToiletTypeEnum does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Property_rehabType(ctx context.Context, field graphql.CollectedField, obj *public_models.Property) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Property_rehabType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RehabType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*public_models.RehabTypeEnum)
	fc.Result = res
	return ec.marshalORehabTypeEnum2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐRehabTypeEnum(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Property_rehabType(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Property",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type RehabTypeEnum does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Property_floor(ctx context.Context, field graphql.CollectedField, obj *public_models.Property) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Property_floor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Floor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Property_floor(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Property",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Property_floors(ctx context.Context, field graphql.CollectedField, obj *public_models.Property) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Property_floors(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Floors, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Property_floors(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Property",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Property_ceilingHeight(ctx context.Context, field graphql.CollectedField, obj *public_models.Property) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Property_ceilingHeight(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CeilingHeight, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Property_ceilingHeight(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Property",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Property_comissionPercent(ctx context.Context, field graphql.CollectedField, obj *public_models.Property) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Property_comissionPercent(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ComissionPercent, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Property_comissionPercent(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Property",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Property_comissionAmount(ctx context.Context, field graphql.CollectedField, obj *public_models.Property) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Property_comissionAmount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ComissionAmount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Property_comissionAmount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Property",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Property_createdAt(ctx context.Context, field graphql.CollectedField, obj *public_models.Property) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Property_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Property_createdAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Property",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Property_updatedAt(ctx context.Context, field graphql.CollectedField, obj *public_models.Property) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Property_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Property_updatedAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Property",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PropertyConnection_totalCount(ctx context.Context, field graphql.CollectedField, obj *public_models.PropertyConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PropertyConnection_totalCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PropertyConnection_totalCount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PropertyConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PropertyConnection_edges(ctx context.Context, field graphql.CollectedField, obj *public_models.PropertyConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PropertyConnection_edges(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*public_models.PropertyEdge)
	fc.Result = res
	return ec.marshalNPropertyEdge2ᚕᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐPropertyEdgeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PropertyConnection_edges(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PropertyConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "node":
				return ec.fieldContext_PropertyEdge_node(ctx, field)
			case "cursor":
				return ec.fieldContext_PropertyEdge_cursor(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PropertyEdge", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _PropertyConnection_nodes(ctx context.Context, field graphql.CollectedField, obj *public_models.PropertyConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PropertyConnection_nodes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Nodes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*public_models.Property)
	fc.Result = res
	return ec.marshalNProperty2ᚕᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐPropertyᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PropertyConnection_nodes(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PropertyConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Property_id(ctx, field)
			case "internalID":
				return ec.fieldContext_Property_internalID(ctx, field)
			case "deal":
				return ec.fieldContext_Property_deal(ctx, field)
			case "type":
				return ec.fieldContext_Property_type(ctx, field)
			case "subType":
				return ec.fieldContext_Property_subType(ctx, field)
			case "commercialUsage":
				return ec.fieldContext_Property_commercialUsage(ctx, field)
			case "fromDeveloper":
				return ec.fieldContext_Property_fromDeveloper(ctx, field)
			case "inComplex":
				return ec.fieldContext_Property_inComplex(ctx, field)
			case "complex":
				return ec.fieldContext_Property_complex(ctx, field)
			case "complexHouse":
				return ec.fieldContext_Property_complexHouse(ctx, field)
			case "inVillage":
				return ec.fieldContext_Property_inVillage(ctx, field)
			case "village":
				return ec.fieldContext_Property_village(ctx, field)
			case "isHot":
				return ec.fieldContext_Property_isHot(ctx, field)
			case "title":
				return ec.fieldContext_Property_title(ctx, field)
			case "description":
				return ec.fieldContext_Property_description(ctx, field)
			case "address":
				return ec.fieldContext_Property_address(ctx, field)
			case "lat":
				return ec.fieldContext_Property_lat(ctx, field)
			case "lon":
				return ec.fieldContext_Property_lon(ctx, field)
			case "cadastrNumber":
				return ec.fieldContext_Property_cadastrNumber(ctx, field)
			case "seoText":
				return ec.fieldContext_Property_seoText(ctx, field)
			case "youtubeLink":
				return ec.fieldContext_Property_youtubeLink(ctx, field)
			case "tourLink":
				return ec.fieldContext_Property_tourLink(ctx, field)
			case "documents":
				return ec.fieldContext_Property_documents(ctx, field)
			case "images":
				return ec.fieldContext_Property_images(ctx, field)
			case "refreshDate":
				return ec.fieldContext_Property_refreshDate(ctx, field)
			case "price":
				return ec.fieldContext_Property_price(ctx, field)
			case "pricePerMeter":
				return ec.fieldContext_Property_pricePerMeter(ctx, field)
			case "pricePerAr":
				return ec.fieldContext_Property_pricePerAr(ctx, field)
			case "isReady":
				return ec.fieldContext_Property_isReady(ctx, field)
			case "readinessYear":
				return ec.fieldContext_Property_readinessYear(ctx, field)
			case "readinessQuarter":
				return ec.fieldContext_Property_readinessQuarter(ctx, field)
			case "inCity":
				return ec.fieldContext_Property_inCity(ctx, field)
			case "cityDistance":
				return ec.fieldContext_Property_cityDistance(ctx, field)
			case "region":
				return ec.fieldContext_Property_region(ctx, field)
			case "subRegion":
				return ec.fieldContext_Property_subRegion(ctx, field)
			case "rooms":
				return ec.fieldContext_Property_rooms(ctx, field)
			case "area":
				return ec.fieldContext_Property_area(ctx, field)
			case "landArea":
				return ec.fieldContext_Property_landArea(ctx, field)
			case "livingArea":
				return ec.fieldContext_Property_livingArea(ctx, field)
			case "kitchenArea":
				return ec.fieldContext_Property_kitchenArea(ctx, field)
			case "toiletType":
				return ec.fieldContext_Property_toiletType(ctx, field)
			case "rehabType":
				return ec.fieldContext_Property_rehabType(ctx, field)
			case "floor":
				return ec.fieldContext_Property_floor(ctx, field)
			case "floors":
				return ec.fieldContext_Property_floors(ctx, field)
			case "ceilingHeight":
				return ec.fieldContext_Property_ceilingHeight(ctx, field)
			case "comissionPercent":
				return ec.fieldContext_Property_comissionPercent(ctx, field)
			case "comissionAmount":
				return ec.fieldContext_Property_comissionAmount(ctx, field)
			case "createdAt":
				return ec.fieldContext_Property_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Property_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Property", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _PropertyConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *public_models.PropertyConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PropertyConnection_pageInfo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*public_models.PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PropertyConnection_pageInfo(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PropertyConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "startCursor":
				return ec.fieldContext_PageInfo_startCursor(ctx, field)
			case "endCursor":
				return ec.fieldContext_PageInfo_endCursor(ctx, field)
			case "hasNextPage":
				return ec.fieldContext_PageInfo_hasNextPage(ctx, field)
			case "hasPreviousPage":
				return ec.fieldContext_PageInfo_hasPreviousPage(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PageInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _PropertyEdge_node(ctx context.Context, field graphql.CollectedField, obj *public_models.PropertyEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PropertyEdge_node(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*public_models.Property)
	fc.Result = res
	return ec.marshalNProperty2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐProperty(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PropertyEdge_node(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PropertyEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Property_id(ctx, field)
			case "internalID":
				return ec.fieldContext_Property_internalID(ctx, field)
			case "deal":
				return ec.fieldContext_Property_deal(ctx, field)
			case "type":
				return ec.fieldContext_Property_type(ctx, field)
			case "subType":
				return ec.fieldContext_Property_subType(ctx, field)
			case "commercialUsage":
				return ec.fieldContext_Property_commercialUsage(ctx, field)
			case "fromDeveloper":
				return ec.fieldContext_Property_fromDeveloper(ctx, field)
			case "inComplex":
				return ec.fieldContext_Property_inComplex(ctx, field)
			case "complex":
				return ec.fieldContext_Property_complex(ctx, field)
			case "complexHouse":
				return ec.fieldContext_Property_complexHouse(ctx, field)
			case "inVillage":
				return ec.fieldContext_Property_inVillage(ctx, field)
			case "village":
				return ec.fieldContext_Property_village(ctx, field)
			case "isHot":
				return ec.fieldContext_Property_isHot(ctx, field)
			case "title":
				return ec.fieldContext_Property_title(ctx, field)
			case "description":
				return ec.fieldContext_Property_description(ctx, field)
			case "address":
				return ec.fieldContext_Property_address(ctx, field)
			case "lat":
				return ec.fieldContext_Property_lat(ctx, field)
			case "lon":
				return ec.fieldContext_Property_lon(ctx, field)
			case "cadastrNumber":
				return ec.fieldContext_Property_cadastrNumber(ctx, field)
			case "seoText":
				return ec.fieldContext_Property_seoText(ctx, field)
			case "youtubeLink":
				return ec.fieldContext_Property_youtubeLink(ctx, field)
			case "tourLink":
				return ec.fieldContext_Property_tourLink(ctx, field)
			case "documents":
				return ec.fieldContext_Property_documents(ctx, field)
			case "images":
				return ec.fieldContext_Property_images(ctx, field)
			case "refreshDate":
				return ec.fieldContext_Property_refreshDate(ctx, field)
			case "price":
				return ec.fieldContext_Property_price(ctx, field)
			case "pricePerMeter":
				return ec.fieldContext_Property_pricePerMeter(ctx, field)
			case "pricePerAr":
				return ec.fieldContext_Property_pricePerAr(ctx, field)
			case "isReady":
				return ec.fieldContext_Property_isReady(ctx, field)
			case "readinessYear":
				return ec.fieldContext_Property_readinessYear(ctx, field)
			case "readinessQuarter":
				return ec.fieldContext_Property_readinessQuarter(ctx, field)
			case "inCity":
				return ec.fieldContext_Property_inCity(ctx, field)
			case "cityDistance":
				return ec.fieldContext_Property_cityDistance(ctx, field)
			case "region":
				return ec.fieldContext_Property_region(ctx, field)
			case "subRegion":
				return ec.fieldContext_Property_subRegion(ctx, field)
			case "rooms":
				return ec.fieldContext_Property_rooms(ctx, field)
			case "area":
				return ec.fieldContext_Property_area(ctx, field)
			case "landArea":
				return ec.fieldContext_Property_landArea(ctx, field)
			case "livingArea":
				return ec.fieldContext_Property_livingArea(ctx, field)
			case "kitchenArea":
				return ec.fieldContext_Property_kitchenArea(ctx, field)
			case "toiletType":
				return ec.fieldContext_Property_toiletType(ctx, field)
			case "rehabType":
				return ec.fieldContext_Property_rehabType(ctx, field)
			case "floor":
				return ec.fieldContext_Property_floor(ctx, field)
			case "floors":
				return ec.fieldContext_Property_floors(ctx, field)
			case "ceilingHeight":
				return ec.fieldContext_Property_ceilingHeight(ctx, field)
			case "comissionPercent":
				return ec.fieldContext_Property_comissionPercent(ctx, field)
			case "comissionAmount":
				return ec.fieldContext_Property_comissionAmount(ctx, field)
			case "createdAt":
				return ec.fieldContext_Property_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Property_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Property", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _PropertyEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *public_models.PropertyEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PropertyEdge_cursor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNCursor2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PropertyEdge_cursor(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PropertyEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Cursor does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_complexHouses(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_complexHouses(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ComplexHouses(rctx, fc.Args["ids"].([]string), fc.Args["start"].(*int), fc.Args["limit"].(*int), fc.Args["sort"].(*public_models.Sort), fc.Args["search"].(*string), fc.Args["filter"].(*public_models.ComplexHouseFilter))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*public_models.ComplexHouseConnection)
	fc.Result = res
	return ec.marshalNComplexHouseConnection2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐComplexHouseConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_complexHouses(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "totalCount":
				return ec.fieldContext_ComplexHouseConnection_totalCount(ctx, field)
			case "edges":
				return ec.fieldContext_ComplexHouseConnection_edges(ctx, field)
			case "nodes":
				return ec.fieldContext_ComplexHouseConnection_nodes(ctx, field)
			case "pageInfo":
				return ec.fieldContext_ComplexHouseConnection_pageInfo(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ComplexHouseConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_complexHouses_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_complexHouse(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_complexHouse(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ComplexHouse(rctx, fc.Args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*public_models.ComplexHouse)
	fc.Result = res
	return ec.marshalNComplexHouse2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐComplexHouse(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_complexHouse(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ComplexHouse_id(ctx, field)
			case "complex":
				return ec.fieldContext_ComplexHouse_complex(ctx, field)
			case "title":
				return ec.fieldContext_ComplexHouse_title(ctx, field)
			case "description":
				return ec.fieldContext_ComplexHouse_description(ctx, field)
			case "address":
				return ec.fieldContext_ComplexHouse_address(ctx, field)
			case "lat":
				return ec.fieldContext_ComplexHouse_lat(ctx, field)
			case "lon":
				return ec.fieldContext_ComplexHouse_lon(ctx, field)
			case "cadastrNumber":
				return ec.fieldContext_ComplexHouse_cadastrNumber(ctx, field)
			case "seoText":
				return ec.fieldContext_ComplexHouse_seoText(ctx, field)
			case "youtubeLink":
				return ec.fieldContext_ComplexHouse_youtubeLink(ctx, field)
			case "tourLink":
				return ec.fieldContext_ComplexHouse_tourLink(ctx, field)
			case "isReady":
				return ec.fieldContext_ComplexHouse_isReady(ctx, field)
			case "readinessQuarter":
				return ec.fieldContext_ComplexHouse_readinessQuarter(ctx, field)
			case "readinessYear":
				return ec.fieldContext_ComplexHouse_readinessYear(ctx, field)
			case "images":
				return ec.fieldContext_ComplexHouse_images(ctx, field)
			case "documents":
				return ec.fieldContext_ComplexHouse_documents(ctx, field)
			case "projectDeclarations":
				return ec.fieldContext_ComplexHouse_projectDeclarations(ctx, field)
			case "createdAt":
				return ec.fieldContext_ComplexHouse_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_ComplexHouse_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ComplexHouse", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_complexHouse_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_complexes(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_complexes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Complexes(rctx, fc.Args["ids"].([]string), fc.Args["start"].(*int), fc.Args["limit"].(*int), fc.Args["sort"].(*public_models.Sort), fc.Args["search"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*public_models.ComplexConnection)
	fc.Result = res
	return ec.marshalNComplexConnection2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐComplexConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_complexes(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "totalCount":
				return ec.fieldContext_ComplexConnection_totalCount(ctx, field)
			case "edges":
				return ec.fieldContext_ComplexConnection_edges(ctx, field)
			case "nodes":
				return ec.fieldContext_ComplexConnection_nodes(ctx, field)
			case "pageInfo":
				return ec.fieldContext_ComplexConnection_pageInfo(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ComplexConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_complexes_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_complex(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_complex(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Complex(rctx, fc.Args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*public_models.Complex)
	fc.Result = res
	return ec.marshalNComplex2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐComplex(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_complex(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Complex_id(ctx, field)
			case "title":
				return ec.fieldContext_Complex_title(ctx, field)
			case "description":
				return ec.fieldContext_Complex_description(ctx, field)
			case "address":
				return ec.fieldContext_Complex_address(ctx, field)
			case "lat":
				return ec.fieldContext_Complex_lat(ctx, field)
			case "lon":
				return ec.fieldContext_Complex_lon(ctx, field)
			case "cadastrNumber":
				return ec.fieldContext_Complex_cadastrNumber(ctx, field)
			case "seoText":
				return ec.fieldContext_Complex_seoText(ctx, field)
			case "youtubeLink":
				return ec.fieldContext_Complex_youtubeLink(ctx, field)
			case "tourLink":
				return ec.fieldContext_Complex_tourLink(ctx, field)
			case "inCity":
				return ec.fieldContext_Complex_inCity(ctx, field)
			case "cityDistance":
				return ec.fieldContext_Complex_cityDistance(ctx, field)
			case "region":
				return ec.fieldContext_Complex_region(ctx, field)
			case "subRegion":
				return ec.fieldContext_Complex_subRegion(ctx, field)
			case "developer":
				return ec.fieldContext_Complex_developer(ctx, field)
			case "isReady":
				return ec.fieldContext_Complex_isReady(ctx, field)
			case "readinessQuarter":
				return ec.fieldContext_Complex_readinessQuarter(ctx, field)
			case "readinessYear":
				return ec.fieldContext_Complex_readinessYear(ctx, field)
			case "images":
				return ec.fieldContext_Complex_images(ctx, field)
			case "documents":
				return ec.fieldContext_Complex_documents(ctx, field)
			case "projectDeclarations":
				return ec.fieldContext_Complex_projectDeclarations(ctx, field)
			case "createdAt":
				return ec.fieldContext_Complex_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Complex_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Complex", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_complex_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_developers(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_developers(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Developers(rctx, fc.Args["ids"].([]string), fc.Args["start"].(*int), fc.Args["limit"].(*int), fc.Args["sort"].(*public_models.Sort), fc.Args["search"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*public_models.DeveloperConnection)
	fc.Result = res
	return ec.marshalNDeveloperConnection2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐDeveloperConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_developers(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "totalCount":
				return ec.fieldContext_DeveloperConnection_totalCount(ctx, field)
			case "edges":
				return ec.fieldContext_DeveloperConnection_edges(ctx, field)
			case "nodes":
				return ec.fieldContext_DeveloperConnection_nodes(ctx, field)
			case "pageInfo":
				return ec.fieldContext_DeveloperConnection_pageInfo(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DeveloperConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_developers_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_developer(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_developer(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Developer(rctx, fc.Args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*public_models.Developer)
	fc.Result = res
	return ec.marshalNDeveloper2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐDeveloper(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_developer(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Developer_id(ctx, field)
			case "title":
				return ec.fieldContext_Developer_title(ctx, field)
			case "url":
				return ec.fieldContext_Developer_url(ctx, field)
			case "logo":
				return ec.fieldContext_Developer_logo(ctx, field)
			case "createdAt":
				return ec.fieldContext_Developer_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Developer_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Developer", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_developer_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_employees(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_employees(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Employees(rctx, fc.Args["ids"].([]string), fc.Args["start"].(*int), fc.Args["limit"].(*int), fc.Args["sort"].(*public_models.Sort), fc.Args["search"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*public_models.EmployeeConnection)
	fc.Result = res
	return ec.marshalNEmployeeConnection2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐEmployeeConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_employees(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "totalCount":
				return ec.fieldContext_EmployeeConnection_totalCount(ctx, field)
			case "edges":
				return ec.fieldContext_EmployeeConnection_edges(ctx, field)
			case "nodes":
				return ec.fieldContext_EmployeeConnection_nodes(ctx, field)
			case "pageInfo":
				return ec.fieldContext_EmployeeConnection_pageInfo(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type EmployeeConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_employees_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_employee(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_employee(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Employee(rctx, fc.Args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*public_models.Employee)
	fc.Result = res
	return ec.marshalNEmployee2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐEmployee(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_employee(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Employee_id(ctx, field)
			case "name":
				return ec.fieldContext_Employee_name(ctx, field)
			case "surname":
				return ec.fieldContext_Employee_surname(ctx, field)
			case "patronymic":
				return ec.fieldContext_Employee_patronymic(ctx, field)
			case "birthday":
				return ec.fieldContext_Employee_birthday(ctx, field)
			case "email":
				return ec.fieldContext_Employee_email(ctx, field)
			case "phone":
				return ec.fieldContext_Employee_phone(ctx, field)
			case "internalInfo":
				return ec.fieldContext_Employee_internalInfo(ctx, field)
			case "shortDescription":
				return ec.fieldContext_Employee_shortDescription(ctx, field)
			case "description":
				return ec.fieldContext_Employee_description(ctx, field)
			case "isPublished":
				return ec.fieldContext_Employee_isPublished(ctx, field)
			case "isDeleted":
				return ec.fieldContext_Employee_isDeleted(ctx, field)
			case "avatar":
				return ec.fieldContext_Employee_avatar(ctx, field)
			case "publicImage":
				return ec.fieldContext_Employee_publicImage(ctx, field)
			case "createdAt":
				return ec.fieldContext_Employee_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Employee_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Employee", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_employee_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_generatePdf(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_generatePdf(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GeneratePDF(rctx, fc.Args["content"].(string), fc.Args["fileName"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_generatePdf(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_generatePdf_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_page(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_page(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Page(rctx, fc.Args["url"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*public_models.Page)
	fc.Result = res
	return ec.marshalNPage2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐPage(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_page(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Page_id(ctx, field)
			case "url":
				return ec.fieldContext_Page_url(ctx, field)
			case "title":
				return ec.fieldContext_Page_title(ctx, field)
			case "description":
				return ec.fieldContext_Page_description(ctx, field)
			case "contentBlocks":
				return ec.fieldContext_Page_contentBlocks(ctx, field)
			case "status":
				return ec.fieldContext_Page_status(ctx, field)
			case "createdAt":
				return ec.fieldContext_Page_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Page_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Page", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_page_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_properties(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_properties(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Properties(rctx, fc.Args["ids"].([]string), fc.Args["start"].(*int), fc.Args["limit"].(*int), fc.Args["sort"].(*public_models.Sort), fc.Args["search"].(*string), fc.Args["filter"].(*public_models.PropertyFilter))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*public_models.PropertyConnection)
	fc.Result = res
	return ec.marshalNPropertyConnection2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐPropertyConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_properties(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "totalCount":
				return ec.fieldContext_PropertyConnection_totalCount(ctx, field)
			case "edges":
				return ec.fieldContext_PropertyConnection_edges(ctx, field)
			case "nodes":
				return ec.fieldContext_PropertyConnection_nodes(ctx, field)
			case "pageInfo":
				return ec.fieldContext_PropertyConnection_pageInfo(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PropertyConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_properties_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_property(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_property(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Property(rctx, fc.Args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*public_models.Property)
	fc.Result = res
	return ec.marshalNProperty2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐProperty(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_property(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Property_id(ctx, field)
			case "internalID":
				return ec.fieldContext_Property_internalID(ctx, field)
			case "deal":
				return ec.fieldContext_Property_deal(ctx, field)
			case "type":
				return ec.fieldContext_Property_type(ctx, field)
			case "subType":
				return ec.fieldContext_Property_subType(ctx, field)
			case "commercialUsage":
				return ec.fieldContext_Property_commercialUsage(ctx, field)
			case "fromDeveloper":
				return ec.fieldContext_Property_fromDeveloper(ctx, field)
			case "inComplex":
				return ec.fieldContext_Property_inComplex(ctx, field)
			case "complex":
				return ec.fieldContext_Property_complex(ctx, field)
			case "complexHouse":
				return ec.fieldContext_Property_complexHouse(ctx, field)
			case "inVillage":
				return ec.fieldContext_Property_inVillage(ctx, field)
			case "village":
				return ec.fieldContext_Property_village(ctx, field)
			case "isHot":
				return ec.fieldContext_Property_isHot(ctx, field)
			case "title":
				return ec.fieldContext_Property_title(ctx, field)
			case "description":
				return ec.fieldContext_Property_description(ctx, field)
			case "address":
				return ec.fieldContext_Property_address(ctx, field)
			case "lat":
				return ec.fieldContext_Property_lat(ctx, field)
			case "lon":
				return ec.fieldContext_Property_lon(ctx, field)
			case "cadastrNumber":
				return ec.fieldContext_Property_cadastrNumber(ctx, field)
			case "seoText":
				return ec.fieldContext_Property_seoText(ctx, field)
			case "youtubeLink":
				return ec.fieldContext_Property_youtubeLink(ctx, field)
			case "tourLink":
				return ec.fieldContext_Property_tourLink(ctx, field)
			case "documents":
				return ec.fieldContext_Property_documents(ctx, field)
			case "images":
				return ec.fieldContext_Property_images(ctx, field)
			case "refreshDate":
				return ec.fieldContext_Property_refreshDate(ctx, field)
			case "price":
				return ec.fieldContext_Property_price(ctx, field)
			case "pricePerMeter":
				return ec.fieldContext_Property_pricePerMeter(ctx, field)
			case "pricePerAr":
				return ec.fieldContext_Property_pricePerAr(ctx, field)
			case "isReady":
				return ec.fieldContext_Property_isReady(ctx, field)
			case "readinessYear":
				return ec.fieldContext_Property_readinessYear(ctx, field)
			case "readinessQuarter":
				return ec.fieldContext_Property_readinessQuarter(ctx, field)
			case "inCity":
				return ec.fieldContext_Property_inCity(ctx, field)
			case "cityDistance":
				return ec.fieldContext_Property_cityDistance(ctx, field)
			case "region":
				return ec.fieldContext_Property_region(ctx, field)
			case "subRegion":
				return ec.fieldContext_Property_subRegion(ctx, field)
			case "rooms":
				return ec.fieldContext_Property_rooms(ctx, field)
			case "area":
				return ec.fieldContext_Property_area(ctx, field)
			case "landArea":
				return ec.fieldContext_Property_landArea(ctx, field)
			case "livingArea":
				return ec.fieldContext_Property_livingArea(ctx, field)
			case "kitchenArea":
				return ec.fieldContext_Property_kitchenArea(ctx, field)
			case "toiletType":
				return ec.fieldContext_Property_toiletType(ctx, field)
			case "rehabType":
				return ec.fieldContext_Property_rehabType(ctx, field)
			case "floor":
				return ec.fieldContext_Property_floor(ctx, field)
			case "floors":
				return ec.fieldContext_Property_floors(ctx, field)
			case "ceilingHeight":
				return ec.fieldContext_Property_ceilingHeight(ctx, field)
			case "comissionPercent":
				return ec.fieldContext_Property_comissionPercent(ctx, field)
			case "comissionAmount":
				return ec.fieldContext_Property_comissionAmount(ctx, field)
			case "createdAt":
				return ec.fieldContext_Property_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Property_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Property", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_property_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_reviews(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_reviews(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Reviews(rctx, fc.Args["ids"].([]string), fc.Args["start"].(*int), fc.Args["limit"].(*int), fc.Args["sort"].(*public_models.Sort), fc.Args["search"].(*string), fc.Args["filter"].(*public_models.ReviewsFilterInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*public_models.ReviewConnection)
	fc.Result = res
	return ec.marshalNReviewConnection2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐReviewConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_reviews(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "totalCount":
				return ec.fieldContext_ReviewConnection_totalCount(ctx, field)
			case "edges":
				return ec.fieldContext_ReviewConnection_edges(ctx, field)
			case "nodes":
				return ec.fieldContext_ReviewConnection_nodes(ctx, field)
			case "pageInfo":
				return ec.fieldContext_ReviewConnection_pageInfo(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ReviewConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_reviews_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_review(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_review(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Review(rctx, fc.Args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*public_models.Review)
	fc.Result = res
	return ec.marshalNReview2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐReview(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_review(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Review_id(ctx, field)
			case "employee":
				return ec.fieldContext_Review_employee(ctx, field)
			case "text":
				return ec.fieldContext_Review_text(ctx, field)
			case "authorName":
				return ec.fieldContext_Review_authorName(ctx, field)
			case "authorPhone":
				return ec.fieldContext_Review_authorPhone(ctx, field)
			case "status":
				return ec.fieldContext_Review_status(ctx, field)
			case "createdAt":
				return ec.fieldContext_Review_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Review_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Review", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_review_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_stories(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_stories(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Stories(rctx, fc.Args["ids"].([]string), fc.Args["start"].(*int), fc.Args["limit"].(*int), fc.Args["sort"].(*public_models.Sort), fc.Args["search"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*public_models.StoryConnection)
	fc.Result = res
	return ec.marshalNStoryConnection2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐStoryConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_stories(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "totalCount":
				return ec.fieldContext_StoryConnection_totalCount(ctx, field)
			case "edges":
				return ec.fieldContext_StoryConnection_edges(ctx, field)
			case "nodes":
				return ec.fieldContext_StoryConnection_nodes(ctx, field)
			case "pageInfo":
				return ec.fieldContext_StoryConnection_pageInfo(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type StoryConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_stories_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_story(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_story(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Story(rctx, fc.Args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*public_models.Story)
	fc.Result = res
	return ec.marshalNStory2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐStory(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_story(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Story_id(ctx, field)
			case "category":
				return ec.fieldContext_Story_category(ctx, field)
			case "title":
				return ec.fieldContext_Story_title(ctx, field)
			case "teaser":
				return ec.fieldContext_Story_teaser(ctx, field)
			case "contentBlocks":
				return ec.fieldContext_Story_contentBlocks(ctx, field)
			case "cover":
				return ec.fieldContext_Story_cover(ctx, field)
			case "createdAt":
				return ec.fieldContext_Story_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Story_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Story", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_story_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_vacancies(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_vacancies(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Vacancies(rctx, fc.Args["ids"].([]string), fc.Args["start"].(*int), fc.Args["limit"].(*int), fc.Args["sort"].(*public_models.Sort), fc.Args["search"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*public_models.VacancyConnection)
	fc.Result = res
	return ec.marshalNVacancyConnection2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐVacancyConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_vacancies(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "totalCount":
				return ec.fieldContext_VacancyConnection_totalCount(ctx, field)
			case "edges":
				return ec.fieldContext_VacancyConnection_edges(ctx, field)
			case "nodes":
				return ec.fieldContext_VacancyConnection_nodes(ctx, field)
			case "pageInfo":
				return ec.fieldContext_VacancyConnection_pageInfo(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type VacancyConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_vacancies_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_vacancy(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_vacancy(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Vacancy(rctx, fc.Args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*public_models.Vacancy)
	fc.Result = res
	return ec.marshalNVacancy2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐVacancy(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_vacancy(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Vacancy_id(ctx, field)
			case "title":
				return ec.fieldContext_Vacancy_title(ctx, field)
			case "description":
				return ec.fieldContext_Vacancy_description(ctx, field)
			case "experience":
				return ec.fieldContext_Vacancy_experience(ctx, field)
			case "salary":
				return ec.fieldContext_Vacancy_salary(ctx, field)
			case "schedule":
				return ec.fieldContext_Vacancy_schedule(ctx, field)
			case "publicationStatus":
				return ec.fieldContext_Vacancy_publicationStatus(ctx, field)
			case "createdAt":
				return ec.fieldContext_Vacancy_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Vacancy_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Vacancy", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_vacancy_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_villages(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_villages(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Villages(rctx, fc.Args["ids"].([]string), fc.Args["start"].(*int), fc.Args["limit"].(*int), fc.Args["sort"].(*public_models.Sort), fc.Args["search"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*public_models.VillageConnection)
	fc.Result = res
	return ec.marshalNVillageConnection2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐVillageConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_villages(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "totalCount":
				return ec.fieldContext_VillageConnection_totalCount(ctx, field)
			case "edges":
				return ec.fieldContext_VillageConnection_edges(ctx, field)
			case "nodes":
				return ec.fieldContext_VillageConnection_nodes(ctx, field)
			case "pageInfo":
				return ec.fieldContext_VillageConnection_pageInfo(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type VillageConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_villages_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_village(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_village(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Village(rctx, fc.Args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*public_models.Village)
	fc.Result = res
	return ec.marshalNVillage2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐVillage(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_village(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Village_id(ctx, field)
			case "title":
				return ec.fieldContext_Village_title(ctx, field)
			case "description":
				return ec.fieldContext_Village_description(ctx, field)
			case "address":
				return ec.fieldContext_Village_address(ctx, field)
			case "lat":
				return ec.fieldContext_Village_lat(ctx, field)
			case "lon":
				return ec.fieldContext_Village_lon(ctx, field)
			case "cadastrNumber":
				return ec.fieldContext_Village_cadastrNumber(ctx, field)
			case "seoText":
				return ec.fieldContext_Village_seoText(ctx, field)
			case "youtubeLink":
				return ec.fieldContext_Village_youtubeLink(ctx, field)
			case "tourLink":
				return ec.fieldContext_Village_tourLink(ctx, field)
			case "inCity":
				return ec.fieldContext_Village_inCity(ctx, field)
			case "cityDistance":
				return ec.fieldContext_Village_cityDistance(ctx, field)
			case "region":
				return ec.fieldContext_Village_region(ctx, field)
			case "subRegion":
				return ec.fieldContext_Village_subRegion(ctx, field)
			case "developer":
				return ec.fieldContext_Village_developer(ctx, field)
			case "isReady":
				return ec.fieldContext_Village_isReady(ctx, field)
			case "readinessQuarter":
				return ec.fieldContext_Village_readinessQuarter(ctx, field)
			case "readinessYear":
				return ec.fieldContext_Village_readinessYear(ctx, field)
			case "images":
				return ec.fieldContext_Village_images(ctx, field)
			case "documents":
				return ec.fieldContext_Village_documents(ctx, field)
			case "projectDeclarations":
				return ec.fieldContext_Village_projectDeclarations(ctx, field)
			case "createdAt":
				return ec.fieldContext_Village_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Village_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Village", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_village_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query___type(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query___type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectType(fc.Args["name"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query___type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query___type_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query___schema(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query___schema(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectSchema()
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Schema)
	fc.Result = res
	return ec.marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query___schema(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "description":
				return ec.fieldContext___Schema_description(ctx, field)
			case "types":
				return ec.fieldContext___Schema_types(ctx, field)
			case "queryType":
				return ec.fieldContext___Schema_queryType(ctx, field)
			case "mutationType":
				return ec.fieldContext___Schema_mutationType(ctx, field)
			case "subscriptionType":
				return ec.fieldContext___Schema_subscriptionType(ctx, field)
			case "directives":
				return ec.fieldContext___Schema_directives(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Schema", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Readiness_year(ctx context.Context, field graphql.CollectedField, obj *public_models.Readiness) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Readiness_year(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Year, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Readiness_year(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Readiness",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Readiness_quarter(ctx context.Context, field graphql.CollectedField, obj *public_models.Readiness) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Readiness_quarter(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Quarter, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Readiness_quarter(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Readiness",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Review_id(ctx context.Context, field graphql.CollectedField, obj *public_models.Review) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Review_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Review_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Review",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Review_employee(ctx context.Context, field graphql.CollectedField, obj *public_models.Review) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Review_employee(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Review().Employee(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*public_models.Employee)
	fc.Result = res
	return ec.marshalOEmployee2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐEmployee(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Review_employee(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Review",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Employee_id(ctx, field)
			case "name":
				return ec.fieldContext_Employee_name(ctx, field)
			case "surname":
				return ec.fieldContext_Employee_surname(ctx, field)
			case "patronymic":
				return ec.fieldContext_Employee_patronymic(ctx, field)
			case "birthday":
				return ec.fieldContext_Employee_birthday(ctx, field)
			case "email":
				return ec.fieldContext_Employee_email(ctx, field)
			case "phone":
				return ec.fieldContext_Employee_phone(ctx, field)
			case "internalInfo":
				return ec.fieldContext_Employee_internalInfo(ctx, field)
			case "shortDescription":
				return ec.fieldContext_Employee_shortDescription(ctx, field)
			case "description":
				return ec.fieldContext_Employee_description(ctx, field)
			case "isPublished":
				return ec.fieldContext_Employee_isPublished(ctx, field)
			case "isDeleted":
				return ec.fieldContext_Employee_isDeleted(ctx, field)
			case "avatar":
				return ec.fieldContext_Employee_avatar(ctx, field)
			case "publicImage":
				return ec.fieldContext_Employee_publicImage(ctx, field)
			case "createdAt":
				return ec.fieldContext_Employee_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Employee_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Employee", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Review_text(ctx context.Context, field graphql.CollectedField, obj *public_models.Review) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Review_text(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Text, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Review_text(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Review",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Review_authorName(ctx context.Context, field graphql.CollectedField, obj *public_models.Review) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Review_authorName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AuthorName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Review_authorName(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Review",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Review_authorPhone(ctx context.Context, field graphql.CollectedField, obj *public_models.Review) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Review_authorPhone(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AuthorPhone, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Review_authorPhone(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Review",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Review_status(ctx context.Context, field graphql.CollectedField, obj *public_models.Review) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Review_status(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(public_models.ReviewStatusEnum)
	fc.Result = res
	return ec.marshalNReviewStatusEnum2githubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐReviewStatusEnum(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Review_status(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Review",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ReviewStatusEnum does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Review_createdAt(ctx context.Context, field graphql.CollectedField, obj *public_models.Review) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Review_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Review_createdAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Review",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Review_updatedAt(ctx context.Context, field graphql.CollectedField, obj *public_models.Review) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Review_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Review_updatedAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Review",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ReviewConnection_totalCount(ctx context.Context, field graphql.CollectedField, obj *public_models.ReviewConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ReviewConnection_totalCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ReviewConnection_totalCount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ReviewConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ReviewConnection_edges(ctx context.Context, field graphql.CollectedField, obj *public_models.ReviewConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ReviewConnection_edges(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*public_models.ReviewEdge)
	fc.Result = res
	return ec.marshalNReviewEdge2ᚕᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐReviewEdgeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ReviewConnection_edges(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ReviewConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "node":
				return ec.fieldContext_ReviewEdge_node(ctx, field)
			case "cursor":
				return ec.fieldContext_ReviewEdge_cursor(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ReviewEdge", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ReviewConnection_nodes(ctx context.Context, field graphql.CollectedField, obj *public_models.ReviewConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ReviewConnection_nodes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Nodes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*public_models.Review)
	fc.Result = res
	return ec.marshalNReview2ᚕᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐReviewᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ReviewConnection_nodes(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ReviewConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Review_id(ctx, field)
			case "employee":
				return ec.fieldContext_Review_employee(ctx, field)
			case "text":
				return ec.fieldContext_Review_text(ctx, field)
			case "authorName":
				return ec.fieldContext_Review_authorName(ctx, field)
			case "authorPhone":
				return ec.fieldContext_Review_authorPhone(ctx, field)
			case "status":
				return ec.fieldContext_Review_status(ctx, field)
			case "createdAt":
				return ec.fieldContext_Review_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Review_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Review", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ReviewConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *public_models.ReviewConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ReviewConnection_pageInfo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*public_models.PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ReviewConnection_pageInfo(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ReviewConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "startCursor":
				return ec.fieldContext_PageInfo_startCursor(ctx, field)
			case "endCursor":
				return ec.fieldContext_PageInfo_endCursor(ctx, field)
			case "hasNextPage":
				return ec.fieldContext_PageInfo_hasNextPage(ctx, field)
			case "hasPreviousPage":
				return ec.fieldContext_PageInfo_hasPreviousPage(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PageInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ReviewEdge_node(ctx context.Context, field graphql.CollectedField, obj *public_models.ReviewEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ReviewEdge_node(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*public_models.Review)
	fc.Result = res
	return ec.marshalNReview2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐReview(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ReviewEdge_node(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ReviewEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Review_id(ctx, field)
			case "employee":
				return ec.fieldContext_Review_employee(ctx, field)
			case "text":
				return ec.fieldContext_Review_text(ctx, field)
			case "authorName":
				return ec.fieldContext_Review_authorName(ctx, field)
			case "authorPhone":
				return ec.fieldContext_Review_authorPhone(ctx, field)
			case "status":
				return ec.fieldContext_Review_status(ctx, field)
			case "createdAt":
				return ec.fieldContext_Review_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Review_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Review", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ReviewEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *public_models.ReviewEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ReviewEdge_cursor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNCursor2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ReviewEdge_cursor(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ReviewEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Cursor does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Story_id(ctx context.Context, field graphql.CollectedField, obj *public_models.Story) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Story_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Story_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Story",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Story_category(ctx context.Context, field graphql.CollectedField, obj *public_models.Story) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Story_category(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Category, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(public_models.StoryCategoryEnum)
	fc.Result = res
	return ec.marshalNStoryCategoryEnum2githubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐStoryCategoryEnum(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Story_category(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Story",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type StoryCategoryEnum does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Story_title(ctx context.Context, field graphql.CollectedField, obj *public_models.Story) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Story_title(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Title, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Story_title(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Story",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Story_teaser(ctx context.Context, field graphql.CollectedField, obj *public_models.Story) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Story_teaser(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Teaser, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Story_teaser(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Story",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Story_contentBlocks(ctx context.Context, field graphql.CollectedField, obj *public_models.Story) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Story_contentBlocks(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ContentBlocks, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]public_models.ContentBlock)
	fc.Result = res
	return ec.marshalNContentBlock2ᚕgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐContentBlockᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Story_contentBlocks(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Story",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "type":
				return ec.fieldContext_ContentBlock_type(ctx, field)
			case "data":
				return ec.fieldContext_ContentBlock_data(ctx, field)
			case "isVisible":
				return ec.fieldContext_ContentBlock_isVisible(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ContentBlock", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Story_cover(ctx context.Context, field graphql.CollectedField, obj *public_models.Story) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Story_cover(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Story().Cover(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*public_models.Image)
	fc.Result = res
	return ec.marshalOImage2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐImage(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Story_cover(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Story",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Image_id(ctx, field)
			case "url":
				return ec.fieldContext_Image_url(ctx, field)
			case "path":
				return ec.fieldContext_Image_path(ctx, field)
			case "title":
				return ec.fieldContext_Image_title(ctx, field)
			case "fileName":
				return ec.fieldContext_Image_fileName(ctx, field)
			case "fileType":
				return ec.fieldContext_Image_fileType(ctx, field)
			case "previewUrl":
				return ec.fieldContext_Image_previewUrl(ctx, field)
			case "previewPath":
				return ec.fieldContext_Image_previewPath(ctx, field)
			case "blurHash":
				return ec.fieldContext_Image_blurHash(ctx, field)
			case "preset":
				return ec.fieldContext_Image_preset(ctx, field)
			case "createdAt":
				return ec.fieldContext_Image_createdAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Image", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Story_createdAt(ctx context.Context, field graphql.CollectedField, obj *public_models.Story) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Story_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Story_createdAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Story",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Story_updatedAt(ctx context.Context, field graphql.CollectedField, obj *public_models.Story) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Story_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Story_updatedAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Story",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _StoryConnection_totalCount(ctx context.Context, field graphql.CollectedField, obj *public_models.StoryConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_StoryConnection_totalCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_StoryConnection_totalCount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "StoryConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _StoryConnection_edges(ctx context.Context, field graphql.CollectedField, obj *public_models.StoryConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_StoryConnection_edges(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*public_models.StoryEdge)
	fc.Result = res
	return ec.marshalNStoryEdge2ᚕᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐStoryEdgeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_StoryConnection_edges(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "StoryConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "node":
				return ec.fieldContext_StoryEdge_node(ctx, field)
			case "cursor":
				return ec.fieldContext_StoryEdge_cursor(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type StoryEdge", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _StoryConnection_nodes(ctx context.Context, field graphql.CollectedField, obj *public_models.StoryConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_StoryConnection_nodes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Nodes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*public_models.Story)
	fc.Result = res
	return ec.marshalNStory2ᚕᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐStoryᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_StoryConnection_nodes(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "StoryConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Story_id(ctx, field)
			case "category":
				return ec.fieldContext_Story_category(ctx, field)
			case "title":
				return ec.fieldContext_Story_title(ctx, field)
			case "teaser":
				return ec.fieldContext_Story_teaser(ctx, field)
			case "contentBlocks":
				return ec.fieldContext_Story_contentBlocks(ctx, field)
			case "cover":
				return ec.fieldContext_Story_cover(ctx, field)
			case "createdAt":
				return ec.fieldContext_Story_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Story_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Story", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _StoryConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *public_models.StoryConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_StoryConnection_pageInfo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*public_models.PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_StoryConnection_pageInfo(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "StoryConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "startCursor":
				return ec.fieldContext_PageInfo_startCursor(ctx, field)
			case "endCursor":
				return ec.fieldContext_PageInfo_endCursor(ctx, field)
			case "hasNextPage":
				return ec.fieldContext_PageInfo_hasNextPage(ctx, field)
			case "hasPreviousPage":
				return ec.fieldContext_PageInfo_hasPreviousPage(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PageInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _StoryEdge_node(ctx context.Context, field graphql.CollectedField, obj *public_models.StoryEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_StoryEdge_node(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*public_models.Story)
	fc.Result = res
	return ec.marshalNStory2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐStory(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_StoryEdge_node(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "StoryEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Story_id(ctx, field)
			case "category":
				return ec.fieldContext_Story_category(ctx, field)
			case "title":
				return ec.fieldContext_Story_title(ctx, field)
			case "teaser":
				return ec.fieldContext_Story_teaser(ctx, field)
			case "contentBlocks":
				return ec.fieldContext_Story_contentBlocks(ctx, field)
			case "cover":
				return ec.fieldContext_Story_cover(ctx, field)
			case "createdAt":
				return ec.fieldContext_Story_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Story_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Story", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _StoryEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *public_models.StoryEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_StoryEdge_cursor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNCursor2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_StoryEdge_cursor(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "StoryEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Cursor does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Vacancy_id(ctx context.Context, field graphql.CollectedField, obj *public_models.Vacancy) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Vacancy_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Vacancy_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Vacancy",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Vacancy_title(ctx context.Context, field graphql.CollectedField, obj *public_models.Vacancy) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Vacancy_title(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Title, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Vacancy_title(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Vacancy",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Vacancy_description(ctx context.Context, field graphql.CollectedField, obj *public_models.Vacancy) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Vacancy_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Vacancy_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Vacancy",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Vacancy_experience(ctx context.Context, field graphql.CollectedField, obj *public_models.Vacancy) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Vacancy_experience(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Experience, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Vacancy_experience(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Vacancy",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Vacancy_salary(ctx context.Context, field graphql.CollectedField, obj *public_models.Vacancy) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Vacancy_salary(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Salary, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Vacancy_salary(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Vacancy",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Vacancy_schedule(ctx context.Context, field graphql.CollectedField, obj *public_models.Vacancy) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Vacancy_schedule(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Schedule, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(public_models.VacancyScheduleEnum)
	fc.Result = res
	return ec.marshalNVacancyScheduleEnum2githubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐVacancyScheduleEnum(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Vacancy_schedule(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Vacancy",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type VacancyScheduleEnum does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Vacancy_publicationStatus(ctx context.Context, field graphql.CollectedField, obj *public_models.Vacancy) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Vacancy_publicationStatus(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PublicationStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(public_models.PublicationStatusEnum)
	fc.Result = res
	return ec.marshalNPublicationStatusEnum2githubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐPublicationStatusEnum(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Vacancy_publicationStatus(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Vacancy",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type PublicationStatusEnum does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Vacancy_createdAt(ctx context.Context, field graphql.CollectedField, obj *public_models.Vacancy) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Vacancy_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Vacancy_createdAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Vacancy",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Vacancy_updatedAt(ctx context.Context, field graphql.CollectedField, obj *public_models.Vacancy) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Vacancy_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Vacancy_updatedAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Vacancy",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _VacancyConnection_totalCount(ctx context.Context, field graphql.CollectedField, obj *public_models.VacancyConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_VacancyConnection_totalCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_VacancyConnection_totalCount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "VacancyConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _VacancyConnection_edges(ctx context.Context, field graphql.CollectedField, obj *public_models.VacancyConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_VacancyConnection_edges(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*public_models.VacancyEdge)
	fc.Result = res
	return ec.marshalNVacancyEdge2ᚕᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐVacancyEdgeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_VacancyConnection_edges(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "VacancyConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "node":
				return ec.fieldContext_VacancyEdge_node(ctx, field)
			case "cursor":
				return ec.fieldContext_VacancyEdge_cursor(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type VacancyEdge", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _VacancyConnection_nodes(ctx context.Context, field graphql.CollectedField, obj *public_models.VacancyConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_VacancyConnection_nodes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Nodes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*public_models.Vacancy)
	fc.Result = res
	return ec.marshalNVacancy2ᚕᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐVacancyᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_VacancyConnection_nodes(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "VacancyConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Vacancy_id(ctx, field)
			case "title":
				return ec.fieldContext_Vacancy_title(ctx, field)
			case "description":
				return ec.fieldContext_Vacancy_description(ctx, field)
			case "experience":
				return ec.fieldContext_Vacancy_experience(ctx, field)
			case "salary":
				return ec.fieldContext_Vacancy_salary(ctx, field)
			case "schedule":
				return ec.fieldContext_Vacancy_schedule(ctx, field)
			case "publicationStatus":
				return ec.fieldContext_Vacancy_publicationStatus(ctx, field)
			case "createdAt":
				return ec.fieldContext_Vacancy_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Vacancy_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Vacancy", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _VacancyConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *public_models.VacancyConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_VacancyConnection_pageInfo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*public_models.PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_VacancyConnection_pageInfo(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "VacancyConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "startCursor":
				return ec.fieldContext_PageInfo_startCursor(ctx, field)
			case "endCursor":
				return ec.fieldContext_PageInfo_endCursor(ctx, field)
			case "hasNextPage":
				return ec.fieldContext_PageInfo_hasNextPage(ctx, field)
			case "hasPreviousPage":
				return ec.fieldContext_PageInfo_hasPreviousPage(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PageInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _VacancyEdge_node(ctx context.Context, field graphql.CollectedField, obj *public_models.VacancyEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_VacancyEdge_node(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*public_models.Vacancy)
	fc.Result = res
	return ec.marshalNVacancy2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐVacancy(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_VacancyEdge_node(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "VacancyEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Vacancy_id(ctx, field)
			case "title":
				return ec.fieldContext_Vacancy_title(ctx, field)
			case "description":
				return ec.fieldContext_Vacancy_description(ctx, field)
			case "experience":
				return ec.fieldContext_Vacancy_experience(ctx, field)
			case "salary":
				return ec.fieldContext_Vacancy_salary(ctx, field)
			case "schedule":
				return ec.fieldContext_Vacancy_schedule(ctx, field)
			case "publicationStatus":
				return ec.fieldContext_Vacancy_publicationStatus(ctx, field)
			case "createdAt":
				return ec.fieldContext_Vacancy_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Vacancy_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Vacancy", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _VacancyEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *public_models.VacancyEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_VacancyEdge_cursor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNCursor2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_VacancyEdge_cursor(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "VacancyEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Cursor does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Village_id(ctx context.Context, field graphql.CollectedField, obj *public_models.Village) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Village_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Village_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Village",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Village_title(ctx context.Context, field graphql.CollectedField, obj *public_models.Village) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Village_title(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Title, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Village_title(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Village",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Village_description(ctx context.Context, field graphql.CollectedField, obj *public_models.Village) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Village_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Village_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Village",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Village_address(ctx context.Context, field graphql.CollectedField, obj *public_models.Village) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Village_address(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Address, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Village_address(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Village",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Village_lat(ctx context.Context, field graphql.CollectedField, obj *public_models.Village) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Village_lat(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Lat, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Village_lat(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Village",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Village_lon(ctx context.Context, field graphql.CollectedField, obj *public_models.Village) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Village_lon(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Lon, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Village_lon(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Village",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Village_cadastrNumber(ctx context.Context, field graphql.CollectedField, obj *public_models.Village) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Village_cadastrNumber(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CadastrNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Village_cadastrNumber(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Village",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Village_seoText(ctx context.Context, field graphql.CollectedField, obj *public_models.Village) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Village_seoText(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SeoText, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Village_seoText(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Village",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Village_youtubeLink(ctx context.Context, field graphql.CollectedField, obj *public_models.Village) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Village_youtubeLink(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.YoutubeLink, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Village_youtubeLink(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Village",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Village_tourLink(ctx context.Context, field graphql.CollectedField, obj *public_models.Village) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Village_tourLink(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TourLink, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Village_tourLink(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Village",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Village_inCity(ctx context.Context, field graphql.CollectedField, obj *public_models.Village) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Village_inCity(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InCity, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Village_inCity(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Village",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Village_cityDistance(ctx context.Context, field graphql.CollectedField, obj *public_models.Village) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Village_cityDistance(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CityDistance, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Village_cityDistance(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Village",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Village_region(ctx context.Context, field graphql.CollectedField, obj *public_models.Village) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Village_region(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Region, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Village_region(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Village",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Village_subRegion(ctx context.Context, field graphql.CollectedField, obj *public_models.Village) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Village_subRegion(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubRegion, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Village_subRegion(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Village",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Village_developer(ctx context.Context, field graphql.CollectedField, obj *public_models.Village) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Village_developer(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Village().Developer(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*public_models.Developer)
	fc.Result = res
	return ec.marshalODeveloper2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐDeveloper(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Village_developer(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Village",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Developer_id(ctx, field)
			case "title":
				return ec.fieldContext_Developer_title(ctx, field)
			case "url":
				return ec.fieldContext_Developer_url(ctx, field)
			case "logo":
				return ec.fieldContext_Developer_logo(ctx, field)
			case "createdAt":
				return ec.fieldContext_Developer_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Developer_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Developer", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Village_isReady(ctx context.Context, field graphql.CollectedField, obj *public_models.Village) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Village_isReady(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsReady, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Village_isReady(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Village",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Village_readinessQuarter(ctx context.Context, field graphql.CollectedField, obj *public_models.Village) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Village_readinessQuarter(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ReadinessQuarter, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*public_models.QuarterEnum)
	fc.Result = res
	return ec.marshalOQuarterEnum2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐQuarterEnum(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Village_readinessQuarter(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Village",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type QuarterEnum does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Village_readinessYear(ctx context.Context, field graphql.CollectedField, obj *public_models.Village) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Village_readinessYear(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ReadinessYear, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Village_readinessYear(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Village",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Village_images(ctx context.Context, field graphql.CollectedField, obj *public_models.Village) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Village_images(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Village().Images(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*public_models.Image)
	fc.Result = res
	return ec.marshalOImage2ᚕᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐImageᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Village_images(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Village",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Image_id(ctx, field)
			case "url":
				return ec.fieldContext_Image_url(ctx, field)
			case "path":
				return ec.fieldContext_Image_path(ctx, field)
			case "title":
				return ec.fieldContext_Image_title(ctx, field)
			case "fileName":
				return ec.fieldContext_Image_fileName(ctx, field)
			case "fileType":
				return ec.fieldContext_Image_fileType(ctx, field)
			case "previewUrl":
				return ec.fieldContext_Image_previewUrl(ctx, field)
			case "previewPath":
				return ec.fieldContext_Image_previewPath(ctx, field)
			case "blurHash":
				return ec.fieldContext_Image_blurHash(ctx, field)
			case "preset":
				return ec.fieldContext_Image_preset(ctx, field)
			case "createdAt":
				return ec.fieldContext_Image_createdAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Image", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Village_documents(ctx context.Context, field graphql.CollectedField, obj *public_models.Village) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Village_documents(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Village().Documents(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*public_models.Document)
	fc.Result = res
	return ec.marshalODocument2ᚕᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐDocumentᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Village_documents(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Village",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Document_id(ctx, field)
			case "url":
				return ec.fieldContext_Document_url(ctx, field)
			case "path":
				return ec.fieldContext_Document_path(ctx, field)
			case "title":
				return ec.fieldContext_Document_title(ctx, field)
			case "fileName":
				return ec.fieldContext_Document_fileName(ctx, field)
			case "fileType":
				return ec.fieldContext_Document_fileType(ctx, field)
			case "createdAt":
				return ec.fieldContext_Document_createdAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Document", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Village_projectDeclarations(ctx context.Context, field graphql.CollectedField, obj *public_models.Village) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Village_projectDeclarations(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Village().ProjectDeclarations(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*public_models.Document)
	fc.Result = res
	return ec.marshalODocument2ᚕᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐDocumentᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Village_projectDeclarations(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Village",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Document_id(ctx, field)
			case "url":
				return ec.fieldContext_Document_url(ctx, field)
			case "path":
				return ec.fieldContext_Document_path(ctx, field)
			case "title":
				return ec.fieldContext_Document_title(ctx, field)
			case "fileName":
				return ec.fieldContext_Document_fileName(ctx, field)
			case "fileType":
				return ec.fieldContext_Document_fileType(ctx, field)
			case "createdAt":
				return ec.fieldContext_Document_createdAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Document", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Village_createdAt(ctx context.Context, field graphql.CollectedField, obj *public_models.Village) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Village_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Village_createdAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Village",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Village_updatedAt(ctx context.Context, field graphql.CollectedField, obj *public_models.Village) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Village_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Village_updatedAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Village",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _VillageConnection_totalCount(ctx context.Context, field graphql.CollectedField, obj *public_models.VillageConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_VillageConnection_totalCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_VillageConnection_totalCount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "VillageConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _VillageConnection_edges(ctx context.Context, field graphql.CollectedField, obj *public_models.VillageConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_VillageConnection_edges(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*public_models.VillageEdge)
	fc.Result = res
	return ec.marshalNVillageEdge2ᚕᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐVillageEdgeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_VillageConnection_edges(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "VillageConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "node":
				return ec.fieldContext_VillageEdge_node(ctx, field)
			case "cursor":
				return ec.fieldContext_VillageEdge_cursor(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type VillageEdge", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _VillageConnection_nodes(ctx context.Context, field graphql.CollectedField, obj *public_models.VillageConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_VillageConnection_nodes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Nodes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*public_models.Village)
	fc.Result = res
	return ec.marshalNVillage2ᚕᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐVillageᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_VillageConnection_nodes(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "VillageConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Village_id(ctx, field)
			case "title":
				return ec.fieldContext_Village_title(ctx, field)
			case "description":
				return ec.fieldContext_Village_description(ctx, field)
			case "address":
				return ec.fieldContext_Village_address(ctx, field)
			case "lat":
				return ec.fieldContext_Village_lat(ctx, field)
			case "lon":
				return ec.fieldContext_Village_lon(ctx, field)
			case "cadastrNumber":
				return ec.fieldContext_Village_cadastrNumber(ctx, field)
			case "seoText":
				return ec.fieldContext_Village_seoText(ctx, field)
			case "youtubeLink":
				return ec.fieldContext_Village_youtubeLink(ctx, field)
			case "tourLink":
				return ec.fieldContext_Village_tourLink(ctx, field)
			case "inCity":
				return ec.fieldContext_Village_inCity(ctx, field)
			case "cityDistance":
				return ec.fieldContext_Village_cityDistance(ctx, field)
			case "region":
				return ec.fieldContext_Village_region(ctx, field)
			case "subRegion":
				return ec.fieldContext_Village_subRegion(ctx, field)
			case "developer":
				return ec.fieldContext_Village_developer(ctx, field)
			case "isReady":
				return ec.fieldContext_Village_isReady(ctx, field)
			case "readinessQuarter":
				return ec.fieldContext_Village_readinessQuarter(ctx, field)
			case "readinessYear":
				return ec.fieldContext_Village_readinessYear(ctx, field)
			case "images":
				return ec.fieldContext_Village_images(ctx, field)
			case "documents":
				return ec.fieldContext_Village_documents(ctx, field)
			case "projectDeclarations":
				return ec.fieldContext_Village_projectDeclarations(ctx, field)
			case "createdAt":
				return ec.fieldContext_Village_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Village_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Village", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _VillageConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *public_models.VillageConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_VillageConnection_pageInfo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*public_models.PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_VillageConnection_pageInfo(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "VillageConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "startCursor":
				return ec.fieldContext_PageInfo_startCursor(ctx, field)
			case "endCursor":
				return ec.fieldContext_PageInfo_endCursor(ctx, field)
			case "hasNextPage":
				return ec.fieldContext_PageInfo_hasNextPage(ctx, field)
			case "hasPreviousPage":
				return ec.fieldContext_PageInfo_hasPreviousPage(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PageInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _VillageEdge_node(ctx context.Context, field graphql.CollectedField, obj *public_models.VillageEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_VillageEdge_node(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*public_models.Village)
	fc.Result = res
	return ec.marshalNVillage2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐVillage(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_VillageEdge_node(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "VillageEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Village_id(ctx, field)
			case "title":
				return ec.fieldContext_Village_title(ctx, field)
			case "description":
				return ec.fieldContext_Village_description(ctx, field)
			case "address":
				return ec.fieldContext_Village_address(ctx, field)
			case "lat":
				return ec.fieldContext_Village_lat(ctx, field)
			case "lon":
				return ec.fieldContext_Village_lon(ctx, field)
			case "cadastrNumber":
				return ec.fieldContext_Village_cadastrNumber(ctx, field)
			case "seoText":
				return ec.fieldContext_Village_seoText(ctx, field)
			case "youtubeLink":
				return ec.fieldContext_Village_youtubeLink(ctx, field)
			case "tourLink":
				return ec.fieldContext_Village_tourLink(ctx, field)
			case "inCity":
				return ec.fieldContext_Village_inCity(ctx, field)
			case "cityDistance":
				return ec.fieldContext_Village_cityDistance(ctx, field)
			case "region":
				return ec.fieldContext_Village_region(ctx, field)
			case "subRegion":
				return ec.fieldContext_Village_subRegion(ctx, field)
			case "developer":
				return ec.fieldContext_Village_developer(ctx, field)
			case "isReady":
				return ec.fieldContext_Village_isReady(ctx, field)
			case "readinessQuarter":
				return ec.fieldContext_Village_readinessQuarter(ctx, field)
			case "readinessYear":
				return ec.fieldContext_Village_readinessYear(ctx, field)
			case "images":
				return ec.fieldContext_Village_images(ctx, field)
			case "documents":
				return ec.fieldContext_Village_documents(ctx, field)
			case "projectDeclarations":
				return ec.fieldContext_Village_projectDeclarations(ctx, field)
			case "createdAt":
				return ec.fieldContext_Village_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Village_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Village", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _VillageEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *public_models.VillageEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_VillageEdge_cursor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNCursor2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_VillageEdge_cursor(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "VillageEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Cursor does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_locations(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_locations(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Locations, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalN__DirectiveLocation2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_locations(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type __DirectiveLocation does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_args(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_args(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___InputValue_name(ctx, field)
			case "description":
				return ec.fieldContext___InputValue_description(ctx, field)
			case "type":
				return ec.fieldContext___InputValue_type(ctx, field)
			case "defaultValue":
				return ec.fieldContext___InputValue_defaultValue(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __InputValue", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_isRepeatable(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_isRepeatable(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsRepeatable, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_isRepeatable(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___EnumValue_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___EnumValue_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___EnumValue_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___EnumValue_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___EnumValue_isDeprecated(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___EnumValue_isDeprecated(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___EnumValue_deprecationReason(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___EnumValue_deprecationReason(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_args(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_args(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___InputValue_name(ctx, field)
			case "description":
				return ec.fieldContext___InputValue_description(ctx, field)
			case "type":
				return ec.fieldContext___InputValue_type(ctx, field)
			case "defaultValue":
				return ec.fieldContext___InputValue_defaultValue(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __InputValue", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_type(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_type(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_isDeprecated(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_isDeprecated(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_deprecationReason(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_deprecationReason(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_type(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_type(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_defaultValue(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_defaultValue(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DefaultValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_defaultValue(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_types(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_types(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Types(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_types(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_queryType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_queryType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QueryType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_queryType(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_mutationType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_mutationType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MutationType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_mutationType(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_subscriptionType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_subscriptionType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubscriptionType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_subscriptionType(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_directives(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_directives(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Directives(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Directive)
	fc.Result = res
	return ec.marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_directives(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___Directive_name(ctx, field)
			case "description":
				return ec.fieldContext___Directive_description(ctx, field)
			case "locations":
				return ec.fieldContext___Directive_locations(ctx, field)
			case "args":
				return ec.fieldContext___Directive_args(ctx, field)
			case "isRepeatable":
				return ec.fieldContext___Directive_isRepeatable(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Directive", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_kind(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_kind(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Kind(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalN__TypeKind2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_kind(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type __TypeKind does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_fields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_fields(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Fields(fc.Args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Field)
	fc.Result = res
	return ec.marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_fields(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___Field_name(ctx, field)
			case "description":
				return ec.fieldContext___Field_description(ctx, field)
			case "args":
				return ec.fieldContext___Field_args(ctx, field)
			case "type":
				return ec.fieldContext___Field_type(ctx, field)
			case "isDeprecated":
				return ec.fieldContext___Field_isDeprecated(ctx, field)
			case "deprecationReason":
				return ec.fieldContext___Field_deprecationReason(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Field", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field___Type_fields_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) ___Type_interfaces(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_interfaces(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Interfaces(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_interfaces(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_possibleTypes(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_possibleTypes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PossibleTypes(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_possibleTypes(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_enumValues(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_enumValues(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnumValues(fc.Args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.EnumValue)
	fc.Result = res
	return ec.marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_enumValues(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___EnumValue_name(ctx, field)
			case "description":
				return ec.fieldContext___EnumValue_description(ctx, field)
			case "isDeprecated":
				return ec.fieldContext___EnumValue_isDeprecated(ctx, field)
			case "deprecationReason":
				return ec.fieldContext___EnumValue_deprecationReason(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __EnumValue", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field___Type_enumValues_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) ___Type_inputFields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_inputFields(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InputFields(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_inputFields(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___InputValue_name(ctx, field)
			case "description":
				return ec.fieldContext___InputValue_description(ctx, field)
			case "type":
				return ec.fieldContext___InputValue_type(ctx, field)
			case "defaultValue":
				return ec.fieldContext___InputValue_defaultValue(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __InputValue", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_ofType(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_ofType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OfType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_ofType(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_specifiedByURL(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_specifiedByURL(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SpecifiedByURL(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_specifiedByURL(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

// endregion **************************** field.gotpl *****************************

// region    **************************** input.gotpl *****************************

func (ec *executionContext) unmarshalInputComplexHouseFilter(ctx context.Context, obj interface{}) (public_models.ComplexHouseFilter, error) {
	var it public_models.ComplexHouseFilter
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"complexID"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "complexID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("complexID"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOID2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "mongodb")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.ComplexID = data
			} else if tmp == nil {
				it.ComplexID = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputContentBlockInput(ctx context.Context, obj interface{}) (public_models.ContentBlockInput, error) {
	var it public_models.ContentBlockInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"type", "data", "isVisible"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "type":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("type"))
			data, err := ec.unmarshalNContentBlockType2githubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐContentBlockType(ctx, v)
			if err != nil {
				return it, err
			}
			it.Type = data
		case "data":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("data"))
			data, err := ec.unmarshalNJSON2map(ctx, v)
			if err != nil {
				return it, err
			}
			it.Data = data
		case "isVisible":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isVisible"))
			data, err := ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.IsVisible = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDocumentInput(ctx context.Context, obj interface{}) (public_models.DocumentInput, error) {
	var it public_models.DocumentInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id", "file", "title"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalOID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "file":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("file"))
			data, err := ec.unmarshalOUpload2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚐUpload(ctx, v)
			if err != nil {
				return it, err
			}
			it.File = data
		case "title":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("title"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2string(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "max=100,min=3")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(string); ok {
				it.Title = data
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputImageInput(ctx context.Context, obj interface{}) (public_models.ImageInput, error) {
	var it public_models.ImageInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id", "file", "title", "preset"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalOID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "file":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("file"))
			data, err := ec.unmarshalOUpload2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚐUpload(ctx, v)
			if err != nil {
				return it, err
			}
			it.File = data
		case "title":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("title"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2string(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "max=100,min=3")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(string); ok {
				it.Title = data
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "preset":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("preset"))
			data, err := ec.unmarshalOImagePreset2githubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐImagePreset(ctx, v)
			if err != nil {
				return it, err
			}
			it.Preset = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPaginationInput(ctx context.Context, obj interface{}) (public_models.PaginationInput, error) {
	var it public_models.PaginationInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"first", "last", "after", "before"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "first":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.First = data
		case "last":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.Last = data
		case "after":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("after"))
			data, err := ec.unmarshalOCursor2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.After = data
		case "before":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("before"))
			data, err := ec.unmarshalOCursor2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Before = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPropertyFilter(ctx context.Context, obj interface{}) (public_models.PropertyFilter, error) {
	var it public_models.PropertyFilter
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"deal", "type", "subType", "fromDeveloper", "complexID", "complexHouseID", "villageID", "isHot", "minRooms", "maxRooms", "minPrice", "maxPrice", "minPricePerMeter", "maxPricePerMeter", "minPricePerAr", "maxPricePerAr", "minArea", "maxArea", "minLandArea", "maxLandArea", "isReady", "inCity", "minCityDistance", "maxCityDistance", "withPhotos"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "deal":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deal"))
			data, err := ec.unmarshalODealEnum2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐDealEnum(ctx, v)
			if err != nil {
				return it, err
			}
			it.Deal = data
		case "type":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("type"))
			data, err := ec.unmarshalOPropertyTypeEnum2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐPropertyTypeEnum(ctx, v)
			if err != nil {
				return it, err
			}
			it.Type = data
		case "subType":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("subType"))
			data, err := ec.unmarshalOPropertySubTypeEnum2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐPropertySubTypeEnum(ctx, v)
			if err != nil {
				return it, err
			}
			it.SubType = data
		case "fromDeveloper":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fromDeveloper"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOBoolean2ᚖbool(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "boolean")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*bool); ok {
				it.FromDeveloper = data
			} else if tmp == nil {
				it.FromDeveloper = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *bool`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "complexID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("complexID"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "mongodb")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.ComplexID = data
			} else if tmp == nil {
				it.ComplexID = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "complexHouseID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("complexHouseID"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "mongodb")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.ComplexHouseID = data
			} else if tmp == nil {
				it.ComplexHouseID = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "villageID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("villageID"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "mongodb")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.VillageID = data
			} else if tmp == nil {
				it.VillageID = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "isHot":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isHot"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOBoolean2ᚖbool(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "boolean")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*bool); ok {
				it.IsHot = data
			} else if tmp == nil {
				it.IsHot = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *bool`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "minRooms":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("minRooms"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOFloat2ᚖfloat64(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "gte=0")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*float64); ok {
				it.MinRooms = data
			} else if tmp == nil {
				it.MinRooms = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *float64`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "maxRooms":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("maxRooms"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOFloat2ᚖfloat64(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "gte=0")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*float64); ok {
				it.MaxRooms = data
			} else if tmp == nil {
				it.MaxRooms = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *float64`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "minPrice":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("minPrice"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOFloat2ᚖfloat64(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "gte=0")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*float64); ok {
				it.MinPrice = data
			} else if tmp == nil {
				it.MinPrice = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *float64`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "maxPrice":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("maxPrice"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOFloat2ᚖfloat64(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "gte=0")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*float64); ok {
				it.MaxPrice = data
			} else if tmp == nil {
				it.MaxPrice = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *float64`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "minPricePerMeter":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("minPricePerMeter"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOFloat2ᚖfloat64(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "gte=0")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*float64); ok {
				it.MinPricePerMeter = data
			} else if tmp == nil {
				it.MinPricePerMeter = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *float64`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "maxPricePerMeter":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("maxPricePerMeter"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOFloat2ᚖfloat64(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "gte=0")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*float64); ok {
				it.MaxPricePerMeter = data
			} else if tmp == nil {
				it.MaxPricePerMeter = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *float64`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "minPricePerAr":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("minPricePerAr"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOFloat2ᚖfloat64(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "gte=0")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*float64); ok {
				it.MinPricePerAr = data
			} else if tmp == nil {
				it.MinPricePerAr = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *float64`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "maxPricePerAr":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("maxPricePerAr"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOFloat2ᚖfloat64(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "gte=0")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*float64); ok {
				it.MaxPricePerAr = data
			} else if tmp == nil {
				it.MaxPricePerAr = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *float64`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "minArea":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("minArea"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOFloat2ᚖfloat64(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "gte=0")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*float64); ok {
				it.MinArea = data
			} else if tmp == nil {
				it.MinArea = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *float64`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "maxArea":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("maxArea"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOFloat2ᚖfloat64(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "gte=0")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*float64); ok {
				it.MaxArea = data
			} else if tmp == nil {
				it.MaxArea = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *float64`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "minLandArea":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("minLandArea"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOFloat2ᚖfloat64(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "gte=0")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*float64); ok {
				it.MinLandArea = data
			} else if tmp == nil {
				it.MinLandArea = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *float64`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "maxLandArea":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("maxLandArea"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOFloat2ᚖfloat64(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "gte=0")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*float64); ok {
				it.MaxLandArea = data
			} else if tmp == nil {
				it.MaxLandArea = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *float64`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "isReady":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isReady"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOBoolean2ᚖbool(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "boolean")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*bool); ok {
				it.IsReady = data
			} else if tmp == nil {
				it.IsReady = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *bool`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "inCity":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("inCity"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOBoolean2ᚖbool(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "boolean")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*bool); ok {
				it.InCity = data
			} else if tmp == nil {
				it.InCity = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *bool`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "minCityDistance":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("minCityDistance"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOInt2ᚖint(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "gte=0")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*int); ok {
				it.MinCityDistance = data
			} else if tmp == nil {
				it.MinCityDistance = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *int`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "maxCityDistance":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("maxCityDistance"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOInt2ᚖint(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "gte=0")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*int); ok {
				it.MaxCityDistance = data
			} else if tmp == nil {
				it.MaxCityDistance = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *int`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "withPhotos":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("withPhotos"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOBoolean2ᚖbool(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "boolean")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*bool); ok {
				it.WithPhotos = data
			} else if tmp == nil {
				it.WithPhotos = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *bool`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputReviewsFilterInput(ctx context.Context, obj interface{}) (public_models.ReviewsFilterInput, error) {
	var it public_models.ReviewsFilterInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"statuses", "employees"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "statuses":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("statuses"))
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalOReviewStatusEnum2ᚕgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐReviewStatusEnumᚄ(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "dive,required")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.([]public_models.ReviewStatusEnum); ok {
				it.Statuses = data
			} else if tmp == nil {
				it.Statuses = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be []github.com/pinks-agency/ecn/server/internal/public-facade/models.ReviewStatusEnum`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "employees":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("employees"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOID2ᚕstringᚄ(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "dive,required,mongodb")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.([]string); ok {
				it.Employees = data
			} else if tmp == nil {
				it.Employees = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be []string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSort(ctx context.Context, obj interface{}) (public_models.Sort, error) {
	var it public_models.Sort
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	if _, present := asMap["field"]; !present {
		asMap["field"] = "id"
	}
	if _, present := asMap["direction"]; !present {
		asMap["direction"] = "ASC"
	}

	fieldsInOrder := [...]string{"field", "direction"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "field":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("field"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Field = data
		case "direction":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("direction"))
			data, err := ec.unmarshalOSortDirection2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐSortDirection(ctx, v)
			if err != nil {
				return it, err
			}
			it.Direction = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputVacancyRequestInput(ctx context.Context, obj interface{}) (public_models.VacancyRequestInput, error) {
	var it public_models.VacancyRequestInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"vacancy", "name", "letter", "attachments"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "vacancy":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vacancy"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Vacancy = data
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "letter":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("letter"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Letter = data
		case "attachments":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("attachments"))
			data, err := ec.unmarshalODocumentInput2ᚕᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐDocumentInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Attachments = data
		}
	}

	return it, nil
}

// endregion **************************** input.gotpl *****************************

// region    ************************** interface.gotpl ***************************

func (ec *executionContext) _Node(ctx context.Context, sel ast.SelectionSet, obj public_models.Node) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

// endregion ************************** interface.gotpl ***************************

// region    **************************** object.gotpl ****************************

var complexImplementors = []string{"Complex"}

func (ec *executionContext) _Complex(ctx context.Context, sel ast.SelectionSet, obj *public_models.Complex) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, complexImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Complex")
		case "id":
			out.Values[i] = ec._Complex_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "title":
			out.Values[i] = ec._Complex_title(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "description":
			out.Values[i] = ec._Complex_description(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "address":
			out.Values[i] = ec._Complex_address(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "lat":
			out.Values[i] = ec._Complex_lat(ctx, field, obj)
		case "lon":
			out.Values[i] = ec._Complex_lon(ctx, field, obj)
		case "cadastrNumber":
			out.Values[i] = ec._Complex_cadastrNumber(ctx, field, obj)
		case "seoText":
			out.Values[i] = ec._Complex_seoText(ctx, field, obj)
		case "youtubeLink":
			out.Values[i] = ec._Complex_youtubeLink(ctx, field, obj)
		case "tourLink":
			out.Values[i] = ec._Complex_tourLink(ctx, field, obj)
		case "inCity":
			out.Values[i] = ec._Complex_inCity(ctx, field, obj)
		case "cityDistance":
			out.Values[i] = ec._Complex_cityDistance(ctx, field, obj)
		case "region":
			out.Values[i] = ec._Complex_region(ctx, field, obj)
		case "subRegion":
			out.Values[i] = ec._Complex_subRegion(ctx, field, obj)
		case "developer":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Complex_developer(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "isReady":
			out.Values[i] = ec._Complex_isReady(ctx, field, obj)
		case "readinessQuarter":
			out.Values[i] = ec._Complex_readinessQuarter(ctx, field, obj)
		case "readinessYear":
			out.Values[i] = ec._Complex_readinessYear(ctx, field, obj)
		case "images":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Complex_images(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "documents":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Complex_documents(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "projectDeclarations":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Complex_projectDeclarations(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "createdAt":
			out.Values[i] = ec._Complex_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "updatedAt":
			out.Values[i] = ec._Complex_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var complexConnectionImplementors = []string{"ComplexConnection"}

func (ec *executionContext) _ComplexConnection(ctx context.Context, sel ast.SelectionSet, obj *public_models.ComplexConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, complexConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ComplexConnection")
		case "totalCount":
			out.Values[i] = ec._ComplexConnection_totalCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "edges":
			out.Values[i] = ec._ComplexConnection_edges(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "nodes":
			out.Values[i] = ec._ComplexConnection_nodes(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "pageInfo":
			out.Values[i] = ec._ComplexConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var complexEdgeImplementors = []string{"ComplexEdge"}

func (ec *executionContext) _ComplexEdge(ctx context.Context, sel ast.SelectionSet, obj *public_models.ComplexEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, complexEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ComplexEdge")
		case "node":
			out.Values[i] = ec._ComplexEdge_node(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "cursor":
			out.Values[i] = ec._ComplexEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var complexHouseImplementors = []string{"ComplexHouse"}

func (ec *executionContext) _ComplexHouse(ctx context.Context, sel ast.SelectionSet, obj *public_models.ComplexHouse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, complexHouseImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ComplexHouse")
		case "id":
			out.Values[i] = ec._ComplexHouse_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "complex":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._ComplexHouse_complex(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "title":
			out.Values[i] = ec._ComplexHouse_title(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "description":
			out.Values[i] = ec._ComplexHouse_description(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "address":
			out.Values[i] = ec._ComplexHouse_address(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "lat":
			out.Values[i] = ec._ComplexHouse_lat(ctx, field, obj)
		case "lon":
			out.Values[i] = ec._ComplexHouse_lon(ctx, field, obj)
		case "cadastrNumber":
			out.Values[i] = ec._ComplexHouse_cadastrNumber(ctx, field, obj)
		case "seoText":
			out.Values[i] = ec._ComplexHouse_seoText(ctx, field, obj)
		case "youtubeLink":
			out.Values[i] = ec._ComplexHouse_youtubeLink(ctx, field, obj)
		case "tourLink":
			out.Values[i] = ec._ComplexHouse_tourLink(ctx, field, obj)
		case "isReady":
			out.Values[i] = ec._ComplexHouse_isReady(ctx, field, obj)
		case "readinessQuarter":
			out.Values[i] = ec._ComplexHouse_readinessQuarter(ctx, field, obj)
		case "readinessYear":
			out.Values[i] = ec._ComplexHouse_readinessYear(ctx, field, obj)
		case "images":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._ComplexHouse_images(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "documents":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._ComplexHouse_documents(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "projectDeclarations":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._ComplexHouse_projectDeclarations(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "createdAt":
			out.Values[i] = ec._ComplexHouse_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "updatedAt":
			out.Values[i] = ec._ComplexHouse_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var complexHouseConnectionImplementors = []string{"ComplexHouseConnection"}

func (ec *executionContext) _ComplexHouseConnection(ctx context.Context, sel ast.SelectionSet, obj *public_models.ComplexHouseConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, complexHouseConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ComplexHouseConnection")
		case "totalCount":
			out.Values[i] = ec._ComplexHouseConnection_totalCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "edges":
			out.Values[i] = ec._ComplexHouseConnection_edges(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "nodes":
			out.Values[i] = ec._ComplexHouseConnection_nodes(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "pageInfo":
			out.Values[i] = ec._ComplexHouseConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var complexHouseEdgeImplementors = []string{"ComplexHouseEdge"}

func (ec *executionContext) _ComplexHouseEdge(ctx context.Context, sel ast.SelectionSet, obj *public_models.ComplexHouseEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, complexHouseEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ComplexHouseEdge")
		case "node":
			out.Values[i] = ec._ComplexHouseEdge_node(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "cursor":
			out.Values[i] = ec._ComplexHouseEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var contentBlockImplementors = []string{"ContentBlock"}

func (ec *executionContext) _ContentBlock(ctx context.Context, sel ast.SelectionSet, obj *public_models.ContentBlock) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, contentBlockImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ContentBlock")
		case "type":
			out.Values[i] = ec._ContentBlock_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "data":
			out.Values[i] = ec._ContentBlock_data(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "isVisible":
			out.Values[i] = ec._ContentBlock_isVisible(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var developerImplementors = []string{"Developer"}

func (ec *executionContext) _Developer(ctx context.Context, sel ast.SelectionSet, obj *public_models.Developer) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, developerImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Developer")
		case "id":
			out.Values[i] = ec._Developer_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "title":
			out.Values[i] = ec._Developer_title(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "url":
			out.Values[i] = ec._Developer_url(ctx, field, obj)
		case "logo":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Developer_logo(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "createdAt":
			out.Values[i] = ec._Developer_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "updatedAt":
			out.Values[i] = ec._Developer_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var developerConnectionImplementors = []string{"DeveloperConnection"}

func (ec *executionContext) _DeveloperConnection(ctx context.Context, sel ast.SelectionSet, obj *public_models.DeveloperConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, developerConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DeveloperConnection")
		case "totalCount":
			out.Values[i] = ec._DeveloperConnection_totalCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "edges":
			out.Values[i] = ec._DeveloperConnection_edges(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "nodes":
			out.Values[i] = ec._DeveloperConnection_nodes(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "pageInfo":
			out.Values[i] = ec._DeveloperConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var developerEdgeImplementors = []string{"DeveloperEdge"}

func (ec *executionContext) _DeveloperEdge(ctx context.Context, sel ast.SelectionSet, obj *public_models.DeveloperEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, developerEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DeveloperEdge")
		case "node":
			out.Values[i] = ec._DeveloperEdge_node(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "cursor":
			out.Values[i] = ec._DeveloperEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var documentImplementors = []string{"Document"}

func (ec *executionContext) _Document(ctx context.Context, sel ast.SelectionSet, obj *public_models.Document) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, documentImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Document")
		case "id":
			out.Values[i] = ec._Document_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "url":
			out.Values[i] = ec._Document_url(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "path":
			out.Values[i] = ec._Document_path(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "title":
			out.Values[i] = ec._Document_title(ctx, field, obj)
		case "fileName":
			out.Values[i] = ec._Document_fileName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "fileType":
			out.Values[i] = ec._Document_fileType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createdAt":
			out.Values[i] = ec._Document_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var employeeImplementors = []string{"Employee"}

func (ec *executionContext) _Employee(ctx context.Context, sel ast.SelectionSet, obj *public_models.Employee) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, employeeImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Employee")
		case "id":
			out.Values[i] = ec._Employee_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "name":
			out.Values[i] = ec._Employee_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "surname":
			out.Values[i] = ec._Employee_surname(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "patronymic":
			out.Values[i] = ec._Employee_patronymic(ctx, field, obj)
		case "birthday":
			out.Values[i] = ec._Employee_birthday(ctx, field, obj)
		case "email":
			out.Values[i] = ec._Employee_email(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "phone":
			out.Values[i] = ec._Employee_phone(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "internalInfo":
			out.Values[i] = ec._Employee_internalInfo(ctx, field, obj)
		case "shortDescription":
			out.Values[i] = ec._Employee_shortDescription(ctx, field, obj)
		case "description":
			out.Values[i] = ec._Employee_description(ctx, field, obj)
		case "isPublished":
			out.Values[i] = ec._Employee_isPublished(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "isDeleted":
			out.Values[i] = ec._Employee_isDeleted(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "avatar":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Employee_avatar(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "publicImage":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Employee_publicImage(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "createdAt":
			out.Values[i] = ec._Employee_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "updatedAt":
			out.Values[i] = ec._Employee_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var employeeConnectionImplementors = []string{"EmployeeConnection"}

func (ec *executionContext) _EmployeeConnection(ctx context.Context, sel ast.SelectionSet, obj *public_models.EmployeeConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, employeeConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EmployeeConnection")
		case "totalCount":
			out.Values[i] = ec._EmployeeConnection_totalCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "edges":
			out.Values[i] = ec._EmployeeConnection_edges(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "nodes":
			out.Values[i] = ec._EmployeeConnection_nodes(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "pageInfo":
			out.Values[i] = ec._EmployeeConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var employeeEdgeImplementors = []string{"EmployeeEdge"}

func (ec *executionContext) _EmployeeEdge(ctx context.Context, sel ast.SelectionSet, obj *public_models.EmployeeEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, employeeEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EmployeeEdge")
		case "node":
			out.Values[i] = ec._EmployeeEdge_node(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "cursor":
			out.Values[i] = ec._EmployeeEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var imageImplementors = []string{"Image"}

func (ec *executionContext) _Image(ctx context.Context, sel ast.SelectionSet, obj *public_models.Image) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, imageImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Image")
		case "id":
			out.Values[i] = ec._Image_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "url":
			out.Values[i] = ec._Image_url(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "path":
			out.Values[i] = ec._Image_path(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "title":
			out.Values[i] = ec._Image_title(ctx, field, obj)
		case "fileName":
			out.Values[i] = ec._Image_fileName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "fileType":
			out.Values[i] = ec._Image_fileType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "previewUrl":
			out.Values[i] = ec._Image_previewUrl(ctx, field, obj)
		case "previewPath":
			out.Values[i] = ec._Image_previewPath(ctx, field, obj)
		case "blurHash":
			out.Values[i] = ec._Image_blurHash(ctx, field, obj)
		case "preset":
			out.Values[i] = ec._Image_preset(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createdAt":
			out.Values[i] = ec._Image_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var mutationImplementors = []string{"Mutation"}

func (ec *executionContext) _Mutation(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, mutationImplementors)
	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Mutation",
	})

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		innerCtx := graphql.WithRootFieldContext(ctx, &graphql.RootFieldContext{
			Object: field.Name,
			Field:  field,
		})

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Mutation")
		case "uploadImage":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_uploadImage(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "uploadDocument":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_uploadDocument(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createVacancyRequest":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createVacancyRequest(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var pageImplementors = []string{"Page"}

func (ec *executionContext) _Page(ctx context.Context, sel ast.SelectionSet, obj *public_models.Page) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, pageImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Page")
		case "id":
			out.Values[i] = ec._Page_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "url":
			out.Values[i] = ec._Page_url(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "title":
			out.Values[i] = ec._Page_title(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "description":
			out.Values[i] = ec._Page_description(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "contentBlocks":
			out.Values[i] = ec._Page_contentBlocks(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "status":
			out.Values[i] = ec._Page_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createdAt":
			out.Values[i] = ec._Page_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updatedAt":
			out.Values[i] = ec._Page_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var pageConnectionImplementors = []string{"PageConnection"}

func (ec *executionContext) _PageConnection(ctx context.Context, sel ast.SelectionSet, obj *public_models.PageConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, pageConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PageConnection")
		case "totalCount":
			out.Values[i] = ec._PageConnection_totalCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "edges":
			out.Values[i] = ec._PageConnection_edges(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "nodes":
			out.Values[i] = ec._PageConnection_nodes(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "pageInfo":
			out.Values[i] = ec._PageConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var pageEdgeImplementors = []string{"PageEdge"}

func (ec *executionContext) _PageEdge(ctx context.Context, sel ast.SelectionSet, obj *public_models.PageEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, pageEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PageEdge")
		case "node":
			out.Values[i] = ec._PageEdge_node(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "cursor":
			out.Values[i] = ec._PageEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var pageInfoImplementors = []string{"PageInfo"}

func (ec *executionContext) _PageInfo(ctx context.Context, sel ast.SelectionSet, obj *public_models.PageInfo) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, pageInfoImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PageInfo")
		case "startCursor":
			out.Values[i] = ec._PageInfo_startCursor(ctx, field, obj)
		case "endCursor":
			out.Values[i] = ec._PageInfo_endCursor(ctx, field, obj)
		case "hasNextPage":
			out.Values[i] = ec._PageInfo_hasNextPage(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "hasPreviousPage":
			out.Values[i] = ec._PageInfo_hasPreviousPage(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var propertyImplementors = []string{"Property"}

func (ec *executionContext) _Property(ctx context.Context, sel ast.SelectionSet, obj *public_models.Property) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, propertyImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Property")
		case "id":
			out.Values[i] = ec._Property_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "internalID":
			out.Values[i] = ec._Property_internalID(ctx, field, obj)
		case "deal":
			out.Values[i] = ec._Property_deal(ctx, field, obj)
		case "type":
			out.Values[i] = ec._Property_type(ctx, field, obj)
		case "subType":
			out.Values[i] = ec._Property_subType(ctx, field, obj)
		case "commercialUsage":
			out.Values[i] = ec._Property_commercialUsage(ctx, field, obj)
		case "fromDeveloper":
			out.Values[i] = ec._Property_fromDeveloper(ctx, field, obj)
		case "inComplex":
			out.Values[i] = ec._Property_inComplex(ctx, field, obj)
		case "complex":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Property_complex(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "complexHouse":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Property_complexHouse(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "inVillage":
			out.Values[i] = ec._Property_inVillage(ctx, field, obj)
		case "village":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Property_village(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "isHot":
			out.Values[i] = ec._Property_isHot(ctx, field, obj)
		case "title":
			out.Values[i] = ec._Property_title(ctx, field, obj)
		case "description":
			out.Values[i] = ec._Property_description(ctx, field, obj)
		case "address":
			out.Values[i] = ec._Property_address(ctx, field, obj)
		case "lat":
			out.Values[i] = ec._Property_lat(ctx, field, obj)
		case "lon":
			out.Values[i] = ec._Property_lon(ctx, field, obj)
		case "cadastrNumber":
			out.Values[i] = ec._Property_cadastrNumber(ctx, field, obj)
		case "seoText":
			out.Values[i] = ec._Property_seoText(ctx, field, obj)
		case "youtubeLink":
			out.Values[i] = ec._Property_youtubeLink(ctx, field, obj)
		case "tourLink":
			out.Values[i] = ec._Property_tourLink(ctx, field, obj)
		case "documents":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Property_documents(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "images":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Property_images(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "refreshDate":
			out.Values[i] = ec._Property_refreshDate(ctx, field, obj)
		case "price":
			out.Values[i] = ec._Property_price(ctx, field, obj)
		case "pricePerMeter":
			out.Values[i] = ec._Property_pricePerMeter(ctx, field, obj)
		case "pricePerAr":
			out.Values[i] = ec._Property_pricePerAr(ctx, field, obj)
		case "isReady":
			out.Values[i] = ec._Property_isReady(ctx, field, obj)
		case "readinessYear":
			out.Values[i] = ec._Property_readinessYear(ctx, field, obj)
		case "readinessQuarter":
			out.Values[i] = ec._Property_readinessQuarter(ctx, field, obj)
		case "inCity":
			out.Values[i] = ec._Property_inCity(ctx, field, obj)
		case "cityDistance":
			out.Values[i] = ec._Property_cityDistance(ctx, field, obj)
		case "region":
			out.Values[i] = ec._Property_region(ctx, field, obj)
		case "subRegion":
			out.Values[i] = ec._Property_subRegion(ctx, field, obj)
		case "rooms":
			out.Values[i] = ec._Property_rooms(ctx, field, obj)
		case "area":
			out.Values[i] = ec._Property_area(ctx, field, obj)
		case "landArea":
			out.Values[i] = ec._Property_landArea(ctx, field, obj)
		case "livingArea":
			out.Values[i] = ec._Property_livingArea(ctx, field, obj)
		case "kitchenArea":
			out.Values[i] = ec._Property_kitchenArea(ctx, field, obj)
		case "toiletType":
			out.Values[i] = ec._Property_toiletType(ctx, field, obj)
		case "rehabType":
			out.Values[i] = ec._Property_rehabType(ctx, field, obj)
		case "floor":
			out.Values[i] = ec._Property_floor(ctx, field, obj)
		case "floors":
			out.Values[i] = ec._Property_floors(ctx, field, obj)
		case "ceilingHeight":
			out.Values[i] = ec._Property_ceilingHeight(ctx, field, obj)
		case "comissionPercent":
			out.Values[i] = ec._Property_comissionPercent(ctx, field, obj)
		case "comissionAmount":
			out.Values[i] = ec._Property_comissionAmount(ctx, field, obj)
		case "createdAt":
			out.Values[i] = ec._Property_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "updatedAt":
			out.Values[i] = ec._Property_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var propertyConnectionImplementors = []string{"PropertyConnection"}

func (ec *executionContext) _PropertyConnection(ctx context.Context, sel ast.SelectionSet, obj *public_models.PropertyConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, propertyConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PropertyConnection")
		case "totalCount":
			out.Values[i] = ec._PropertyConnection_totalCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "edges":
			out.Values[i] = ec._PropertyConnection_edges(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "nodes":
			out.Values[i] = ec._PropertyConnection_nodes(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "pageInfo":
			out.Values[i] = ec._PropertyConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var propertyEdgeImplementors = []string{"PropertyEdge"}

func (ec *executionContext) _PropertyEdge(ctx context.Context, sel ast.SelectionSet, obj *public_models.PropertyEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, propertyEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PropertyEdge")
		case "node":
			out.Values[i] = ec._PropertyEdge_node(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "cursor":
			out.Values[i] = ec._PropertyEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var queryImplementors = []string{"Query"}

func (ec *executionContext) _Query(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, queryImplementors)
	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Query",
	})

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		innerCtx := graphql.WithRootFieldContext(ctx, &graphql.RootFieldContext{
			Object: field.Name,
			Field:  field,
		})

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Query")
		case "complexHouses":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_complexHouses(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "complexHouse":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_complexHouse(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "complexes":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_complexes(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "complex":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_complex(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "developers":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_developers(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "developer":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_developer(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "employees":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_employees(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "employee":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_employee(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "generatePdf":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_generatePdf(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "page":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_page(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "properties":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_properties(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "property":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_property(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "reviews":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_reviews(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "review":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_review(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "stories":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_stories(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "story":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_story(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "vacancies":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_vacancies(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "vacancy":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_vacancy(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "villages":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_villages(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "village":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_village(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "__type":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Query___type(ctx, field)
			})
		case "__schema":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Query___schema(ctx, field)
			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var readinessImplementors = []string{"Readiness"}

func (ec *executionContext) _Readiness(ctx context.Context, sel ast.SelectionSet, obj *public_models.Readiness) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, readinessImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Readiness")
		case "year":
			out.Values[i] = ec._Readiness_year(ctx, field, obj)
		case "quarter":
			out.Values[i] = ec._Readiness_quarter(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var reviewImplementors = []string{"Review"}

func (ec *executionContext) _Review(ctx context.Context, sel ast.SelectionSet, obj *public_models.Review) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, reviewImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Review")
		case "id":
			out.Values[i] = ec._Review_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "employee":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Review_employee(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "text":
			out.Values[i] = ec._Review_text(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "authorName":
			out.Values[i] = ec._Review_authorName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "authorPhone":
			out.Values[i] = ec._Review_authorPhone(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "status":
			out.Values[i] = ec._Review_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "createdAt":
			out.Values[i] = ec._Review_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "updatedAt":
			out.Values[i] = ec._Review_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var reviewConnectionImplementors = []string{"ReviewConnection"}

func (ec *executionContext) _ReviewConnection(ctx context.Context, sel ast.SelectionSet, obj *public_models.ReviewConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, reviewConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ReviewConnection")
		case "totalCount":
			out.Values[i] = ec._ReviewConnection_totalCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "edges":
			out.Values[i] = ec._ReviewConnection_edges(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "nodes":
			out.Values[i] = ec._ReviewConnection_nodes(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "pageInfo":
			out.Values[i] = ec._ReviewConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var reviewEdgeImplementors = []string{"ReviewEdge"}

func (ec *executionContext) _ReviewEdge(ctx context.Context, sel ast.SelectionSet, obj *public_models.ReviewEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, reviewEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ReviewEdge")
		case "node":
			out.Values[i] = ec._ReviewEdge_node(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "cursor":
			out.Values[i] = ec._ReviewEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var storyImplementors = []string{"Story"}

func (ec *executionContext) _Story(ctx context.Context, sel ast.SelectionSet, obj *public_models.Story) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, storyImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Story")
		case "id":
			out.Values[i] = ec._Story_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "category":
			out.Values[i] = ec._Story_category(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "title":
			out.Values[i] = ec._Story_title(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "teaser":
			out.Values[i] = ec._Story_teaser(ctx, field, obj)
		case "contentBlocks":
			out.Values[i] = ec._Story_contentBlocks(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "cover":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Story_cover(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "createdAt":
			out.Values[i] = ec._Story_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "updatedAt":
			out.Values[i] = ec._Story_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var storyConnectionImplementors = []string{"StoryConnection"}

func (ec *executionContext) _StoryConnection(ctx context.Context, sel ast.SelectionSet, obj *public_models.StoryConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, storyConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("StoryConnection")
		case "totalCount":
			out.Values[i] = ec._StoryConnection_totalCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "edges":
			out.Values[i] = ec._StoryConnection_edges(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "nodes":
			out.Values[i] = ec._StoryConnection_nodes(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "pageInfo":
			out.Values[i] = ec._StoryConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var storyEdgeImplementors = []string{"StoryEdge"}

func (ec *executionContext) _StoryEdge(ctx context.Context, sel ast.SelectionSet, obj *public_models.StoryEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, storyEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("StoryEdge")
		case "node":
			out.Values[i] = ec._StoryEdge_node(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "cursor":
			out.Values[i] = ec._StoryEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var vacancyImplementors = []string{"Vacancy"}

func (ec *executionContext) _Vacancy(ctx context.Context, sel ast.SelectionSet, obj *public_models.Vacancy) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vacancyImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Vacancy")
		case "id":
			out.Values[i] = ec._Vacancy_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "title":
			out.Values[i] = ec._Vacancy_title(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "description":
			out.Values[i] = ec._Vacancy_description(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "experience":
			out.Values[i] = ec._Vacancy_experience(ctx, field, obj)
		case "salary":
			out.Values[i] = ec._Vacancy_salary(ctx, field, obj)
		case "schedule":
			out.Values[i] = ec._Vacancy_schedule(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "publicationStatus":
			out.Values[i] = ec._Vacancy_publicationStatus(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createdAt":
			out.Values[i] = ec._Vacancy_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updatedAt":
			out.Values[i] = ec._Vacancy_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var vacancyConnectionImplementors = []string{"VacancyConnection"}

func (ec *executionContext) _VacancyConnection(ctx context.Context, sel ast.SelectionSet, obj *public_models.VacancyConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vacancyConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VacancyConnection")
		case "totalCount":
			out.Values[i] = ec._VacancyConnection_totalCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "edges":
			out.Values[i] = ec._VacancyConnection_edges(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "nodes":
			out.Values[i] = ec._VacancyConnection_nodes(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "pageInfo":
			out.Values[i] = ec._VacancyConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var vacancyEdgeImplementors = []string{"VacancyEdge"}

func (ec *executionContext) _VacancyEdge(ctx context.Context, sel ast.SelectionSet, obj *public_models.VacancyEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vacancyEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VacancyEdge")
		case "node":
			out.Values[i] = ec._VacancyEdge_node(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "cursor":
			out.Values[i] = ec._VacancyEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var villageImplementors = []string{"Village"}

func (ec *executionContext) _Village(ctx context.Context, sel ast.SelectionSet, obj *public_models.Village) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, villageImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Village")
		case "id":
			out.Values[i] = ec._Village_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "title":
			out.Values[i] = ec._Village_title(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "description":
			out.Values[i] = ec._Village_description(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "address":
			out.Values[i] = ec._Village_address(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "lat":
			out.Values[i] = ec._Village_lat(ctx, field, obj)
		case "lon":
			out.Values[i] = ec._Village_lon(ctx, field, obj)
		case "cadastrNumber":
			out.Values[i] = ec._Village_cadastrNumber(ctx, field, obj)
		case "seoText":
			out.Values[i] = ec._Village_seoText(ctx, field, obj)
		case "youtubeLink":
			out.Values[i] = ec._Village_youtubeLink(ctx, field, obj)
		case "tourLink":
			out.Values[i] = ec._Village_tourLink(ctx, field, obj)
		case "inCity":
			out.Values[i] = ec._Village_inCity(ctx, field, obj)
		case "cityDistance":
			out.Values[i] = ec._Village_cityDistance(ctx, field, obj)
		case "region":
			out.Values[i] = ec._Village_region(ctx, field, obj)
		case "subRegion":
			out.Values[i] = ec._Village_subRegion(ctx, field, obj)
		case "developer":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Village_developer(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "isReady":
			out.Values[i] = ec._Village_isReady(ctx, field, obj)
		case "readinessQuarter":
			out.Values[i] = ec._Village_readinessQuarter(ctx, field, obj)
		case "readinessYear":
			out.Values[i] = ec._Village_readinessYear(ctx, field, obj)
		case "images":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Village_images(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "documents":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Village_documents(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "projectDeclarations":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Village_projectDeclarations(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "createdAt":
			out.Values[i] = ec._Village_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "updatedAt":
			out.Values[i] = ec._Village_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var villageConnectionImplementors = []string{"VillageConnection"}

func (ec *executionContext) _VillageConnection(ctx context.Context, sel ast.SelectionSet, obj *public_models.VillageConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, villageConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VillageConnection")
		case "totalCount":
			out.Values[i] = ec._VillageConnection_totalCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "edges":
			out.Values[i] = ec._VillageConnection_edges(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "nodes":
			out.Values[i] = ec._VillageConnection_nodes(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "pageInfo":
			out.Values[i] = ec._VillageConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var villageEdgeImplementors = []string{"VillageEdge"}

func (ec *executionContext) _VillageEdge(ctx context.Context, sel ast.SelectionSet, obj *public_models.VillageEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, villageEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VillageEdge")
		case "node":
			out.Values[i] = ec._VillageEdge_node(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "cursor":
			out.Values[i] = ec._VillageEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __DirectiveImplementors = []string{"__Directive"}

func (ec *executionContext) ___Directive(ctx context.Context, sel ast.SelectionSet, obj *introspection.Directive) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __DirectiveImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Directive")
		case "name":
			out.Values[i] = ec.___Directive_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "description":
			out.Values[i] = ec.___Directive_description(ctx, field, obj)
		case "locations":
			out.Values[i] = ec.___Directive_locations(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "args":
			out.Values[i] = ec.___Directive_args(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "isRepeatable":
			out.Values[i] = ec.___Directive_isRepeatable(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __EnumValueImplementors = []string{"__EnumValue"}

func (ec *executionContext) ___EnumValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.EnumValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __EnumValueImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__EnumValue")
		case "name":
			out.Values[i] = ec.___EnumValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "description":
			out.Values[i] = ec.___EnumValue_description(ctx, field, obj)
		case "isDeprecated":
			out.Values[i] = ec.___EnumValue_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___EnumValue_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __FieldImplementors = []string{"__Field"}

func (ec *executionContext) ___Field(ctx context.Context, sel ast.SelectionSet, obj *introspection.Field) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __FieldImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Field")
		case "name":
			out.Values[i] = ec.___Field_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "description":
			out.Values[i] = ec.___Field_description(ctx, field, obj)
		case "args":
			out.Values[i] = ec.___Field_args(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "type":
			out.Values[i] = ec.___Field_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "isDeprecated":
			out.Values[i] = ec.___Field_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___Field_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __InputValueImplementors = []string{"__InputValue"}

func (ec *executionContext) ___InputValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.InputValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __InputValueImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__InputValue")
		case "name":
			out.Values[i] = ec.___InputValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "description":
			out.Values[i] = ec.___InputValue_description(ctx, field, obj)
		case "type":
			out.Values[i] = ec.___InputValue_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "defaultValue":
			out.Values[i] = ec.___InputValue_defaultValue(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __SchemaImplementors = []string{"__Schema"}

func (ec *executionContext) ___Schema(ctx context.Context, sel ast.SelectionSet, obj *introspection.Schema) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __SchemaImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Schema")
		case "description":
			out.Values[i] = ec.___Schema_description(ctx, field, obj)
		case "types":
			out.Values[i] = ec.___Schema_types(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "queryType":
			out.Values[i] = ec.___Schema_queryType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "mutationType":
			out.Values[i] = ec.___Schema_mutationType(ctx, field, obj)
		case "subscriptionType":
			out.Values[i] = ec.___Schema_subscriptionType(ctx, field, obj)
		case "directives":
			out.Values[i] = ec.___Schema_directives(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __TypeImplementors = []string{"__Type"}

func (ec *executionContext) ___Type(ctx context.Context, sel ast.SelectionSet, obj *introspection.Type) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __TypeImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Type")
		case "kind":
			out.Values[i] = ec.___Type_kind(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "name":
			out.Values[i] = ec.___Type_name(ctx, field, obj)
		case "description":
			out.Values[i] = ec.___Type_description(ctx, field, obj)
		case "fields":
			out.Values[i] = ec.___Type_fields(ctx, field, obj)
		case "interfaces":
			out.Values[i] = ec.___Type_interfaces(ctx, field, obj)
		case "possibleTypes":
			out.Values[i] = ec.___Type_possibleTypes(ctx, field, obj)
		case "enumValues":
			out.Values[i] = ec.___Type_enumValues(ctx, field, obj)
		case "inputFields":
			out.Values[i] = ec.___Type_inputFields(ctx, field, obj)
		case "ofType":
			out.Values[i] = ec.___Type_ofType(ctx, field, obj)
		case "specifiedByURL":
			out.Values[i] = ec.___Type_specifiedByURL(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

// endregion **************************** object.gotpl ****************************

// region    ***************************** type.gotpl *****************************

func (ec *executionContext) unmarshalNBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	res := graphql.MarshalBoolean(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) marshalNComplex2githubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐComplex(ctx context.Context, sel ast.SelectionSet, v public_models.Complex) graphql.Marshaler {
	return ec._Complex(ctx, sel, &v)
}

func (ec *executionContext) marshalNComplex2ᚕᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐComplexᚄ(ctx context.Context, sel ast.SelectionSet, v []*public_models.Complex) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNComplex2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐComplex(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNComplex2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐComplex(ctx context.Context, sel ast.SelectionSet, v *public_models.Complex) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Complex(ctx, sel, v)
}

func (ec *executionContext) marshalNComplexConnection2githubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐComplexConnection(ctx context.Context, sel ast.SelectionSet, v public_models.ComplexConnection) graphql.Marshaler {
	return ec._ComplexConnection(ctx, sel, &v)
}

func (ec *executionContext) marshalNComplexConnection2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐComplexConnection(ctx context.Context, sel ast.SelectionSet, v *public_models.ComplexConnection) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ComplexConnection(ctx, sel, v)
}

func (ec *executionContext) marshalNComplexEdge2ᚕᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐComplexEdgeᚄ(ctx context.Context, sel ast.SelectionSet, v []*public_models.ComplexEdge) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNComplexEdge2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐComplexEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNComplexEdge2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐComplexEdge(ctx context.Context, sel ast.SelectionSet, v *public_models.ComplexEdge) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ComplexEdge(ctx, sel, v)
}

func (ec *executionContext) marshalNComplexHouse2githubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐComplexHouse(ctx context.Context, sel ast.SelectionSet, v public_models.ComplexHouse) graphql.Marshaler {
	return ec._ComplexHouse(ctx, sel, &v)
}

func (ec *executionContext) marshalNComplexHouse2ᚕᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐComplexHouseᚄ(ctx context.Context, sel ast.SelectionSet, v []*public_models.ComplexHouse) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNComplexHouse2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐComplexHouse(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNComplexHouse2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐComplexHouse(ctx context.Context, sel ast.SelectionSet, v *public_models.ComplexHouse) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ComplexHouse(ctx, sel, v)
}

func (ec *executionContext) marshalNComplexHouseConnection2githubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐComplexHouseConnection(ctx context.Context, sel ast.SelectionSet, v public_models.ComplexHouseConnection) graphql.Marshaler {
	return ec._ComplexHouseConnection(ctx, sel, &v)
}

func (ec *executionContext) marshalNComplexHouseConnection2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐComplexHouseConnection(ctx context.Context, sel ast.SelectionSet, v *public_models.ComplexHouseConnection) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ComplexHouseConnection(ctx, sel, v)
}

func (ec *executionContext) marshalNComplexHouseEdge2ᚕᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐComplexHouseEdgeᚄ(ctx context.Context, sel ast.SelectionSet, v []*public_models.ComplexHouseEdge) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNComplexHouseEdge2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐComplexHouseEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNComplexHouseEdge2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐComplexHouseEdge(ctx context.Context, sel ast.SelectionSet, v *public_models.ComplexHouseEdge) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ComplexHouseEdge(ctx, sel, v)
}

func (ec *executionContext) marshalNContentBlock2githubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐContentBlock(ctx context.Context, sel ast.SelectionSet, v public_models.ContentBlock) graphql.Marshaler {
	return ec._ContentBlock(ctx, sel, &v)
}

func (ec *executionContext) marshalNContentBlock2ᚕgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐContentBlockᚄ(ctx context.Context, sel ast.SelectionSet, v []public_models.ContentBlock) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNContentBlock2githubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐContentBlock(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNContentBlock2ᚕᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐContentBlockᚄ(ctx context.Context, sel ast.SelectionSet, v []*public_models.ContentBlock) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNContentBlock2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐContentBlock(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNContentBlock2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐContentBlock(ctx context.Context, sel ast.SelectionSet, v *public_models.ContentBlock) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ContentBlock(ctx, sel, v)
}

func (ec *executionContext) unmarshalNContentBlockType2githubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐContentBlockType(ctx context.Context, v interface{}) (public_models.ContentBlockType, error) {
	var res public_models.ContentBlockType
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNContentBlockType2githubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐContentBlockType(ctx context.Context, sel ast.SelectionSet, v public_models.ContentBlockType) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNCursor2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNCursor2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) marshalNDeveloper2githubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐDeveloper(ctx context.Context, sel ast.SelectionSet, v public_models.Developer) graphql.Marshaler {
	return ec._Developer(ctx, sel, &v)
}

func (ec *executionContext) marshalNDeveloper2ᚕᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐDeveloperᚄ(ctx context.Context, sel ast.SelectionSet, v []*public_models.Developer) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNDeveloper2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐDeveloper(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNDeveloper2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐDeveloper(ctx context.Context, sel ast.SelectionSet, v *public_models.Developer) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Developer(ctx, sel, v)
}

func (ec *executionContext) marshalNDeveloperConnection2githubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐDeveloperConnection(ctx context.Context, sel ast.SelectionSet, v public_models.DeveloperConnection) graphql.Marshaler {
	return ec._DeveloperConnection(ctx, sel, &v)
}

func (ec *executionContext) marshalNDeveloperConnection2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐDeveloperConnection(ctx context.Context, sel ast.SelectionSet, v *public_models.DeveloperConnection) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._DeveloperConnection(ctx, sel, v)
}

func (ec *executionContext) marshalNDeveloperEdge2ᚕᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐDeveloperEdgeᚄ(ctx context.Context, sel ast.SelectionSet, v []*public_models.DeveloperEdge) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNDeveloperEdge2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐDeveloperEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNDeveloperEdge2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐDeveloperEdge(ctx context.Context, sel ast.SelectionSet, v *public_models.DeveloperEdge) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._DeveloperEdge(ctx, sel, v)
}

func (ec *executionContext) marshalNDocument2githubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐDocument(ctx context.Context, sel ast.SelectionSet, v public_models.Document) graphql.Marshaler {
	return ec._Document(ctx, sel, &v)
}

func (ec *executionContext) marshalNDocument2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐDocument(ctx context.Context, sel ast.SelectionSet, v *public_models.Document) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Document(ctx, sel, v)
}

func (ec *executionContext) unmarshalNDocumentInput2githubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐDocumentInput(ctx context.Context, v interface{}) (public_models.DocumentInput, error) {
	res, err := ec.unmarshalInputDocumentInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNDocumentInput2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐDocumentInput(ctx context.Context, v interface{}) (*public_models.DocumentInput, error) {
	res, err := ec.unmarshalInputDocumentInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNEmployee2githubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐEmployee(ctx context.Context, sel ast.SelectionSet, v public_models.Employee) graphql.Marshaler {
	return ec._Employee(ctx, sel, &v)
}

func (ec *executionContext) marshalNEmployee2ᚕᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐEmployeeᚄ(ctx context.Context, sel ast.SelectionSet, v []*public_models.Employee) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNEmployee2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐEmployee(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNEmployee2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐEmployee(ctx context.Context, sel ast.SelectionSet, v *public_models.Employee) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Employee(ctx, sel, v)
}

func (ec *executionContext) marshalNEmployeeConnection2githubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐEmployeeConnection(ctx context.Context, sel ast.SelectionSet, v public_models.EmployeeConnection) graphql.Marshaler {
	return ec._EmployeeConnection(ctx, sel, &v)
}

func (ec *executionContext) marshalNEmployeeConnection2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐEmployeeConnection(ctx context.Context, sel ast.SelectionSet, v *public_models.EmployeeConnection) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._EmployeeConnection(ctx, sel, v)
}

func (ec *executionContext) marshalNEmployeeEdge2ᚕᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐEmployeeEdgeᚄ(ctx context.Context, sel ast.SelectionSet, v []*public_models.EmployeeEdge) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNEmployeeEdge2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐEmployeeEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNEmployeeEdge2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐEmployeeEdge(ctx context.Context, sel ast.SelectionSet, v *public_models.EmployeeEdge) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._EmployeeEdge(ctx, sel, v)
}

func (ec *executionContext) unmarshalNID2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNID2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) marshalNImage2githubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐImage(ctx context.Context, sel ast.SelectionSet, v public_models.Image) graphql.Marshaler {
	return ec._Image(ctx, sel, &v)
}

func (ec *executionContext) marshalNImage2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐImage(ctx context.Context, sel ast.SelectionSet, v *public_models.Image) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Image(ctx, sel, v)
}

func (ec *executionContext) unmarshalNImageInput2githubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐImageInput(ctx context.Context, v interface{}) (public_models.ImageInput, error) {
	res, err := ec.unmarshalInputImageInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNImagePreset2githubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐImagePreset(ctx context.Context, v interface{}) (public_models.ImagePreset, error) {
	var res public_models.ImagePreset
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNImagePreset2githubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐImagePreset(ctx context.Context, sel ast.SelectionSet, v public_models.ImagePreset) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNInt2int(ctx context.Context, v interface{}) (int, error) {
	res, err := graphql.UnmarshalInt(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNInt2int(ctx context.Context, sel ast.SelectionSet, v int) graphql.Marshaler {
	res := graphql.MarshalInt(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNJSON2map(ctx context.Context, v interface{}) (map[string]interface{}, error) {
	res, err := graphql.UnmarshalMap(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNJSON2map(ctx context.Context, sel ast.SelectionSet, v map[string]interface{}) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	res := graphql.MarshalMap(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) marshalNPage2githubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐPage(ctx context.Context, sel ast.SelectionSet, v public_models.Page) graphql.Marshaler {
	return ec._Page(ctx, sel, &v)
}

func (ec *executionContext) marshalNPage2ᚕᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐPageᚄ(ctx context.Context, sel ast.SelectionSet, v []*public_models.Page) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNPage2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐPage(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNPage2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐPage(ctx context.Context, sel ast.SelectionSet, v *public_models.Page) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Page(ctx, sel, v)
}

func (ec *executionContext) marshalNPageEdge2ᚕᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐPageEdgeᚄ(ctx context.Context, sel ast.SelectionSet, v []*public_models.PageEdge) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNPageEdge2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐPageEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNPageEdge2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐPageEdge(ctx context.Context, sel ast.SelectionSet, v *public_models.PageEdge) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._PageEdge(ctx, sel, v)
}

func (ec *executionContext) marshalNPageInfo2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐPageInfo(ctx context.Context, sel ast.SelectionSet, v *public_models.PageInfo) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._PageInfo(ctx, sel, v)
}

func (ec *executionContext) marshalNProperty2githubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐProperty(ctx context.Context, sel ast.SelectionSet, v public_models.Property) graphql.Marshaler {
	return ec._Property(ctx, sel, &v)
}

func (ec *executionContext) marshalNProperty2ᚕᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐPropertyᚄ(ctx context.Context, sel ast.SelectionSet, v []*public_models.Property) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNProperty2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐProperty(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNProperty2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐProperty(ctx context.Context, sel ast.SelectionSet, v *public_models.Property) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Property(ctx, sel, v)
}

func (ec *executionContext) marshalNPropertyConnection2githubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐPropertyConnection(ctx context.Context, sel ast.SelectionSet, v public_models.PropertyConnection) graphql.Marshaler {
	return ec._PropertyConnection(ctx, sel, &v)
}

func (ec *executionContext) marshalNPropertyConnection2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐPropertyConnection(ctx context.Context, sel ast.SelectionSet, v *public_models.PropertyConnection) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._PropertyConnection(ctx, sel, v)
}

func (ec *executionContext) marshalNPropertyEdge2ᚕᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐPropertyEdgeᚄ(ctx context.Context, sel ast.SelectionSet, v []*public_models.PropertyEdge) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNPropertyEdge2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐPropertyEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNPropertyEdge2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐPropertyEdge(ctx context.Context, sel ast.SelectionSet, v *public_models.PropertyEdge) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._PropertyEdge(ctx, sel, v)
}

func (ec *executionContext) unmarshalNPublicationStatusEnum2githubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐPublicationStatusEnum(ctx context.Context, v interface{}) (public_models.PublicationStatusEnum, error) {
	var res public_models.PublicationStatusEnum
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNPublicationStatusEnum2githubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐPublicationStatusEnum(ctx context.Context, sel ast.SelectionSet, v public_models.PublicationStatusEnum) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNReview2githubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐReview(ctx context.Context, sel ast.SelectionSet, v public_models.Review) graphql.Marshaler {
	return ec._Review(ctx, sel, &v)
}

func (ec *executionContext) marshalNReview2ᚕᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐReviewᚄ(ctx context.Context, sel ast.SelectionSet, v []*public_models.Review) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNReview2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐReview(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNReview2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐReview(ctx context.Context, sel ast.SelectionSet, v *public_models.Review) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Review(ctx, sel, v)
}

func (ec *executionContext) marshalNReviewConnection2githubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐReviewConnection(ctx context.Context, sel ast.SelectionSet, v public_models.ReviewConnection) graphql.Marshaler {
	return ec._ReviewConnection(ctx, sel, &v)
}

func (ec *executionContext) marshalNReviewConnection2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐReviewConnection(ctx context.Context, sel ast.SelectionSet, v *public_models.ReviewConnection) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ReviewConnection(ctx, sel, v)
}

func (ec *executionContext) marshalNReviewEdge2ᚕᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐReviewEdgeᚄ(ctx context.Context, sel ast.SelectionSet, v []*public_models.ReviewEdge) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNReviewEdge2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐReviewEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNReviewEdge2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐReviewEdge(ctx context.Context, sel ast.SelectionSet, v *public_models.ReviewEdge) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ReviewEdge(ctx, sel, v)
}

func (ec *executionContext) unmarshalNReviewStatusEnum2githubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐReviewStatusEnum(ctx context.Context, v interface{}) (public_models.ReviewStatusEnum, error) {
	var res public_models.ReviewStatusEnum
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNReviewStatusEnum2githubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐReviewStatusEnum(ctx context.Context, sel ast.SelectionSet, v public_models.ReviewStatusEnum) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNStory2githubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐStory(ctx context.Context, sel ast.SelectionSet, v public_models.Story) graphql.Marshaler {
	return ec._Story(ctx, sel, &v)
}

func (ec *executionContext) marshalNStory2ᚕᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐStoryᚄ(ctx context.Context, sel ast.SelectionSet, v []*public_models.Story) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNStory2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐStory(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNStory2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐStory(ctx context.Context, sel ast.SelectionSet, v *public_models.Story) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Story(ctx, sel, v)
}

func (ec *executionContext) unmarshalNStoryCategoryEnum2githubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐStoryCategoryEnum(ctx context.Context, v interface{}) (public_models.StoryCategoryEnum, error) {
	var res public_models.StoryCategoryEnum
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNStoryCategoryEnum2githubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐStoryCategoryEnum(ctx context.Context, sel ast.SelectionSet, v public_models.StoryCategoryEnum) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNStoryConnection2githubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐStoryConnection(ctx context.Context, sel ast.SelectionSet, v public_models.StoryConnection) graphql.Marshaler {
	return ec._StoryConnection(ctx, sel, &v)
}

func (ec *executionContext) marshalNStoryConnection2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐStoryConnection(ctx context.Context, sel ast.SelectionSet, v *public_models.StoryConnection) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._StoryConnection(ctx, sel, v)
}

func (ec *executionContext) marshalNStoryEdge2ᚕᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐStoryEdgeᚄ(ctx context.Context, sel ast.SelectionSet, v []*public_models.StoryEdge) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNStoryEdge2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐStoryEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNStoryEdge2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐStoryEdge(ctx context.Context, sel ast.SelectionSet, v *public_models.StoryEdge) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._StoryEdge(ctx, sel, v)
}

func (ec *executionContext) unmarshalNString2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNTime2timeᚐTime(ctx context.Context, v interface{}) (time.Time, error) {
	res, err := graphql.UnmarshalTime(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNTime2timeᚐTime(ctx context.Context, sel ast.SelectionSet, v time.Time) graphql.Marshaler {
	res := graphql.MarshalTime(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) marshalNVacancy2githubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐVacancy(ctx context.Context, sel ast.SelectionSet, v public_models.Vacancy) graphql.Marshaler {
	return ec._Vacancy(ctx, sel, &v)
}

func (ec *executionContext) marshalNVacancy2ᚕᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐVacancyᚄ(ctx context.Context, sel ast.SelectionSet, v []*public_models.Vacancy) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNVacancy2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐVacancy(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNVacancy2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐVacancy(ctx context.Context, sel ast.SelectionSet, v *public_models.Vacancy) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Vacancy(ctx, sel, v)
}

func (ec *executionContext) marshalNVacancyConnection2githubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐVacancyConnection(ctx context.Context, sel ast.SelectionSet, v public_models.VacancyConnection) graphql.Marshaler {
	return ec._VacancyConnection(ctx, sel, &v)
}

func (ec *executionContext) marshalNVacancyConnection2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐVacancyConnection(ctx context.Context, sel ast.SelectionSet, v *public_models.VacancyConnection) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._VacancyConnection(ctx, sel, v)
}

func (ec *executionContext) marshalNVacancyEdge2ᚕᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐVacancyEdgeᚄ(ctx context.Context, sel ast.SelectionSet, v []*public_models.VacancyEdge) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNVacancyEdge2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐVacancyEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNVacancyEdge2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐVacancyEdge(ctx context.Context, sel ast.SelectionSet, v *public_models.VacancyEdge) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._VacancyEdge(ctx, sel, v)
}

func (ec *executionContext) unmarshalNVacancyRequestInput2githubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐVacancyRequestInput(ctx context.Context, v interface{}) (public_models.VacancyRequestInput, error) {
	res, err := ec.unmarshalInputVacancyRequestInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNVacancyScheduleEnum2githubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐVacancyScheduleEnum(ctx context.Context, v interface{}) (public_models.VacancyScheduleEnum, error) {
	var res public_models.VacancyScheduleEnum
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNVacancyScheduleEnum2githubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐVacancyScheduleEnum(ctx context.Context, sel ast.SelectionSet, v public_models.VacancyScheduleEnum) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNVillage2githubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐVillage(ctx context.Context, sel ast.SelectionSet, v public_models.Village) graphql.Marshaler {
	return ec._Village(ctx, sel, &v)
}

func (ec *executionContext) marshalNVillage2ᚕᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐVillageᚄ(ctx context.Context, sel ast.SelectionSet, v []*public_models.Village) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNVillage2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐVillage(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNVillage2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐVillage(ctx context.Context, sel ast.SelectionSet, v *public_models.Village) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Village(ctx, sel, v)
}

func (ec *executionContext) marshalNVillageConnection2githubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐVillageConnection(ctx context.Context, sel ast.SelectionSet, v public_models.VillageConnection) graphql.Marshaler {
	return ec._VillageConnection(ctx, sel, &v)
}

func (ec *executionContext) marshalNVillageConnection2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐVillageConnection(ctx context.Context, sel ast.SelectionSet, v *public_models.VillageConnection) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._VillageConnection(ctx, sel, v)
}

func (ec *executionContext) marshalNVillageEdge2ᚕᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐVillageEdgeᚄ(ctx context.Context, sel ast.SelectionSet, v []*public_models.VillageEdge) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNVillageEdge2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐVillageEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNVillageEdge2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐVillageEdge(ctx context.Context, sel ast.SelectionSet, v *public_models.VillageEdge) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._VillageEdge(ctx, sel, v)
}

func (ec *executionContext) marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx context.Context, sel ast.SelectionSet, v introspection.Directive) graphql.Marshaler {
	return ec.___Directive(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Directive) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalN__DirectiveLocation2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__DirectiveLocation2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalN__DirectiveLocation2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__DirectiveLocation2string(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx context.Context, sel ast.SelectionSet, v introspection.EnumValue) graphql.Marshaler {
	return ec.___EnumValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx context.Context, sel ast.SelectionSet, v introspection.Field) graphql.Marshaler {
	return ec.___Field(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx context.Context, sel ast.SelectionSet, v introspection.InputValue) graphql.Marshaler {
	return ec.___InputValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v introspection.Type) graphql.Marshaler {
	return ec.___Type(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

func (ec *executionContext) unmarshalN__TypeKind2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__TypeKind2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalOBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	res := graphql.MarshalBoolean(v)
	return res
}

func (ec *executionContext) unmarshalOBoolean2ᚖbool(ctx context.Context, v interface{}) (*bool, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalBoolean(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2ᚖbool(ctx context.Context, sel ast.SelectionSet, v *bool) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalBoolean(*v)
	return res
}

func (ec *executionContext) unmarshalOCommercialUsageEnum2githubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐCommercialUsageEnum(ctx context.Context, v interface{}) (public_models.CommercialUsageEnum, error) {
	var res public_models.CommercialUsageEnum
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOCommercialUsageEnum2githubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐCommercialUsageEnum(ctx context.Context, sel ast.SelectionSet, v public_models.CommercialUsageEnum) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalOCommercialUsageEnum2ᚕgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐCommercialUsageEnum(ctx context.Context, v interface{}) ([]public_models.CommercialUsageEnum, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]public_models.CommercialUsageEnum, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOCommercialUsageEnum2githubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐCommercialUsageEnum(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOCommercialUsageEnum2ᚕgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐCommercialUsageEnum(ctx context.Context, sel ast.SelectionSet, v []public_models.CommercialUsageEnum) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOCommercialUsageEnum2githubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐCommercialUsageEnum(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOComplex2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐComplex(ctx context.Context, sel ast.SelectionSet, v *public_models.Complex) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Complex(ctx, sel, v)
}

func (ec *executionContext) marshalOComplexHouse2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐComplexHouse(ctx context.Context, sel ast.SelectionSet, v *public_models.ComplexHouse) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ComplexHouse(ctx, sel, v)
}

func (ec *executionContext) unmarshalOComplexHouseFilter2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐComplexHouseFilter(ctx context.Context, v interface{}) (*public_models.ComplexHouseFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputComplexHouseFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOCursor2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalString(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOCursor2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalString(*v)
	return res
}

func (ec *executionContext) unmarshalODealEnum2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐDealEnum(ctx context.Context, v interface{}) (*public_models.DealEnum, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(public_models.DealEnum)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalODealEnum2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐDealEnum(ctx context.Context, sel ast.SelectionSet, v *public_models.DealEnum) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) marshalODeveloper2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐDeveloper(ctx context.Context, sel ast.SelectionSet, v *public_models.Developer) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Developer(ctx, sel, v)
}

func (ec *executionContext) marshalODocument2ᚕᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐDocument(ctx context.Context, sel ast.SelectionSet, v []*public_models.Document) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalODocument2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐDocument(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalODocument2ᚕᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐDocumentᚄ(ctx context.Context, sel ast.SelectionSet, v []*public_models.Document) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNDocument2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐDocument(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalODocument2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐDocument(ctx context.Context, sel ast.SelectionSet, v *public_models.Document) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Document(ctx, sel, v)
}

func (ec *executionContext) unmarshalODocumentInput2ᚕᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐDocumentInputᚄ(ctx context.Context, v interface{}) ([]*public_models.DocumentInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*public_models.DocumentInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNDocumentInput2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐDocumentInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOEmployee2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐEmployee(ctx context.Context, sel ast.SelectionSet, v *public_models.Employee) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Employee(ctx, sel, v)
}

func (ec *executionContext) unmarshalOFloat2ᚖfloat64(ctx context.Context, v interface{}) (*float64, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalFloatContext(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOFloat2ᚖfloat64(ctx context.Context, sel ast.SelectionSet, v *float64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalFloatContext(*v)
	return graphql.WrapContextMarshaler(ctx, res)
}

func (ec *executionContext) unmarshalOID2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOID2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	return res
}

func (ec *executionContext) unmarshalOID2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNID2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOID2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNID2string(ctx, sel, v[i])
	}

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOID2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalString(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOID2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalString(*v)
	return res
}

func (ec *executionContext) marshalOImage2ᚕᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐImage(ctx context.Context, sel ast.SelectionSet, v []*public_models.Image) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOImage2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐImage(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOImage2ᚕᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐImageᚄ(ctx context.Context, sel ast.SelectionSet, v []*public_models.Image) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNImage2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐImage(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOImage2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐImage(ctx context.Context, sel ast.SelectionSet, v *public_models.Image) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Image(ctx, sel, v)
}

func (ec *executionContext) unmarshalOImagePreset2githubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐImagePreset(ctx context.Context, v interface{}) (public_models.ImagePreset, error) {
	var res public_models.ImagePreset
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOImagePreset2githubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐImagePreset(ctx context.Context, sel ast.SelectionSet, v public_models.ImagePreset) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalOInt2ᚖint(ctx context.Context, v interface{}) (*int, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalInt(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOInt2ᚖint(ctx context.Context, sel ast.SelectionSet, v *int) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalInt(*v)
	return res
}

func (ec *executionContext) unmarshalOPropertyFilter2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐPropertyFilter(ctx context.Context, v interface{}) (*public_models.PropertyFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputPropertyFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOPropertySubTypeEnum2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐPropertySubTypeEnum(ctx context.Context, v interface{}) (*public_models.PropertySubTypeEnum, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(public_models.PropertySubTypeEnum)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOPropertySubTypeEnum2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐPropertySubTypeEnum(ctx context.Context, sel ast.SelectionSet, v *public_models.PropertySubTypeEnum) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOPropertyTypeEnum2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐPropertyTypeEnum(ctx context.Context, v interface{}) (*public_models.PropertyTypeEnum, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(public_models.PropertyTypeEnum)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOPropertyTypeEnum2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐPropertyTypeEnum(ctx context.Context, sel ast.SelectionSet, v *public_models.PropertyTypeEnum) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOQuarterEnum2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐQuarterEnum(ctx context.Context, v interface{}) (*public_models.QuarterEnum, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(public_models.QuarterEnum)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOQuarterEnum2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐQuarterEnum(ctx context.Context, sel ast.SelectionSet, v *public_models.QuarterEnum) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalORehabTypeEnum2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐRehabTypeEnum(ctx context.Context, v interface{}) (*public_models.RehabTypeEnum, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(public_models.RehabTypeEnum)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalORehabTypeEnum2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐRehabTypeEnum(ctx context.Context, sel ast.SelectionSet, v *public_models.RehabTypeEnum) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOReviewStatusEnum2ᚕgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐReviewStatusEnumᚄ(ctx context.Context, v interface{}) ([]public_models.ReviewStatusEnum, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]public_models.ReviewStatusEnum, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNReviewStatusEnum2githubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐReviewStatusEnum(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOReviewStatusEnum2ᚕgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐReviewStatusEnumᚄ(ctx context.Context, sel ast.SelectionSet, v []public_models.ReviewStatusEnum) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNReviewStatusEnum2githubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐReviewStatusEnum(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOReviewsFilterInput2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐReviewsFilterInput(ctx context.Context, v interface{}) (*public_models.ReviewsFilterInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputReviewsFilterInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOSort2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐSort(ctx context.Context, v interface{}) (*public_models.Sort, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputSort(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOSortDirection2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐSortDirection(ctx context.Context, v interface{}) (*public_models.SortDirection, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(public_models.SortDirection)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOSortDirection2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐSortDirection(ctx context.Context, sel ast.SelectionSet, v *public_models.SortDirection) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOString2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	return res
}

func (ec *executionContext) unmarshalOString2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNString2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOString2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNString2string(ctx, sel, v[i])
	}

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOString2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalString(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOString2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalString(*v)
	return res
}

func (ec *executionContext) unmarshalOTime2timeᚐTime(ctx context.Context, v interface{}) (time.Time, error) {
	res, err := graphql.UnmarshalTime(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOTime2timeᚐTime(ctx context.Context, sel ast.SelectionSet, v time.Time) graphql.Marshaler {
	res := graphql.MarshalTime(v)
	return res
}

func (ec *executionContext) unmarshalOToiletTypeEnum2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐToiletTypeEnum(ctx context.Context, v interface{}) (*public_models.ToiletTypeEnum, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(public_models.ToiletTypeEnum)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOToiletTypeEnum2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐToiletTypeEnum(ctx context.Context, sel ast.SelectionSet, v *public_models.ToiletTypeEnum) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOUpload2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚐUpload(ctx context.Context, v interface{}) (*graphql.Upload, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalUpload(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOUpload2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚐUpload(ctx context.Context, sel ast.SelectionSet, v *graphql.Upload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalUpload(*v)
	return res
}

func (ec *executionContext) marshalOVillage2ᚖgithubᚗcomᚋpinksᚑagencyᚋecnᚋserverᚋinternalᚋpublicᚑfacadeᚋmodelsᚐVillage(ctx context.Context, sel ast.SelectionSet, v *public_models.Village) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Village(ctx, sel, v)
}

func (ec *executionContext) marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.EnumValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Field) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx context.Context, sel ast.SelectionSet, v *introspection.Schema) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Schema(ctx, sel, v)
}

func (ec *executionContext) marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

// endregion ***************************** type.gotpl *****************************
