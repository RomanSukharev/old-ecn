package public_resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.47

import (
	"context"

	public_gateway "github.com/pinks-agency/ecn/server/internal/public-facade/gateway"
	public_models "github.com/pinks-agency/ecn/server/internal/public-facade/models"
	estate_entity "github.com/pinks-agency/ecn/server/pkg/estate/entity"
	shared_entity "github.com/pinks-agency/ecn/server/pkg/shared/entity"
	"github.com/pinks-agency/ecn/server/utils"
)

// Complex is the resolver for the complex field.
func (r *complexHouseResolver) Complex(ctx context.Context, obj *public_models.ComplexHouse) (*public_models.Complex, error) {
	if obj.ComplexID != nil {
		data, err := r.EstateService.GetComplexByID(ctx, *obj.ComplexID)
		if err != nil {
			return nil, err
		}

		return new(public_models.Complex).FromEntity(data), nil
	}

	return nil, nil
}

// Images is the resolver for the images field.
func (r *complexHouseResolver) Images(ctx context.Context, obj *public_models.ComplexHouse) ([]*public_models.Image, error) {
	result := make([]*public_models.Image, 0, len(obj.ImageIDs))

	for _, v := range obj.ImageIDs {
		data, err := r.ExchangeService.GetImageByID(ctx, v)
		if err != nil {
			return nil, nil
		}

		result = append(result, new(public_models.Image).FromEntity(data))
	}

	return result, nil
}

// Documents is the resolver for the documents field.
func (r *complexHouseResolver) Documents(ctx context.Context, obj *public_models.ComplexHouse) ([]*public_models.Document, error) {
	result := make([]*public_models.Document, 0, len(obj.DocumentIDs))

	for _, v := range obj.DocumentIDs {
		data, err := r.ExchangeService.GetDocumentByID(ctx, v)
		if err != nil {
			return nil, nil
		}

		result = append(result, new(public_models.Document).FromEntity(data))
	}

	return result, nil
}

// ProjectDeclarations is the resolver for the projectDeclarations field.
func (r *complexHouseResolver) ProjectDeclarations(ctx context.Context, obj *public_models.ComplexHouse) ([]*public_models.Document, error) {
	result := make([]*public_models.Document, 0, len(obj.ProjectDeclarationIDs))

	for _, v := range obj.ProjectDeclarationIDs {
		data, err := r.ExchangeService.GetDocumentByID(ctx, v)
		if err != nil {
			return nil, nil
		}

		result = append(result, new(public_models.Document).FromEntity(data))
	}

	return result, nil
}

// ComplexHouses is the resolver for the complexHouses field.
func (r *queryResolver) ComplexHouses(ctx context.Context, ids []string, start *int, limit *int, sort *public_models.Sort, search *string, filter *public_models.ComplexHouseFilter) (*public_models.ComplexHouseConnection, error) {
	complexHouseFilter := &estate_entity.ComplexHouseFilter{
		Keyword:           search,
		PublicationStatus: utils.Pointer(shared_entity.PublicationStatusPublished),
	}
	if filter != nil {
		complexHouseFilter.ComplexID = filter.ComplexID
	}

	data, total, err := r.EstateService.SearchComplexHouses(ctx, start, limit, estate_entity.ComplexHouseSortDefault, complexHouseFilter)
	if err != nil {
		return nil, err
	}

	var nodes []*public_models.ComplexHouse
	for _, v := range data {
		nodes = append(nodes, new(public_models.ComplexHouse).FromEntity(v))
	}

	return &public_models.ComplexHouseConnection{
		TotalCount: total,
		Nodes:      nodes,
		PageInfo:   &public_models.PageInfo{},
	}, nil
}

// ComplexHouse is the resolver for the complexHouse field.
func (r *queryResolver) ComplexHouse(ctx context.Context, id string) (*public_models.ComplexHouse, error) {
	data, err := r.EstateService.GetComplexHouseByID(ctx, id)
	if err != nil {
		return nil, err
	}

	return new(public_models.ComplexHouse).FromEntity(data), nil
}

// ComplexHouse returns public_gateway.ComplexHouseResolver implementation.
func (r *Resolver) ComplexHouse() public_gateway.ComplexHouseResolver {
	return &complexHouseResolver{r}
}

// Query returns public_gateway.QueryResolver implementation.
func (r *Resolver) Query() public_gateway.QueryResolver { return &queryResolver{r} }

type complexHouseResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
