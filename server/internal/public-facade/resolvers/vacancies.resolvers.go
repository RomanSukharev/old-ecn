package public_resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.47

import (
	"context"

	public_models "github.com/pinks-agency/ecn/server/internal/public-facade/models"
	content_entity "github.com/pinks-agency/ecn/server/pkg/content/entity"
	shared_entity "github.com/pinks-agency/ecn/server/pkg/shared/entity"
	"github.com/pinks-agency/ecn/server/utils"
)

// Vacancies is the resolver for the vacancies field.
func (r *queryResolver) Vacancies(ctx context.Context, ids []string, start *int, limit *int, sort *public_models.Sort, search *string) (*public_models.VacancyConnection, error) {
	data, total, err := r.ContentService.SearchVacancies(ctx, start, limit, content_entity.VacancySortDefault, &content_entity.VacancyFilter{
		Keyword:           search,
		PublicationStatus: utils.Pointer(shared_entity.PublicationStatusPublished),
	})
	if err != nil {
		return nil, err
	}

	var nodes []*public_models.Vacancy
	for _, v := range data {
		nodes = append(nodes, new(public_models.Vacancy).FromEntity(v))
	}

	return &public_models.VacancyConnection{
		TotalCount: total,
		Nodes:      nodes,
		PageInfo:   &public_models.PageInfo{},
	}, nil
}

// Vacancy is the resolver for the vacancy field.
func (r *queryResolver) Vacancy(ctx context.Context, id string) (*public_models.Vacancy, error) {
	data, err := r.ContentService.GetVacancyByID(ctx, id)
	if err != nil {
		return nil, err
	}

	return new(public_models.Vacancy).FromEntity(data), nil
}
