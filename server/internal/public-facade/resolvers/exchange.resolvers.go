package public_resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.47

import (
	"context"
	"fmt"

	public_gateway "github.com/pinks-agency/ecn/server/internal/public-facade/gateway"
	public_models "github.com/pinks-agency/ecn/server/internal/public-facade/models"
)

// UploadImage is the resolver for the uploadImage field.
func (r *mutationResolver) UploadImage(ctx context.Context, input public_models.ImageInput) (*public_models.Image, error) {
	data, err := r.ExchangeService.UploadImage(ctx, *input.ToEntity())
	if err != nil {
		return nil, err
	}

	return new(public_models.Image).FromEntity(data), nil
}

// UploadDocument is the resolver for the uploadDocument field.
func (r *mutationResolver) UploadDocument(ctx context.Context, input public_models.DocumentInput) (*public_models.Document, error) {
	data, err := r.ExchangeService.UploadDocument(ctx, *input.ToEntity())
	if err != nil {
		return nil, err
	}

	return new(public_models.Document).FromEntity(data), nil
}

// GeneratePDF is the resolver for the generatePdf field.
func (r *queryResolver) GeneratePDF(ctx context.Context, content string, fileName string) (string, error) {
	panic(fmt.Errorf("not implemented: GeneratePDF - generatePdf"))
}

// Mutation returns public_gateway.MutationResolver implementation.
func (r *Resolver) Mutation() public_gateway.MutationResolver { return &mutationResolver{r} }

type mutationResolver struct{ *Resolver }
