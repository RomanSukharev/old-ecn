package public_resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.47

import (
	"context"

	public_gateway "github.com/pinks-agency/ecn/server/internal/public-facade/gateway"
	public_models "github.com/pinks-agency/ecn/server/internal/public-facade/models"
	staff_entity "github.com/pinks-agency/ecn/server/pkg/staff/entity"
	"github.com/pinks-agency/ecn/server/utils"
)

// Avatar is the resolver for the avatar field.
func (r *employeeResolver) Avatar(ctx context.Context, obj *public_models.Employee) (*public_models.Image, error) {
	if obj != nil && obj.AvatarID != nil {
		data, err := r.ExchangeService.GetImageByID(ctx, *obj.AvatarID)
		if err != nil {
			return nil, nil
		}

		return new(public_models.Image).FromEntity(data), nil
	}

	return nil, nil
}

// PublicImage is the resolver for the publicImage field.
func (r *employeeResolver) PublicImage(ctx context.Context, obj *public_models.Employee) (*public_models.Image, error) {
	if obj != nil && obj.PublicImageID != nil {
		data, err := r.ExchangeService.GetImageByID(ctx, *obj.PublicImageID)
		if err != nil {
			return nil, nil
		}

		return new(public_models.Image).FromEntity(data), nil
	}

	return nil, nil
}

// Employees is the resolver for the employees field.
func (r *queryResolver) Employees(ctx context.Context, ids []string, start *int, limit *int, sort *public_models.Sort, search *string) (*public_models.EmployeeConnection, error) {
	employeeFilter := &staff_entity.EmployeeFilter{
		IsPublished: utils.Pointer(true),
		Keyword:     search,
	}

	data, total, err := r.StaffService.SearchEmployees(ctx, start, limit, staff_entity.EmployeeSortDefault, employeeFilter)
	if err != nil {
		return nil, err
	}

	var nodes []*public_models.Employee
	for _, v := range data {
		nodes = append(nodes, new(public_models.Employee).FromEntity(v))
	}

	return &public_models.EmployeeConnection{
		TotalCount: total,
		Nodes:      nodes,
		PageInfo:   &public_models.PageInfo{},
	}, nil
}

// Employee is the resolver for the employee field.
func (r *queryResolver) Employee(ctx context.Context, id string) (*public_models.Employee, error) {
	data, err := r.StaffService.GetEmployeeByID(ctx, id)
	if err != nil {
		return nil, err
	}

	return new(public_models.Employee).FromEntity(data), nil
}

// Employee returns public_gateway.EmployeeResolver implementation.
func (r *Resolver) Employee() public_gateway.EmployeeResolver { return &employeeResolver{r} }

type employeeResolver struct{ *Resolver }
