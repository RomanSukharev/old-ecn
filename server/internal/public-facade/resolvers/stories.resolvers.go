package public_resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.47

import (
	"context"

	public_gateway "github.com/pinks-agency/ecn/server/internal/public-facade/gateway"
	public_models "github.com/pinks-agency/ecn/server/internal/public-facade/models"
	content_entity "github.com/pinks-agency/ecn/server/pkg/content/entity"
)

// Stories is the resolver for the stories field.
func (r *queryResolver) Stories(ctx context.Context, ids []string, start *int, limit *int, sort *public_models.Sort, search *string) (*public_models.StoryConnection, error) {
	storyFilter := &content_entity.StoryFilter{}

	data, total, err := r.ContentService.SearchStories(ctx, start, limit, content_entity.StorySortDefault, storyFilter)
	if err != nil {
		return nil, err
	}

	var nodes []*public_models.Story
	for _, v := range data {
		nodes = append(nodes, new(public_models.Story).FromEntity(v))
	}

	return &public_models.StoryConnection{
		TotalCount: total,
		Nodes:      nodes,
		PageInfo:   &public_models.PageInfo{},
	}, nil
}

// Story is the resolver for the story field.
func (r *queryResolver) Story(ctx context.Context, id string) (*public_models.Story, error) {
	data, err := r.ContentService.GetStoryByID(ctx, id)
	if err != nil {
		return nil, err
	}

	return new(public_models.Story).FromEntity(data), nil
}

// Cover is the resolver for the cover field.
func (r *storyResolver) Cover(ctx context.Context, obj *public_models.Story) (*public_models.Image, error) {
	if obj != nil && obj.CoverID != nil {
		data, err := r.ExchangeService.GetImageByID(ctx, *obj.CoverID)
		if err != nil {
			return nil, nil
		}

		return new(public_models.Image).FromEntity(data), nil
	}

	return nil, nil
}

// Story returns public_gateway.StoryResolver implementation.
func (r *Resolver) Story() public_gateway.StoryResolver { return &storyResolver{r} }

type storyResolver struct{ *Resolver }
